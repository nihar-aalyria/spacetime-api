// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/bent_pipe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fbent_5fpipe_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fbent_5fpipe_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/platform_antenna.pb.h"
#include "api/common/wireless.pb.h"
#include "api/common/wireless_receiver.pb.h"
#include "api/common/wireless_transmitter.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fbent_5fpipe_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fbent_5fpipe_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fbent_5fpipe_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class BentPipePayload;
struct BentPipePayloadDefaultTypeInternal;
extern BentPipePayloadDefaultTypeInternal _BentPipePayload_default_instance_;
class BentPipePayload_AntennaAndSignalProcessors;
struct BentPipePayload_AntennaAndSignalProcessorsDefaultTypeInternal;
extern BentPipePayload_AntennaAndSignalProcessorsDefaultTypeInternal _BentPipePayload_AntennaAndSignalProcessors_default_instance_;
class BentPipePayload_DigitalPayload;
struct BentPipePayload_DigitalPayloadDefaultTypeInternal;
extern BentPipePayload_DigitalPayloadDefaultTypeInternal _BentPipePayload_DigitalPayload_default_instance_;
class BentPipePayload_FixedPayload;
struct BentPipePayload_FixedPayloadDefaultTypeInternal;
extern BentPipePayload_FixedPayloadDefaultTypeInternal _BentPipePayload_FixedPayload_default_instance_;
class BentPipePayload_FixedPayload_Channel;
struct BentPipePayload_FixedPayload_ChannelDefaultTypeInternal;
extern BentPipePayload_FixedPayload_ChannelDefaultTypeInternal _BentPipePayload_FixedPayload_Channel_default_instance_;
class BentPipePayload_FixedPayload_ChannelConfiguration;
struct BentPipePayload_FixedPayload_ChannelConfigurationDefaultTypeInternal;
extern BentPipePayload_FixedPayload_ChannelConfigurationDefaultTypeInternal _BentPipePayload_FixedPayload_ChannelConfiguration_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::BentPipePayload* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload>(Arena*);
template <>
::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors>(Arena*);
template <>
::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload>(Arena*);
template <>
::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload>(Arena*);
template <>
::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel>(Arena*);
template <>
::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
enum BentPipePayload_AntennaAndSignalProcessors_Direction : int {
  BentPipePayload_AntennaAndSignalProcessors_Direction_DIRECTION_UNSPECIFIED = 0,
  BentPipePayload_AntennaAndSignalProcessors_Direction_A = 1,
  BentPipePayload_AntennaAndSignalProcessors_Direction_B = 2,
  BentPipePayload_AntennaAndSignalProcessors_Direction_BentPipePayload_AntennaAndSignalProcessors_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BentPipePayload_AntennaAndSignalProcessors_Direction_BentPipePayload_AntennaAndSignalProcessors_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BentPipePayload_AntennaAndSignalProcessors_Direction_IsValid(int value);
constexpr BentPipePayload_AntennaAndSignalProcessors_Direction BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_MIN = static_cast<BentPipePayload_AntennaAndSignalProcessors_Direction>(0);
constexpr BentPipePayload_AntennaAndSignalProcessors_Direction BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_MAX = static_cast<BentPipePayload_AntennaAndSignalProcessors_Direction>(2);
constexpr int BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
BentPipePayload_AntennaAndSignalProcessors_Direction_descriptor();
template <typename T>
const std::string& BentPipePayload_AntennaAndSignalProcessors_Direction_Name(T value) {
  static_assert(std::is_same<T, BentPipePayload_AntennaAndSignalProcessors_Direction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Direction_Name().");
  return BentPipePayload_AntennaAndSignalProcessors_Direction_Name(static_cast<BentPipePayload_AntennaAndSignalProcessors_Direction>(value));
}
template <>
inline const std::string& BentPipePayload_AntennaAndSignalProcessors_Direction_Name(BentPipePayload_AntennaAndSignalProcessors_Direction value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BentPipePayload_AntennaAndSignalProcessors_Direction_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BentPipePayload_AntennaAndSignalProcessors_Direction_Parse(absl::string_view name, BentPipePayload_AntennaAndSignalProcessors_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BentPipePayload_AntennaAndSignalProcessors_Direction>(
      BentPipePayload_AntennaAndSignalProcessors_Direction_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BentPipePayload_AntennaAndSignalProcessors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors) */ {
 public:
  inline BentPipePayload_AntennaAndSignalProcessors() : BentPipePayload_AntennaAndSignalProcessors(nullptr) {}
  ~BentPipePayload_AntennaAndSignalProcessors() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload_AntennaAndSignalProcessors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload_AntennaAndSignalProcessors(const BentPipePayload_AntennaAndSignalProcessors& from);
  BentPipePayload_AntennaAndSignalProcessors(BentPipePayload_AntennaAndSignalProcessors&& from) noexcept
    : BentPipePayload_AntennaAndSignalProcessors() {
    *this = ::std::move(from);
  }

  inline BentPipePayload_AntennaAndSignalProcessors& operator=(const BentPipePayload_AntennaAndSignalProcessors& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload_AntennaAndSignalProcessors& operator=(BentPipePayload_AntennaAndSignalProcessors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload_AntennaAndSignalProcessors& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload_AntennaAndSignalProcessors* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload_AntennaAndSignalProcessors*>(
               &_BentPipePayload_AntennaAndSignalProcessors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BentPipePayload_AntennaAndSignalProcessors& a, BentPipePayload_AntennaAndSignalProcessors& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload_AntennaAndSignalProcessors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload_AntennaAndSignalProcessors* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload_AntennaAndSignalProcessors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload_AntennaAndSignalProcessors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload_AntennaAndSignalProcessors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload_AntennaAndSignalProcessors& from) {
    BentPipePayload_AntennaAndSignalProcessors::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload_AntennaAndSignalProcessors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors";
  }
  protected:
  explicit BentPipePayload_AntennaAndSignalProcessors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Direction = BentPipePayload_AntennaAndSignalProcessors_Direction;
  static constexpr Direction DIRECTION_UNSPECIFIED = BentPipePayload_AntennaAndSignalProcessors_Direction_DIRECTION_UNSPECIFIED;
  static constexpr Direction A = BentPipePayload_AntennaAndSignalProcessors_Direction_A;
  static constexpr Direction B = BentPipePayload_AntennaAndSignalProcessors_Direction_B;
  static inline bool Direction_IsValid(int value) {
    return BentPipePayload_AntennaAndSignalProcessors_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN = BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX = BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE = BentPipePayload_AntennaAndSignalProcessors_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
    return BentPipePayload_AntennaAndSignalProcessors_Direction_descriptor();
  }
  template <typename T>
  static inline const std::string& Direction_Name(T value) {
    return BentPipePayload_AntennaAndSignalProcessors_Direction_Name(value);
  }
  static inline bool Direction_Parse(absl::string_view name, Direction* value) {
    return BentPipePayload_AntennaAndSignalProcessors_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransmitSignalProcessorsFieldNumber = 3,
    kReceiveSignalProcessorsFieldNumber = 4,
    kIdFieldNumber = 1,
    kAntennaFieldNumber = 2,
    kDirectionFieldNumber = 5,
  };
  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor transmit_signal_processors = 3 [json_name = "transmitSignalProcessors"];
  int transmit_signal_processors_size() const;
  private:
  int _internal_transmit_signal_processors_size() const;

  public:
  void clear_transmit_signal_processors() ;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* mutable_transmit_signal_processors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >*
      mutable_transmit_signal_processors();
  private:
  const ::aalyria::spacetime::api::common::TransmitSignalProcessor& _internal_transmit_signal_processors(int index) const;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* _internal_add_transmit_signal_processors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>& _internal_transmit_signal_processors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>* _internal_mutable_transmit_signal_processors();
  public:
  const ::aalyria::spacetime::api::common::TransmitSignalProcessor& transmit_signal_processors(int index) const;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* add_transmit_signal_processors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >&
      transmit_signal_processors() const;
  // repeated .aalyria.spacetime.api.common.ReceiveSignalProcessor receive_signal_processors = 4 [json_name = "receiveSignalProcessors"];
  int receive_signal_processors_size() const;
  private:
  int _internal_receive_signal_processors_size() const;

  public:
  void clear_receive_signal_processors() ;
  ::aalyria::spacetime::api::common::ReceiveSignalProcessor* mutable_receive_signal_processors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::ReceiveSignalProcessor >*
      mutable_receive_signal_processors();
  private:
  const ::aalyria::spacetime::api::common::ReceiveSignalProcessor& _internal_receive_signal_processors(int index) const;
  ::aalyria::spacetime::api::common::ReceiveSignalProcessor* _internal_add_receive_signal_processors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::ReceiveSignalProcessor>& _internal_receive_signal_processors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::ReceiveSignalProcessor>* _internal_mutable_receive_signal_processors();
  public:
  const ::aalyria::spacetime::api::common::ReceiveSignalProcessor& receive_signal_processors(int index) const;
  ::aalyria::spacetime::api::common::ReceiveSignalProcessor* add_receive_signal_processors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::ReceiveSignalProcessor >&
      receive_signal_processors() const;
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .aalyria.spacetime.api.common.AntennaDefinition antenna = 2 [json_name = "antenna"];
  bool has_antenna() const;
  void clear_antenna() ;
  const ::aalyria::spacetime::api::common::AntennaDefinition& antenna() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AntennaDefinition* release_antenna();
  ::aalyria::spacetime::api::common::AntennaDefinition* mutable_antenna();
  void set_allocated_antenna(::aalyria::spacetime::api::common::AntennaDefinition* antenna);
  private:
  const ::aalyria::spacetime::api::common::AntennaDefinition& _internal_antenna() const;
  ::aalyria::spacetime::api::common::AntennaDefinition* _internal_mutable_antenna();
  public:
  void unsafe_arena_set_allocated_antenna(
      ::aalyria::spacetime::api::common::AntennaDefinition* antenna);
  ::aalyria::spacetime::api::common::AntennaDefinition* unsafe_arena_release_antenna();
  // .aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.Direction direction = 5 [json_name = "direction"];
  void clear_direction() ;
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction direction() const;
  void set_direction(::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction value);

  private:
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction _internal_direction() const;
  void _internal_set_direction(::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor > transmit_signal_processors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::ReceiveSignalProcessor > receive_signal_processors_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::aalyria::spacetime::api::common::AntennaDefinition* antenna_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};// -------------------------------------------------------------------

class BentPipePayload_FixedPayload_Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel) */ {
 public:
  inline BentPipePayload_FixedPayload_Channel() : BentPipePayload_FixedPayload_Channel(nullptr) {}
  ~BentPipePayload_FixedPayload_Channel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload_FixedPayload_Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload_FixedPayload_Channel(const BentPipePayload_FixedPayload_Channel& from);
  BentPipePayload_FixedPayload_Channel(BentPipePayload_FixedPayload_Channel&& from) noexcept
    : BentPipePayload_FixedPayload_Channel() {
    *this = ::std::move(from);
  }

  inline BentPipePayload_FixedPayload_Channel& operator=(const BentPipePayload_FixedPayload_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload_FixedPayload_Channel& operator=(BentPipePayload_FixedPayload_Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload_FixedPayload_Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload_FixedPayload_Channel* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload_FixedPayload_Channel*>(
               &_BentPipePayload_FixedPayload_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BentPipePayload_FixedPayload_Channel& a, BentPipePayload_FixedPayload_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload_FixedPayload_Channel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload_FixedPayload_Channel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload_FixedPayload_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload_FixedPayload_Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload_FixedPayload_Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload_FixedPayload_Channel& from) {
    BentPipePayload_FixedPayload_Channel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload_FixedPayload_Channel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel";
  }
  protected:
  explicit BentPipePayload_FixedPayload_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAntennaAndSignalProcessorsIdFieldNumber = 3,
    kSignalFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string antenna_and_signal_processors_id = 3 [json_name = "antennaAndSignalProcessorsId"];
  void clear_antenna_and_signal_processors_id() ;
  const std::string& antenna_and_signal_processors_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_antenna_and_signal_processors_id(Arg_&& arg, Args_... args);
  std::string* mutable_antenna_and_signal_processors_id();
  PROTOBUF_NODISCARD std::string* release_antenna_and_signal_processors_id();
  void set_allocated_antenna_and_signal_processors_id(std::string* ptr);

  private:
  const std::string& _internal_antenna_and_signal_processors_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_antenna_and_signal_processors_id(
      const std::string& value);
  std::string* _internal_mutable_antenna_and_signal_processors_id();

  public:
  // .aalyria.spacetime.api.common.Signal signal = 2 [json_name = "signal"];
  bool has_signal() const;
  void clear_signal() ;
  const ::aalyria::spacetime::api::common::Signal& signal() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::Signal* release_signal();
  ::aalyria::spacetime::api::common::Signal* mutable_signal();
  void set_allocated_signal(::aalyria::spacetime::api::common::Signal* signal);
  private:
  const ::aalyria::spacetime::api::common::Signal& _internal_signal() const;
  ::aalyria::spacetime::api::common::Signal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::aalyria::spacetime::api::common::Signal* signal);
  ::aalyria::spacetime::api::common::Signal* unsafe_arena_release_signal();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr antenna_and_signal_processors_id_;
    ::aalyria::spacetime::api::common::Signal* signal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};// -------------------------------------------------------------------

class BentPipePayload_FixedPayload_ChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration) */ {
 public:
  inline BentPipePayload_FixedPayload_ChannelConfiguration() : BentPipePayload_FixedPayload_ChannelConfiguration(nullptr) {}
  ~BentPipePayload_FixedPayload_ChannelConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload_FixedPayload_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload_FixedPayload_ChannelConfiguration(const BentPipePayload_FixedPayload_ChannelConfiguration& from);
  BentPipePayload_FixedPayload_ChannelConfiguration(BentPipePayload_FixedPayload_ChannelConfiguration&& from) noexcept
    : BentPipePayload_FixedPayload_ChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline BentPipePayload_FixedPayload_ChannelConfiguration& operator=(const BentPipePayload_FixedPayload_ChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload_FixedPayload_ChannelConfiguration& operator=(BentPipePayload_FixedPayload_ChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload_FixedPayload_ChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload_FixedPayload_ChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload_FixedPayload_ChannelConfiguration*>(
               &_BentPipePayload_FixedPayload_ChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BentPipePayload_FixedPayload_ChannelConfiguration& a, BentPipePayload_FixedPayload_ChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload_FixedPayload_ChannelConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload_FixedPayload_ChannelConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload_FixedPayload_ChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload_FixedPayload_ChannelConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload_FixedPayload_ChannelConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload_FixedPayload_ChannelConfiguration& from) {
    BentPipePayload_FixedPayload_ChannelConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload_FixedPayload_ChannelConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration";
  }
  protected:
  explicit BentPipePayload_FixedPayload_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputChannelIdFieldNumber = 1,
    kOutputChannelIdFieldNumber = 2,
    kBandwidthHzFieldNumber = 3,
  };
  // string input_channel_id = 1 [json_name = "inputChannelId"];
  void clear_input_channel_id() ;
  const std::string& input_channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_input_channel_id();
  PROTOBUF_NODISCARD std::string* release_input_channel_id();
  void set_allocated_input_channel_id(std::string* ptr);

  private:
  const std::string& _internal_input_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_channel_id(
      const std::string& value);
  std::string* _internal_mutable_input_channel_id();

  public:
  // string output_channel_id = 2 [json_name = "outputChannelId"];
  void clear_output_channel_id() ;
  const std::string& output_channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_output_channel_id();
  PROTOBUF_NODISCARD std::string* release_output_channel_id();
  void set_allocated_output_channel_id(std::string* ptr);

  private:
  const std::string& _internal_output_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_channel_id(
      const std::string& value);
  std::string* _internal_mutable_output_channel_id();

  public:
  // double bandwidth_hz = 3 [json_name = "bandwidthHz"];
  void clear_bandwidth_hz() ;
  double bandwidth_hz() const;
  void set_bandwidth_hz(double value);

  private:
  double _internal_bandwidth_hz() const;
  void _internal_set_bandwidth_hz(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_id_;
    double bandwidth_hz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};// -------------------------------------------------------------------

class BentPipePayload_FixedPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload.FixedPayload) */ {
 public:
  inline BentPipePayload_FixedPayload() : BentPipePayload_FixedPayload(nullptr) {}
  ~BentPipePayload_FixedPayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload_FixedPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload_FixedPayload(const BentPipePayload_FixedPayload& from);
  BentPipePayload_FixedPayload(BentPipePayload_FixedPayload&& from) noexcept
    : BentPipePayload_FixedPayload() {
    *this = ::std::move(from);
  }

  inline BentPipePayload_FixedPayload& operator=(const BentPipePayload_FixedPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload_FixedPayload& operator=(BentPipePayload_FixedPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload_FixedPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload_FixedPayload* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload_FixedPayload*>(
               &_BentPipePayload_FixedPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BentPipePayload_FixedPayload& a, BentPipePayload_FixedPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload_FixedPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload_FixedPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload_FixedPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload_FixedPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload_FixedPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload_FixedPayload& from) {
    BentPipePayload_FixedPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload_FixedPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload.FixedPayload";
  }
  protected:
  explicit BentPipePayload_FixedPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BentPipePayload_FixedPayload_Channel Channel;
  typedef BentPipePayload_FixedPayload_ChannelConfiguration ChannelConfiguration;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kChannelConfigurationsFieldNumber = 3,
  };
  // repeated .aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel >*
      mutable_channels();
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel& _internal_channels(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* _internal_add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel>& _internal_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel>* _internal_mutable_channels();
  public:
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel& channels(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel >&
      channels() const;
  // repeated .aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration channel_configurations = 3 [json_name = "channelConfigurations"];
  int channel_configurations_size() const;
  private:
  int _internal_channel_configurations_size() const;

  public:
  void clear_channel_configurations() ;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* mutable_channel_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration >*
      mutable_channel_configurations();
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration& _internal_channel_configurations(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* _internal_add_channel_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration>& _internal_channel_configurations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration>* _internal_mutable_channel_configurations();
  public:
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration& channel_configurations(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* add_channel_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration >&
      channel_configurations() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload.FixedPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel > channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration > channel_configurations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};// -------------------------------------------------------------------

class BentPipePayload_DigitalPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload) */ {
 public:
  inline BentPipePayload_DigitalPayload() : BentPipePayload_DigitalPayload(nullptr) {}
  ~BentPipePayload_DigitalPayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload_DigitalPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload_DigitalPayload(const BentPipePayload_DigitalPayload& from);
  BentPipePayload_DigitalPayload(BentPipePayload_DigitalPayload&& from) noexcept
    : BentPipePayload_DigitalPayload() {
    *this = ::std::move(from);
  }

  inline BentPipePayload_DigitalPayload& operator=(const BentPipePayload_DigitalPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload_DigitalPayload& operator=(BentPipePayload_DigitalPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload_DigitalPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload_DigitalPayload* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload_DigitalPayload*>(
               &_BentPipePayload_DigitalPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BentPipePayload_DigitalPayload& a, BentPipePayload_DigitalPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload_DigitalPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload_DigitalPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload_DigitalPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload_DigitalPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload_DigitalPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload_DigitalPayload& from) {
    BentPipePayload_DigitalPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload_DigitalPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload.DigitalPayload";
  }
  protected:
  explicit BentPipePayload_DigitalPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinInputFrequencyHzFieldNumber = 1,
    kMaxInputFrequencyHzFieldNumber = 2,
    kMinOutputFrequencyHzFieldNumber = 3,
    kMaxOutputFrequencyHzFieldNumber = 4,
    kMinChannelBandwidthHzFieldNumber = 5,
    kMaxChannelBandwidthHzFieldNumber = 6,
  };
  // uint64 min_input_frequency_hz = 1 [json_name = "minInputFrequencyHz"];
  void clear_min_input_frequency_hz() ;
  ::uint64_t min_input_frequency_hz() const;
  void set_min_input_frequency_hz(::uint64_t value);

  private:
  ::uint64_t _internal_min_input_frequency_hz() const;
  void _internal_set_min_input_frequency_hz(::uint64_t value);

  public:
  // uint64 max_input_frequency_hz = 2 [json_name = "maxInputFrequencyHz"];
  void clear_max_input_frequency_hz() ;
  ::uint64_t max_input_frequency_hz() const;
  void set_max_input_frequency_hz(::uint64_t value);

  private:
  ::uint64_t _internal_max_input_frequency_hz() const;
  void _internal_set_max_input_frequency_hz(::uint64_t value);

  public:
  // uint64 min_output_frequency_hz = 3 [json_name = "minOutputFrequencyHz"];
  void clear_min_output_frequency_hz() ;
  ::uint64_t min_output_frequency_hz() const;
  void set_min_output_frequency_hz(::uint64_t value);

  private:
  ::uint64_t _internal_min_output_frequency_hz() const;
  void _internal_set_min_output_frequency_hz(::uint64_t value);

  public:
  // uint64 max_output_frequency_hz = 4 [json_name = "maxOutputFrequencyHz"];
  void clear_max_output_frequency_hz() ;
  ::uint64_t max_output_frequency_hz() const;
  void set_max_output_frequency_hz(::uint64_t value);

  private:
  ::uint64_t _internal_max_output_frequency_hz() const;
  void _internal_set_max_output_frequency_hz(::uint64_t value);

  public:
  // uint64 min_channel_bandwidth_hz = 5 [json_name = "minChannelBandwidthHz"];
  void clear_min_channel_bandwidth_hz() ;
  ::uint64_t min_channel_bandwidth_hz() const;
  void set_min_channel_bandwidth_hz(::uint64_t value);

  private:
  ::uint64_t _internal_min_channel_bandwidth_hz() const;
  void _internal_set_min_channel_bandwidth_hz(::uint64_t value);

  public:
  // uint64 max_channel_bandwidth_hz = 6 [json_name = "maxChannelBandwidthHz"];
  void clear_max_channel_bandwidth_hz() ;
  ::uint64_t max_channel_bandwidth_hz() const;
  void set_max_channel_bandwidth_hz(::uint64_t value);

  private:
  ::uint64_t _internal_max_channel_bandwidth_hz() const;
  void _internal_set_max_channel_bandwidth_hz(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t min_input_frequency_hz_;
    ::uint64_t max_input_frequency_hz_;
    ::uint64_t min_output_frequency_hz_;
    ::uint64_t max_output_frequency_hz_;
    ::uint64_t min_channel_bandwidth_hz_;
    ::uint64_t max_channel_bandwidth_hz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};// -------------------------------------------------------------------

class BentPipePayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BentPipePayload) */ {
 public:
  inline BentPipePayload() : BentPipePayload(nullptr) {}
  ~BentPipePayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BentPipePayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BentPipePayload(const BentPipePayload& from);
  BentPipePayload(BentPipePayload&& from) noexcept
    : BentPipePayload() {
    *this = ::std::move(from);
  }

  inline BentPipePayload& operator=(const BentPipePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline BentPipePayload& operator=(BentPipePayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BentPipePayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const BentPipePayload* internal_default_instance() {
    return reinterpret_cast<const BentPipePayload*>(
               &_BentPipePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BentPipePayload& a, BentPipePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(BentPipePayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BentPipePayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BentPipePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BentPipePayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BentPipePayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BentPipePayload& from) {
    BentPipePayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BentPipePayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BentPipePayload";
  }
  protected:
  explicit BentPipePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BentPipePayload_AntennaAndSignalProcessors AntennaAndSignalProcessors;
  typedef BentPipePayload_FixedPayload FixedPayload;
  typedef BentPipePayload_DigitalPayload DigitalPayload;

  // accessors -------------------------------------------------------

  enum : int {
    kAntennasFieldNumber = 2,
    kIdFieldNumber = 1,
    kFixedPayloadFieldNumber = 3,
    kDigitalPayloadFieldNumber = 4,
    kMaxProcessedBandwidthHzFieldNumber = 5,
    kMaxChannelsFieldNumber = 6,
  };
  // repeated .aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors antennas = 2 [json_name = "antennas"];
  int antennas_size() const;
  private:
  int _internal_antennas_size() const;

  public:
  void clear_antennas() ;
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* mutable_antennas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors >*
      mutable_antennas();
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors& _internal_antennas(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* _internal_add_antennas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors>& _internal_antennas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors>* _internal_mutable_antennas();
  public:
  const ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors& antennas(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* add_antennas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors >&
      antennas() const;
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .aalyria.spacetime.api.common.BentPipePayload.FixedPayload fixed_payload = 3 [json_name = "fixedPayload"];
  bool has_fixed_payload() const;
  void clear_fixed_payload() ;
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload& fixed_payload() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* release_fixed_payload();
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* mutable_fixed_payload();
  void set_allocated_fixed_payload(::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* fixed_payload);
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload& _internal_fixed_payload() const;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* _internal_mutable_fixed_payload();
  public:
  void unsafe_arena_set_allocated_fixed_payload(
      ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* fixed_payload);
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* unsafe_arena_release_fixed_payload();
  // .aalyria.spacetime.api.common.BentPipePayload.DigitalPayload digital_payload = 4 [json_name = "digitalPayload"];
  bool has_digital_payload() const;
  void clear_digital_payload() ;
  const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload& digital_payload() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* release_digital_payload();
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* mutable_digital_payload();
  void set_allocated_digital_payload(::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* digital_payload);
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload& _internal_digital_payload() const;
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* _internal_mutable_digital_payload();
  public:
  void unsafe_arena_set_allocated_digital_payload(
      ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* digital_payload);
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* unsafe_arena_release_digital_payload();
  // uint32 max_processed_bandwidth_hz = 5 [json_name = "maxProcessedBandwidthHz"];
  void clear_max_processed_bandwidth_hz() ;
  ::uint32_t max_processed_bandwidth_hz() const;
  void set_max_processed_bandwidth_hz(::uint32_t value);

  private:
  ::uint32_t _internal_max_processed_bandwidth_hz() const;
  void _internal_set_max_processed_bandwidth_hz(::uint32_t value);

  public:
  // uint32 max_channels = 6 [json_name = "maxChannels"];
  void clear_max_channels() ;
  ::uint32_t max_channels() const;
  void set_max_channels(::uint32_t value);

  private:
  ::uint32_t _internal_max_channels() const;
  void _internal_set_max_channels(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BentPipePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors > antennas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* fixed_payload_;
    ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* digital_payload_;
    ::uint32_t max_processed_bandwidth_hz_;
    ::uint32_t max_channels_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fbent_5fpipe_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BentPipePayload_AntennaAndSignalProcessors

// string id = 1 [json_name = "id"];
inline void BentPipePayload_AntennaAndSignalProcessors::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BentPipePayload_AntennaAndSignalProcessors::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload_AntennaAndSignalProcessors::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.id)
}
inline std::string* BentPipePayload_AntennaAndSignalProcessors::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.id)
  return _s;
}
inline const std::string& BentPipePayload_AntennaAndSignalProcessors::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BentPipePayload_AntennaAndSignalProcessors::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload_AntennaAndSignalProcessors::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload_AntennaAndSignalProcessors::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.id)
  return _impl_.id_.Release();
}
inline void BentPipePayload_AntennaAndSignalProcessors::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.id)
}

// .aalyria.spacetime.api.common.AntennaDefinition antenna = 2 [json_name = "antenna"];
inline bool BentPipePayload_AntennaAndSignalProcessors::has_antenna() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.antenna_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::AntennaDefinition& BentPipePayload_AntennaAndSignalProcessors::_internal_antenna() const {
  const ::aalyria::spacetime::api::common::AntennaDefinition* p = _impl_.antenna_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::AntennaDefinition&>(
      ::aalyria::spacetime::api::common::_AntennaDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AntennaDefinition& BentPipePayload_AntennaAndSignalProcessors::antenna() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.antenna)
  return _internal_antenna();
}
inline void BentPipePayload_AntennaAndSignalProcessors::unsafe_arena_set_allocated_antenna(
    ::aalyria::spacetime::api::common::AntennaDefinition* antenna) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antenna_);
  }
  _impl_.antenna_ = antenna;
  if (antenna) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.antenna)
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* BentPipePayload_AntennaAndSignalProcessors::release_antenna() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::AntennaDefinition* temp = _impl_.antenna_;
  _impl_.antenna_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* BentPipePayload_AntennaAndSignalProcessors::unsafe_arena_release_antenna() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.antenna)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::AntennaDefinition* temp = _impl_.antenna_;
  _impl_.antenna_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* BentPipePayload_AntennaAndSignalProcessors::_internal_mutable_antenna() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.antenna_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::AntennaDefinition>(GetArenaForAllocation());
    _impl_.antenna_ = p;
  }
  return _impl_.antenna_;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* BentPipePayload_AntennaAndSignalProcessors::mutable_antenna() {
  ::aalyria::spacetime::api::common::AntennaDefinition* _msg = _internal_mutable_antenna();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.antenna)
  return _msg;
}
inline void BentPipePayload_AntennaAndSignalProcessors::set_allocated_antenna(::aalyria::spacetime::api::common::AntennaDefinition* antenna) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antenna_);
  }
  if (antenna) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antenna));
    if (message_arena != submessage_arena) {
      antenna = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antenna, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.antenna_ = antenna;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.antenna)
}

// repeated .aalyria.spacetime.api.common.TransmitSignalProcessor transmit_signal_processors = 3 [json_name = "transmitSignalProcessors"];
inline int BentPipePayload_AntennaAndSignalProcessors::_internal_transmit_signal_processors_size() const {
  return _impl_.transmit_signal_processors_.size();
}
inline int BentPipePayload_AntennaAndSignalProcessors::transmit_signal_processors_size() const {
  return _internal_transmit_signal_processors_size();
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::mutable_transmit_signal_processors(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.transmit_signal_processors)
  return _internal_mutable_transmit_signal_processors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >*
BentPipePayload_AntennaAndSignalProcessors::mutable_transmit_signal_processors() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.transmit_signal_processors)
  return _internal_mutable_transmit_signal_processors();
}
inline const ::aalyria::spacetime::api::common::TransmitSignalProcessor& BentPipePayload_AntennaAndSignalProcessors::_internal_transmit_signal_processors(int index) const {
  return _internal_transmit_signal_processors().Get(index);
}
inline const ::aalyria::spacetime::api::common::TransmitSignalProcessor& BentPipePayload_AntennaAndSignalProcessors::transmit_signal_processors(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.transmit_signal_processors)
  return _internal_transmit_signal_processors(index);
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::_internal_add_transmit_signal_processors() {
  return _internal_mutable_transmit_signal_processors()->Add();
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::add_transmit_signal_processors() {
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* _add = _internal_add_transmit_signal_processors();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.transmit_signal_processors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >&
BentPipePayload_AntennaAndSignalProcessors::transmit_signal_processors() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.transmit_signal_processors)
  return _internal_transmit_signal_processors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>&
BentPipePayload_AntennaAndSignalProcessors::_internal_transmit_signal_processors() const {
  return _impl_.transmit_signal_processors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>*
BentPipePayload_AntennaAndSignalProcessors::_internal_mutable_transmit_signal_processors() {
  return &_impl_.transmit_signal_processors_;
}

// repeated .aalyria.spacetime.api.common.ReceiveSignalProcessor receive_signal_processors = 4 [json_name = "receiveSignalProcessors"];
inline int BentPipePayload_AntennaAndSignalProcessors::_internal_receive_signal_processors_size() const {
  return _impl_.receive_signal_processors_.size();
}
inline int BentPipePayload_AntennaAndSignalProcessors::receive_signal_processors_size() const {
  return _internal_receive_signal_processors_size();
}
inline ::aalyria::spacetime::api::common::ReceiveSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::mutable_receive_signal_processors(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.receive_signal_processors)
  return _internal_mutable_receive_signal_processors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::ReceiveSignalProcessor >*
BentPipePayload_AntennaAndSignalProcessors::mutable_receive_signal_processors() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.receive_signal_processors)
  return _internal_mutable_receive_signal_processors();
}
inline const ::aalyria::spacetime::api::common::ReceiveSignalProcessor& BentPipePayload_AntennaAndSignalProcessors::_internal_receive_signal_processors(int index) const {
  return _internal_receive_signal_processors().Get(index);
}
inline const ::aalyria::spacetime::api::common::ReceiveSignalProcessor& BentPipePayload_AntennaAndSignalProcessors::receive_signal_processors(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.receive_signal_processors)
  return _internal_receive_signal_processors(index);
}
inline ::aalyria::spacetime::api::common::ReceiveSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::_internal_add_receive_signal_processors() {
  return _internal_mutable_receive_signal_processors()->Add();
}
inline ::aalyria::spacetime::api::common::ReceiveSignalProcessor* BentPipePayload_AntennaAndSignalProcessors::add_receive_signal_processors() {
  ::aalyria::spacetime::api::common::ReceiveSignalProcessor* _add = _internal_add_receive_signal_processors();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.receive_signal_processors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::ReceiveSignalProcessor >&
BentPipePayload_AntennaAndSignalProcessors::receive_signal_processors() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.receive_signal_processors)
  return _internal_receive_signal_processors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::ReceiveSignalProcessor>&
BentPipePayload_AntennaAndSignalProcessors::_internal_receive_signal_processors() const {
  return _impl_.receive_signal_processors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::ReceiveSignalProcessor>*
BentPipePayload_AntennaAndSignalProcessors::_internal_mutable_receive_signal_processors() {
  return &_impl_.receive_signal_processors_;
}

// .aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.Direction direction = 5 [json_name = "direction"];
inline void BentPipePayload_AntennaAndSignalProcessors::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction BentPipePayload_AntennaAndSignalProcessors::direction() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.direction)
  return _internal_direction();
}
inline void BentPipePayload_AntennaAndSignalProcessors::set_direction(::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction value) {
   _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors.direction)
}
inline ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction BentPipePayload_AntennaAndSignalProcessors::_internal_direction() const {
  return static_cast<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction>(_impl_.direction_);
}
inline void BentPipePayload_AntennaAndSignalProcessors::_internal_set_direction(::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction value) {
  ;
  _impl_.direction_ = value;
}

// -------------------------------------------------------------------

// BentPipePayload_FixedPayload_Channel

// string id = 1 [json_name = "id"];
inline void BentPipePayload_FixedPayload_Channel::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BentPipePayload_FixedPayload_Channel::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload_FixedPayload_Channel::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.id)
}
inline std::string* BentPipePayload_FixedPayload_Channel::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.id)
  return _s;
}
inline const std::string& BentPipePayload_FixedPayload_Channel::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BentPipePayload_FixedPayload_Channel::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_Channel::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_Channel::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.id)
  return _impl_.id_.Release();
}
inline void BentPipePayload_FixedPayload_Channel::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.id)
}

// .aalyria.spacetime.api.common.Signal signal = 2 [json_name = "signal"];
inline bool BentPipePayload_FixedPayload_Channel::has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::Signal& BentPipePayload_FixedPayload_Channel::_internal_signal() const {
  const ::aalyria::spacetime::api::common::Signal* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::Signal&>(
      ::aalyria::spacetime::api::common::_Signal_default_instance_);
}
inline const ::aalyria::spacetime::api::common::Signal& BentPipePayload_FixedPayload_Channel::signal() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.signal)
  return _internal_signal();
}
inline void BentPipePayload_FixedPayload_Channel::unsafe_arena_set_allocated_signal(
    ::aalyria::spacetime::api::common::Signal* signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = signal;
  if (signal) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.signal)
}
inline ::aalyria::spacetime::api::common::Signal* BentPipePayload_FixedPayload_Channel::release_signal() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::Signal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::Signal* BentPipePayload_FixedPayload_Channel::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.signal)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::Signal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::Signal* BentPipePayload_FixedPayload_Channel::_internal_mutable_signal() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::Signal>(GetArenaForAllocation());
    _impl_.signal_ = p;
  }
  return _impl_.signal_;
}
inline ::aalyria::spacetime::api::common::Signal* BentPipePayload_FixedPayload_Channel::mutable_signal() {
  ::aalyria::spacetime::api::common::Signal* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.signal)
  return _msg;
}
inline void BentPipePayload_FixedPayload_Channel::set_allocated_signal(::aalyria::spacetime::api::common::Signal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal));
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.signal)
}

// string antenna_and_signal_processors_id = 3 [json_name = "antennaAndSignalProcessorsId"];
inline void BentPipePayload_FixedPayload_Channel::clear_antenna_and_signal_processors_id() {
  _impl_.antenna_and_signal_processors_id_.ClearToEmpty();
}
inline const std::string& BentPipePayload_FixedPayload_Channel::antenna_and_signal_processors_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.antenna_and_signal_processors_id)
  return _internal_antenna_and_signal_processors_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload_FixedPayload_Channel::set_antenna_and_signal_processors_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.antenna_and_signal_processors_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.antenna_and_signal_processors_id)
}
inline std::string* BentPipePayload_FixedPayload_Channel::mutable_antenna_and_signal_processors_id() {
  std::string* _s = _internal_mutable_antenna_and_signal_processors_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.antenna_and_signal_processors_id)
  return _s;
}
inline const std::string& BentPipePayload_FixedPayload_Channel::_internal_antenna_and_signal_processors_id() const {
  return _impl_.antenna_and_signal_processors_id_.Get();
}
inline void BentPipePayload_FixedPayload_Channel::_internal_set_antenna_and_signal_processors_id(const std::string& value) {
  ;


  _impl_.antenna_and_signal_processors_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_Channel::_internal_mutable_antenna_and_signal_processors_id() {
  ;
  return _impl_.antenna_and_signal_processors_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_Channel::release_antenna_and_signal_processors_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.antenna_and_signal_processors_id)
  return _impl_.antenna_and_signal_processors_id_.Release();
}
inline void BentPipePayload_FixedPayload_Channel::set_allocated_antenna_and_signal_processors_id(std::string* value) {
  _impl_.antenna_and_signal_processors_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.antenna_and_signal_processors_id_.IsDefault()) {
          _impl_.antenna_and_signal_processors_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel.antenna_and_signal_processors_id)
}

// -------------------------------------------------------------------

// BentPipePayload_FixedPayload_ChannelConfiguration

// string input_channel_id = 1 [json_name = "inputChannelId"];
inline void BentPipePayload_FixedPayload_ChannelConfiguration::clear_input_channel_id() {
  _impl_.input_channel_id_.ClearToEmpty();
}
inline const std::string& BentPipePayload_FixedPayload_ChannelConfiguration::input_channel_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.input_channel_id)
  return _internal_input_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload_FixedPayload_ChannelConfiguration::set_input_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.input_channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.input_channel_id)
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::mutable_input_channel_id() {
  std::string* _s = _internal_mutable_input_channel_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.input_channel_id)
  return _s;
}
inline const std::string& BentPipePayload_FixedPayload_ChannelConfiguration::_internal_input_channel_id() const {
  return _impl_.input_channel_id_.Get();
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::_internal_set_input_channel_id(const std::string& value) {
  ;


  _impl_.input_channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::_internal_mutable_input_channel_id() {
  ;
  return _impl_.input_channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::release_input_channel_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.input_channel_id)
  return _impl_.input_channel_id_.Release();
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::set_allocated_input_channel_id(std::string* value) {
  _impl_.input_channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_channel_id_.IsDefault()) {
          _impl_.input_channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.input_channel_id)
}

// string output_channel_id = 2 [json_name = "outputChannelId"];
inline void BentPipePayload_FixedPayload_ChannelConfiguration::clear_output_channel_id() {
  _impl_.output_channel_id_.ClearToEmpty();
}
inline const std::string& BentPipePayload_FixedPayload_ChannelConfiguration::output_channel_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.output_channel_id)
  return _internal_output_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload_FixedPayload_ChannelConfiguration::set_output_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.output_channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.output_channel_id)
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::mutable_output_channel_id() {
  std::string* _s = _internal_mutable_output_channel_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.output_channel_id)
  return _s;
}
inline const std::string& BentPipePayload_FixedPayload_ChannelConfiguration::_internal_output_channel_id() const {
  return _impl_.output_channel_id_.Get();
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::_internal_set_output_channel_id(const std::string& value) {
  ;


  _impl_.output_channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::_internal_mutable_output_channel_id() {
  ;
  return _impl_.output_channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload_FixedPayload_ChannelConfiguration::release_output_channel_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.output_channel_id)
  return _impl_.output_channel_id_.Release();
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::set_allocated_output_channel_id(std::string* value) {
  _impl_.output_channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_channel_id_.IsDefault()) {
          _impl_.output_channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.output_channel_id)
}

// double bandwidth_hz = 3 [json_name = "bandwidthHz"];
inline void BentPipePayload_FixedPayload_ChannelConfiguration::clear_bandwidth_hz() {
  _impl_.bandwidth_hz_ = 0;
}
inline double BentPipePayload_FixedPayload_ChannelConfiguration::bandwidth_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.bandwidth_hz)
  return _internal_bandwidth_hz();
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::set_bandwidth_hz(double value) {
  _internal_set_bandwidth_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration.bandwidth_hz)
}
inline double BentPipePayload_FixedPayload_ChannelConfiguration::_internal_bandwidth_hz() const {
  return _impl_.bandwidth_hz_;
}
inline void BentPipePayload_FixedPayload_ChannelConfiguration::_internal_set_bandwidth_hz(double value) {
  ;
  _impl_.bandwidth_hz_ = value;
}

// -------------------------------------------------------------------

// BentPipePayload_FixedPayload

// repeated .aalyria.spacetime.api.common.BentPipePayload.FixedPayload.Channel channels = 1 [json_name = "channels"];
inline int BentPipePayload_FixedPayload::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int BentPipePayload_FixedPayload::channels_size() const {
  return _internal_channels_size();
}
inline void BentPipePayload_FixedPayload::clear_channels() {
  _internal_mutable_channels()->Clear();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* BentPipePayload_FixedPayload::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel >*
BentPipePayload_FixedPayload::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channels)
  return _internal_mutable_channels();
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel& BentPipePayload_FixedPayload::_internal_channels(int index) const {
  return _internal_channels().Get(index);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel& BentPipePayload_FixedPayload::channels(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channels)
  return _internal_channels(index);
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* BentPipePayload_FixedPayload::_internal_add_channels() {
  return _internal_mutable_channels()->Add();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* BentPipePayload_FixedPayload::add_channels() {
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel >&
BentPipePayload_FixedPayload::channels() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channels)
  return _internal_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel>&
BentPipePayload_FixedPayload::_internal_channels() const {
  return _impl_.channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_Channel>*
BentPipePayload_FixedPayload::_internal_mutable_channels() {
  return &_impl_.channels_;
}

// repeated .aalyria.spacetime.api.common.BentPipePayload.FixedPayload.ChannelConfiguration channel_configurations = 3 [json_name = "channelConfigurations"];
inline int BentPipePayload_FixedPayload::_internal_channel_configurations_size() const {
  return _impl_.channel_configurations_.size();
}
inline int BentPipePayload_FixedPayload::channel_configurations_size() const {
  return _internal_channel_configurations_size();
}
inline void BentPipePayload_FixedPayload::clear_channel_configurations() {
  _internal_mutable_channel_configurations()->Clear();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* BentPipePayload_FixedPayload::mutable_channel_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channel_configurations)
  return _internal_mutable_channel_configurations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration >*
BentPipePayload_FixedPayload::mutable_channel_configurations() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channel_configurations)
  return _internal_mutable_channel_configurations();
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration& BentPipePayload_FixedPayload::_internal_channel_configurations(int index) const {
  return _internal_channel_configurations().Get(index);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration& BentPipePayload_FixedPayload::channel_configurations(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channel_configurations)
  return _internal_channel_configurations(index);
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* BentPipePayload_FixedPayload::_internal_add_channel_configurations() {
  return _internal_mutable_channel_configurations()->Add();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* BentPipePayload_FixedPayload::add_channel_configurations() {
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration* _add = _internal_add_channel_configurations();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channel_configurations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration >&
BentPipePayload_FixedPayload::channel_configurations() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.BentPipePayload.FixedPayload.channel_configurations)
  return _internal_channel_configurations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration>&
BentPipePayload_FixedPayload::_internal_channel_configurations() const {
  return _impl_.channel_configurations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload_ChannelConfiguration>*
BentPipePayload_FixedPayload::_internal_mutable_channel_configurations() {
  return &_impl_.channel_configurations_;
}

// -------------------------------------------------------------------

// BentPipePayload_DigitalPayload

// uint64 min_input_frequency_hz = 1 [json_name = "minInputFrequencyHz"];
inline void BentPipePayload_DigitalPayload::clear_min_input_frequency_hz() {
  _impl_.min_input_frequency_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::min_input_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_input_frequency_hz)
  return _internal_min_input_frequency_hz();
}
inline void BentPipePayload_DigitalPayload::set_min_input_frequency_hz(::uint64_t value) {
  _internal_set_min_input_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_input_frequency_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_min_input_frequency_hz() const {
  return _impl_.min_input_frequency_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_min_input_frequency_hz(::uint64_t value) {
  ;
  _impl_.min_input_frequency_hz_ = value;
}

// uint64 max_input_frequency_hz = 2 [json_name = "maxInputFrequencyHz"];
inline void BentPipePayload_DigitalPayload::clear_max_input_frequency_hz() {
  _impl_.max_input_frequency_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::max_input_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_input_frequency_hz)
  return _internal_max_input_frequency_hz();
}
inline void BentPipePayload_DigitalPayload::set_max_input_frequency_hz(::uint64_t value) {
  _internal_set_max_input_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_input_frequency_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_max_input_frequency_hz() const {
  return _impl_.max_input_frequency_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_max_input_frequency_hz(::uint64_t value) {
  ;
  _impl_.max_input_frequency_hz_ = value;
}

// uint64 min_output_frequency_hz = 3 [json_name = "minOutputFrequencyHz"];
inline void BentPipePayload_DigitalPayload::clear_min_output_frequency_hz() {
  _impl_.min_output_frequency_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::min_output_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_output_frequency_hz)
  return _internal_min_output_frequency_hz();
}
inline void BentPipePayload_DigitalPayload::set_min_output_frequency_hz(::uint64_t value) {
  _internal_set_min_output_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_output_frequency_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_min_output_frequency_hz() const {
  return _impl_.min_output_frequency_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_min_output_frequency_hz(::uint64_t value) {
  ;
  _impl_.min_output_frequency_hz_ = value;
}

// uint64 max_output_frequency_hz = 4 [json_name = "maxOutputFrequencyHz"];
inline void BentPipePayload_DigitalPayload::clear_max_output_frequency_hz() {
  _impl_.max_output_frequency_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::max_output_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_output_frequency_hz)
  return _internal_max_output_frequency_hz();
}
inline void BentPipePayload_DigitalPayload::set_max_output_frequency_hz(::uint64_t value) {
  _internal_set_max_output_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_output_frequency_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_max_output_frequency_hz() const {
  return _impl_.max_output_frequency_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_max_output_frequency_hz(::uint64_t value) {
  ;
  _impl_.max_output_frequency_hz_ = value;
}

// uint64 min_channel_bandwidth_hz = 5 [json_name = "minChannelBandwidthHz"];
inline void BentPipePayload_DigitalPayload::clear_min_channel_bandwidth_hz() {
  _impl_.min_channel_bandwidth_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::min_channel_bandwidth_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_channel_bandwidth_hz)
  return _internal_min_channel_bandwidth_hz();
}
inline void BentPipePayload_DigitalPayload::set_min_channel_bandwidth_hz(::uint64_t value) {
  _internal_set_min_channel_bandwidth_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.min_channel_bandwidth_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_min_channel_bandwidth_hz() const {
  return _impl_.min_channel_bandwidth_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_min_channel_bandwidth_hz(::uint64_t value) {
  ;
  _impl_.min_channel_bandwidth_hz_ = value;
}

// uint64 max_channel_bandwidth_hz = 6 [json_name = "maxChannelBandwidthHz"];
inline void BentPipePayload_DigitalPayload::clear_max_channel_bandwidth_hz() {
  _impl_.max_channel_bandwidth_hz_ = ::uint64_t{0u};
}
inline ::uint64_t BentPipePayload_DigitalPayload::max_channel_bandwidth_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_channel_bandwidth_hz)
  return _internal_max_channel_bandwidth_hz();
}
inline void BentPipePayload_DigitalPayload::set_max_channel_bandwidth_hz(::uint64_t value) {
  _internal_set_max_channel_bandwidth_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.DigitalPayload.max_channel_bandwidth_hz)
}
inline ::uint64_t BentPipePayload_DigitalPayload::_internal_max_channel_bandwidth_hz() const {
  return _impl_.max_channel_bandwidth_hz_;
}
inline void BentPipePayload_DigitalPayload::_internal_set_max_channel_bandwidth_hz(::uint64_t value) {
  ;
  _impl_.max_channel_bandwidth_hz_ = value;
}

// -------------------------------------------------------------------

// BentPipePayload

// string id = 1 [json_name = "id"];
inline void BentPipePayload::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BentPipePayload::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BentPipePayload::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.id)
}
inline std::string* BentPipePayload::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.id)
  return _s;
}
inline const std::string& BentPipePayload::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BentPipePayload::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BentPipePayload::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BentPipePayload::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.id)
  return _impl_.id_.Release();
}
inline void BentPipePayload::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.id)
}

// repeated .aalyria.spacetime.api.common.BentPipePayload.AntennaAndSignalProcessors antennas = 2 [json_name = "antennas"];
inline int BentPipePayload::_internal_antennas_size() const {
  return _impl_.antennas_.size();
}
inline int BentPipePayload::antennas_size() const {
  return _internal_antennas_size();
}
inline void BentPipePayload::clear_antennas() {
  _internal_mutable_antennas()->Clear();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* BentPipePayload::mutable_antennas(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.antennas)
  return _internal_mutable_antennas()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors >*
BentPipePayload::mutable_antennas() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.BentPipePayload.antennas)
  return _internal_mutable_antennas();
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors& BentPipePayload::_internal_antennas(int index) const {
  return _internal_antennas().Get(index);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors& BentPipePayload::antennas(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.antennas)
  return _internal_antennas(index);
}
inline ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* BentPipePayload::_internal_add_antennas() {
  return _internal_mutable_antennas()->Add();
}
inline ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* BentPipePayload::add_antennas() {
  ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors* _add = _internal_add_antennas();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.BentPipePayload.antennas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors >&
BentPipePayload::antennas() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.BentPipePayload.antennas)
  return _internal_antennas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors>&
BentPipePayload::_internal_antennas() const {
  return _impl_.antennas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors>*
BentPipePayload::_internal_mutable_antennas() {
  return &_impl_.antennas_;
}

// .aalyria.spacetime.api.common.BentPipePayload.FixedPayload fixed_payload = 3 [json_name = "fixedPayload"];
inline bool BentPipePayload::has_fixed_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_payload_ != nullptr);
  return value;
}
inline void BentPipePayload::clear_fixed_payload() {
  if (_impl_.fixed_payload_ != nullptr) _impl_.fixed_payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload& BentPipePayload::_internal_fixed_payload() const {
  const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* p = _impl_.fixed_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload&>(
      ::aalyria::spacetime::api::common::_BentPipePayload_FixedPayload_default_instance_);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload& BentPipePayload::fixed_payload() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.fixed_payload)
  return _internal_fixed_payload();
}
inline void BentPipePayload::unsafe_arena_set_allocated_fixed_payload(
    ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* fixed_payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fixed_payload_);
  }
  _impl_.fixed_payload_ = fixed_payload;
  if (fixed_payload) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.BentPipePayload.fixed_payload)
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* BentPipePayload::release_fixed_payload() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* temp = _impl_.fixed_payload_;
  _impl_.fixed_payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* BentPipePayload::unsafe_arena_release_fixed_payload() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.fixed_payload)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* temp = _impl_.fixed_payload_;
  _impl_.fixed_payload_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* BentPipePayload::_internal_mutable_fixed_payload() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fixed_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_FixedPayload>(GetArenaForAllocation());
    _impl_.fixed_payload_ = p;
  }
  return _impl_.fixed_payload_;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* BentPipePayload::mutable_fixed_payload() {
  ::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* _msg = _internal_mutable_fixed_payload();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.fixed_payload)
  return _msg;
}
inline void BentPipePayload::set_allocated_fixed_payload(::aalyria::spacetime::api::common::BentPipePayload_FixedPayload* fixed_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fixed_payload_;
  }
  if (fixed_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed_payload);
    if (message_arena != submessage_arena) {
      fixed_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_payload, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fixed_payload_ = fixed_payload;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.fixed_payload)
}

// .aalyria.spacetime.api.common.BentPipePayload.DigitalPayload digital_payload = 4 [json_name = "digitalPayload"];
inline bool BentPipePayload::has_digital_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.digital_payload_ != nullptr);
  return value;
}
inline void BentPipePayload::clear_digital_payload() {
  if (_impl_.digital_payload_ != nullptr) _impl_.digital_payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload& BentPipePayload::_internal_digital_payload() const {
  const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* p = _impl_.digital_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload&>(
      ::aalyria::spacetime::api::common::_BentPipePayload_DigitalPayload_default_instance_);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload& BentPipePayload::digital_payload() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.digital_payload)
  return _internal_digital_payload();
}
inline void BentPipePayload::unsafe_arena_set_allocated_digital_payload(
    ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* digital_payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.digital_payload_);
  }
  _impl_.digital_payload_ = digital_payload;
  if (digital_payload) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.BentPipePayload.digital_payload)
}
inline ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* BentPipePayload::release_digital_payload() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* temp = _impl_.digital_payload_;
  _impl_.digital_payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* BentPipePayload::unsafe_arena_release_digital_payload() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BentPipePayload.digital_payload)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* temp = _impl_.digital_payload_;
  _impl_.digital_payload_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* BentPipePayload::_internal_mutable_digital_payload() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.digital_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload>(GetArenaForAllocation());
    _impl_.digital_payload_ = p;
  }
  return _impl_.digital_payload_;
}
inline ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* BentPipePayload::mutable_digital_payload() {
  ::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* _msg = _internal_mutable_digital_payload();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BentPipePayload.digital_payload)
  return _msg;
}
inline void BentPipePayload::set_allocated_digital_payload(::aalyria::spacetime::api::common::BentPipePayload_DigitalPayload* digital_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.digital_payload_;
  }
  if (digital_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(digital_payload);
    if (message_arena != submessage_arena) {
      digital_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital_payload, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.digital_payload_ = digital_payload;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BentPipePayload.digital_payload)
}

// uint32 max_processed_bandwidth_hz = 5 [json_name = "maxProcessedBandwidthHz"];
inline void BentPipePayload::clear_max_processed_bandwidth_hz() {
  _impl_.max_processed_bandwidth_hz_ = 0u;
}
inline ::uint32_t BentPipePayload::max_processed_bandwidth_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.max_processed_bandwidth_hz)
  return _internal_max_processed_bandwidth_hz();
}
inline void BentPipePayload::set_max_processed_bandwidth_hz(::uint32_t value) {
  _internal_set_max_processed_bandwidth_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.max_processed_bandwidth_hz)
}
inline ::uint32_t BentPipePayload::_internal_max_processed_bandwidth_hz() const {
  return _impl_.max_processed_bandwidth_hz_;
}
inline void BentPipePayload::_internal_set_max_processed_bandwidth_hz(::uint32_t value) {
  ;
  _impl_.max_processed_bandwidth_hz_ = value;
}

// uint32 max_channels = 6 [json_name = "maxChannels"];
inline void BentPipePayload::clear_max_channels() {
  _impl_.max_channels_ = 0u;
}
inline ::uint32_t BentPipePayload::max_channels() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BentPipePayload.max_channels)
  return _internal_max_channels();
}
inline void BentPipePayload::set_max_channels(::uint32_t value) {
  _internal_set_max_channels(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BentPipePayload.max_channels)
}
inline ::uint32_t BentPipePayload::_internal_max_channels() const {
  return _impl_.max_channels_;
}
inline void BentPipePayload::_internal_set_max_channels(::uint32_t value) {
  ;
  _impl_.max_channels_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction>() {
  return ::aalyria::spacetime::api::common::BentPipePayload_AntennaAndSignalProcessors_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fbent_5fpipe_2eproto_2epb_2eh

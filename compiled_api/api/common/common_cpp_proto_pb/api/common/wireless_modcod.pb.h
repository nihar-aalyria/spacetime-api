// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_modcod.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fmodcod_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fmodcod_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fwireless_5fmodcod_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class AdaptiveDataRateTable;
struct AdaptiveDataRateTableDefaultTypeInternal;
extern AdaptiveDataRateTableDefaultTypeInternal _AdaptiveDataRateTable_default_instance_;
class AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping;
struct AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal;
extern AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal _AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping_default_instance_;
class AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping;
struct AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal;
extern AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal _AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::AdaptiveDataRateTable* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AdaptiveDataRateTable>(Arena*);
template <>
::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>(Arena*);
template <>
::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping) */ {
 public:
  inline AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping() : AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(nullptr) {}
  ~AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from);
  AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping&& from) noexcept
    : AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping() {
    *this = ::std::move(from);
  }

  inline AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& operator=(const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& operator=(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* internal_default_instance() {
    return reinterpret_cast<const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping*>(
               &_AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& a, AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from) {
    AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping";
  }
  protected:
  explicit AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinCarrierToNoisePlusInterferenceDbFieldNumber = 1,
    kTxDataRateBpsFieldNumber = 2,
  };
  // optional double min_carrier_to_noise_plus_interference_db = 1 [json_name = "minCarrierToNoisePlusInterferenceDb"];
  bool has_min_carrier_to_noise_plus_interference_db() const;
  void clear_min_carrier_to_noise_plus_interference_db() ;
  double min_carrier_to_noise_plus_interference_db() const;
  void set_min_carrier_to_noise_plus_interference_db(double value);

  private:
  double _internal_min_carrier_to_noise_plus_interference_db() const;
  void _internal_set_min_carrier_to_noise_plus_interference_db(double value);

  public:
  // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
  bool has_tx_data_rate_bps() const;
  void clear_tx_data_rate_bps() ;
  double tx_data_rate_bps() const;
  void set_tx_data_rate_bps(double value);

  private:
  double _internal_tx_data_rate_bps() const;
  void _internal_set_tx_data_rate_bps(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double min_carrier_to_noise_plus_interference_db_;
    double tx_data_rate_bps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto;
};// -------------------------------------------------------------------

class AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping) */ {
 public:
  inline AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping() : AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(nullptr) {}
  ~AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from);
  AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping&& from) noexcept
    : AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping() {
    *this = ::std::move(from);
  }

  inline AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& operator=(const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& operator=(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* internal_default_instance() {
    return reinterpret_cast<const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping*>(
               &_AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& a, AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from) {
    AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping";
  }
  protected:
  explicit AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinReceivedSignalPowerDbwFieldNumber = 1,
    kTxDataRateBpsFieldNumber = 2,
  };
  // optional double min_received_signal_power_dbw = 1 [json_name = "minReceivedSignalPowerDbw"];
  bool has_min_received_signal_power_dbw() const;
  void clear_min_received_signal_power_dbw() ;
  double min_received_signal_power_dbw() const;
  void set_min_received_signal_power_dbw(double value);

  private:
  double _internal_min_received_signal_power_dbw() const;
  void _internal_set_min_received_signal_power_dbw(double value);

  public:
  // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
  bool has_tx_data_rate_bps() const;
  void clear_tx_data_rate_bps() ;
  double tx_data_rate_bps() const;
  void set_tx_data_rate_bps(double value);

  private:
  double _internal_tx_data_rate_bps() const;
  void _internal_set_tx_data_rate_bps(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double min_received_signal_power_dbw_;
    double tx_data_rate_bps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto;
};// -------------------------------------------------------------------

class AdaptiveDataRateTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AdaptiveDataRateTable) */ {
 public:
  inline AdaptiveDataRateTable() : AdaptiveDataRateTable(nullptr) {}
  ~AdaptiveDataRateTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AdaptiveDataRateTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdaptiveDataRateTable(const AdaptiveDataRateTable& from);
  AdaptiveDataRateTable(AdaptiveDataRateTable&& from) noexcept
    : AdaptiveDataRateTable() {
    *this = ::std::move(from);
  }

  inline AdaptiveDataRateTable& operator=(const AdaptiveDataRateTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdaptiveDataRateTable& operator=(AdaptiveDataRateTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdaptiveDataRateTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdaptiveDataRateTable* internal_default_instance() {
    return reinterpret_cast<const AdaptiveDataRateTable*>(
               &_AdaptiveDataRateTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdaptiveDataRateTable& a, AdaptiveDataRateTable& b) {
    a.Swap(&b);
  }
  inline void Swap(AdaptiveDataRateTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdaptiveDataRateTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdaptiveDataRateTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdaptiveDataRateTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdaptiveDataRateTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdaptiveDataRateTable& from) {
    AdaptiveDataRateTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptiveDataRateTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AdaptiveDataRateTable";
  }
  protected:
  explicit AdaptiveDataRateTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping CarrierToNoisePlusInterferenceDataRateMapping;
  typedef AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping ReceivedSignalPowerDataRateMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedSignalPowerStepsFieldNumber = 1,
    kCarrierToNoisePlusInterferenceStepsFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping received_signal_power_steps = 1 [json_name = "receivedSignalPowerSteps"];
  int received_signal_power_steps_size() const;
  private:
  int _internal_received_signal_power_steps_size() const;

  public:
  void clear_received_signal_power_steps() ;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* mutable_received_signal_power_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >*
      mutable_received_signal_power_steps();
  private:
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& _internal_received_signal_power_steps(int index) const;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* _internal_add_received_signal_power_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>& _internal_received_signal_power_steps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>* _internal_mutable_received_signal_power_steps();
  public:
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& received_signal_power_steps(int index) const;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* add_received_signal_power_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >&
      received_signal_power_steps() const;
  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping carrier_to_noise_plus_interference_steps = 2 [json_name = "carrierToNoisePlusInterferenceSteps"];
  int carrier_to_noise_plus_interference_steps_size() const;
  private:
  int _internal_carrier_to_noise_plus_interference_steps_size() const;

  public:
  void clear_carrier_to_noise_plus_interference_steps() ;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* mutable_carrier_to_noise_plus_interference_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >*
      mutable_carrier_to_noise_plus_interference_steps();
  private:
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& _internal_carrier_to_noise_plus_interference_steps(int index) const;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* _internal_add_carrier_to_noise_plus_interference_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>& _internal_carrier_to_noise_plus_interference_steps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>* _internal_mutable_carrier_to_noise_plus_interference_steps();
  public:
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& carrier_to_noise_plus_interference_steps(int index) const;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* add_carrier_to_noise_plus_interference_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >&
      carrier_to_noise_plus_interference_steps() const;
  // optional string id = 3 [json_name = "id"];
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AdaptiveDataRateTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping > received_signal_power_steps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping > carrier_to_noise_plus_interference_steps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping

// optional double min_carrier_to_noise_plus_interference_db = 1 [json_name = "minCarrierToNoisePlusInterferenceDb"];
inline bool AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::has_min_carrier_to_noise_plus_interference_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::clear_min_carrier_to_noise_plus_interference_db() {
  _impl_.min_carrier_to_noise_plus_interference_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::min_carrier_to_noise_plus_interference_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping.min_carrier_to_noise_plus_interference_db)
  return _internal_min_carrier_to_noise_plus_interference_db();
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::set_min_carrier_to_noise_plus_interference_db(double value) {
  _internal_set_min_carrier_to_noise_plus_interference_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping.min_carrier_to_noise_plus_interference_db)
}
inline double AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_internal_min_carrier_to_noise_plus_interference_db() const {
  return _impl_.min_carrier_to_noise_plus_interference_db_;
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_internal_set_min_carrier_to_noise_plus_interference_db(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_carrier_to_noise_plus_interference_db_ = value;
}

// optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
inline bool AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::has_tx_data_rate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::clear_tx_data_rate_bps() {
  _impl_.tx_data_rate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::tx_data_rate_bps() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping.tx_data_rate_bps)
  return _internal_tx_data_rate_bps();
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::set_tx_data_rate_bps(double value) {
  _internal_set_tx_data_rate_bps(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping.tx_data_rate_bps)
}
inline double AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_internal_tx_data_rate_bps() const {
  return _impl_.tx_data_rate_bps_;
}
inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_internal_set_tx_data_rate_bps(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tx_data_rate_bps_ = value;
}

// -------------------------------------------------------------------

// AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping

// optional double min_received_signal_power_dbw = 1 [json_name = "minReceivedSignalPowerDbw"];
inline bool AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::has_min_received_signal_power_dbw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::clear_min_received_signal_power_dbw() {
  _impl_.min_received_signal_power_dbw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::min_received_signal_power_dbw() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping.min_received_signal_power_dbw)
  return _internal_min_received_signal_power_dbw();
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::set_min_received_signal_power_dbw(double value) {
  _internal_set_min_received_signal_power_dbw(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping.min_received_signal_power_dbw)
}
inline double AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_internal_min_received_signal_power_dbw() const {
  return _impl_.min_received_signal_power_dbw_;
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_internal_set_min_received_signal_power_dbw(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_received_signal_power_dbw_ = value;
}

// optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
inline bool AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::has_tx_data_rate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::clear_tx_data_rate_bps() {
  _impl_.tx_data_rate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::tx_data_rate_bps() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping.tx_data_rate_bps)
  return _internal_tx_data_rate_bps();
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::set_tx_data_rate_bps(double value) {
  _internal_set_tx_data_rate_bps(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping.tx_data_rate_bps)
}
inline double AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_internal_tx_data_rate_bps() const {
  return _impl_.tx_data_rate_bps_;
}
inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_internal_set_tx_data_rate_bps(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tx_data_rate_bps_ = value;
}

// -------------------------------------------------------------------

// AdaptiveDataRateTable

// optional string id = 3 [json_name = "id"];
inline bool AdaptiveDataRateTable::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdaptiveDataRateTable::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdaptiveDataRateTable::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdaptiveDataRateTable::set_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdaptiveDataRateTable.id)
}
inline std::string* AdaptiveDataRateTable::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AdaptiveDataRateTable.id)
  return _s;
}
inline const std::string& AdaptiveDataRateTable::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AdaptiveDataRateTable::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdaptiveDataRateTable::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* AdaptiveDataRateTable::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.AdaptiveDataRateTable.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdaptiveDataRateTable::set_allocated_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.AdaptiveDataRateTable.id)
}

// repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping carrier_to_noise_plus_interference_steps = 2 [json_name = "carrierToNoisePlusInterferenceSteps"];
inline int AdaptiveDataRateTable::_internal_carrier_to_noise_plus_interference_steps_size() const {
  return _impl_.carrier_to_noise_plus_interference_steps_.size();
}
inline int AdaptiveDataRateTable::carrier_to_noise_plus_interference_steps_size() const {
  return _internal_carrier_to_noise_plus_interference_steps_size();
}
inline void AdaptiveDataRateTable::clear_carrier_to_noise_plus_interference_steps() {
  _internal_mutable_carrier_to_noise_plus_interference_steps()->Clear();
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* AdaptiveDataRateTable::mutable_carrier_to_noise_plus_interference_steps(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AdaptiveDataRateTable.carrier_to_noise_plus_interference_steps)
  return _internal_mutable_carrier_to_noise_plus_interference_steps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >*
AdaptiveDataRateTable::mutable_carrier_to_noise_plus_interference_steps() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.AdaptiveDataRateTable.carrier_to_noise_plus_interference_steps)
  return _internal_mutable_carrier_to_noise_plus_interference_steps();
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& AdaptiveDataRateTable::_internal_carrier_to_noise_plus_interference_steps(int index) const {
  return _internal_carrier_to_noise_plus_interference_steps().Get(index);
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& AdaptiveDataRateTable::carrier_to_noise_plus_interference_steps(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.carrier_to_noise_plus_interference_steps)
  return _internal_carrier_to_noise_plus_interference_steps(index);
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* AdaptiveDataRateTable::_internal_add_carrier_to_noise_plus_interference_steps() {
  return _internal_mutable_carrier_to_noise_plus_interference_steps()->Add();
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* AdaptiveDataRateTable::add_carrier_to_noise_plus_interference_steps() {
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* _add = _internal_add_carrier_to_noise_plus_interference_steps();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.AdaptiveDataRateTable.carrier_to_noise_plus_interference_steps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >&
AdaptiveDataRateTable::carrier_to_noise_plus_interference_steps() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.AdaptiveDataRateTable.carrier_to_noise_plus_interference_steps)
  return _internal_carrier_to_noise_plus_interference_steps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>&
AdaptiveDataRateTable::_internal_carrier_to_noise_plus_interference_steps() const {
  return _impl_.carrier_to_noise_plus_interference_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>*
AdaptiveDataRateTable::_internal_mutable_carrier_to_noise_plus_interference_steps() {
  return &_impl_.carrier_to_noise_plus_interference_steps_;
}

// repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping received_signal_power_steps = 1 [json_name = "receivedSignalPowerSteps"];
inline int AdaptiveDataRateTable::_internal_received_signal_power_steps_size() const {
  return _impl_.received_signal_power_steps_.size();
}
inline int AdaptiveDataRateTable::received_signal_power_steps_size() const {
  return _internal_received_signal_power_steps_size();
}
inline void AdaptiveDataRateTable::clear_received_signal_power_steps() {
  _internal_mutable_received_signal_power_steps()->Clear();
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* AdaptiveDataRateTable::mutable_received_signal_power_steps(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AdaptiveDataRateTable.received_signal_power_steps)
  return _internal_mutable_received_signal_power_steps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >*
AdaptiveDataRateTable::mutable_received_signal_power_steps() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.AdaptiveDataRateTable.received_signal_power_steps)
  return _internal_mutable_received_signal_power_steps();
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& AdaptiveDataRateTable::_internal_received_signal_power_steps(int index) const {
  return _internal_received_signal_power_steps().Get(index);
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& AdaptiveDataRateTable::received_signal_power_steps(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdaptiveDataRateTable.received_signal_power_steps)
  return _internal_received_signal_power_steps(index);
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* AdaptiveDataRateTable::_internal_add_received_signal_power_steps() {
  return _internal_mutable_received_signal_power_steps()->Add();
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* AdaptiveDataRateTable::add_received_signal_power_steps() {
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* _add = _internal_add_received_signal_power_steps();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.AdaptiveDataRateTable.received_signal_power_steps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >&
AdaptiveDataRateTable::received_signal_power_steps() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.AdaptiveDataRateTable.received_signal_power_steps)
  return _internal_received_signal_power_steps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>&
AdaptiveDataRateTable::_internal_received_signal_power_steps() const {
  return _impl_.received_signal_power_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>*
AdaptiveDataRateTable::_internal_mutable_received_signal_power_steps() {
  return &_impl_.received_signal_power_steps_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fmodcod_2eproto_2epb_2eh

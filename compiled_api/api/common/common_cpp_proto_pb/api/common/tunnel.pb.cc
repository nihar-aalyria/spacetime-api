// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/tunnel.proto

#include "api/common/tunnel.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR EspProtocol_EspIntegrity::EspProtocol_EspIntegrity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.algorithm_)*/ 0
} {}
struct EspProtocol_EspIntegrityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspProtocol_EspIntegrityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspProtocol_EspIntegrityDefaultTypeInternal() {}
  union {
    EspProtocol_EspIntegrity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspProtocol_EspIntegrityDefaultTypeInternal _EspProtocol_EspIntegrity_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EspProtocol_EspPrivacy::EspProtocol_EspPrivacy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.algorithm_)*/ 0
} {}
struct EspProtocol_EspPrivacyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspProtocol_EspPrivacyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspProtocol_EspPrivacyDefaultTypeInternal() {}
  union {
    EspProtocol_EspPrivacy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspProtocol_EspPrivacyDefaultTypeInternal _EspProtocol_EspPrivacy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EspProtocol::EspProtocol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authentication_)*/nullptr
  , /*decltype(_impl_.encryption_)*/nullptr} {}
struct EspProtocolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspProtocolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspProtocolDefaultTypeInternal() {}
  union {
    EspProtocol _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspProtocolDefaultTypeInternal _EspProtocol_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EspParameters_EspAuth::EspParameters_EspAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.algorithm_)*/ 0
} {}
struct EspParameters_EspAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspParameters_EspAuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspParameters_EspAuthDefaultTypeInternal() {}
  union {
    EspParameters_EspAuth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspParameters_EspAuthDefaultTypeInternal _EspParameters_EspAuth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EspParameters_EspEncrypt::EspParameters_EspEncrypt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.algorithm_)*/ 0
} {}
struct EspParameters_EspEncryptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspParameters_EspEncryptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspParameters_EspEncryptDefaultTypeInternal() {}
  union {
    EspParameters_EspEncrypt _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspParameters_EspEncryptDefaultTypeInternal _EspParameters_EspEncrypt_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EspParameters::EspParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authentication_)*/nullptr
  , /*decltype(_impl_.encryption_)*/nullptr
  , /*decltype(_impl_.security_parameters_index_)*/ 0u
} {}
struct EspParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspParametersDefaultTypeInternal() {}
  union {
    EspParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspParametersDefaultTypeInternal _EspParameters_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WrappedKey::WrappedKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unwrapper_key_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wrapped_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct WrappedKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrappedKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrappedKeyDefaultTypeInternal() {}
  union {
    WrappedKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrappedKeyDefaultTypeInternal _WrappedKey_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TunnelMethod::TunnelMethod(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TunnelMethodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelMethodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelMethodDefaultTypeInternal() {}
  union {
    TunnelMethod _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelMethodDefaultTypeInternal _TunnelMethod_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2ftunnel_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2ftunnel_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2ftunnel_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2ftunnel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspIntegrity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspIntegrity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspIntegrity, _impl_.algorithm_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspPrivacy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspPrivacy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol_EspPrivacy, _impl_.algorithm_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol, _impl_.authentication_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspProtocol, _impl_.encryption_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspAuth, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspAuth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspAuth, _impl_.algorithm_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspAuth, _impl_.key_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspEncrypt, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspEncrypt, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspEncrypt, _impl_.algorithm_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters_EspEncrypt, _impl_.key_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters, _impl_.security_parameters_index_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters, _impl_.authentication_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::EspParameters, _impl_.encryption_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WrappedKey, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WrappedKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WrappedKey, _impl_.unwrapper_key_name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WrappedKey, _impl_.wrapped_key_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelMethod, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelMethod, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelMethod, _impl_.protocol_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::aalyria::spacetime::api::common::EspProtocol_EspIntegrity)},
        { 10, 19, -1, sizeof(::aalyria::spacetime::api::common::EspProtocol_EspPrivacy)},
        { 20, 30, -1, sizeof(::aalyria::spacetime::api::common::EspProtocol)},
        { 32, 42, -1, sizeof(::aalyria::spacetime::api::common::EspParameters_EspAuth)},
        { 44, 54, -1, sizeof(::aalyria::spacetime::api::common::EspParameters_EspEncrypt)},
        { 56, 67, -1, sizeof(::aalyria::spacetime::api::common::EspParameters)},
        { 70, 80, -1, sizeof(::aalyria::spacetime::api::common::WrappedKey)},
        { 82, -1, -1, sizeof(::aalyria::spacetime::api::common::TunnelMethod)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_EspProtocol_EspIntegrity_default_instance_._instance,
    &::aalyria::spacetime::api::common::_EspProtocol_EspPrivacy_default_instance_._instance,
    &::aalyria::spacetime::api::common::_EspProtocol_default_instance_._instance,
    &::aalyria::spacetime::api::common::_EspParameters_EspAuth_default_instance_._instance,
    &::aalyria::spacetime::api::common::_EspParameters_EspEncrypt_default_instance_._instance,
    &::aalyria::spacetime::api::common::_EspParameters_default_instance_._instance,
    &::aalyria::spacetime::api::common::_WrappedKey_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TunnelMethod_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2ftunnel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\027api/common/tunnel.proto\022\034aalyria.space"
    "time.api.common\032\033google/protobuf/empty.p"
    "roto\"\223\003\n\013EspProtocol\022^\n\016authentication\030\001"
    " \001(\01326.aalyria.spacetime.api.common.EspP"
    "rotocol.EspIntegrityR\016authentication\022T\n\n"
    "encryption\030\002 \001(\01324.aalyria.spacetime.api"
    ".common.EspProtocol.EspPrivacyR\nencrypti"
    "on\032i\n\014EspIntegrity\022S\n\talgorithm\030\001 \001(\01625."
    "aalyria.spacetime.api.common.Authenticat"
    "ionAlgorithmR\talgorithmJ\004\010\002\020\003\032c\n\nEspPriv"
    "acy\022O\n\talgorithm\030\001 \001(\01621.aalyria.spaceti"
    "me.api.common.EncryptionAlgorithmR\talgor"
    "ithmJ\004\010\002\020\003\"\271\004\n\rEspParameters\022:\n\031security"
    "_parameters_index\030\003 \001(\rR\027securityParamet"
    "ersIndex\022[\n\016authentication\030\001 \001(\01323.aalyr"
    "ia.spacetime.api.common.EspParameters.Es"
    "pAuthR\016authentication\022V\n\nencryption\030\002 \001("
    "\01326.aalyria.spacetime.api.common.EspPara"
    "meters.EspEncryptR\nencryption\032\232\001\n\007EspAut"
    "h\022S\n\talgorithm\030\001 \001(\01625.aalyria.spacetime"
    ".api.common.AuthenticationAlgorithmR\talg"
    "orithm\022:\n\003key\030\002 \001(\0132(.aalyria.spacetime."
    "api.common.WrappedKeyR\003key\032\231\001\n\nEspEncryp"
    "t\022O\n\talgorithm\030\001 \001(\01621.aalyria.spacetime"
    ".api.common.EncryptionAlgorithmR\talgorit"
    "hm\022:\n\003key\030\002 \001(\0132(.aalyria.spacetime.api."
    "common.WrappedKeyR\003key\"[\n\nWrappedKey\022,\n\022"
    "unwrapper_key_name\030\001 \001(\tR\020unwrapperKeyNa"
    "me\022\037\n\013wrapped_key\030\002 \001(\014R\nwrappedKey\"\221\001\n\014"
    "TunnelMethod\022=\n\003esp\030\001 \001(\0132).aalyria.spac"
    "etime.api.common.EspProtocolH\000R\003esp\022,\n\004n"
    "one\030\002 \001(\0132\026.google.protobuf.EmptyH\000R\004non"
    "eB\n\n\010protocolJ\010\010\003\020\200\200\200\200\002*F\n\027Authenticatio"
    "nAlgorithm\022\031\n\025AUTH_ALGO_UNSPECIFIED\020\000\022\020\n"
    "\014HMAC_SHA1_96\020\001*G\n\023EncryptionAlgorithm\022\037"
    "\n\033ENCRYPTION_ALGO_UNSPECIFIED\020\000\022\017\n\013AES_C"
    "BC_128\020\001BD\n com.aalyria.spacetime.api.co"
    "mmonZ aalyria.com/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2ftunnel_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2ftunnel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2ftunnel_2eproto = {
    false,
    false,
    1518,
    descriptor_table_protodef_api_2fcommon_2ftunnel_2eproto,
    "api/common/tunnel.proto",
    &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
    descriptor_table_api_2fcommon_2ftunnel_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2ftunnel_2eproto::offsets,
    file_level_metadata_api_2fcommon_2ftunnel_2eproto,
    file_level_enum_descriptors_api_2fcommon_2ftunnel_2eproto,
    file_level_service_descriptors_api_2fcommon_2ftunnel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2ftunnel_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2ftunnel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2ftunnel_2eproto(&descriptor_table_api_2fcommon_2ftunnel_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2ftunnel_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2ftunnel_2eproto[0];
}
bool AuthenticationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2ftunnel_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2ftunnel_2eproto[1];
}
bool EncryptionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class EspProtocol_EspIntegrity::_Internal {
 public:
  using HasBits = decltype(std::declval<EspProtocol_EspIntegrity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspProtocol_EspIntegrity, _impl_._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EspProtocol_EspIntegrity::EspProtocol_EspIntegrity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
}
EspProtocol_EspIntegrity::EspProtocol_EspIntegrity(const EspProtocol_EspIntegrity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
}

inline void EspProtocol_EspIntegrity::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.algorithm_) { 0 }

  };
}

EspProtocol_EspIntegrity::~EspProtocol_EspIntegrity() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspProtocol_EspIntegrity::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EspProtocol_EspIntegrity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspProtocol_EspIntegrity::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algorithm_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspProtocol_EspIntegrity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::AuthenticationAlgorithm_IsValid(static_cast<int>(val)))) {
            _internal_set_algorithm(static_cast<::aalyria::spacetime::api::common::AuthenticationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspProtocol_EspIntegrity::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  return target;
}

::size_t EspProtocol_EspIntegrity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspProtocol_EspIntegrity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspProtocol_EspIntegrity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspProtocol_EspIntegrity::GetClassData() const { return &_class_data_; }


void EspProtocol_EspIntegrity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspProtocol_EspIntegrity*>(&to_msg);
  auto& from = static_cast<const EspProtocol_EspIntegrity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspProtocol_EspIntegrity::CopyFrom(const EspProtocol_EspIntegrity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspProtocol.EspIntegrity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspProtocol_EspIntegrity::IsInitialized() const {
  return true;
}

void EspProtocol_EspIntegrity::InternalSwap(EspProtocol_EspIntegrity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.algorithm_, other->_impl_.algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EspProtocol_EspIntegrity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[0]);
}
// ===================================================================

class EspProtocol_EspPrivacy::_Internal {
 public:
  using HasBits = decltype(std::declval<EspProtocol_EspPrivacy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspProtocol_EspPrivacy, _impl_._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EspProtocol_EspPrivacy::EspProtocol_EspPrivacy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
}
EspProtocol_EspPrivacy::EspProtocol_EspPrivacy(const EspProtocol_EspPrivacy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
}

inline void EspProtocol_EspPrivacy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.algorithm_) { 0 }

  };
}

EspProtocol_EspPrivacy::~EspProtocol_EspPrivacy() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspProtocol_EspPrivacy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EspProtocol_EspPrivacy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspProtocol_EspPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algorithm_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspProtocol_EspPrivacy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::EncryptionAlgorithm_IsValid(static_cast<int>(val)))) {
            _internal_set_algorithm(static_cast<::aalyria::spacetime::api::common::EncryptionAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspProtocol_EspPrivacy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  return target;
}

::size_t EspProtocol_EspPrivacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspProtocol_EspPrivacy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspProtocol_EspPrivacy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspProtocol_EspPrivacy::GetClassData() const { return &_class_data_; }


void EspProtocol_EspPrivacy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspProtocol_EspPrivacy*>(&to_msg);
  auto& from = static_cast<const EspProtocol_EspPrivacy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspProtocol_EspPrivacy::CopyFrom(const EspProtocol_EspPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspProtocol.EspPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspProtocol_EspPrivacy::IsInitialized() const {
  return true;
}

void EspProtocol_EspPrivacy::InternalSwap(EspProtocol_EspPrivacy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.algorithm_, other->_impl_.algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EspProtocol_EspPrivacy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[1]);
}
// ===================================================================

class EspProtocol::_Internal {
 public:
  using HasBits = decltype(std::declval<EspProtocol>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspProtocol, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity& authentication(const EspProtocol* msg);
  static void set_has_authentication(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy& encryption(const EspProtocol* msg);
  static void set_has_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity&
EspProtocol::_Internal::authentication(const EspProtocol* msg) {
  return *msg->_impl_.authentication_;
}
const ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy&
EspProtocol::_Internal::encryption(const EspProtocol* msg) {
  return *msg->_impl_.encryption_;
}
EspProtocol::EspProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspProtocol)
}
EspProtocol::EspProtocol(const EspProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EspProtocol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.encryption_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.authentication_ = new ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity(*from._impl_.authentication_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.encryption_ = new ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy(*from._impl_.encryption_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspProtocol)
}

inline void EspProtocol::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.encryption_){nullptr}
  };
}

EspProtocol::~EspProtocol() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspProtocol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspProtocol::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.authentication_;
  if (this != internal_default_instance()) delete _impl_.encryption_;
}

void EspProtocol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspProtocol)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.authentication_ != nullptr);
      _impl_.authentication_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.encryption_ != nullptr);
      _impl_.encryption_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspProtocol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.EspProtocol.EspIntegrity authentication = 1 [json_name = "authentication"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.EspProtocol.EspPrivacy encryption = 2 [json_name = "encryption"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspProtocol::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspProtocol)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.EspProtocol.EspIntegrity authentication = 1 [json_name = "authentication"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::authentication(this),
        _Internal::authentication(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.EspProtocol.EspPrivacy encryption = 2 [json_name = "encryption"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::encryption(this),
        _Internal::encryption(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspProtocol)
  return target;
}

::size_t EspProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspProtocol)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.EspProtocol.EspIntegrity authentication = 1 [json_name = "authentication"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authentication_);
    }

    // optional .aalyria.spacetime.api.common.EspProtocol.EspPrivacy encryption = 2 [json_name = "encryption"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encryption_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspProtocol::GetClassData() const { return &_class_data_; }


void EspProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspProtocol*>(&to_msg);
  auto& from = static_cast<const EspProtocol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspProtocol)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_authentication()->::aalyria::spacetime::api::common::EspProtocol_EspIntegrity::MergeFrom(
          from._internal_authentication());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_encryption()->::aalyria::spacetime::api::common::EspProtocol_EspPrivacy::MergeFrom(
          from._internal_encryption());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspProtocol::CopyFrom(const EspProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspProtocol::IsInitialized() const {
  return true;
}

void EspProtocol::InternalSwap(EspProtocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EspProtocol, _impl_.encryption_)
      + sizeof(EspProtocol::_impl_.encryption_)
      - PROTOBUF_FIELD_OFFSET(EspProtocol, _impl_.authentication_)>(
          reinterpret_cast<char*>(&_impl_.authentication_),
          reinterpret_cast<char*>(&other->_impl_.authentication_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EspProtocol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[2]);
}
// ===================================================================

class EspParameters_EspAuth::_Internal {
 public:
  using HasBits = decltype(std::declval<EspParameters_EspAuth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspParameters_EspAuth, _impl_._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::WrappedKey& key(const EspParameters_EspAuth* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::WrappedKey&
EspParameters_EspAuth::_Internal::key(const EspParameters_EspAuth* msg) {
  return *msg->_impl_.key_;
}
EspParameters_EspAuth::EspParameters_EspAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspParameters.EspAuth)
}
EspParameters_EspAuth::EspParameters_EspAuth(const EspParameters_EspAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EspParameters_EspAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.algorithm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_ = new ::aalyria::spacetime::api::common::WrappedKey(*from._impl_.key_);
  }
  _this->_impl_.algorithm_ = from._impl_.algorithm_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspParameters.EspAuth)
}

inline void EspParameters_EspAuth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.algorithm_) { 0 }

  };
}

EspParameters_EspAuth::~EspParameters_EspAuth() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspParameters.EspAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspParameters_EspAuth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void EspParameters_EspAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspParameters_EspAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspParameters.EspAuth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_.algorithm_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspParameters_EspAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::AuthenticationAlgorithm_IsValid(static_cast<int>(val)))) {
            _internal_set_algorithm(static_cast<::aalyria::spacetime::api::common::AuthenticationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspParameters_EspAuth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspParameters.EspAuth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_algorithm(), target);
  }

  // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspParameters.EspAuth)
  return target;
}

::size_t EspParameters_EspAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspParameters.EspAuth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .aalyria.spacetime.api.common.AuthenticationAlgorithm algorithm = 1 [json_name = "algorithm"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspParameters_EspAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspParameters_EspAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspParameters_EspAuth::GetClassData() const { return &_class_data_; }


void EspParameters_EspAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspParameters_EspAuth*>(&to_msg);
  auto& from = static_cast<const EspParameters_EspAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspParameters.EspAuth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::aalyria::spacetime::api::common::WrappedKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.algorithm_ = from._impl_.algorithm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspParameters_EspAuth::CopyFrom(const EspParameters_EspAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspParameters.EspAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspParameters_EspAuth::IsInitialized() const {
  return true;
}

void EspParameters_EspAuth::InternalSwap(EspParameters_EspAuth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EspParameters_EspAuth, _impl_.algorithm_)
      + sizeof(EspParameters_EspAuth::_impl_.algorithm_)
      - PROTOBUF_FIELD_OFFSET(EspParameters_EspAuth, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EspParameters_EspAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[3]);
}
// ===================================================================

class EspParameters_EspEncrypt::_Internal {
 public:
  using HasBits = decltype(std::declval<EspParameters_EspEncrypt>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspParameters_EspEncrypt, _impl_._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::WrappedKey& key(const EspParameters_EspEncrypt* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::WrappedKey&
EspParameters_EspEncrypt::_Internal::key(const EspParameters_EspEncrypt* msg) {
  return *msg->_impl_.key_;
}
EspParameters_EspEncrypt::EspParameters_EspEncrypt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
}
EspParameters_EspEncrypt::EspParameters_EspEncrypt(const EspParameters_EspEncrypt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EspParameters_EspEncrypt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.algorithm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_ = new ::aalyria::spacetime::api::common::WrappedKey(*from._impl_.key_);
  }
  _this->_impl_.algorithm_ = from._impl_.algorithm_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
}

inline void EspParameters_EspEncrypt::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.algorithm_) { 0 }

  };
}

EspParameters_EspEncrypt::~EspParameters_EspEncrypt() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspParameters_EspEncrypt::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void EspParameters_EspEncrypt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspParameters_EspEncrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_.algorithm_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspParameters_EspEncrypt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::EncryptionAlgorithm_IsValid(static_cast<int>(val)))) {
            _internal_set_algorithm(static_cast<::aalyria::spacetime::api::common::EncryptionAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspParameters_EspEncrypt::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_algorithm(), target);
  }

  // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  return target;
}

::size_t EspParameters_EspEncrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.WrappedKey key = 2 [json_name = "key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .aalyria.spacetime.api.common.EncryptionAlgorithm algorithm = 1 [json_name = "algorithm"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspParameters_EspEncrypt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspParameters_EspEncrypt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspParameters_EspEncrypt::GetClassData() const { return &_class_data_; }


void EspParameters_EspEncrypt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspParameters_EspEncrypt*>(&to_msg);
  auto& from = static_cast<const EspParameters_EspEncrypt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::aalyria::spacetime::api::common::WrappedKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.algorithm_ = from._impl_.algorithm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspParameters_EspEncrypt::CopyFrom(const EspParameters_EspEncrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspParameters.EspEncrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspParameters_EspEncrypt::IsInitialized() const {
  return true;
}

void EspParameters_EspEncrypt::InternalSwap(EspParameters_EspEncrypt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EspParameters_EspEncrypt, _impl_.algorithm_)
      + sizeof(EspParameters_EspEncrypt::_impl_.algorithm_)
      - PROTOBUF_FIELD_OFFSET(EspParameters_EspEncrypt, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EspParameters_EspEncrypt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[4]);
}
// ===================================================================

class EspParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<EspParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EspParameters, _impl_._has_bits_);
  static void set_has_security_parameters_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::EspParameters_EspAuth& authentication(const EspParameters* msg);
  static void set_has_authentication(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::EspParameters_EspEncrypt& encryption(const EspParameters* msg);
  static void set_has_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::EspParameters_EspAuth&
EspParameters::_Internal::authentication(const EspParameters* msg) {
  return *msg->_impl_.authentication_;
}
const ::aalyria::spacetime::api::common::EspParameters_EspEncrypt&
EspParameters::_Internal::encryption(const EspParameters* msg) {
  return *msg->_impl_.encryption_;
}
EspParameters::EspParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.EspParameters)
}
EspParameters::EspParameters(const EspParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EspParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.encryption_){nullptr}
    , decltype(_impl_.security_parameters_index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.authentication_ = new ::aalyria::spacetime::api::common::EspParameters_EspAuth(*from._impl_.authentication_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.encryption_ = new ::aalyria::spacetime::api::common::EspParameters_EspEncrypt(*from._impl_.encryption_);
  }
  _this->_impl_.security_parameters_index_ = from._impl_.security_parameters_index_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.EspParameters)
}

inline void EspParameters::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.encryption_){nullptr}
    , decltype(_impl_.security_parameters_index_) { 0u }

  };
}

EspParameters::~EspParameters() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.EspParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EspParameters::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.authentication_;
  if (this != internal_default_instance()) delete _impl_.encryption_;
}

void EspParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EspParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.EspParameters)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.authentication_ != nullptr);
      _impl_.authentication_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.encryption_ != nullptr);
      _impl_.encryption_->Clear();
    }
  }
  _impl_.security_parameters_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EspParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.EspParameters.EspAuth authentication = 1 [json_name = "authentication"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.EspParameters.EspEncrypt encryption = 2 [json_name = "encryption"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 security_parameters_index = 3 [json_name = "securityParametersIndex"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_security_parameters_index(&has_bits);
          _impl_.security_parameters_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EspParameters::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.EspParameters)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.EspParameters.EspAuth authentication = 1 [json_name = "authentication"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::authentication(this),
        _Internal::authentication(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.EspParameters.EspEncrypt encryption = 2 [json_name = "encryption"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::encryption(this),
        _Internal::encryption(this).GetCachedSize(), target, stream);
  }

  // optional uint32 security_parameters_index = 3 [json_name = "securityParametersIndex"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_security_parameters_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.EspParameters)
  return target;
}

::size_t EspParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.EspParameters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.common.EspParameters.EspAuth authentication = 1 [json_name = "authentication"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authentication_);
    }

    // optional .aalyria.spacetime.api.common.EspParameters.EspEncrypt encryption = 2 [json_name = "encryption"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encryption_);
    }

    // optional uint32 security_parameters_index = 3 [json_name = "securityParametersIndex"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_security_parameters_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EspParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EspParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EspParameters::GetClassData() const { return &_class_data_; }


void EspParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EspParameters*>(&to_msg);
  auto& from = static_cast<const EspParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.EspParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_authentication()->::aalyria::spacetime::api::common::EspParameters_EspAuth::MergeFrom(
          from._internal_authentication());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_encryption()->::aalyria::spacetime::api::common::EspParameters_EspEncrypt::MergeFrom(
          from._internal_encryption());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.security_parameters_index_ = from._impl_.security_parameters_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EspParameters::CopyFrom(const EspParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.EspParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EspParameters::IsInitialized() const {
  return true;
}

void EspParameters::InternalSwap(EspParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EspParameters, _impl_.security_parameters_index_)
      + sizeof(EspParameters::_impl_.security_parameters_index_)
      - PROTOBUF_FIELD_OFFSET(EspParameters, _impl_.authentication_)>(
          reinterpret_cast<char*>(&_impl_.authentication_),
          reinterpret_cast<char*>(&other->_impl_.authentication_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EspParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[5]);
}
// ===================================================================

class WrappedKey::_Internal {
 public:
  using HasBits = decltype(std::declval<WrappedKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WrappedKey, _impl_._has_bits_);
  static void set_has_unwrapper_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wrapped_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WrappedKey::WrappedKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.WrappedKey)
}
WrappedKey::WrappedKey(const WrappedKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WrappedKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwrapper_key_name_) {}

    , decltype(_impl_.wrapped_key_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unwrapper_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unwrapper_key_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.unwrapper_key_name_.Set(from._internal_unwrapper_key_name(), _this->GetArenaForAllocation());
  }
  _impl_.wrapped_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wrapped_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.wrapped_key_.Set(from._internal_wrapped_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.WrappedKey)
}

inline void WrappedKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwrapper_key_name_) {}

    , decltype(_impl_.wrapped_key_) {}

  };
  _impl_.unwrapper_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unwrapper_key_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wrapped_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wrapped_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WrappedKey::~WrappedKey() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.WrappedKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WrappedKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unwrapper_key_name_.Destroy();
  _impl_.wrapped_key_.Destroy();
}

void WrappedKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WrappedKey::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.WrappedKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.unwrapper_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wrapped_key_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrappedKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unwrapper_key_name = 1 [json_name = "unwrapperKeyName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unwrapper_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.WrappedKey.unwrapper_key_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes wrapped_key = 2 [json_name = "wrappedKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wrapped_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WrappedKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.WrappedKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string unwrapper_key_name = 1 [json_name = "unwrapperKeyName"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_unwrapper_key_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.WrappedKey.unwrapper_key_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bytes wrapped_key = 2 [json_name = "wrappedKey"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_wrapped_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.WrappedKey)
  return target;
}

::size_t WrappedKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.WrappedKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string unwrapper_key_name = 1 [json_name = "unwrapperKeyName"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_unwrapper_key_name());
    }

    // optional bytes wrapped_key = 2 [json_name = "wrappedKey"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_wrapped_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WrappedKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WrappedKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WrappedKey::GetClassData() const { return &_class_data_; }


void WrappedKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WrappedKey*>(&to_msg);
  auto& from = static_cast<const WrappedKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.WrappedKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unwrapper_key_name(from._internal_unwrapper_key_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_wrapped_key(from._internal_wrapped_key());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WrappedKey::CopyFrom(const WrappedKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.WrappedKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrappedKey::IsInitialized() const {
  return true;
}

void WrappedKey::InternalSwap(WrappedKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unwrapper_key_name_, lhs_arena,
                                       &other->_impl_.unwrapper_key_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wrapped_key_, lhs_arena,
                                       &other->_impl_.wrapped_key_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata WrappedKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[6]);
}
// ===================================================================

class TunnelMethod::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelMethod, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::EspProtocol& esp(const TunnelMethod* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& none(const TunnelMethod* msg);
};

const ::aalyria::spacetime::api::common::EspProtocol&
TunnelMethod::_Internal::esp(const TunnelMethod* msg) {
  return *msg->_impl_.protocol_.esp_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
TunnelMethod::_Internal::none(const TunnelMethod* msg) {
  return *msg->_impl_.protocol_.none_;
}
void TunnelMethod::set_allocated_esp(::aalyria::spacetime::api::common::EspProtocol* esp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_protocol();
  if (esp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(esp);
    if (message_arena != submessage_arena) {
      esp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esp, submessage_arena);
    }
    set_has_esp();
    _impl_.protocol_.esp_ = esp;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelMethod.esp)
}
void TunnelMethod::set_allocated_none(::PROTOBUF_NAMESPACE_ID::Empty* none) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_protocol();
  if (none) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(none));
    if (message_arena != submessage_arena) {
      none = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none, submessage_arena);
    }
    set_has_none();
    _impl_.protocol_.none_ = none;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelMethod.none)
}
void TunnelMethod::clear_none() {
  if (protocol_case() == kNone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.protocol_.none_;
    }
    clear_has_protocol();
  }
}
TunnelMethod::TunnelMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelMethod)
}
TunnelMethod::TunnelMethod(const TunnelMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelMethod* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspProtocol::MergeFrom(
          from._internal_esp());
      break;
    }
    case kNone: {
      _this->_internal_mutable_none()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_none());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelMethod)
}

inline void TunnelMethod::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_protocol();
}

TunnelMethod::~TunnelMethod() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelMethod)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelMethod::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_protocol()) {
    clear_protocol();
  }
}

void TunnelMethod::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelMethod::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.TunnelMethod)
  switch (protocol_case()) {
    case kEsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.protocol_.esp_;
      }
      break;
    }
    case kNone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.protocol_.none_;
      }
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PROTOCOL_NOT_SET;
}


void TunnelMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelMethod)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_protocol();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelMethod::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.EspProtocol esp = 1 [json_name = "esp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Empty none = 2 [json_name = "none"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_none(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelMethod::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelMethod)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (protocol_case()) {
    case kEsp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::esp(this),
          _Internal::esp(this).GetCachedSize(), target, stream);
      break;
    }
    case kNone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::none(this),
          _Internal::none(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelMethod)
  return target;
}

::size_t TunnelMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelMethod)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (protocol_case()) {
    // .aalyria.spacetime.api.common.EspProtocol esp = 1 [json_name = "esp"];
    case kEsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.protocol_.esp_);
      break;
    }
    // .google.protobuf.Empty none = 2 [json_name = "none"];
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.protocol_.none_);
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelMethod::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelMethod::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelMethod::GetClassData() const { return &_class_data_; }


void TunnelMethod::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelMethod*>(&to_msg);
  auto& from = static_cast<const TunnelMethod&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelMethod)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.protocol_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspProtocol::MergeFrom(
          from._internal_esp());
      break;
    }
    case kNone: {
      _this->_internal_mutable_none()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_none());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelMethod::CopyFrom(const TunnelMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelMethod::IsInitialized() const {
  return true;
}

void TunnelMethod::InternalSwap(TunnelMethod* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.protocol_, other->_impl_.protocol_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelMethod::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2ftunnel_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspProtocol_EspIntegrity >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspProtocol_EspPrivacy >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspProtocol*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspParameters_EspAuth*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspParameters_EspAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspParameters_EspAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspParameters_EspEncrypt*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspParameters_EspEncrypt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspParameters_EspEncrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::EspParameters*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::EspParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::EspParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::WrappedKey*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::WrappedKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::WrappedKey >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelMethod*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelMethod >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/time.proto

#include "api/common/time.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR DateTime::DateTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gps_time_)*/nullptr
  , /*decltype(_impl_.unix_time_usec_)*/ ::int64_t{0}
} {}
struct DateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeDefaultTypeInternal() {}
  union {
    DateTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeDefaultTypeInternal _DateTime_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GpsTime::GpsTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.week_number_)*/ 0

  , /*decltype(_impl_.second_of_week_)*/ 0

  , /*decltype(_impl_.usec_)*/ 0
} {}
struct GpsTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsTimeDefaultTypeInternal() {}
  union {
    GpsTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsTimeDefaultTypeInternal _GpsTime_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Duration::Duration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.microseconds_)*/ ::int64_t{0}
} {}
struct DurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DurationDefaultTypeInternal() {}
  union {
    Duration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DurationDefaultTypeInternal _Duration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TimeInterval::TimeInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr} {}
struct TimeIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeIntervalDefaultTypeInternal() {}
  union {
    TimeInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2ftime_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2ftime_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2ftime_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2ftime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::DateTime, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::DateTime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::DateTime, _impl_.unix_time_usec_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::DateTime, _impl_.gps_time_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GpsTime, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GpsTime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GpsTime, _impl_.week_number_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GpsTime, _impl_.second_of_week_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GpsTime, _impl_.usec_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Duration, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Duration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Duration, _impl_.microseconds_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TimeInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TimeInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TimeInterval, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TimeInterval, _impl_.end_time_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::common::DateTime)},
        { 12, 23, -1, sizeof(::aalyria::spacetime::api::common::GpsTime)},
        { 26, 35, -1, sizeof(::aalyria::spacetime::api::common::Duration)},
        { 36, 46, -1, sizeof(::aalyria::spacetime::api::common::TimeInterval)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_DateTime_default_instance_._instance,
    &::aalyria::spacetime::api::common::_GpsTime_default_instance_._instance,
    &::aalyria::spacetime::api::common::_Duration_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TimeInterval_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2ftime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025api/common/time.proto\022\034aalyria.spaceti"
    "me.api.common\"r\n\010DateTime\022$\n\016unix_time_u"
    "sec\030\001 \001(\003R\014unixTimeUsec\022@\n\010gps_time\030\002 \001("
    "\0132%.aalyria.spacetime.api.common.GpsTime"
    "R\007gpsTime\"d\n\007GpsTime\022\037\n\013week_number\030\001 \001("
    "\005R\nweekNumber\022$\n\016second_of_week\030\002 \001(\005R\014s"
    "econdOfWeek\022\022\n\004usec\030\003 \001(\005R\004usec\".\n\010Durat"
    "ion\022\"\n\014microseconds\030\001 \002(\003R\014microseconds\""
    "\230\001\n\014TimeInterval\022E\n\nstart_time\030\001 \001(\0132&.a"
    "alyria.spacetime.api.common.DateTimeR\tst"
    "artTime\022A\n\010end_time\030\002 \001(\0132&.aalyria.spac"
    "etime.api.common.DateTimeR\007endTimeBD\n co"
    "m.aalyria.spacetime.api.commonZ aalyria."
    "com/spacetime/api/common"
};
static ::absl::once_flag descriptor_table_api_2fcommon_2ftime_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2ftime_2eproto = {
    false,
    false,
    544,
    descriptor_table_protodef_api_2fcommon_2ftime_2eproto,
    "api/common/time.proto",
    &descriptor_table_api_2fcommon_2ftime_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2ftime_2eproto::offsets,
    file_level_metadata_api_2fcommon_2ftime_2eproto,
    file_level_enum_descriptors_api_2fcommon_2ftime_2eproto,
    file_level_service_descriptors_api_2fcommon_2ftime_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2ftime_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2ftime_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2ftime_2eproto(&descriptor_table_api_2fcommon_2ftime_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class DateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<DateTime>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DateTime, _impl_._has_bits_);
  static void set_has_unix_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::GpsTime& gps_time(const DateTime* msg);
  static void set_has_gps_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::GpsTime&
DateTime::_Internal::gps_time(const DateTime* msg) {
  return *msg->_impl_.gps_time_;
}
DateTime::DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gps_time_){nullptr}
    , decltype(_impl_.unix_time_usec_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.gps_time_ = new ::aalyria::spacetime::api::common::GpsTime(*from._impl_.gps_time_);
  }
  _this->_impl_.unix_time_usec_ = from._impl_.unix_time_usec_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.DateTime)
}

inline void DateTime::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gps_time_){nullptr}
    , decltype(_impl_.unix_time_usec_) { ::int64_t{0} }

  };
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.DateTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateTime::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gps_time_;
}

void DateTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.DateTime)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gps_time_ != nullptr);
    _impl_.gps_time_->Clear();
  }
  _impl_.unix_time_usec_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 unix_time_usec = 1 [json_name = "unixTimeUsec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_unix_time_usec(&has_bits);
          _impl_.unix_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.GpsTime gps_time = 2 [json_name = "gpsTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DateTime::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.DateTime)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 unix_time_usec = 1 [json_name = "unixTimeUsec"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_unix_time_usec(), target);
  }

  // optional .aalyria.spacetime.api.common.GpsTime gps_time = 2 [json_name = "gpsTime"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gps_time(this),
        _Internal::gps_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.DateTime)
  return target;
}

::size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.DateTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.GpsTime gps_time = 2 [json_name = "gpsTime"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gps_time_);
    }

    // optional int64 unix_time_usec = 1 [json_name = "unixTimeUsec"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_unix_time_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateTime::GetClassData() const { return &_class_data_; }


void DateTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateTime*>(&to_msg);
  auto& from = static_cast<const DateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.DateTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gps_time()->::aalyria::spacetime::api::common::GpsTime::MergeFrom(
          from._internal_gps_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unix_time_usec_ = from._impl_.unix_time_usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTime, _impl_.unix_time_usec_)
      + sizeof(DateTime::_impl_.unix_time_usec_)
      - PROTOBUF_FIELD_OFFSET(DateTime, _impl_.gps_time_)>(
          reinterpret_cast<char*>(&_impl_.gps_time_),
          reinterpret_cast<char*>(&other->_impl_.gps_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftime_2eproto_getter, &descriptor_table_api_2fcommon_2ftime_2eproto_once,
      file_level_metadata_api_2fcommon_2ftime_2eproto[0]);
}
// ===================================================================

class GpsTime::_Internal {
 public:
  using HasBits = decltype(std::declval<GpsTime>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GpsTime, _impl_._has_bits_);
  static void set_has_week_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second_of_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpsTime::GpsTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.GpsTime)
}
GpsTime::GpsTime(const GpsTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.GpsTime)
}

inline void GpsTime::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.week_number_) { 0 }

    , decltype(_impl_.second_of_week_) { 0 }

    , decltype(_impl_.usec_) { 0 }

  };
}

GpsTime::~GpsTime() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.GpsTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpsTime::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpsTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpsTime::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.GpsTime)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.week_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.usec_) -
        reinterpret_cast<char*>(&_impl_.week_number_)) + sizeof(_impl_.usec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 week_number = 1 [json_name = "weekNumber"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_week_number(&has_bits);
          _impl_.week_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 second_of_week = 2 [json_name = "secondOfWeek"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_second_of_week(&has_bits);
          _impl_.second_of_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 usec = 3 [json_name = "usec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_usec(&has_bits);
          _impl_.usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GpsTime::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.GpsTime)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 week_number = 1 [json_name = "weekNumber"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_week_number(), target);
  }

  // optional int32 second_of_week = 2 [json_name = "secondOfWeek"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_second_of_week(), target);
  }

  // optional int32 usec = 3 [json_name = "usec"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.GpsTime)
  return target;
}

::size_t GpsTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.GpsTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 week_number = 1 [json_name = "weekNumber"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_week_number());
    }

    // optional int32 second_of_week = 2 [json_name = "secondOfWeek"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_second_of_week());
    }

    // optional int32 usec = 3 [json_name = "usec"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpsTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpsTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpsTime::GetClassData() const { return &_class_data_; }


void GpsTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpsTime*>(&to_msg);
  auto& from = static_cast<const GpsTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.GpsTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.week_number_ = from._impl_.week_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.second_of_week_ = from._impl_.second_of_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.usec_ = from._impl_.usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpsTime::CopyFrom(const GpsTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.GpsTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsTime::IsInitialized() const {
  return true;
}

void GpsTime::InternalSwap(GpsTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsTime, _impl_.usec_)
      + sizeof(GpsTime::_impl_.usec_)
      - PROTOBUF_FIELD_OFFSET(GpsTime, _impl_.week_number_)>(
          reinterpret_cast<char*>(&_impl_.week_number_),
          reinterpret_cast<char*>(&other->_impl_.week_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftime_2eproto_getter, &descriptor_table_api_2fcommon_2ftime_2eproto_once,
      file_level_metadata_api_2fcommon_2ftime_2eproto[1]);
}
// ===================================================================

class Duration::_Internal {
 public:
  using HasBits = decltype(std::declval<Duration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Duration, _impl_._has_bits_);
  static void set_has_microseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Duration::Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.Duration)
}
Duration::Duration(const Duration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.Duration)
}

inline void Duration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.microseconds_) { ::int64_t{0} }

  };
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.Duration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Duration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Duration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.Duration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.microseconds_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Duration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 microseconds = 1 [json_name = "microseconds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_microseconds(&has_bits);
          _impl_.microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Duration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.Duration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 microseconds = 1 [json_name = "microseconds"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_microseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.Duration)
  return target;
}

::size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.Duration)
  ::size_t total_size = 0;

  // required int64 microseconds = 1 [json_name = "microseconds"];
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_microseconds());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Duration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Duration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Duration::GetClassData() const { return &_class_data_; }


void Duration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Duration*>(&to_msg);
  auto& from = static_cast<const Duration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.Duration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_microseconds(from._internal_microseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Duration::InternalSwap(Duration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.microseconds_, other->_impl_.microseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Duration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftime_2eproto_getter, &descriptor_table_api_2fcommon_2ftime_2eproto_once,
      file_level_metadata_api_2fcommon_2ftime_2eproto[2]);
}
// ===================================================================

class TimeInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TimeInterval, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& start_time(const TimeInterval* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::DateTime& end_time(const TimeInterval* msg);
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
TimeInterval::_Internal::start_time(const TimeInterval* msg) {
  return *msg->_impl_.start_time_;
}
const ::aalyria::spacetime::api::common::DateTime&
TimeInterval::_Internal::end_time(const TimeInterval* msg) {
  return *msg->_impl_.end_time_;
}
TimeInterval::TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TimeInterval)
}
TimeInterval::TimeInterval(const TimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_time_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.start_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_time_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TimeInterval)
}

inline void TimeInterval::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
  };
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TimeInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeInterval::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void TimeInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TimeInterval)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime start_time = 1 [json_name = "startTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.DateTime end_time = 2 [json_name = "endTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimeInterval::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TimeInterval)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime start_time = 1 [json_name = "startTime"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.DateTime end_time = 2 [json_name = "endTime"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TimeInterval)
  return target;
}

::size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TimeInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.DateTime start_time = 1 [json_name = "startTime"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_time_);
    }

    // optional .aalyria.spacetime.api.common.DateTime end_time = 2 [json_name = "endTime"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeInterval::GetClassData() const { return &_class_data_; }


void TimeInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeInterval*>(&to_msg);
  auto& from = static_cast<const TimeInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TimeInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_time()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_time()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
          from._internal_end_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {
  return true;
}

void TimeInterval::InternalSwap(TimeInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeInterval, _impl_.end_time_)
      + sizeof(TimeInterval::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(TimeInterval, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2ftime_2eproto_getter, &descriptor_table_api_2fcommon_2ftime_2eproto_once,
      file_level_metadata_api_2fcommon_2ftime_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::DateTime*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::DateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::GpsTime*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::GpsTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::GpsTime >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::Duration*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::Duration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::Duration >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TimeInterval*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TimeInterval >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

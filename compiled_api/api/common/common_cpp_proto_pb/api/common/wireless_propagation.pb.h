// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_propagation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fpropagation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fpropagation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/time.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fwireless_5fpropagation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class GaussianProcessPrediction;
struct GaussianProcessPredictionDefaultTypeInternal;
extern GaussianProcessPredictionDefaultTypeInternal _GaussianProcessPrediction_default_instance_;
class PropagationWeather;
struct PropagationWeatherDefaultTypeInternal;
extern PropagationWeatherDefaultTypeInternal _PropagationWeather_default_instance_;
class SparseWeatherSamples;
struct SparseWeatherSamplesDefaultTypeInternal;
extern SparseWeatherSamplesDefaultTypeInternal _SparseWeatherSamples_default_instance_;
class SparseWeatherSamples_Sample;
struct SparseWeatherSamples_SampleDefaultTypeInternal;
extern SparseWeatherSamples_SampleDefaultTypeInternal _SparseWeatherSamples_Sample_default_instance_;
class WeatherDataForecast;
struct WeatherDataForecastDefaultTypeInternal;
extern WeatherDataForecastDefaultTypeInternal _WeatherDataForecast_default_instance_;
class WeatherTable;
struct WeatherTableDefaultTypeInternal;
extern WeatherTableDefaultTypeInternal _WeatherTable_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::GaussianProcessPrediction* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::GaussianProcessPrediction>(Arena*);
template <>
::aalyria::spacetime::api::common::PropagationWeather* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::PropagationWeather>(Arena*);
template <>
::aalyria::spacetime::api::common::SparseWeatherSamples* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::SparseWeatherSamples>(Arena*);
template <>
::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::SparseWeatherSamples_Sample>(Arena*);
template <>
::aalyria::spacetime::api::common::WeatherDataForecast* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::WeatherDataForecast>(Arena*);
template <>
::aalyria::spacetime::api::common::WeatherTable* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::WeatherTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
enum WeatherDataForecast_Provenance : int {
  WeatherDataForecast_Provenance_UNSPECIFIED = 0,
  WeatherDataForecast_Provenance_ADMINISTRATIVE = 1,
  WeatherDataForecast_Provenance_SENSOR = 2,
  WeatherDataForecast_Provenance_ECMWF = 3,
  WeatherDataForecast_Provenance_NOAA_GFS = 4,
  WeatherDataForecast_Provenance_LOON_WIND = 5,
  WeatherDataForecast_Provenance_SEASONAL_REGIONAL_AVERAGE = 7,
};

bool WeatherDataForecast_Provenance_IsValid(int value);
constexpr WeatherDataForecast_Provenance WeatherDataForecast_Provenance_Provenance_MIN = static_cast<WeatherDataForecast_Provenance>(0);
constexpr WeatherDataForecast_Provenance WeatherDataForecast_Provenance_Provenance_MAX = static_cast<WeatherDataForecast_Provenance>(7);
constexpr int WeatherDataForecast_Provenance_Provenance_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WeatherDataForecast_Provenance_descriptor();
template <typename T>
const std::string& WeatherDataForecast_Provenance_Name(T value) {
  static_assert(std::is_same<T, WeatherDataForecast_Provenance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Provenance_Name().");
  return WeatherDataForecast_Provenance_Name(static_cast<WeatherDataForecast_Provenance>(value));
}
template <>
inline const std::string& WeatherDataForecast_Provenance_Name(WeatherDataForecast_Provenance value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WeatherDataForecast_Provenance_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool WeatherDataForecast_Provenance_Parse(absl::string_view name, WeatherDataForecast_Provenance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WeatherDataForecast_Provenance>(
      WeatherDataForecast_Provenance_descriptor(), name, value);
}
enum Parameter : int {
  UNSPECIFIED_PARAMETER = 0,
  ATMOSPHERIC_PRESSURE_PA = 1,
  TEMPERATURE_K = 2,
  WATER_VAPOR_PRESSURE_PA = 3,
  RAIN_HEIGHT_WGS84_M = 4,
  RAIN_RATE_M_PER_SECOND = 5,
  CLOUD_CEILING_WGS84_M = 6,
  CLOUD_LAYER_THICKNESS_M = 7,
  CLOUD_LIQUID_WATER_DENSITY_G_PER_M3 = 8,
  CLOUD_TEMPERATURE_K = 9,
};

bool Parameter_IsValid(int value);
constexpr Parameter Parameter_MIN = static_cast<Parameter>(0);
constexpr Parameter Parameter_MAX = static_cast<Parameter>(9);
constexpr int Parameter_ARRAYSIZE = 9 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Parameter_descriptor();
template <typename T>
const std::string& Parameter_Name(T value) {
  static_assert(std::is_same<T, Parameter>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Parameter_Name().");
  return Parameter_Name(static_cast<Parameter>(value));
}
template <>
inline const std::string& Parameter_Name(Parameter value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Parameter_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool Parameter_Parse(absl::string_view name, Parameter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Parameter>(
      Parameter_descriptor(), name, value);
}
enum Provenance : int {
  UNSPECIFIED = 0,
  ADMINISTRATIVE = 1,
  SENSOR = 2,
  ECMWF = 3,
  NOAA_GFS = 4,
  LOON_WIND = 5,
  SEASONAL_REGIONAL_AVERAGE = 7,
  DEFAULT_FALLBACK = 8,
};

bool Provenance_IsValid(int value);
constexpr Provenance Provenance_MIN = static_cast<Provenance>(0);
constexpr Provenance Provenance_MAX = static_cast<Provenance>(8);
constexpr int Provenance_ARRAYSIZE = 8 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Provenance_descriptor();
template <typename T>
const std::string& Provenance_Name(T value) {
  static_assert(std::is_same<T, Provenance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Provenance_Name().");
  return Provenance_Name(static_cast<Provenance>(value));
}
template <>
inline const std::string& Provenance_Name(Provenance value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Provenance_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool Provenance_Parse(absl::string_view name, Provenance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Provenance>(
      Provenance_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PropagationWeather final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.PropagationWeather) */ {
 public:
  inline PropagationWeather() : PropagationWeather(nullptr) {}
  ~PropagationWeather() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PropagationWeather(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropagationWeather(const PropagationWeather& from);
  PropagationWeather(PropagationWeather&& from) noexcept
    : PropagationWeather() {
    *this = ::std::move(from);
  }

  inline PropagationWeather& operator=(const PropagationWeather& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagationWeather& operator=(PropagationWeather&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropagationWeather& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropagationWeather* internal_default_instance() {
    return reinterpret_cast<const PropagationWeather*>(
               &_PropagationWeather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropagationWeather& a, PropagationWeather& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagationWeather* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagationWeather* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropagationWeather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropagationWeather>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropagationWeather& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropagationWeather& from) {
    PropagationWeather::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagationWeather* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.PropagationWeather";
  }
  protected:
  explicit PropagationWeather(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForecastsFieldNumber = 6,
    kTablesFieldNumber = 7,
    kSamplesFieldNumber = 8,
    kIntervalFieldNumber = 1,
    kS2CellIdFieldNumber = 2,
  };
  // repeated .aalyria.spacetime.api.common.WeatherDataForecast forecasts = 6 [json_name = "forecasts"];
  int forecasts_size() const;
  private:
  int _internal_forecasts_size() const;

  public:
  void clear_forecasts() ;
  ::aalyria::spacetime::api::common::WeatherDataForecast* mutable_forecasts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherDataForecast >*
      mutable_forecasts();
  private:
  const ::aalyria::spacetime::api::common::WeatherDataForecast& _internal_forecasts(int index) const;
  ::aalyria::spacetime::api::common::WeatherDataForecast* _internal_add_forecasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherDataForecast>& _internal_forecasts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherDataForecast>* _internal_mutable_forecasts();
  public:
  const ::aalyria::spacetime::api::common::WeatherDataForecast& forecasts(int index) const;
  ::aalyria::spacetime::api::common::WeatherDataForecast* add_forecasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherDataForecast >&
      forecasts() const;
  // repeated .aalyria.spacetime.api.common.WeatherTable tables = 7 [json_name = "tables"];
  int tables_size() const;
  private:
  int _internal_tables_size() const;

  public:
  void clear_tables() ;
  ::aalyria::spacetime::api::common::WeatherTable* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherTable >*
      mutable_tables();
  private:
  const ::aalyria::spacetime::api::common::WeatherTable& _internal_tables(int index) const;
  ::aalyria::spacetime::api::common::WeatherTable* _internal_add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherTable>& _internal_tables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherTable>* _internal_mutable_tables();
  public:
  const ::aalyria::spacetime::api::common::WeatherTable& tables(int index) const;
  ::aalyria::spacetime::api::common::WeatherTable* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherTable >&
      tables() const;
  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples samples = 8 [json_name = "samples"];
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::aalyria::spacetime::api::common::SparseWeatherSamples* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples >*
      mutable_samples();
  private:
  const ::aalyria::spacetime::api::common::SparseWeatherSamples& _internal_samples(int index) const;
  ::aalyria::spacetime::api::common::SparseWeatherSamples* _internal_add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples>& _internal_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples>* _internal_mutable_samples();
  public:
  const ::aalyria::spacetime::api::common::SparseWeatherSamples& samples(int index) const;
  ::aalyria::spacetime::api::common::SparseWeatherSamples* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples >&
      samples() const;
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
  bool has_interval() const;
  void clear_interval() ;
  const ::aalyria::spacetime::api::common::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TimeInterval* release_interval();
  ::aalyria::spacetime::api::common::TimeInterval* mutable_interval();
  void set_allocated_interval(::aalyria::spacetime::api::common::TimeInterval* interval);
  private:
  const ::aalyria::spacetime::api::common::TimeInterval& _internal_interval() const;
  ::aalyria::spacetime::api::common::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::aalyria::spacetime::api::common::TimeInterval* interval);
  ::aalyria::spacetime::api::common::TimeInterval* unsafe_arena_release_interval();
  // optional uint64 s2_cell_id = 2 [json_name = "s2CellId"];
  bool has_s2_cell_id() const;
  void clear_s2_cell_id() ;
  ::uint64_t s2_cell_id() const;
  void set_s2_cell_id(::uint64_t value);

  private:
  ::uint64_t _internal_s2_cell_id() const;
  void _internal_set_s2_cell_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.PropagationWeather)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherDataForecast > forecasts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherTable > tables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples > samples_;
    ::aalyria::spacetime::api::common::TimeInterval* interval_;
    ::uint64_t s2_cell_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class WeatherTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.WeatherTable) */ {
 public:
  inline WeatherTable() : WeatherTable(nullptr) {}
  ~WeatherTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeatherTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeatherTable(const WeatherTable& from);
  WeatherTable(WeatherTable&& from) noexcept
    : WeatherTable() {
    *this = ::std::move(from);
  }

  inline WeatherTable& operator=(const WeatherTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherTable& operator=(WeatherTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeatherTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeatherTable* internal_default_instance() {
    return reinterpret_cast<const WeatherTable*>(
               &_WeatherTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WeatherTable& a, WeatherTable& b) {
    a.Swap(&b);
  }
  inline void Swap(WeatherTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeatherTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeatherTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeatherTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WeatherTable& from) {
    WeatherTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.WeatherTable";
  }
  protected:
  explicit WeatherTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kTimesSFieldNumber = 3,
    kHeightsWgs84MFieldNumber = 4,
    kValuesFieldNumber = 5,
    kProvenanceFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.common.Parameter params = 2 [json_name = "params"];
  int params_size() const;
  private:
  int _internal_params_size() const;

  public:
  void clear_params() ;
  public:
  ::aalyria::spacetime::api::common::Parameter params(int index) const;
  void set_params(int index, ::aalyria::spacetime::api::common::Parameter value);
  void add_params(::aalyria::spacetime::api::common::Parameter value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_params();

  private:
  ::aalyria::spacetime::api::common::Parameter _internal_params(int index) const;
  void _internal_add_params(::aalyria::spacetime::api::common::Parameter value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_params();

  public:
  // repeated int64 times_s = 3 [json_name = "timesS"];
  int times_s_size() const;
  private:
  int _internal_times_s_size() const;

  public:
  void clear_times_s() ;
  ::int64_t times_s(int index) const;
  void set_times_s(int index, ::int64_t value);
  void add_times_s(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& times_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_times_s();

  private:
  ::int64_t _internal_times_s(int index) const;
  void _internal_add_times_s(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_times_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_times_s();

  public:
  // repeated int32 heights_wgs84_m = 4 [json_name = "heightsWgs84M"];
  int heights_wgs84_m_size() const;
  private:
  int _internal_heights_wgs84_m_size() const;

  public:
  void clear_heights_wgs84_m() ;
  ::int32_t heights_wgs84_m(int index) const;
  void set_heights_wgs84_m(int index, ::int32_t value);
  void add_heights_wgs84_m(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& heights_wgs84_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_heights_wgs84_m();

  private:
  ::int32_t _internal_heights_wgs84_m(int index) const;
  void _internal_add_heights_wgs84_m(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_heights_wgs84_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_heights_wgs84_m();

  public:
  // repeated double values = 5 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* mutable_values();

  private:
  double _internal_values(int index) const;
  void _internal_add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* _internal_mutable_values();

  public:
  // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [default = UNSPECIFIED, json_name = "provenance"];
  bool has_provenance() const;
  void clear_provenance() ;
  ::aalyria::spacetime::api::common::Provenance provenance() const;
  void set_provenance(::aalyria::spacetime::api::common::Provenance value);

  private:
  ::aalyria::spacetime::api::common::Provenance _internal_provenance() const;
  void _internal_set_provenance(::aalyria::spacetime::api::common::Provenance value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.WeatherTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> times_s_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> heights_wgs84_m_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<double> values_;
    int provenance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class SparseWeatherSamples_Sample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.SparseWeatherSamples.Sample) */ {
 public:
  inline SparseWeatherSamples_Sample() : SparseWeatherSamples_Sample(nullptr) {}
  ~SparseWeatherSamples_Sample() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SparseWeatherSamples_Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseWeatherSamples_Sample(const SparseWeatherSamples_Sample& from);
  SparseWeatherSamples_Sample(SparseWeatherSamples_Sample&& from) noexcept
    : SparseWeatherSamples_Sample() {
    *this = ::std::move(from);
  }

  inline SparseWeatherSamples_Sample& operator=(const SparseWeatherSamples_Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseWeatherSamples_Sample& operator=(SparseWeatherSamples_Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseWeatherSamples_Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseWeatherSamples_Sample* internal_default_instance() {
    return reinterpret_cast<const SparseWeatherSamples_Sample*>(
               &_SparseWeatherSamples_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseWeatherSamples_Sample& a, SparseWeatherSamples_Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseWeatherSamples_Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseWeatherSamples_Sample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseWeatherSamples_Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseWeatherSamples_Sample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseWeatherSamples_Sample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseWeatherSamples_Sample& from) {
    SparseWeatherSamples_Sample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseWeatherSamples_Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.SparseWeatherSamples.Sample";
  }
  protected:
  explicit SparseWeatherSamples_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kTimestampSFieldNumber = 4,
    kHeightWgs84MFieldNumber = 2,
  };
  // optional double value = 3 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // optional int64 timestamp_s = 4 [json_name = "timestampS"];
  bool has_timestamp_s() const;
  void clear_timestamp_s() ;
  ::int64_t timestamp_s() const;
  void set_timestamp_s(::int64_t value);

  private:
  ::int64_t _internal_timestamp_s() const;
  void _internal_set_timestamp_s(::int64_t value);

  public:
  // optional int32 height_wgs84_m = 2 [json_name = "heightWgs84M"];
  bool has_height_wgs84_m() const;
  void clear_height_wgs84_m() ;
  ::int32_t height_wgs84_m() const;
  void set_height_wgs84_m(::int32_t value);

  private:
  ::int32_t _internal_height_wgs84_m() const;
  void _internal_set_height_wgs84_m(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double value_;
    ::int64_t timestamp_s_;
    ::int32_t height_wgs84_m_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class SparseWeatherSamples final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.SparseWeatherSamples) */ {
 public:
  inline SparseWeatherSamples() : SparseWeatherSamples(nullptr) {}
  ~SparseWeatherSamples() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SparseWeatherSamples(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseWeatherSamples(const SparseWeatherSamples& from);
  SparseWeatherSamples(SparseWeatherSamples&& from) noexcept
    : SparseWeatherSamples() {
    *this = ::std::move(from);
  }

  inline SparseWeatherSamples& operator=(const SparseWeatherSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseWeatherSamples& operator=(SparseWeatherSamples&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseWeatherSamples& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseWeatherSamples* internal_default_instance() {
    return reinterpret_cast<const SparseWeatherSamples*>(
               &_SparseWeatherSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SparseWeatherSamples& a, SparseWeatherSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseWeatherSamples* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseWeatherSamples* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseWeatherSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseWeatherSamples>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseWeatherSamples& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseWeatherSamples& from) {
    SparseWeatherSamples::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseWeatherSamples* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.SparseWeatherSamples";
  }
  protected:
  explicit SparseWeatherSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SparseWeatherSamples_Sample Sample;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 5,
    kTimeDomainRadiusFieldNumber = 3,
    kProvenanceFieldNumber = 1,
    kParamFieldNumber = 2,
    kAltitudeDomainRadiusMFieldNumber = 4,
  };
  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples.Sample samples = 5 [json_name = "samples"];
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >*
      mutable_samples();
  private:
  const ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample& _internal_samples(int index) const;
  ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* _internal_add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples_Sample>& _internal_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples_Sample>* _internal_mutable_samples();
  public:
  const ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample& samples(int index) const;
  ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >&
      samples() const;
  // optional .google.protobuf.Duration time_domain_radius = 3 [json_name = "timeDomainRadius"];
  bool has_time_domain_radius() const;
  void clear_time_domain_radius() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_domain_radius() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_domain_radius();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_domain_radius();
  void set_allocated_time_domain_radius(::PROTOBUF_NAMESPACE_ID::Duration* time_domain_radius);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_domain_radius() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_domain_radius();
  public:
  void unsafe_arena_set_allocated_time_domain_radius(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_domain_radius);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_domain_radius();
  // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [json_name = "provenance"];
  bool has_provenance() const;
  void clear_provenance() ;
  ::aalyria::spacetime::api::common::Provenance provenance() const;
  void set_provenance(::aalyria::spacetime::api::common::Provenance value);

  private:
  ::aalyria::spacetime::api::common::Provenance _internal_provenance() const;
  void _internal_set_provenance(::aalyria::spacetime::api::common::Provenance value);

  public:
  // optional .aalyria.spacetime.api.common.Parameter param = 2 [json_name = "param"];
  bool has_param() const;
  void clear_param() ;
  ::aalyria::spacetime::api::common::Parameter param() const;
  void set_param(::aalyria::spacetime::api::common::Parameter value);

  private:
  ::aalyria::spacetime::api::common::Parameter _internal_param() const;
  void _internal_set_param(::aalyria::spacetime::api::common::Parameter value);

  public:
  // optional int32 altitude_domain_radius_m = 4 [json_name = "altitudeDomainRadiusM"];
  bool has_altitude_domain_radius_m() const;
  void clear_altitude_domain_radius_m() ;
  ::int32_t altitude_domain_radius_m() const;
  void set_altitude_domain_radius_m(::int32_t value);

  private:
  ::int32_t _internal_altitude_domain_radius_m() const;
  void _internal_set_altitude_domain_radius_m(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.SparseWeatherSamples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample > samples_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_domain_radius_;
    int provenance_;
    int param_;
    ::int32_t altitude_domain_radius_m_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class WeatherDataForecast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.WeatherDataForecast) */ {
 public:
  inline WeatherDataForecast() : WeatherDataForecast(nullptr) {}
  ~WeatherDataForecast() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeatherDataForecast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeatherDataForecast(const WeatherDataForecast& from);
  WeatherDataForecast(WeatherDataForecast&& from) noexcept
    : WeatherDataForecast() {
    *this = ::std::move(from);
  }

  inline WeatherDataForecast& operator=(const WeatherDataForecast& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherDataForecast& operator=(WeatherDataForecast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeatherDataForecast& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeatherDataForecast* internal_default_instance() {
    return reinterpret_cast<const WeatherDataForecast*>(
               &_WeatherDataForecast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WeatherDataForecast& a, WeatherDataForecast& b) {
    a.Swap(&b);
  }
  inline void Swap(WeatherDataForecast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherDataForecast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeatherDataForecast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeatherDataForecast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeatherDataForecast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WeatherDataForecast& from) {
    WeatherDataForecast::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherDataForecast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.WeatherDataForecast";
  }
  protected:
  explicit WeatherDataForecast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Provenance = WeatherDataForecast_Provenance;
  static constexpr Provenance UNSPECIFIED = WeatherDataForecast_Provenance_UNSPECIFIED;
  static constexpr Provenance ADMINISTRATIVE = WeatherDataForecast_Provenance_ADMINISTRATIVE;
  static constexpr Provenance SENSOR = WeatherDataForecast_Provenance_SENSOR;
  static constexpr Provenance ECMWF = WeatherDataForecast_Provenance_ECMWF;
  static constexpr Provenance NOAA_GFS = WeatherDataForecast_Provenance_NOAA_GFS;
  static constexpr Provenance LOON_WIND = WeatherDataForecast_Provenance_LOON_WIND;
  static constexpr Provenance SEASONAL_REGIONAL_AVERAGE = WeatherDataForecast_Provenance_SEASONAL_REGIONAL_AVERAGE;
  static inline bool Provenance_IsValid(int value) {
    return WeatherDataForecast_Provenance_IsValid(value);
  }
  static constexpr Provenance Provenance_MIN = WeatherDataForecast_Provenance_Provenance_MIN;
  static constexpr Provenance Provenance_MAX = WeatherDataForecast_Provenance_Provenance_MAX;
  static constexpr int Provenance_ARRAYSIZE = WeatherDataForecast_Provenance_Provenance_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Provenance_descriptor() {
    return WeatherDataForecast_Provenance_descriptor();
  }
  template <typename T>
  static inline const std::string& Provenance_Name(T value) {
    return WeatherDataForecast_Provenance_Name(value);
  }
  static inline bool Provenance_Parse(absl::string_view name, Provenance* value) {
    return WeatherDataForecast_Provenance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 11,
    kAtmosphericPressurePaFieldNumber = 1,
    kTemperatureKFieldNumber = 2,
    kWaterVaporPressurePaFieldNumber = 3,
    kRainHeightWgs84MFieldNumber = 4,
    kRainRateMPerSecondFieldNumber = 5,
    kCloudCeilingWgs84MFieldNumber = 6,
    kCloudLayerThicknessMFieldNumber = 7,
    kCloudLiquidWaterDensityGPerM3FieldNumber = 8,
    kCloudTemperatureKFieldNumber = 9,
    kProvenanceFieldNumber = 10,
  };
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 11 [json_name = "interval"];
  bool has_interval() const;
  void clear_interval() ;
  const ::aalyria::spacetime::api::common::TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TimeInterval* release_interval();
  ::aalyria::spacetime::api::common::TimeInterval* mutable_interval();
  void set_allocated_interval(::aalyria::spacetime::api::common::TimeInterval* interval);
  private:
  const ::aalyria::spacetime::api::common::TimeInterval& _internal_interval() const;
  ::aalyria::spacetime::api::common::TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::aalyria::spacetime::api::common::TimeInterval* interval);
  ::aalyria::spacetime::api::common::TimeInterval* unsafe_arena_release_interval();
  // optional double atmospheric_pressure_pa = 1 [json_name = "atmosphericPressurePa"];
  bool has_atmospheric_pressure_pa() const;
  void clear_atmospheric_pressure_pa() ;
  double atmospheric_pressure_pa() const;
  void set_atmospheric_pressure_pa(double value);

  private:
  double _internal_atmospheric_pressure_pa() const;
  void _internal_set_atmospheric_pressure_pa(double value);

  public:
  // optional double temperature_k = 2 [json_name = "temperatureK"];
  bool has_temperature_k() const;
  void clear_temperature_k() ;
  double temperature_k() const;
  void set_temperature_k(double value);

  private:
  double _internal_temperature_k() const;
  void _internal_set_temperature_k(double value);

  public:
  // optional double water_vapor_pressure_pa = 3 [json_name = "waterVaporPressurePa"];
  bool has_water_vapor_pressure_pa() const;
  void clear_water_vapor_pressure_pa() ;
  double water_vapor_pressure_pa() const;
  void set_water_vapor_pressure_pa(double value);

  private:
  double _internal_water_vapor_pressure_pa() const;
  void _internal_set_water_vapor_pressure_pa(double value);

  public:
  // optional double rain_height_wgs84_m = 4 [json_name = "rainHeightWgs84M"];
  bool has_rain_height_wgs84_m() const;
  void clear_rain_height_wgs84_m() ;
  double rain_height_wgs84_m() const;
  void set_rain_height_wgs84_m(double value);

  private:
  double _internal_rain_height_wgs84_m() const;
  void _internal_set_rain_height_wgs84_m(double value);

  public:
  // optional double rain_rate_m_per_second = 5 [json_name = "rainRateMPerSecond"];
  bool has_rain_rate_m_per_second() const;
  void clear_rain_rate_m_per_second() ;
  double rain_rate_m_per_second() const;
  void set_rain_rate_m_per_second(double value);

  private:
  double _internal_rain_rate_m_per_second() const;
  void _internal_set_rain_rate_m_per_second(double value);

  public:
  // optional double cloud_ceiling_wgs84_m = 6 [json_name = "cloudCeilingWgs84M"];
  bool has_cloud_ceiling_wgs84_m() const;
  void clear_cloud_ceiling_wgs84_m() ;
  double cloud_ceiling_wgs84_m() const;
  void set_cloud_ceiling_wgs84_m(double value);

  private:
  double _internal_cloud_ceiling_wgs84_m() const;
  void _internal_set_cloud_ceiling_wgs84_m(double value);

  public:
  // optional double cloud_layer_thickness_m = 7 [json_name = "cloudLayerThicknessM"];
  bool has_cloud_layer_thickness_m() const;
  void clear_cloud_layer_thickness_m() ;
  double cloud_layer_thickness_m() const;
  void set_cloud_layer_thickness_m(double value);

  private:
  double _internal_cloud_layer_thickness_m() const;
  void _internal_set_cloud_layer_thickness_m(double value);

  public:
  // optional double cloud_liquid_water_density_g_per_m3 = 8 [json_name = "cloudLiquidWaterDensityGPerM3"];
  bool has_cloud_liquid_water_density_g_per_m3() const;
  void clear_cloud_liquid_water_density_g_per_m3() ;
  double cloud_liquid_water_density_g_per_m3() const;
  void set_cloud_liquid_water_density_g_per_m3(double value);

  private:
  double _internal_cloud_liquid_water_density_g_per_m3() const;
  void _internal_set_cloud_liquid_water_density_g_per_m3(double value);

  public:
  // optional double cloud_temperature_k = 9 [json_name = "cloudTemperatureK"];
  bool has_cloud_temperature_k() const;
  void clear_cloud_temperature_k() ;
  double cloud_temperature_k() const;
  void set_cloud_temperature_k(double value);

  private:
  double _internal_cloud_temperature_k() const;
  void _internal_set_cloud_temperature_k(double value);

  public:
  // optional .aalyria.spacetime.api.common.WeatherDataForecast.Provenance provenance = 10 [default = UNSPECIFIED, json_name = "provenance"];
  bool has_provenance() const;
  void clear_provenance() ;
  ::aalyria::spacetime::api::common::WeatherDataForecast_Provenance provenance() const;
  void set_provenance(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance value);

  private:
  ::aalyria::spacetime::api::common::WeatherDataForecast_Provenance _internal_provenance() const;
  void _internal_set_provenance(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.WeatherDataForecast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::TimeInterval* interval_;
    double atmospheric_pressure_pa_;
    double temperature_k_;
    double water_vapor_pressure_pa_;
    double rain_height_wgs84_m_;
    double rain_rate_m_per_second_;
    double cloud_ceiling_wgs84_m_;
    double cloud_layer_thickness_m_;
    double cloud_liquid_water_density_g_per_m3_;
    double cloud_temperature_k_;
    int provenance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class GaussianProcessPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.GaussianProcessPrediction) */ {
 public:
  inline GaussianProcessPrediction() : GaussianProcessPrediction(nullptr) {}
  ~GaussianProcessPrediction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GaussianProcessPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GaussianProcessPrediction(const GaussianProcessPrediction& from);
  GaussianProcessPrediction(GaussianProcessPrediction&& from) noexcept
    : GaussianProcessPrediction() {
    *this = ::std::move(from);
  }

  inline GaussianProcessPrediction& operator=(const GaussianProcessPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaussianProcessPrediction& operator=(GaussianProcessPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GaussianProcessPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const GaussianProcessPrediction* internal_default_instance() {
    return reinterpret_cast<const GaussianProcessPrediction*>(
               &_GaussianProcessPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GaussianProcessPrediction& a, GaussianProcessPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(GaussianProcessPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GaussianProcessPrediction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GaussianProcessPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GaussianProcessPrediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GaussianProcessPrediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GaussianProcessPrediction& from) {
    GaussianProcessPrediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GaussianProcessPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.GaussianProcessPrediction";
  }
  protected:
  explicit GaussianProcessPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kVarianceFieldNumber = 2,
  };
  // optional double mean = 1 [json_name = "mean"];
  bool has_mean() const;
  void clear_mean() ;
  double mean() const;
  void set_mean(double value);

  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);

  public:
  // optional double variance = 2 [json_name = "variance"];
  bool has_variance() const;
  void clear_variance() ;
  double variance() const;
  void set_variance(double value);

  private:
  double _internal_variance() const;
  void _internal_set_variance(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.GaussianProcessPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double mean_;
    double variance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PropagationWeather

// optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
inline bool PropagationWeather::has_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TimeInterval& PropagationWeather::_internal_interval() const {
  const ::aalyria::spacetime::api::common::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TimeInterval&>(
      ::aalyria::spacetime::api::common::_TimeInterval_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TimeInterval& PropagationWeather::interval() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PropagationWeather.interval)
  return _internal_interval();
}
inline void PropagationWeather::unsafe_arena_set_allocated_interval(
    ::aalyria::spacetime::api::common::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.PropagationWeather.interval)
}
inline ::aalyria::spacetime::api::common::TimeInterval* PropagationWeather::release_interval() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TimeInterval* PropagationWeather::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PropagationWeather.interval)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TimeInterval* PropagationWeather::_internal_mutable_interval() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::aalyria::spacetime::api::common::TimeInterval* PropagationWeather::mutable_interval() {
  ::aalyria::spacetime::api::common::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PropagationWeather.interval)
  return _msg;
}
inline void PropagationWeather::set_allocated_interval(::aalyria::spacetime::api::common::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PropagationWeather.interval)
}

// optional uint64 s2_cell_id = 2 [json_name = "s2CellId"];
inline bool PropagationWeather::has_s2_cell_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PropagationWeather::clear_s2_cell_id() {
  _impl_.s2_cell_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t PropagationWeather::s2_cell_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PropagationWeather.s2_cell_id)
  return _internal_s2_cell_id();
}
inline void PropagationWeather::set_s2_cell_id(::uint64_t value) {
  _internal_set_s2_cell_id(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PropagationWeather.s2_cell_id)
}
inline ::uint64_t PropagationWeather::_internal_s2_cell_id() const {
  return _impl_.s2_cell_id_;
}
inline void PropagationWeather::_internal_set_s2_cell_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.s2_cell_id_ = value;
}

// repeated .aalyria.spacetime.api.common.WeatherDataForecast forecasts = 6 [json_name = "forecasts"];
inline int PropagationWeather::_internal_forecasts_size() const {
  return _impl_.forecasts_.size();
}
inline int PropagationWeather::forecasts_size() const {
  return _internal_forecasts_size();
}
inline void PropagationWeather::clear_forecasts() {
  _internal_mutable_forecasts()->Clear();
}
inline ::aalyria::spacetime::api::common::WeatherDataForecast* PropagationWeather::mutable_forecasts(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PropagationWeather.forecasts)
  return _internal_mutable_forecasts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherDataForecast >*
PropagationWeather::mutable_forecasts() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.PropagationWeather.forecasts)
  return _internal_mutable_forecasts();
}
inline const ::aalyria::spacetime::api::common::WeatherDataForecast& PropagationWeather::_internal_forecasts(int index) const {
  return _internal_forecasts().Get(index);
}
inline const ::aalyria::spacetime::api::common::WeatherDataForecast& PropagationWeather::forecasts(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PropagationWeather.forecasts)
  return _internal_forecasts(index);
}
inline ::aalyria::spacetime::api::common::WeatherDataForecast* PropagationWeather::_internal_add_forecasts() {
  return _internal_mutable_forecasts()->Add();
}
inline ::aalyria::spacetime::api::common::WeatherDataForecast* PropagationWeather::add_forecasts() {
  ::aalyria::spacetime::api::common::WeatherDataForecast* _add = _internal_add_forecasts();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.PropagationWeather.forecasts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherDataForecast >&
PropagationWeather::forecasts() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.PropagationWeather.forecasts)
  return _internal_forecasts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherDataForecast>&
PropagationWeather::_internal_forecasts() const {
  return _impl_.forecasts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherDataForecast>*
PropagationWeather::_internal_mutable_forecasts() {
  return &_impl_.forecasts_;
}

// repeated .aalyria.spacetime.api.common.WeatherTable tables = 7 [json_name = "tables"];
inline int PropagationWeather::_internal_tables_size() const {
  return _impl_.tables_.size();
}
inline int PropagationWeather::tables_size() const {
  return _internal_tables_size();
}
inline void PropagationWeather::clear_tables() {
  _internal_mutable_tables()->Clear();
}
inline ::aalyria::spacetime::api::common::WeatherTable* PropagationWeather::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PropagationWeather.tables)
  return _internal_mutable_tables()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherTable >*
PropagationWeather::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.PropagationWeather.tables)
  return _internal_mutable_tables();
}
inline const ::aalyria::spacetime::api::common::WeatherTable& PropagationWeather::_internal_tables(int index) const {
  return _internal_tables().Get(index);
}
inline const ::aalyria::spacetime::api::common::WeatherTable& PropagationWeather::tables(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PropagationWeather.tables)
  return _internal_tables(index);
}
inline ::aalyria::spacetime::api::common::WeatherTable* PropagationWeather::_internal_add_tables() {
  return _internal_mutable_tables()->Add();
}
inline ::aalyria::spacetime::api::common::WeatherTable* PropagationWeather::add_tables() {
  ::aalyria::spacetime::api::common::WeatherTable* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.PropagationWeather.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WeatherTable >&
PropagationWeather::tables() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.PropagationWeather.tables)
  return _internal_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherTable>&
PropagationWeather::_internal_tables() const {
  return _impl_.tables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WeatherTable>*
PropagationWeather::_internal_mutable_tables() {
  return &_impl_.tables_;
}

// repeated .aalyria.spacetime.api.common.SparseWeatherSamples samples = 8 [json_name = "samples"];
inline int PropagationWeather::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int PropagationWeather::samples_size() const {
  return _internal_samples_size();
}
inline void PropagationWeather::clear_samples() {
  _internal_mutable_samples()->Clear();
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples* PropagationWeather::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PropagationWeather.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples >*
PropagationWeather::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.PropagationWeather.samples)
  return _internal_mutable_samples();
}
inline const ::aalyria::spacetime::api::common::SparseWeatherSamples& PropagationWeather::_internal_samples(int index) const {
  return _internal_samples().Get(index);
}
inline const ::aalyria::spacetime::api::common::SparseWeatherSamples& PropagationWeather::samples(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PropagationWeather.samples)
  return _internal_samples(index);
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples* PropagationWeather::_internal_add_samples() {
  return _internal_mutable_samples()->Add();
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples* PropagationWeather::add_samples() {
  ::aalyria::spacetime::api::common::SparseWeatherSamples* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.PropagationWeather.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples >&
PropagationWeather::samples() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.PropagationWeather.samples)
  return _internal_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples>&
PropagationWeather::_internal_samples() const {
  return _impl_.samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples>*
PropagationWeather::_internal_mutable_samples() {
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// WeatherTable

// optional .aalyria.spacetime.api.common.Provenance provenance = 1 [default = UNSPECIFIED, json_name = "provenance"];
inline bool WeatherTable::has_provenance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WeatherTable::clear_provenance() {
  _impl_.provenance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::aalyria::spacetime::api::common::Provenance WeatherTable::provenance() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherTable.provenance)
  return _internal_provenance();
}
inline void WeatherTable::set_provenance(::aalyria::spacetime::api::common::Provenance value) {
   _internal_set_provenance(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherTable.provenance)
}
inline ::aalyria::spacetime::api::common::Provenance WeatherTable::_internal_provenance() const {
  return static_cast<::aalyria::spacetime::api::common::Provenance>(_impl_.provenance_);
}
inline void WeatherTable::_internal_set_provenance(::aalyria::spacetime::api::common::Provenance value) {
  assert(::aalyria::spacetime::api::common::Provenance_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provenance_ = value;
}

// repeated .aalyria.spacetime.api.common.Parameter params = 2 [json_name = "params"];
inline int WeatherTable::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int WeatherTable::params_size() const {
  return _internal_params_size();
}
inline void WeatherTable::clear_params() {
  _internal_mutable_params()->Clear();
}
inline ::aalyria::spacetime::api::common::Parameter WeatherTable::params(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherTable.params)
  return _internal_params(index);
}
inline void WeatherTable::set_params(int index, ::aalyria::spacetime::api::common::Parameter value) {
  assert(::aalyria::spacetime::api::common::Parameter_IsValid(value));
  _internal_mutable_params()->Set(index, value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherTable.params)
}
inline void WeatherTable::add_params(::aalyria::spacetime::api::common::Parameter value) {
  _internal_add_params(value);
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.WeatherTable.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& WeatherTable::params() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.WeatherTable.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* WeatherTable::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.WeatherTable.params)
  return _internal_mutable_params();
}
inline ::aalyria::spacetime::api::common::Parameter WeatherTable::_internal_params(int index) const {
  return static_cast<::aalyria::spacetime::api::common::Parameter>(_internal_params().Get(index));
}
inline void WeatherTable::_internal_add_params(::aalyria::spacetime::api::common::Parameter value) {
  assert(::aalyria::spacetime::api::common::Parameter_IsValid(value));
  _internal_mutable_params()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& WeatherTable::_internal_params() const {
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* WeatherTable::_internal_mutable_params() {
  return &_impl_.params_;
}

// repeated int64 times_s = 3 [json_name = "timesS"];
inline int WeatherTable::_internal_times_s_size() const {
  return _impl_.times_s_.size();
}
inline int WeatherTable::times_s_size() const {
  return _internal_times_s_size();
}
inline void WeatherTable::clear_times_s() {
  _internal_mutable_times_s()->Clear();
}
inline ::int64_t WeatherTable::times_s(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherTable.times_s)
  return _internal_times_s(index);
}
inline void WeatherTable::set_times_s(int index, ::int64_t value) {
  _internal_mutable_times_s()->Set(index, value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherTable.times_s)
}
inline void WeatherTable::add_times_s(::int64_t value) {
  _internal_add_times_s(value);
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.WeatherTable.times_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& WeatherTable::times_s() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.WeatherTable.times_s)
  return _internal_times_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* WeatherTable::mutable_times_s() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.WeatherTable.times_s)
  return _internal_mutable_times_s();
}

inline ::int64_t WeatherTable::_internal_times_s(int index) const {
  return _internal_times_s().Get(index);
}
inline void WeatherTable::_internal_add_times_s(::int64_t value) {
  _internal_mutable_times_s()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& WeatherTable::_internal_times_s() const {
  return _impl_.times_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* WeatherTable::_internal_mutable_times_s() {
  return &_impl_.times_s_;
}

// repeated int32 heights_wgs84_m = 4 [json_name = "heightsWgs84M"];
inline int WeatherTable::_internal_heights_wgs84_m_size() const {
  return _impl_.heights_wgs84_m_.size();
}
inline int WeatherTable::heights_wgs84_m_size() const {
  return _internal_heights_wgs84_m_size();
}
inline void WeatherTable::clear_heights_wgs84_m() {
  _internal_mutable_heights_wgs84_m()->Clear();
}
inline ::int32_t WeatherTable::heights_wgs84_m(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherTable.heights_wgs84_m)
  return _internal_heights_wgs84_m(index);
}
inline void WeatherTable::set_heights_wgs84_m(int index, ::int32_t value) {
  _internal_mutable_heights_wgs84_m()->Set(index, value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherTable.heights_wgs84_m)
}
inline void WeatherTable::add_heights_wgs84_m(::int32_t value) {
  _internal_add_heights_wgs84_m(value);
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.WeatherTable.heights_wgs84_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& WeatherTable::heights_wgs84_m() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.WeatherTable.heights_wgs84_m)
  return _internal_heights_wgs84_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* WeatherTable::mutable_heights_wgs84_m() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.WeatherTable.heights_wgs84_m)
  return _internal_mutable_heights_wgs84_m();
}

inline ::int32_t WeatherTable::_internal_heights_wgs84_m(int index) const {
  return _internal_heights_wgs84_m().Get(index);
}
inline void WeatherTable::_internal_add_heights_wgs84_m(::int32_t value) {
  _internal_mutable_heights_wgs84_m()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& WeatherTable::_internal_heights_wgs84_m() const {
  return _impl_.heights_wgs84_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* WeatherTable::_internal_mutable_heights_wgs84_m() {
  return &_impl_.heights_wgs84_m_;
}

// repeated double values = 5 [json_name = "values"];
inline int WeatherTable::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int WeatherTable::values_size() const {
  return _internal_values_size();
}
inline void WeatherTable::clear_values() {
  _internal_mutable_values()->Clear();
}
inline double WeatherTable::values(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherTable.values)
  return _internal_values(index);
}
inline void WeatherTable::set_values(int index, double value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherTable.values)
}
inline void WeatherTable::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.WeatherTable.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& WeatherTable::values() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.WeatherTable.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* WeatherTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.WeatherTable.values)
  return _internal_mutable_values();
}

inline double WeatherTable::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline void WeatherTable::_internal_add_values(double value) {
  _internal_mutable_values()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>& WeatherTable::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<double>* WeatherTable::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SparseWeatherSamples_Sample

// optional int64 timestamp_s = 4 [json_name = "timestampS"];
inline bool SparseWeatherSamples_Sample::has_timestamp_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SparseWeatherSamples_Sample::clear_timestamp_s() {
  _impl_.timestamp_s_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SparseWeatherSamples_Sample::timestamp_s() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.timestamp_s)
  return _internal_timestamp_s();
}
inline void SparseWeatherSamples_Sample::set_timestamp_s(::int64_t value) {
  _internal_set_timestamp_s(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.timestamp_s)
}
inline ::int64_t SparseWeatherSamples_Sample::_internal_timestamp_s() const {
  return _impl_.timestamp_s_;
}
inline void SparseWeatherSamples_Sample::_internal_set_timestamp_s(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_s_ = value;
}

// optional int32 height_wgs84_m = 2 [json_name = "heightWgs84M"];
inline bool SparseWeatherSamples_Sample::has_height_wgs84_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SparseWeatherSamples_Sample::clear_height_wgs84_m() {
  _impl_.height_wgs84_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SparseWeatherSamples_Sample::height_wgs84_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.height_wgs84_m)
  return _internal_height_wgs84_m();
}
inline void SparseWeatherSamples_Sample::set_height_wgs84_m(::int32_t value) {
  _internal_set_height_wgs84_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.height_wgs84_m)
}
inline ::int32_t SparseWeatherSamples_Sample::_internal_height_wgs84_m() const {
  return _impl_.height_wgs84_m_;
}
inline void SparseWeatherSamples_Sample::_internal_set_height_wgs84_m(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_wgs84_m_ = value;
}

// optional double value = 3 [json_name = "value"];
inline bool SparseWeatherSamples_Sample::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SparseWeatherSamples_Sample::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SparseWeatherSamples_Sample::value() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.value)
  return _internal_value();
}
inline void SparseWeatherSamples_Sample::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.Sample.value)
}
inline double SparseWeatherSamples_Sample::_internal_value() const {
  return _impl_.value_;
}
inline void SparseWeatherSamples_Sample::_internal_set_value(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SparseWeatherSamples

// optional .aalyria.spacetime.api.common.Provenance provenance = 1 [json_name = "provenance"];
inline bool SparseWeatherSamples::has_provenance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SparseWeatherSamples::clear_provenance() {
  _impl_.provenance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::aalyria::spacetime::api::common::Provenance SparseWeatherSamples::provenance() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.provenance)
  return _internal_provenance();
}
inline void SparseWeatherSamples::set_provenance(::aalyria::spacetime::api::common::Provenance value) {
   _internal_set_provenance(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.provenance)
}
inline ::aalyria::spacetime::api::common::Provenance SparseWeatherSamples::_internal_provenance() const {
  return static_cast<::aalyria::spacetime::api::common::Provenance>(_impl_.provenance_);
}
inline void SparseWeatherSamples::_internal_set_provenance(::aalyria::spacetime::api::common::Provenance value) {
  assert(::aalyria::spacetime::api::common::Provenance_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.provenance_ = value;
}

// optional .aalyria.spacetime.api.common.Parameter param = 2 [json_name = "param"];
inline bool SparseWeatherSamples::has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SparseWeatherSamples::clear_param() {
  _impl_.param_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::aalyria::spacetime::api::common::Parameter SparseWeatherSamples::param() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.param)
  return _internal_param();
}
inline void SparseWeatherSamples::set_param(::aalyria::spacetime::api::common::Parameter value) {
   _internal_set_param(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.param)
}
inline ::aalyria::spacetime::api::common::Parameter SparseWeatherSamples::_internal_param() const {
  return static_cast<::aalyria::spacetime::api::common::Parameter>(_impl_.param_);
}
inline void SparseWeatherSamples::_internal_set_param(::aalyria::spacetime::api::common::Parameter value) {
  assert(::aalyria::spacetime::api::common::Parameter_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_ = value;
}

// optional .google.protobuf.Duration time_domain_radius = 3 [json_name = "timeDomainRadius"];
inline bool SparseWeatherSamples::has_time_domain_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_domain_radius_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SparseWeatherSamples::_internal_time_domain_radius() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_domain_radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SparseWeatherSamples::time_domain_radius() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius)
  return _internal_time_domain_radius();
}
inline void SparseWeatherSamples::unsafe_arena_set_allocated_time_domain_radius(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_domain_radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_domain_radius_);
  }
  _impl_.time_domain_radius_ = time_domain_radius;
  if (time_domain_radius) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SparseWeatherSamples::release_time_domain_radius() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_domain_radius_;
  _impl_.time_domain_radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SparseWeatherSamples::unsafe_arena_release_time_domain_radius() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_domain_radius_;
  _impl_.time_domain_radius_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SparseWeatherSamples::_internal_mutable_time_domain_radius() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_domain_radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_domain_radius_ = p;
  }
  return _impl_.time_domain_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SparseWeatherSamples::mutable_time_domain_radius() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_domain_radius();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius)
  return _msg;
}
inline void SparseWeatherSamples::set_allocated_time_domain_radius(::PROTOBUF_NAMESPACE_ID::Duration* time_domain_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_domain_radius_);
  }
  if (time_domain_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_domain_radius));
    if (message_arena != submessage_arena) {
      time_domain_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_domain_radius, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_domain_radius_ = time_domain_radius;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius)
}

// optional int32 altitude_domain_radius_m = 4 [json_name = "altitudeDomainRadiusM"];
inline bool SparseWeatherSamples::has_altitude_domain_radius_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SparseWeatherSamples::clear_altitude_domain_radius_m() {
  _impl_.altitude_domain_radius_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SparseWeatherSamples::altitude_domain_radius_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.altitude_domain_radius_m)
  return _internal_altitude_domain_radius_m();
}
inline void SparseWeatherSamples::set_altitude_domain_radius_m(::int32_t value) {
  _internal_set_altitude_domain_radius_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.SparseWeatherSamples.altitude_domain_radius_m)
}
inline ::int32_t SparseWeatherSamples::_internal_altitude_domain_radius_m() const {
  return _impl_.altitude_domain_radius_m_;
}
inline void SparseWeatherSamples::_internal_set_altitude_domain_radius_m(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.altitude_domain_radius_m_ = value;
}

// repeated .aalyria.spacetime.api.common.SparseWeatherSamples.Sample samples = 5 [json_name = "samples"];
inline int SparseWeatherSamples::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int SparseWeatherSamples::samples_size() const {
  return _internal_samples_size();
}
inline void SparseWeatherSamples::clear_samples() {
  _internal_mutable_samples()->Clear();
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* SparseWeatherSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.SparseWeatherSamples.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >*
SparseWeatherSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.SparseWeatherSamples.samples)
  return _internal_mutable_samples();
}
inline const ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample& SparseWeatherSamples::_internal_samples(int index) const {
  return _internal_samples().Get(index);
}
inline const ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample& SparseWeatherSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.SparseWeatherSamples.samples)
  return _internal_samples(index);
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* SparseWeatherSamples::_internal_add_samples() {
  return _internal_mutable_samples()->Add();
}
inline ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* SparseWeatherSamples::add_samples() {
  ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.SparseWeatherSamples.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >&
SparseWeatherSamples::samples() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.SparseWeatherSamples.samples)
  return _internal_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples_Sample>&
SparseWeatherSamples::_internal_samples() const {
  return _impl_.samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::SparseWeatherSamples_Sample>*
SparseWeatherSamples::_internal_mutable_samples() {
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// WeatherDataForecast

// optional .aalyria.spacetime.api.common.WeatherDataForecast.Provenance provenance = 10 [default = UNSPECIFIED, json_name = "provenance"];
inline bool WeatherDataForecast::has_provenance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_provenance() {
  _impl_.provenance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::aalyria::spacetime::api::common::WeatherDataForecast_Provenance WeatherDataForecast::provenance() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.provenance)
  return _internal_provenance();
}
inline void WeatherDataForecast::set_provenance(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance value) {
   _internal_set_provenance(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.provenance)
}
inline ::aalyria::spacetime::api::common::WeatherDataForecast_Provenance WeatherDataForecast::_internal_provenance() const {
  return static_cast<::aalyria::spacetime::api::common::WeatherDataForecast_Provenance>(_impl_.provenance_);
}
inline void WeatherDataForecast::_internal_set_provenance(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance value) {
  assert(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.provenance_ = value;
}

// optional .aalyria.spacetime.api.common.TimeInterval interval = 11 [json_name = "interval"];
inline bool WeatherDataForecast::has_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TimeInterval& WeatherDataForecast::_internal_interval() const {
  const ::aalyria::spacetime::api::common::TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TimeInterval&>(
      ::aalyria::spacetime::api::common::_TimeInterval_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TimeInterval& WeatherDataForecast::interval() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.interval)
  return _internal_interval();
}
inline void WeatherDataForecast::unsafe_arena_set_allocated_interval(
    ::aalyria::spacetime::api::common::TimeInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.WeatherDataForecast.interval)
}
inline ::aalyria::spacetime::api::common::TimeInterval* WeatherDataForecast::release_interval() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TimeInterval* WeatherDataForecast::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.WeatherDataForecast.interval)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TimeInterval* WeatherDataForecast::_internal_mutable_interval() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TimeInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::aalyria::spacetime::api::common::TimeInterval* WeatherDataForecast::mutable_interval() {
  ::aalyria::spacetime::api::common::TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.WeatherDataForecast.interval)
  return _msg;
}
inline void WeatherDataForecast::set_allocated_interval(::aalyria::spacetime::api::common::TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.WeatherDataForecast.interval)
}

// optional double atmospheric_pressure_pa = 1 [json_name = "atmosphericPressurePa"];
inline bool WeatherDataForecast::has_atmospheric_pressure_pa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_atmospheric_pressure_pa() {
  _impl_.atmospheric_pressure_pa_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double WeatherDataForecast::atmospheric_pressure_pa() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.atmospheric_pressure_pa)
  return _internal_atmospheric_pressure_pa();
}
inline void WeatherDataForecast::set_atmospheric_pressure_pa(double value) {
  _internal_set_atmospheric_pressure_pa(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.atmospheric_pressure_pa)
}
inline double WeatherDataForecast::_internal_atmospheric_pressure_pa() const {
  return _impl_.atmospheric_pressure_pa_;
}
inline void WeatherDataForecast::_internal_set_atmospheric_pressure_pa(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.atmospheric_pressure_pa_ = value;
}

// optional double temperature_k = 2 [json_name = "temperatureK"];
inline bool WeatherDataForecast::has_temperature_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_temperature_k() {
  _impl_.temperature_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double WeatherDataForecast::temperature_k() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.temperature_k)
  return _internal_temperature_k();
}
inline void WeatherDataForecast::set_temperature_k(double value) {
  _internal_set_temperature_k(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.temperature_k)
}
inline double WeatherDataForecast::_internal_temperature_k() const {
  return _impl_.temperature_k_;
}
inline void WeatherDataForecast::_internal_set_temperature_k(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.temperature_k_ = value;
}

// optional double water_vapor_pressure_pa = 3 [json_name = "waterVaporPressurePa"];
inline bool WeatherDataForecast::has_water_vapor_pressure_pa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_water_vapor_pressure_pa() {
  _impl_.water_vapor_pressure_pa_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double WeatherDataForecast::water_vapor_pressure_pa() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.water_vapor_pressure_pa)
  return _internal_water_vapor_pressure_pa();
}
inline void WeatherDataForecast::set_water_vapor_pressure_pa(double value) {
  _internal_set_water_vapor_pressure_pa(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.water_vapor_pressure_pa)
}
inline double WeatherDataForecast::_internal_water_vapor_pressure_pa() const {
  return _impl_.water_vapor_pressure_pa_;
}
inline void WeatherDataForecast::_internal_set_water_vapor_pressure_pa(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.water_vapor_pressure_pa_ = value;
}

// optional double rain_height_wgs84_m = 4 [json_name = "rainHeightWgs84M"];
inline bool WeatherDataForecast::has_rain_height_wgs84_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_rain_height_wgs84_m() {
  _impl_.rain_height_wgs84_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double WeatherDataForecast::rain_height_wgs84_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.rain_height_wgs84_m)
  return _internal_rain_height_wgs84_m();
}
inline void WeatherDataForecast::set_rain_height_wgs84_m(double value) {
  _internal_set_rain_height_wgs84_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.rain_height_wgs84_m)
}
inline double WeatherDataForecast::_internal_rain_height_wgs84_m() const {
  return _impl_.rain_height_wgs84_m_;
}
inline void WeatherDataForecast::_internal_set_rain_height_wgs84_m(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rain_height_wgs84_m_ = value;
}

// optional double rain_rate_m_per_second = 5 [json_name = "rainRateMPerSecond"];
inline bool WeatherDataForecast::has_rain_rate_m_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_rain_rate_m_per_second() {
  _impl_.rain_rate_m_per_second_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double WeatherDataForecast::rain_rate_m_per_second() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.rain_rate_m_per_second)
  return _internal_rain_rate_m_per_second();
}
inline void WeatherDataForecast::set_rain_rate_m_per_second(double value) {
  _internal_set_rain_rate_m_per_second(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.rain_rate_m_per_second)
}
inline double WeatherDataForecast::_internal_rain_rate_m_per_second() const {
  return _impl_.rain_rate_m_per_second_;
}
inline void WeatherDataForecast::_internal_set_rain_rate_m_per_second(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rain_rate_m_per_second_ = value;
}

// optional double cloud_ceiling_wgs84_m = 6 [json_name = "cloudCeilingWgs84M"];
inline bool WeatherDataForecast::has_cloud_ceiling_wgs84_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_cloud_ceiling_wgs84_m() {
  _impl_.cloud_ceiling_wgs84_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double WeatherDataForecast::cloud_ceiling_wgs84_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.cloud_ceiling_wgs84_m)
  return _internal_cloud_ceiling_wgs84_m();
}
inline void WeatherDataForecast::set_cloud_ceiling_wgs84_m(double value) {
  _internal_set_cloud_ceiling_wgs84_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.cloud_ceiling_wgs84_m)
}
inline double WeatherDataForecast::_internal_cloud_ceiling_wgs84_m() const {
  return _impl_.cloud_ceiling_wgs84_m_;
}
inline void WeatherDataForecast::_internal_set_cloud_ceiling_wgs84_m(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.cloud_ceiling_wgs84_m_ = value;
}

// optional double cloud_layer_thickness_m = 7 [json_name = "cloudLayerThicknessM"];
inline bool WeatherDataForecast::has_cloud_layer_thickness_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_cloud_layer_thickness_m() {
  _impl_.cloud_layer_thickness_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double WeatherDataForecast::cloud_layer_thickness_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.cloud_layer_thickness_m)
  return _internal_cloud_layer_thickness_m();
}
inline void WeatherDataForecast::set_cloud_layer_thickness_m(double value) {
  _internal_set_cloud_layer_thickness_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.cloud_layer_thickness_m)
}
inline double WeatherDataForecast::_internal_cloud_layer_thickness_m() const {
  return _impl_.cloud_layer_thickness_m_;
}
inline void WeatherDataForecast::_internal_set_cloud_layer_thickness_m(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cloud_layer_thickness_m_ = value;
}

// optional double cloud_liquid_water_density_g_per_m3 = 8 [json_name = "cloudLiquidWaterDensityGPerM3"];
inline bool WeatherDataForecast::has_cloud_liquid_water_density_g_per_m3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_cloud_liquid_water_density_g_per_m3() {
  _impl_.cloud_liquid_water_density_g_per_m3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double WeatherDataForecast::cloud_liquid_water_density_g_per_m3() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.cloud_liquid_water_density_g_per_m3)
  return _internal_cloud_liquid_water_density_g_per_m3();
}
inline void WeatherDataForecast::set_cloud_liquid_water_density_g_per_m3(double value) {
  _internal_set_cloud_liquid_water_density_g_per_m3(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.cloud_liquid_water_density_g_per_m3)
}
inline double WeatherDataForecast::_internal_cloud_liquid_water_density_g_per_m3() const {
  return _impl_.cloud_liquid_water_density_g_per_m3_;
}
inline void WeatherDataForecast::_internal_set_cloud_liquid_water_density_g_per_m3(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.cloud_liquid_water_density_g_per_m3_ = value;
}

// optional double cloud_temperature_k = 9 [json_name = "cloudTemperatureK"];
inline bool WeatherDataForecast::has_cloud_temperature_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void WeatherDataForecast::clear_cloud_temperature_k() {
  _impl_.cloud_temperature_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double WeatherDataForecast::cloud_temperature_k() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WeatherDataForecast.cloud_temperature_k)
  return _internal_cloud_temperature_k();
}
inline void WeatherDataForecast::set_cloud_temperature_k(double value) {
  _internal_set_cloud_temperature_k(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WeatherDataForecast.cloud_temperature_k)
}
inline double WeatherDataForecast::_internal_cloud_temperature_k() const {
  return _impl_.cloud_temperature_k_;
}
inline void WeatherDataForecast::_internal_set_cloud_temperature_k(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cloud_temperature_k_ = value;
}

// -------------------------------------------------------------------

// GaussianProcessPrediction

// optional double mean = 1 [json_name = "mean"];
inline bool GaussianProcessPrediction::has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GaussianProcessPrediction::clear_mean() {
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double GaussianProcessPrediction::mean() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.GaussianProcessPrediction.mean)
  return _internal_mean();
}
inline void GaussianProcessPrediction::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.GaussianProcessPrediction.mean)
}
inline double GaussianProcessPrediction::_internal_mean() const {
  return _impl_.mean_;
}
inline void GaussianProcessPrediction::_internal_set_mean(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_ = value;
}

// optional double variance = 2 [json_name = "variance"];
inline bool GaussianProcessPrediction::has_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GaussianProcessPrediction::clear_variance() {
  _impl_.variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double GaussianProcessPrediction::variance() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.GaussianProcessPrediction.variance)
  return _internal_variance();
}
inline void GaussianProcessPrediction::set_variance(double value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.GaussianProcessPrediction.variance)
}
inline double GaussianProcessPrediction::_internal_variance() const {
  return _impl_.variance_;
}
inline void GaussianProcessPrediction::_internal_set_variance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.variance_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::common::WeatherDataForecast_Provenance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::WeatherDataForecast_Provenance>() {
  return ::aalyria::spacetime::api::common::WeatherDataForecast_Provenance_descriptor();
}
template <>
struct is_proto_enum<::aalyria::spacetime::api::common::Parameter> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::Parameter>() {
  return ::aalyria::spacetime::api::common::Parameter_descriptor();
}
template <>
struct is_proto_enum<::aalyria::spacetime::api::common::Provenance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::Provenance>() {
  return ::aalyria::spacetime::api::common::Provenance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5fpropagation_2eproto_2epb_2eh

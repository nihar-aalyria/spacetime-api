// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control_tunnel.proto

#include "api/common/control_tunnel.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR TunnelUpdate::TunnelUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tunnel_rule_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rule_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.operation_)*/ 0
} {}
struct TunnelUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelUpdateDefaultTypeInternal() {}
  union {
    TunnelUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelUpdateDefaultTypeInternal _TunnelUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TunnelRule_EncapRule::TunnelRule_EncapRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encapsulated_src_ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.encapsulated_dst_ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.classifier_)*/nullptr
  , /*decltype(_impl_.encapsulated_src_port_)*/ 0

  , /*decltype(_impl_.encapsulated_dst_port_)*/ 0

  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TunnelRule_EncapRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelRule_EncapRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelRule_EncapRuleDefaultTypeInternal() {}
  union {
    TunnelRule_EncapRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelRule_EncapRuleDefaultTypeInternal _TunnelRule_EncapRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TunnelRule_DecapRule::TunnelRule_DecapRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.classifier_)*/nullptr
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TunnelRule_DecapRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelRule_DecapRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelRule_DecapRuleDefaultTypeInternal() {}
  union {
    TunnelRule_DecapRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelRule_DecapRuleDefaultTypeInternal _TunnelRule_DecapRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TunnelRule::TunnelRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encap_rule_)*/nullptr
  , /*decltype(_impl_.decap_rule_)*/nullptr} {}
struct TunnelRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelRuleDefaultTypeInternal() {}
  union {
    TunnelRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelRuleDefaultTypeInternal _TunnelRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TunnelStates::TunnelStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tunnel_rule_ids_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr} {}
struct TunnelStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TunnelStatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TunnelStatesDefaultTypeInternal() {}
  union {
    TunnelStates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TunnelStatesDefaultTypeInternal _TunnelStates_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fcontrol_5ftunnel_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fcontrol_5ftunnel_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _impl_.tunnel_rule_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelUpdate, _impl_.sequence_number_),
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.classifier_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.encapsulated_src_ip_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.encapsulated_dst_ip_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.encapsulated_src_port_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.encapsulated_dst_port_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_.parameters_),
    2,
    0,
    1,
    3,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _impl_.classifier_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _impl_.parameters_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule, _impl_.encap_rule_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule, _impl_.decap_rule_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelStates, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelStates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelStates, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelStates, _impl_.tunnel_rule_ids_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::aalyria::spacetime::api::common::TunnelUpdate)},
        { 16, 31, -1, sizeof(::aalyria::spacetime::api::common::TunnelRule_EncapRule)},
        { 37, 48, -1, sizeof(::aalyria::spacetime::api::common::TunnelRule_DecapRule)},
        { 50, 60, -1, sizeof(::aalyria::spacetime::api::common::TunnelRule)},
        { 62, 72, -1, sizeof(::aalyria::spacetime::api::common::TunnelStates)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_TunnelUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TunnelRule_EncapRule_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TunnelRule_DecapRule_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TunnelRule_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TunnelStates_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fcontrol_5ftunnel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037api/common/control_tunnel.proto\022\034aalyr"
    "ia.spacetime.api.common\032\030api/common/netw"
    "ork.proto\032\025api/common/time.proto\032\027api/co"
    "mmon/tunnel.proto\"\236\002\n\014TunnelUpdate\022$\n\016tu"
    "nnel_rule_id\030\001 \001(\tR\014tunnelRuleId\022R\n\toper"
    "ation\030\002 \001(\01624.aalyria.spacetime.api.comm"
    "on.TunnelUpdate.OperationR\toperation\022<\n\004"
    "rule\030\003 \001(\0132(.aalyria.spacetime.api.commo"
    "n.TunnelRuleR\004rule\022\'\n\017sequence_number\030\004 "
    "\001(\003R\016sequenceNumber\"-\n\tOperation\022\013\n\007UNKN"
    "OWN\020\000\022\007\n\003ADD\020\001\022\n\n\006DELETE\020\002\"\332\005\n\nTunnelRul"
    "e\022Q\n\nencap_rule\030\n \001(\01322.aalyria.spacetim"
    "e.api.common.TunnelRule.EncapRuleR\tencap"
    "Rule\022Q\n\ndecap_rule\030\013 \001(\01322.aalyria.space"
    "time.api.common.TunnelRule.DecapRuleR\tde"
    "capRule\032\362\002\n\tEncapRule\022N\n\nclassifier\030\001 \001("
    "\0132..aalyria.spacetime.api.common.PacketC"
    "lassifierR\nclassifier\022.\n\023encapsulated_sr"
    "c_ip\030\002 \001(\tR\021encapsulatedSrcIp\022.\n\023encapsu"
    "lated_dst_ip\030\003 \001(\tR\021encapsulatedDstIp\0222\n"
    "\025encapsulated_src_port\030\004 \001(\005R\023encapsulat"
    "edSrcPort\0222\n\025encapsulated_dst_port\030\005 \001(\005"
    "R\023encapsulatedDstPort\022\?\n\003esp\030\006 \001(\0132+.aal"
    "yria.spacetime.api.common.EspParametersH"
    "\000R\003espB\014\n\nparameters\032\252\001\n\tDecapRule\022N\n\ncl"
    "assifier\030\001 \001(\0132..aalyria.spacetime.api.c"
    "ommon.PacketClassifierR\nclassifier\022\?\n\003es"
    "p\030\002 \001(\0132+.aalyria.spacetime.api.common.E"
    "spParametersH\000R\003espB\014\n\nparametersJ\004\010\001\020\n\""
    "\214\001\n\014TunnelStates\022D\n\ttimestamp\030\002 \001(\0132&.aa"
    "lyria.spacetime.api.common.DateTimeR\ttim"
    "estamp\022&\n\017tunnel_rule_ids\030\003 \003(\tR\rtunnelR"
    "uleIdsJ\004\010\001\020\002J\010\010\004\020\200\200\200\200\002BD\n com.aalyria.sp"
    "acetime.api.commonZ aalyria.com/spacetim"
    "e/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_deps[3] =
    {
        &::descriptor_table_api_2fcommon_2fnetwork_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_api_2fcommon_2ftunnel_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto = {
    false,
    false,
    1372,
    descriptor_table_protodef_api_2fcommon_2fcontrol_5ftunnel_2eproto,
    "api/common/control_tunnel.proto",
    &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
    descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fcontrol_5ftunnel_2eproto,
    file_level_service_descriptors_api_2fcommon_2fcontrol_5ftunnel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fcontrol_5ftunnel_2eproto(&descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelUpdate_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5ftunnel_2eproto[0];
}
bool TunnelUpdate_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TunnelUpdate_Operation TunnelUpdate::UNKNOWN;
constexpr TunnelUpdate_Operation TunnelUpdate::ADD;
constexpr TunnelUpdate_Operation TunnelUpdate::DELETE;
constexpr TunnelUpdate_Operation TunnelUpdate::Operation_MIN;
constexpr TunnelUpdate_Operation TunnelUpdate::Operation_MAX;
constexpr int TunnelUpdate::Operation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TunnelUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TunnelUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TunnelUpdate, _impl_._has_bits_);
  static void set_has_tunnel_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::TunnelRule& rule(const TunnelUpdate* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::TunnelRule&
TunnelUpdate::_Internal::rule(const TunnelUpdate* msg) {
  return *msg->_impl_.rule_;
}
TunnelUpdate::TunnelUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelUpdate)
}
TunnelUpdate::TunnelUpdate(const TunnelUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tunnel_rule_id_) {}

    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.sequence_number_) {}

    , decltype(_impl_.operation_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tunnel_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tunnel_rule_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tunnel_rule_id_.Set(from._internal_tunnel_rule_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.rule_ = new ::aalyria::spacetime::api::common::TunnelRule(*from._impl_.rule_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelUpdate)
}

inline void TunnelUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tunnel_rule_id_) {}

    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.sequence_number_) { ::int64_t{0} }

    , decltype(_impl_.operation_) { 0 }

  };
  _impl_.tunnel_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tunnel_rule_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TunnelUpdate::~TunnelUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tunnel_rule_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rule_;
}

void TunnelUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tunnel_rule_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.sequence_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.operation_) -
        reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.operation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tunnel_rule_id = 1 [json_name = "tunnelRuleId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tunnel_rule_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TunnelUpdate.Operation operation = 2 [json_name = "operation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::TunnelUpdate_Operation_IsValid(static_cast<int>(val)))) {
            _internal_set_operation(static_cast<::aalyria::spacetime::api::common::TunnelUpdate_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TunnelRule rule = 3 [json_name = "rule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tunnel_rule_id = 1 [json_name = "tunnelRuleId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_tunnel_rule_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.TunnelUpdate.Operation operation = 2 [json_name = "operation"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_operation(), target);
  }

  // optional .aalyria.spacetime.api.common.TunnelRule rule = 3 [json_name = "rule"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelUpdate)
  return target;
}

::size_t TunnelUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tunnel_rule_id = 1 [json_name = "tunnelRuleId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_tunnel_rule_id());
    }

    // optional .aalyria.spacetime.api.common.TunnelRule rule = 3 [json_name = "rule"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_);
    }

    // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_sequence_number());
    }

    // optional .aalyria.spacetime.api.common.TunnelUpdate.Operation operation = 2 [json_name = "operation"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelUpdate::GetClassData() const { return &_class_data_; }


void TunnelUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelUpdate*>(&to_msg);
  auto& from = static_cast<const TunnelUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tunnel_rule_id(from._internal_tunnel_rule_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rule()->::aalyria::spacetime::api::common::TunnelRule::MergeFrom(
          from._internal_rule());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelUpdate::CopyFrom(const TunnelUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelUpdate::IsInitialized() const {
  return true;
}

void TunnelUpdate::InternalSwap(TunnelUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tunnel_rule_id_, lhs_arena,
                                       &other->_impl_.tunnel_rule_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelUpdate, _impl_.operation_)
      + sizeof(TunnelUpdate::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(TunnelUpdate, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[0]);
}
// ===================================================================

class TunnelRule_EncapRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TunnelRule_EncapRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TunnelRule_EncapRule, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_EncapRule, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::PacketClassifier& classifier(const TunnelRule_EncapRule* msg);
  static void set_has_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_encapsulated_src_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encapsulated_dst_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encapsulated_src_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encapsulated_dst_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aalyria::spacetime::api::common::EspParameters& esp(const TunnelRule_EncapRule* msg);
};

const ::aalyria::spacetime::api::common::PacketClassifier&
TunnelRule_EncapRule::_Internal::classifier(const TunnelRule_EncapRule* msg) {
  return *msg->_impl_.classifier_;
}
const ::aalyria::spacetime::api::common::EspParameters&
TunnelRule_EncapRule::_Internal::esp(const TunnelRule_EncapRule* msg) {
  return *msg->_impl_.parameters_.esp_;
}
void TunnelRule_EncapRule::clear_classifier() {
  if (_impl_.classifier_ != nullptr) _impl_.classifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TunnelRule_EncapRule::set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (esp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esp));
    if (message_arena != submessage_arena) {
      esp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esp, submessage_arena);
    }
    set_has_esp();
    _impl_.parameters_.esp_ = esp;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
}
void TunnelRule_EncapRule::clear_esp() {
  if (parameters_case() == kEsp) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.esp_;
    }
    clear_has_parameters();
  }
}
TunnelRule_EncapRule::TunnelRule_EncapRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelRule.EncapRule)
}
TunnelRule_EncapRule::TunnelRule_EncapRule(const TunnelRule_EncapRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelRule_EncapRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encapsulated_src_ip_) {}

    , decltype(_impl_.encapsulated_dst_ip_) {}

    , decltype(_impl_.classifier_){nullptr}
    , decltype(_impl_.encapsulated_src_port_) {}

    , decltype(_impl_.encapsulated_dst_port_) {}

    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encapsulated_src_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encapsulated_src_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.encapsulated_src_ip_.Set(from._internal_encapsulated_src_ip(), _this->GetArenaForAllocation());
  }
  _impl_.encapsulated_dst_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encapsulated_dst_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.encapsulated_dst_ip_.Set(from._internal_encapsulated_dst_ip(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.classifier_ = new ::aalyria::spacetime::api::common::PacketClassifier(*from._impl_.classifier_);
  }
  ::memcpy(&_impl_.encapsulated_src_port_, &from._impl_.encapsulated_src_port_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.encapsulated_dst_port_) -
    reinterpret_cast<char*>(&_impl_.encapsulated_src_port_)) + sizeof(_impl_.encapsulated_dst_port_));
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspParameters::MergeFrom(
          from._internal_esp());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelRule.EncapRule)
}

inline void TunnelRule_EncapRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encapsulated_src_ip_) {}

    , decltype(_impl_.encapsulated_dst_ip_) {}

    , decltype(_impl_.classifier_){nullptr}
    , decltype(_impl_.encapsulated_src_port_) { 0 }

    , decltype(_impl_.encapsulated_dst_port_) { 0 }

    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.encapsulated_src_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encapsulated_src_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encapsulated_dst_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encapsulated_dst_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_parameters();
}

TunnelRule_EncapRule::~TunnelRule_EncapRule() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelRule_EncapRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encapsulated_src_ip_.Destroy();
  _impl_.encapsulated_dst_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.classifier_;
  if (has_parameters()) {
    clear_parameters();
  }
}

void TunnelRule_EncapRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelRule_EncapRule::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  switch (parameters_case()) {
    case kEsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.esp_;
      }
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}


void TunnelRule_EncapRule::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encapsulated_src_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.encapsulated_dst_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.classifier_ != nullptr);
      _impl_.classifier_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.encapsulated_src_port_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encapsulated_dst_port_) -
        reinterpret_cast<char*>(&_impl_.encapsulated_src_port_)) + sizeof(_impl_.encapsulated_dst_port_));
  }
  clear_parameters();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelRule_EncapRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string encapsulated_src_ip = 2 [json_name = "encapsulatedSrcIp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encapsulated_src_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string encapsulated_dst_ip = 3 [json_name = "encapsulatedDstIp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encapsulated_dst_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 encapsulated_src_port = 4 [json_name = "encapsulatedSrcPort"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_encapsulated_src_port(&has_bits);
          _impl_.encapsulated_src_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 encapsulated_dst_port = 5 [json_name = "encapsulatedDstPort"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_encapsulated_dst_port(&has_bits);
          _impl_.encapsulated_dst_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.EspParameters esp = 6 [json_name = "esp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelRule_EncapRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::classifier(this),
        _Internal::classifier(this).GetCachedSize(), target, stream);
  }

  // optional string encapsulated_src_ip = 2 [json_name = "encapsulatedSrcIp"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_encapsulated_src_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string encapsulated_dst_ip = 3 [json_name = "encapsulatedDstIp"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_encapsulated_dst_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 encapsulated_src_port = 4 [json_name = "encapsulatedSrcPort"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_encapsulated_src_port(), target);
  }

  // optional int32 encapsulated_dst_port = 5 [json_name = "encapsulatedDstPort"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_encapsulated_dst_port(), target);
  }

  // .aalyria.spacetime.api.common.EspParameters esp = 6 [json_name = "esp"];
  if (parameters_case() == kEsp) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::esp(this),
        _Internal::esp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  return target;
}

::size_t TunnelRule_EncapRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string encapsulated_src_ip = 2 [json_name = "encapsulatedSrcIp"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_encapsulated_src_ip());
    }

    // optional string encapsulated_dst_ip = 3 [json_name = "encapsulatedDstIp"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_encapsulated_dst_ip());
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classifier_);
    }

    // optional int32 encapsulated_src_port = 4 [json_name = "encapsulatedSrcPort"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_encapsulated_src_port());
    }

    // optional int32 encapsulated_dst_port = 5 [json_name = "encapsulatedDstPort"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_encapsulated_dst_port());
    }

  }
  switch (parameters_case()) {
    // .aalyria.spacetime.api.common.EspParameters esp = 6 [json_name = "esp"];
    case kEsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.esp_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelRule_EncapRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelRule_EncapRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelRule_EncapRule::GetClassData() const { return &_class_data_; }


void TunnelRule_EncapRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelRule_EncapRule*>(&to_msg);
  auto& from = static_cast<const TunnelRule_EncapRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encapsulated_src_ip(from._internal_encapsulated_src_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_encapsulated_dst_ip(from._internal_encapsulated_dst_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_classifier()->::aalyria::spacetime::api::common::PacketClassifier::MergeFrom(
          from._internal_classifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.encapsulated_src_port_ = from._impl_.encapsulated_src_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.encapsulated_dst_port_ = from._impl_.encapsulated_dst_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.parameters_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspParameters::MergeFrom(
          from._internal_esp());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelRule_EncapRule::CopyFrom(const TunnelRule_EncapRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelRule.EncapRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelRule_EncapRule::IsInitialized() const {
  return true;
}

void TunnelRule_EncapRule::InternalSwap(TunnelRule_EncapRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encapsulated_src_ip_, lhs_arena,
                                       &other->_impl_.encapsulated_src_ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encapsulated_dst_ip_, lhs_arena,
                                       &other->_impl_.encapsulated_dst_ip_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelRule_EncapRule, _impl_.encapsulated_dst_port_)
      + sizeof(TunnelRule_EncapRule::_impl_.encapsulated_dst_port_)
      - PROTOBUF_FIELD_OFFSET(TunnelRule_EncapRule, _impl_.classifier_)>(
          reinterpret_cast<char*>(&_impl_.classifier_),
          reinterpret_cast<char*>(&other->_impl_.classifier_));
  swap(_impl_.parameters_, other->_impl_.parameters_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelRule_EncapRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[1]);
}
// ===================================================================

class TunnelRule_DecapRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TunnelRule_DecapRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TunnelRule_DecapRule, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TunnelRule_DecapRule, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::PacketClassifier& classifier(const TunnelRule_DecapRule* msg);
  static void set_has_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::EspParameters& esp(const TunnelRule_DecapRule* msg);
};

const ::aalyria::spacetime::api::common::PacketClassifier&
TunnelRule_DecapRule::_Internal::classifier(const TunnelRule_DecapRule* msg) {
  return *msg->_impl_.classifier_;
}
const ::aalyria::spacetime::api::common::EspParameters&
TunnelRule_DecapRule::_Internal::esp(const TunnelRule_DecapRule* msg) {
  return *msg->_impl_.parameters_.esp_;
}
void TunnelRule_DecapRule::clear_classifier() {
  if (_impl_.classifier_ != nullptr) _impl_.classifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TunnelRule_DecapRule::set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameters();
  if (esp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esp));
    if (message_arena != submessage_arena) {
      esp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esp, submessage_arena);
    }
    set_has_esp();
    _impl_.parameters_.esp_ = esp;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
}
void TunnelRule_DecapRule::clear_esp() {
  if (parameters_case() == kEsp) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameters_.esp_;
    }
    clear_has_parameters();
  }
}
TunnelRule_DecapRule::TunnelRule_DecapRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelRule.DecapRule)
}
TunnelRule_DecapRule::TunnelRule_DecapRule(const TunnelRule_DecapRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelRule_DecapRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classifier_){nullptr}
    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.classifier_ = new ::aalyria::spacetime::api::common::PacketClassifier(*from._impl_.classifier_);
  }
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspParameters::MergeFrom(
          from._internal_esp());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelRule.DecapRule)
}

inline void TunnelRule_DecapRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classifier_){nullptr}
    , decltype(_impl_.parameters_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_parameters();
}

TunnelRule_DecapRule::~TunnelRule_DecapRule() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelRule_DecapRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.classifier_;
  if (has_parameters()) {
    clear_parameters();
  }
}

void TunnelRule_DecapRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelRule_DecapRule::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  switch (parameters_case()) {
    case kEsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameters_.esp_;
      }
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}


void TunnelRule_DecapRule::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.classifier_ != nullptr);
    _impl_.classifier_->Clear();
  }
  clear_parameters();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelRule_DecapRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.EspParameters esp = 2 [json_name = "esp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelRule_DecapRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::classifier(this),
        _Internal::classifier(this).GetCachedSize(), target, stream);
  }

  // .aalyria.spacetime.api.common.EspParameters esp = 2 [json_name = "esp"];
  if (parameters_case() == kEsp) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::esp(this),
        _Internal::esp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  return target;
}

::size_t TunnelRule_DecapRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.classifier_);
  }

  switch (parameters_case()) {
    // .aalyria.spacetime.api.common.EspParameters esp = 2 [json_name = "esp"];
    case kEsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameters_.esp_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelRule_DecapRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelRule_DecapRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelRule_DecapRule::GetClassData() const { return &_class_data_; }


void TunnelRule_DecapRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelRule_DecapRule*>(&to_msg);
  auto& from = static_cast<const TunnelRule_DecapRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_classifier()->::aalyria::spacetime::api::common::PacketClassifier::MergeFrom(
        from._internal_classifier());
  }
  switch (from.parameters_case()) {
    case kEsp: {
      _this->_internal_mutable_esp()->::aalyria::spacetime::api::common::EspParameters::MergeFrom(
          from._internal_esp());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelRule_DecapRule::CopyFrom(const TunnelRule_DecapRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelRule.DecapRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelRule_DecapRule::IsInitialized() const {
  return true;
}

void TunnelRule_DecapRule::InternalSwap(TunnelRule_DecapRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.classifier_, other->_impl_.classifier_);
  swap(_impl_.parameters_, other->_impl_.parameters_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelRule_DecapRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[2]);
}
// ===================================================================

class TunnelRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TunnelRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TunnelRule, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TunnelRule_EncapRule& encap_rule(const TunnelRule* msg);
  static void set_has_encap_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TunnelRule_DecapRule& decap_rule(const TunnelRule* msg);
  static void set_has_decap_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::TunnelRule_EncapRule&
TunnelRule::_Internal::encap_rule(const TunnelRule* msg) {
  return *msg->_impl_.encap_rule_;
}
const ::aalyria::spacetime::api::common::TunnelRule_DecapRule&
TunnelRule::_Internal::decap_rule(const TunnelRule* msg) {
  return *msg->_impl_.decap_rule_;
}
TunnelRule::TunnelRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelRule)
}
TunnelRule::TunnelRule(const TunnelRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encap_rule_){nullptr}
    , decltype(_impl_.decap_rule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.encap_rule_ = new ::aalyria::spacetime::api::common::TunnelRule_EncapRule(*from._impl_.encap_rule_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.decap_rule_ = new ::aalyria::spacetime::api::common::TunnelRule_DecapRule(*from._impl_.decap_rule_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelRule)
}

inline void TunnelRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encap_rule_){nullptr}
    , decltype(_impl_.decap_rule_){nullptr}
  };
}

TunnelRule::~TunnelRule() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.encap_rule_;
  if (this != internal_default_instance()) delete _impl_.decap_rule_;
}

void TunnelRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelRule::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.encap_rule_ != nullptr);
      _impl_.encap_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.decap_rule_ != nullptr);
      _impl_.decap_rule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TunnelRule.EncapRule encap_rule = 10 [json_name = "encapRule"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TunnelRule.DecapRule decap_rule = 11 [json_name = "decapRule"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_decap_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TunnelRule.EncapRule encap_rule = 10 [json_name = "encapRule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::encap_rule(this),
        _Internal::encap_rule(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TunnelRule.DecapRule decap_rule = 11 [json_name = "decapRule"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::decap_rule(this),
        _Internal::decap_rule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelRule)
  return target;
}

::size_t TunnelRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.TunnelRule.EncapRule encap_rule = 10 [json_name = "encapRule"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encap_rule_);
    }

    // optional .aalyria.spacetime.api.common.TunnelRule.DecapRule decap_rule = 11 [json_name = "decapRule"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decap_rule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelRule::GetClassData() const { return &_class_data_; }


void TunnelRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelRule*>(&to_msg);
  auto& from = static_cast<const TunnelRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_encap_rule()->::aalyria::spacetime::api::common::TunnelRule_EncapRule::MergeFrom(
          from._internal_encap_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_decap_rule()->::aalyria::spacetime::api::common::TunnelRule_DecapRule::MergeFrom(
          from._internal_decap_rule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelRule::CopyFrom(const TunnelRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelRule::IsInitialized() const {
  return true;
}

void TunnelRule::InternalSwap(TunnelRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelRule, _impl_.decap_rule_)
      + sizeof(TunnelRule::_impl_.decap_rule_)
      - PROTOBUF_FIELD_OFFSET(TunnelRule, _impl_.encap_rule_)>(
          reinterpret_cast<char*>(&_impl_.encap_rule_),
          reinterpret_cast<char*>(&other->_impl_.encap_rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[3]);
}
// ===================================================================

class TunnelStates::_Internal {
 public:
  using HasBits = decltype(std::declval<TunnelStates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TunnelStates, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const TunnelStates* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
TunnelStates::_Internal::timestamp(const TunnelStates* msg) {
  return *msg->_impl_.timestamp_;
}
void TunnelStates::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TunnelStates::TunnelStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TunnelStates)
}
TunnelStates::TunnelStates(const TunnelStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TunnelStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tunnel_rule_ids_){from._impl_.tunnel_rule_ids_}
    , decltype(_impl_.timestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TunnelStates)
}

inline void TunnelStates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tunnel_rule_ids_){arena}
    , decltype(_impl_.timestamp_){nullptr}
  };
}

TunnelStates::~TunnelStates() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TunnelStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TunnelStates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tunnel_rule_ids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void TunnelStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TunnelStates::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TunnelStates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tunnel_rule_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tunnel_rule_ids = 3 [json_name = "tunnelRuleIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tunnel_rule_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TunnelStates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TunnelStates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated string tunnel_rule_ids = 3 [json_name = "tunnelRuleIds"];
  for (int i = 0, n = this->_internal_tunnel_rule_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_tunnel_rule_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TunnelStates)
  return target;
}

::size_t TunnelStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TunnelStates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tunnel_rule_ids = 3 [json_name = "tunnelRuleIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tunnel_rule_ids().size());
  for (int i = 0, n = _internal_tunnel_rule_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tunnel_rule_ids().Get(i));
  }

  // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TunnelStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TunnelStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TunnelStates::GetClassData() const { return &_class_data_; }


void TunnelStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TunnelStates*>(&to_msg);
  auto& from = static_cast<const TunnelStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TunnelStates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tunnel_rule_ids()->MergeFrom(from._internal_tunnel_rule_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TunnelStates::CopyFrom(const TunnelStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TunnelStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelStates::IsInitialized() const {
  return true;
}

void TunnelStates::InternalSwap(TunnelStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_tunnel_rule_ids()->InternalSwap(
      other->_internal_mutable_tunnel_rule_ids());
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5ftunnel_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelRule_EncapRule*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelRule_EncapRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelRule_EncapRule >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelRule_DecapRule*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelRule_DecapRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelRule_DecapRule >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelRule*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelRule >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TunnelStates*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TunnelStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TunnelStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

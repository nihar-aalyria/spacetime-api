// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/platform.proto

#include "api/common/platform.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR PlatformDefinition::PlatformDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transceiver_model_)*/{}
  , /*decltype(_impl_.bent_pipe_payloads_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.motion_ref_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.adsb_transponder_)*/nullptr
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_.motion_source_)*/ 0

  , /*decltype(_impl_.norad_id_)*/ 0u
} {}
struct PlatformDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatformDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatformDefinitionDefaultTypeInternal() {}
  union {
    PlatformDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatformDefinitionDefaultTypeInternal _PlatformDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AdsbTransponder::AdsbTransponder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.aircraft_identification_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.icao_aircraft_address_)*/ 0u
} {}
struct AdsbTransponderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdsbTransponderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdsbTransponderDefaultTypeInternal() {}
  union {
    AdsbTransponder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdsbTransponderDefaultTypeInternal _AdsbTransponder_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fplatform_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fplatform_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fplatform_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fplatform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.coordinates_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.motion_source_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.motion_ref_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.transceiver_model_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.bent_pipe_payloads_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.adsb_transponder_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PlatformDefinition, _impl_.norad_id_),
    0,
    2,
    4,
    5,
    1,
    ~0u,
    ~0u,
    3,
    6,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdsbTransponder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdsbTransponder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdsbTransponder, _impl_.icao_aircraft_address_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdsbTransponder, _impl_.aircraft_identification_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::aalyria::spacetime::api::common::PlatformDefinition)},
        { 26, 36, -1, sizeof(::aalyria::spacetime::api::common::AdsbTransponder)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_PlatformDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::common::_AdsbTransponder_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fplatform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031api/common/platform.proto\022\034aalyria.spa"
    "cetime.api.common\032\032api/common/bent_pipe."
    "proto\032\034api/common/coordinates.proto\032%api"
    "/common/wireless_transceiver.proto\"\265\005\n\022P"
    "latformDefinition\022\022\n\004name\030\002 \001(\tR\004name\022\022\n"
    "\004type\030\014 \001(\tR\004type\022F\n\013coordinates\030\016 \001(\0132$"
    ".aalyria.spacetime.api.common.MotionR\013co"
    "ordinates\022b\n\rmotion_source\030\020 \001(\0162=.aalyr"
    "ia.spacetime.api.common.PlatformDefiniti"
    "on.MotionSourceR\014motionSource\022\"\n\rmotion_"
    "ref_id\030\004 \001(\tR\013motionRefId\022[\n\021transceiver"
    "_model\030\017 \003(\0132..aalyria.spacetime.api.com"
    "mon.TransceiverModelR\020transceiverModel\022["
    "\n\022bent_pipe_payloads\030\022 \003(\0132-.aalyria.spa"
    "cetime.api.common.BentPipePayloadR\020bentP"
    "ipePayloads\022X\n\020adsb_transponder\030\r \001(\0132-."
    "aalyria.spacetime.api.common.AdsbTranspo"
    "nderR\017adsbTransponder\022\031\n\010norad_id\030\021 \001(\rR"
    "\007noradId\"J\n\014MotionSource\022\022\n\016UNKNOWN_SOUR"
    "CE\020\000\022\022\n\016SPACETRACK_ORG\020\001\022\022\n\016FLIGHTRADAR_"
    "24\020\002J\004\010\001\020\002J\004\010\005\020\010J\004\010\010\020\tJ\004\010\t\020\nJ\004\010\n\020\013J\004\010\013\020\014"
    "J\010\010\023\020\200\200\200\200\002\"\210\001\n\017AdsbTransponder\0222\n\025icao_a"
    "ircraft_address\030\001 \001(\rR\023icaoAircraftAddre"
    "ss\0227\n\027aircraft_identification\030\002 \001(\tR\026air"
    "craftIdentificationJ\010\010\003\020\200\200\200\200\002BD\n com.aal"
    "yria.spacetime.api.commonZ aalyria.com/s"
    "pacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fplatform_2eproto_deps[3] =
    {
        &::descriptor_table_api_2fcommon_2fbent_5fpipe_2eproto,
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fplatform_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fplatform_2eproto = {
    false,
    false,
    1059,
    descriptor_table_protodef_api_2fcommon_2fplatform_2eproto,
    "api/common/platform.proto",
    &descriptor_table_api_2fcommon_2fplatform_2eproto_once,
    descriptor_table_api_2fcommon_2fplatform_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fplatform_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fplatform_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fplatform_2eproto,
    file_level_service_descriptors_api_2fcommon_2fplatform_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fplatform_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fplatform_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fplatform_2eproto(&descriptor_table_api_2fcommon_2fplatform_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlatformDefinition_MotionSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fplatform_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fplatform_2eproto[0];
}
bool PlatformDefinition_MotionSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PlatformDefinition_MotionSource PlatformDefinition::UNKNOWN_SOURCE;
constexpr PlatformDefinition_MotionSource PlatformDefinition::SPACETRACK_ORG;
constexpr PlatformDefinition_MotionSource PlatformDefinition::FLIGHTRADAR_24;
constexpr PlatformDefinition_MotionSource PlatformDefinition::MotionSource_MIN;
constexpr PlatformDefinition_MotionSource PlatformDefinition::MotionSource_MAX;
constexpr int PlatformDefinition::MotionSource_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PlatformDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<PlatformDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlatformDefinition, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::Motion& coordinates(const PlatformDefinition* msg);
  static void set_has_coordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_motion_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_motion_ref_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::AdsbTransponder& adsb_transponder(const PlatformDefinition* msg);
  static void set_has_adsb_transponder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_norad_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::aalyria::spacetime::api::common::Motion&
PlatformDefinition::_Internal::coordinates(const PlatformDefinition* msg) {
  return *msg->_impl_.coordinates_;
}
const ::aalyria::spacetime::api::common::AdsbTransponder&
PlatformDefinition::_Internal::adsb_transponder(const PlatformDefinition* msg) {
  return *msg->_impl_.adsb_transponder_;
}
void PlatformDefinition::clear_coordinates() {
  if (_impl_.coordinates_ != nullptr) _impl_.coordinates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void PlatformDefinition::clear_transceiver_model() {
  _internal_mutable_transceiver_model()->Clear();
}
void PlatformDefinition::clear_bent_pipe_payloads() {
  _internal_mutable_bent_pipe_payloads()->Clear();
}
PlatformDefinition::PlatformDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PlatformDefinition)
}
PlatformDefinition::PlatformDefinition(const PlatformDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlatformDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_model_){from._impl_.transceiver_model_}
    , decltype(_impl_.bent_pipe_payloads_){from._impl_.bent_pipe_payloads_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.motion_ref_id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.adsb_transponder_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.motion_source_) {}

    , decltype(_impl_.norad_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.motion_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.motion_ref_id_.Set(from._internal_motion_ref_id(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.adsb_transponder_ = new ::aalyria::spacetime::api::common::AdsbTransponder(*from._impl_.adsb_transponder_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.coordinates_ = new ::aalyria::spacetime::api::common::Motion(*from._impl_.coordinates_);
  }
  ::memcpy(&_impl_.motion_source_, &from._impl_.motion_source_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.norad_id_) -
    reinterpret_cast<char*>(&_impl_.motion_source_)) + sizeof(_impl_.norad_id_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PlatformDefinition)
}

inline void PlatformDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_model_){arena}
    , decltype(_impl_.bent_pipe_payloads_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.motion_ref_id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.adsb_transponder_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.motion_source_) { 0 }

    , decltype(_impl_.norad_id_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motion_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlatformDefinition::~PlatformDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PlatformDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatformDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_transceiver_model()->~RepeatedPtrField();
  _internal_mutable_bent_pipe_payloads()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.motion_ref_id_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.adsb_transponder_;
  if (this != internal_default_instance()) delete _impl_.coordinates_;
}

void PlatformDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlatformDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PlatformDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_transceiver_model()->Clear();
  _internal_mutable_bent_pipe_payloads()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motion_ref_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.adsb_transponder_ != nullptr);
      _impl_.adsb_transponder_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.coordinates_ != nullptr);
      _impl_.coordinates_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.motion_source_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.norad_id_) -
        reinterpret_cast<char*>(&_impl_.motion_source_)) + sizeof(_impl_.norad_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatformDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PlatformDefinition.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string motion_ref_id = 4 [json_name = "motionRefId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_motion_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string type = 12 [json_name = "type"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PlatformDefinition.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 13 [json_name = "adsbTransponder"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_adsb_transponder(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Motion coordinates = 14 [json_name = "coordinates"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.TransceiverModel transceiver_model = 15 [json_name = "transceiverModel"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PlatformDefinition.MotionSource motion_source = 16 [json_name = "motionSource"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource_IsValid(static_cast<int>(val)))) {
            _internal_set_motion_source(static_cast<::aalyria::spacetime::api::common::PlatformDefinition_MotionSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 norad_id = 17 [json_name = "noradId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_norad_id(&has_bits);
          _impl_.norad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.BentPipePayload bent_pipe_payloads = 18 [json_name = "bentPipePayloads"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bent_pipe_payloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlatformDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PlatformDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 2 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.PlatformDefinition.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string motion_ref_id = 4 [json_name = "motionRefId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_motion_ref_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string type = 12 [json_name = "type"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.PlatformDefinition.type");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 13 [json_name = "adsbTransponder"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::adsb_transponder(this),
        _Internal::adsb_transponder(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.Motion coordinates = 14 [json_name = "coordinates"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.TransceiverModel transceiver_model = 15 [json_name = "transceiverModel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_model_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_model(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PlatformDefinition.MotionSource motion_source = 16 [json_name = "motionSource"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_motion_source(), target);
  }

  // optional uint32 norad_id = 17 [json_name = "noradId"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_norad_id(), target);
  }

  // repeated .aalyria.spacetime.api.common.BentPipePayload bent_pipe_payloads = 18 [json_name = "bentPipePayloads"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bent_pipe_payloads_size()); i < n; i++) {
    const auto& repfield = this->_internal_bent_pipe_payloads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PlatformDefinition)
  return target;
}

::size_t PlatformDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PlatformDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.TransceiverModel transceiver_model = 15 [json_name = "transceiverModel"];
  total_size += 1UL * this->_internal_transceiver_model_size();
  for (const auto& msg : this->_internal_transceiver_model()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.BentPipePayload bent_pipe_payloads = 18 [json_name = "bentPipePayloads"];
  total_size += 2UL * this->_internal_bent_pipe_payloads_size();
  for (const auto& msg : this->_internal_bent_pipe_payloads()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string motion_ref_id = 4 [json_name = "motionRefId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_motion_ref_id());
    }

    // optional string type = 12 [json_name = "type"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 13 [json_name = "adsbTransponder"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adsb_transponder_);
    }

    // optional .aalyria.spacetime.api.common.Motion coordinates = 14 [json_name = "coordinates"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coordinates_);
    }

    // optional .aalyria.spacetime.api.common.PlatformDefinition.MotionSource motion_source = 16 [json_name = "motionSource"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_motion_source());
    }

    // optional uint32 norad_id = 17 [json_name = "noradId"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_norad_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatformDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlatformDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatformDefinition::GetClassData() const { return &_class_data_; }


void PlatformDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlatformDefinition*>(&to_msg);
  auto& from = static_cast<const PlatformDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PlatformDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transceiver_model()->MergeFrom(from._internal_transceiver_model());
  _this->_internal_mutable_bent_pipe_payloads()->MergeFrom(from._internal_bent_pipe_payloads());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_motion_ref_id(from._internal_motion_ref_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_adsb_transponder()->::aalyria::spacetime::api::common::AdsbTransponder::MergeFrom(
          from._internal_adsb_transponder());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_coordinates()->::aalyria::spacetime::api::common::Motion::MergeFrom(
          from._internal_coordinates());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.motion_source_ = from._impl_.motion_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.norad_id_ = from._impl_.norad_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatformDefinition::CopyFrom(const PlatformDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PlatformDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformDefinition::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_model()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_bent_pipe_payloads()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!_impl_.coordinates_->IsInitialized()) return false;
  }
  return true;
}

void PlatformDefinition::InternalSwap(PlatformDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_transceiver_model()->InternalSwap(other->_internal_mutable_transceiver_model());
  _internal_mutable_bent_pipe_payloads()->InternalSwap(other->_internal_mutable_bent_pipe_payloads());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.motion_ref_id_, lhs_arena,
                                       &other->_impl_.motion_ref_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlatformDefinition, _impl_.norad_id_)
      + sizeof(PlatformDefinition::_impl_.norad_id_)
      - PROTOBUF_FIELD_OFFSET(PlatformDefinition, _impl_.adsb_transponder_)>(
          reinterpret_cast<char*>(&_impl_.adsb_transponder_),
          reinterpret_cast<char*>(&other->_impl_.adsb_transponder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatformDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fplatform_2eproto_getter, &descriptor_table_api_2fcommon_2fplatform_2eproto_once,
      file_level_metadata_api_2fcommon_2fplatform_2eproto[0]);
}
// ===================================================================

class AdsbTransponder::_Internal {
 public:
  using HasBits = decltype(std::declval<AdsbTransponder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AdsbTransponder, _impl_._has_bits_);
  static void set_has_icao_aircraft_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aircraft_identification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdsbTransponder::AdsbTransponder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AdsbTransponder)
}
AdsbTransponder::AdsbTransponder(const AdsbTransponder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdsbTransponder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aircraft_identification_) {}

    , decltype(_impl_.icao_aircraft_address_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.aircraft_identification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.aircraft_identification_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.aircraft_identification_.Set(from._internal_aircraft_identification(), _this->GetArenaForAllocation());
  }
  _this->_impl_.icao_aircraft_address_ = from._impl_.icao_aircraft_address_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AdsbTransponder)
}

inline void AdsbTransponder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aircraft_identification_) {}

    , decltype(_impl_.icao_aircraft_address_) { 0u }

  };
  _impl_.aircraft_identification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.aircraft_identification_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdsbTransponder::~AdsbTransponder() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AdsbTransponder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdsbTransponder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aircraft_identification_.Destroy();
}

void AdsbTransponder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdsbTransponder::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AdsbTransponder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.aircraft_identification_.ClearNonDefaultToEmpty();
  }
  _impl_.icao_aircraft_address_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdsbTransponder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 icao_aircraft_address = 1 [json_name = "icaoAircraftAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_icao_aircraft_address(&has_bits);
          _impl_.icao_aircraft_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string aircraft_identification = 2 [json_name = "aircraftIdentification"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_aircraft_identification();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdsbTransponder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AdsbTransponder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 icao_aircraft_address = 1 [json_name = "icaoAircraftAddress"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_icao_aircraft_address(), target);
  }

  // optional string aircraft_identification = 2 [json_name = "aircraftIdentification"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_aircraft_identification();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AdsbTransponder)
  return target;
}

::size_t AdsbTransponder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AdsbTransponder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string aircraft_identification = 2 [json_name = "aircraftIdentification"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_aircraft_identification());
    }

    // optional uint32 icao_aircraft_address = 1 [json_name = "icaoAircraftAddress"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_icao_aircraft_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdsbTransponder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdsbTransponder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdsbTransponder::GetClassData() const { return &_class_data_; }


void AdsbTransponder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdsbTransponder*>(&to_msg);
  auto& from = static_cast<const AdsbTransponder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AdsbTransponder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_aircraft_identification(from._internal_aircraft_identification());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.icao_aircraft_address_ = from._impl_.icao_aircraft_address_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdsbTransponder::CopyFrom(const AdsbTransponder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AdsbTransponder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdsbTransponder::IsInitialized() const {
  return true;
}

void AdsbTransponder::InternalSwap(AdsbTransponder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.aircraft_identification_, lhs_arena,
                                       &other->_impl_.aircraft_identification_, rhs_arena);

  swap(_impl_.icao_aircraft_address_, other->_impl_.icao_aircraft_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdsbTransponder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fplatform_2eproto_getter, &descriptor_table_api_2fcommon_2fplatform_2eproto_once,
      file_level_metadata_api_2fcommon_2fplatform_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PlatformDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PlatformDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PlatformDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AdsbTransponder*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AdsbTransponder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AdsbTransponder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

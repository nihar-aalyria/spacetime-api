// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_transceiver.proto

#include "api/common/wireless_transceiver.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR TransceiverModel_Impairment::TransceiverModel_Impairment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reason_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_usec_)*/ ::int64_t{0}
} {}
struct TransceiverModel_ImpairmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransceiverModel_ImpairmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransceiverModel_ImpairmentDefaultTypeInternal() {}
  union {
    TransceiverModel_Impairment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransceiverModel_ImpairmentDefaultTypeInternal _TransceiverModel_Impairment_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransceiverModel::TransceiverModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.macs_)*/{}
  , /*decltype(_impl_.operational_impairments_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmitter_)*/nullptr
  , /*decltype(_impl_.receiver_)*/nullptr
  , /*decltype(_impl_.tx_rx_channel_spacing_)*/nullptr
  , /*decltype(_impl_.antenna_)*/nullptr} {}
struct TransceiverModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransceiverModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransceiverModelDefaultTypeInternal() {}
  union {
    TransceiverModel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransceiverModelDefaultTypeInternal _TransceiverModel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransceiverModelId::TransceiverModelId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.platform_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transceiver_model_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct TransceiverModelIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransceiverModelIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransceiverModelIdDefaultTypeInternal() {}
  union {
    TransceiverModelId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransceiverModelIdDefaultTypeInternal _TransceiverModelId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CenterFrequencySpacing::CenterFrequencySpacing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_center_frequency_spacing_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_center_frequency_spacing_hz_)*/ ::uint64_t{0u}
} {}
struct CenterFrequencySpacingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CenterFrequencySpacingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CenterFrequencySpacingDefaultTypeInternal() {}
  union {
    CenterFrequencySpacing _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CenterFrequencySpacingDefaultTypeInternal _CenterFrequencySpacing_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessMac::WirelessMac(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.role_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_connections_)*/ 0
} {}
struct WirelessMacDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessMacDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessMacDefaultTypeInternal() {}
  union {
    WirelessMac _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessMacDefaultTypeInternal _WirelessMac_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fwireless_5ftransceiver_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fwireless_5ftransceiver_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel_Impairment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel_Impairment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel_Impairment, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel_Impairment, _impl_.timestamp_usec_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel_Impairment, _impl_.reason_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.transmitter_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.tx_rx_channel_spacing_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.antenna_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.macs_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModel, _impl_.operational_impairments_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModelId, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModelId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModelId, _impl_.platform_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransceiverModelId, _impl_.transceiver_model_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CenterFrequencySpacing, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CenterFrequencySpacing, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CenterFrequencySpacing, _impl_.min_center_frequency_spacing_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CenterFrequencySpacing, _impl_.max_center_frequency_spacing_hz_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _internal_metadata_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _impl_._extensions_),
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WirelessMac, _impl_.max_connections_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::aalyria::spacetime::api::common::TransceiverModel_Impairment)},
        { 14, 29, -1, sizeof(::aalyria::spacetime::api::common::TransceiverModel)},
        { 36, 46, -1, sizeof(::aalyria::spacetime::api::common::TransceiverModelId)},
        { 48, 58, -1, sizeof(::aalyria::spacetime::api::common::CenterFrequencySpacing)},
        { 60, 71, -1, sizeof(::aalyria::spacetime::api::common::WirelessMac)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_TransceiverModel_Impairment_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TransceiverModel_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TransceiverModelId_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CenterFrequencySpacing_default_instance_._instance,
    &::aalyria::spacetime::api::common::_WirelessMac_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fwireless_5ftransceiver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%api/common/wireless_transceiver.proto\022"
    "\034aalyria.spacetime.api.common\032!api/commo"
    "n/platform_antenna.proto\032\"api/common/wir"
    "eless_receiver.proto\032%api/common/wireles"
    "s_transmitter.proto\"\213\005\n\020TransceiverModel"
    "\022\016\n\002id\030\001 \001(\tR\002id\022U\n\013transmitter\030\002 \001(\01323."
    "aalyria.spacetime.api.common.Transmitter"
    "DefinitionR\013transmitter\022L\n\010receiver\030\003 \001("
    "\01320.aalyria.spacetime.api.common.Receive"
    "rDefinitionR\010receiver\022g\n\025tx_rx_channel_s"
    "pacing\030\004 \001(\01324.aalyria.spacetime.api.com"
    "mon.CenterFrequencySpacingR\022txRxChannelS"
    "pacing\022I\n\007antenna\030\005 \001(\0132/.aalyria.spacet"
    "ime.api.common.AntennaDefinitionR\007antenn"
    "a\022=\n\004macs\030\006 \003(\0132).aalyria.spacetime.api."
    "common.WirelessMacR\004macs\022r\n\027operational_"
    "impairments\030\007 \003(\01329.aalyria.spacetime.ap"
    "i.common.TransceiverModel.ImpairmentR\026op"
    "erationalImpairments\032[\n\nImpairment\022\016\n\002id"
    "\030\001 \001(\tR\002id\022%\n\016timestamp_usec\030\003 \001(\003R\rtime"
    "stampUsec\022\026\n\006reason\030\004 \001(\tR\006reason\"g\n\022Tra"
    "nsceiverModelId\022\037\n\013platform_id\030\001 \001(\tR\npl"
    "atformId\0220\n\024transceiver_model_id\030\002 \001(\tR\022"
    "transceiverModelId\"\244\001\n\026CenterFrequencySp"
    "acing\022D\n\037min_center_frequency_spacing_hz"
    "\030\001 \001(\004R\033minCenterFrequencySpacingHz\022D\n\037m"
    "ax_center_frequency_spacing_hz\030\002 \001(\004R\033ma"
    "xCenterFrequencySpacingHz\"h\n\013WirelessMac"
    "\022\022\n\004type\030\001 \001(\tR\004type\022\022\n\004role\030\002 \001(\tR\004role"
    "\022\'\n\017max_connections\030\003 \001(\005R\016maxConnection"
    "s*\010\010d\020\200\200\200\200\002BD\n com.aalyria.spacetime.api"
    ".commonZ aalyria.com/spacetime/api/commo"
    "n"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_deps[3] =
    {
        &::descriptor_table_api_2fcommon_2fplatform_5fantenna_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5freceiver_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto = {
    false,
    false,
    1281,
    descriptor_table_protodef_api_2fcommon_2fwireless_5ftransceiver_2eproto,
    "api/common/wireless_transceiver.proto",
    &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
    descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fwireless_5ftransceiver_2eproto,
    file_level_service_descriptors_api_2fcommon_2fwireless_5ftransceiver_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fwireless_5ftransceiver_2eproto(&descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class TransceiverModel_Impairment::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiverModel_Impairment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransceiverModel_Impairment, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TransceiverModel_Impairment::TransceiverModel_Impairment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransceiverModel.Impairment)
}
TransceiverModel_Impairment::TransceiverModel_Impairment(const TransceiverModel_Impairment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransceiverModel_Impairment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.timestamp_usec_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_usec_ = from._impl_.timestamp_usec_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransceiverModel.Impairment)
}

inline void TransceiverModel_Impairment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.timestamp_usec_) { ::int64_t{0} }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransceiverModel_Impairment::~TransceiverModel_Impairment() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransceiverModel_Impairment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.reason_.Destroy();
}

void TransceiverModel_Impairment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransceiverModel_Impairment::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.timestamp_usec_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransceiverModel_Impairment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransceiverModel.Impairment.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          _impl_.timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string reason = 4 [json_name = "reason"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransceiverModel.Impairment.reason");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransceiverModel_Impairment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransceiverModel.Impairment.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_timestamp_usec(), target);
  }

  // optional string reason = 4 [json_name = "reason"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_reason();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransceiverModel.Impairment.reason");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  return target;
}

::size_t TransceiverModel_Impairment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional string reason = 4 [json_name = "reason"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_reason());
    }

    // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransceiverModel_Impairment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransceiverModel_Impairment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransceiverModel_Impairment::GetClassData() const { return &_class_data_; }


void TransceiverModel_Impairment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransceiverModel_Impairment*>(&to_msg);
  auto& from = static_cast<const TransceiverModel_Impairment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_usec_ = from._impl_.timestamp_usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransceiverModel_Impairment::CopyFrom(const TransceiverModel_Impairment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransceiverModel.Impairment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiverModel_Impairment::IsInitialized() const {
  return true;
}

void TransceiverModel_Impairment::InternalSwap(TransceiverModel_Impairment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);

  swap(_impl_.timestamp_usec_, other->_impl_.timestamp_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiverModel_Impairment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[0]);
}
// ===================================================================

class TransceiverModel::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiverModel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransceiverModel, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TransmitterDefinition& transmitter(const TransceiverModel* msg);
  static void set_has_transmitter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::ReceiverDefinition& receiver(const TransceiverModel* msg);
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::CenterFrequencySpacing& tx_rx_channel_spacing(const TransceiverModel* msg);
  static void set_has_tx_rx_channel_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::AntennaDefinition& antenna(const TransceiverModel* msg);
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::aalyria::spacetime::api::common::TransmitterDefinition&
TransceiverModel::_Internal::transmitter(const TransceiverModel* msg) {
  return *msg->_impl_.transmitter_;
}
const ::aalyria::spacetime::api::common::ReceiverDefinition&
TransceiverModel::_Internal::receiver(const TransceiverModel* msg) {
  return *msg->_impl_.receiver_;
}
const ::aalyria::spacetime::api::common::CenterFrequencySpacing&
TransceiverModel::_Internal::tx_rx_channel_spacing(const TransceiverModel* msg) {
  return *msg->_impl_.tx_rx_channel_spacing_;
}
const ::aalyria::spacetime::api::common::AntennaDefinition&
TransceiverModel::_Internal::antenna(const TransceiverModel* msg) {
  return *msg->_impl_.antenna_;
}
void TransceiverModel::clear_transmitter() {
  if (_impl_.transmitter_ != nullptr) _impl_.transmitter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TransceiverModel::clear_receiver() {
  if (_impl_.receiver_ != nullptr) _impl_.receiver_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TransceiverModel::clear_antenna() {
  if (_impl_.antenna_ != nullptr) _impl_.antenna_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TransceiverModel::TransceiverModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransceiverModel)
}
TransceiverModel::TransceiverModel(const TransceiverModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransceiverModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macs_){from._impl_.macs_}
    , decltype(_impl_.operational_impairments_){from._impl_.operational_impairments_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transmitter_){nullptr}
    , decltype(_impl_.receiver_){nullptr}
    , decltype(_impl_.tx_rx_channel_spacing_){nullptr}
    , decltype(_impl_.antenna_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transmitter_ = new ::aalyria::spacetime::api::common::TransmitterDefinition(*from._impl_.transmitter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.receiver_ = new ::aalyria::spacetime::api::common::ReceiverDefinition(*from._impl_.receiver_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.tx_rx_channel_spacing_ = new ::aalyria::spacetime::api::common::CenterFrequencySpacing(*from._impl_.tx_rx_channel_spacing_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.antenna_ = new ::aalyria::spacetime::api::common::AntennaDefinition(*from._impl_.antenna_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransceiverModel)
}

inline void TransceiverModel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macs_){arena}
    , decltype(_impl_.operational_impairments_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transmitter_){nullptr}
    , decltype(_impl_.receiver_){nullptr}
    , decltype(_impl_.tx_rx_channel_spacing_){nullptr}
    , decltype(_impl_.antenna_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransceiverModel::~TransceiverModel() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransceiverModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransceiverModel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_macs()->~RepeatedPtrField();
  _internal_mutable_operational_impairments()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transmitter_;
  if (this != internal_default_instance()) delete _impl_.receiver_;
  if (this != internal_default_instance()) delete _impl_.tx_rx_channel_spacing_;
  if (this != internal_default_instance()) delete _impl_.antenna_;
}

void TransceiverModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransceiverModel::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransceiverModel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_macs()->Clear();
  _internal_mutable_operational_impairments()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transmitter_ != nullptr);
      _impl_.transmitter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.receiver_ != nullptr);
      _impl_.receiver_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.tx_rx_channel_spacing_ != nullptr);
      _impl_.tx_rx_channel_spacing_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.antenna_ != nullptr);
      _impl_.antenna_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransceiverModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransceiverModel.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ReceiverDefinition receiver = 3 [json_name = "receiver"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.CenterFrequencySpacing tx_rx_channel_spacing = 4 [json_name = "txRxChannelSpacing"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_rx_channel_spacing(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.AntennaDefinition antenna = 5 [json_name = "antenna"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_antenna(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.WirelessMac macs = 6 [json_name = "macs"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_macs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.TransceiverModel.Impairment operational_impairments = 7 [json_name = "operationalImpairments"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operational_impairments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransceiverModel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransceiverModel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransceiverModel.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transmitter(this),
        _Internal::transmitter(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ReceiverDefinition receiver = 3 [json_name = "receiver"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::receiver(this),
        _Internal::receiver(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.CenterFrequencySpacing tx_rx_channel_spacing = 4 [json_name = "txRxChannelSpacing"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tx_rx_channel_spacing(this),
        _Internal::tx_rx_channel_spacing(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.AntennaDefinition antenna = 5 [json_name = "antenna"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::antenna(this),
        _Internal::antenna(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.WirelessMac macs = 6 [json_name = "macs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_macs_size()); i < n; i++) {
    const auto& repfield = this->_internal_macs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.TransceiverModel.Impairment operational_impairments = 7 [json_name = "operationalImpairments"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operational_impairments_size()); i < n; i++) {
    const auto& repfield = this->_internal_operational_impairments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransceiverModel)
  return target;
}

::size_t TransceiverModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransceiverModel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.WirelessMac macs = 6 [json_name = "macs"];
  total_size += 1UL * this->_internal_macs_size();
  for (const auto& msg : this->_internal_macs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.TransceiverModel.Impairment operational_impairments = 7 [json_name = "operationalImpairments"];
  total_size += 1UL * this->_internal_operational_impairments_size();
  for (const auto& msg : this->_internal_operational_impairments()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional .aalyria.spacetime.api.common.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transmitter_);
    }

    // optional .aalyria.spacetime.api.common.ReceiverDefinition receiver = 3 [json_name = "receiver"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.receiver_);
    }

    // optional .aalyria.spacetime.api.common.CenterFrequencySpacing tx_rx_channel_spacing = 4 [json_name = "txRxChannelSpacing"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_rx_channel_spacing_);
    }

    // optional .aalyria.spacetime.api.common.AntennaDefinition antenna = 5 [json_name = "antenna"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.antenna_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransceiverModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransceiverModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransceiverModel::GetClassData() const { return &_class_data_; }


void TransceiverModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransceiverModel*>(&to_msg);
  auto& from = static_cast<const TransceiverModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransceiverModel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_macs()->MergeFrom(from._internal_macs());
  _this->_internal_mutable_operational_impairments()->MergeFrom(from._internal_operational_impairments());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transmitter()->::aalyria::spacetime::api::common::TransmitterDefinition::MergeFrom(
          from._internal_transmitter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_receiver()->::aalyria::spacetime::api::common::ReceiverDefinition::MergeFrom(
          from._internal_receiver());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tx_rx_channel_spacing()->::aalyria::spacetime::api::common::CenterFrequencySpacing::MergeFrom(
          from._internal_tx_rx_channel_spacing());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_antenna()->::aalyria::spacetime::api::common::AntennaDefinition::MergeFrom(
          from._internal_antenna());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransceiverModel::CopyFrom(const TransceiverModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransceiverModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiverModel::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_macs()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!_impl_.antenna_->IsInitialized()) return false;
  }
  return true;
}

void TransceiverModel::InternalSwap(TransceiverModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_macs()->InternalSwap(other->_internal_mutable_macs());
  _internal_mutable_operational_impairments()->InternalSwap(other->_internal_mutable_operational_impairments());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransceiverModel, _impl_.antenna_)
      + sizeof(TransceiverModel::_impl_.antenna_)
      - PROTOBUF_FIELD_OFFSET(TransceiverModel, _impl_.transmitter_)>(
          reinterpret_cast<char*>(&_impl_.transmitter_),
          reinterpret_cast<char*>(&other->_impl_.transmitter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiverModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[1]);
}
// ===================================================================

class TransceiverModelId::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiverModelId>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransceiverModelId, _impl_._has_bits_);
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transceiver_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TransceiverModelId::TransceiverModelId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransceiverModelId)
}
TransceiverModelId::TransceiverModelId(const TransceiverModelId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransceiverModelId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.platform_id_) {}

    , decltype(_impl_.transceiver_model_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.platform_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.platform_id_.Set(from._internal_platform_id(), _this->GetArenaForAllocation());
  }
  _impl_.transceiver_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transceiver_model_id_.Set(from._internal_transceiver_model_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransceiverModelId)
}

inline void TransceiverModelId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.platform_id_) {}

    , decltype(_impl_.transceiver_model_id_) {}

  };
  _impl_.platform_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transceiver_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransceiverModelId::~TransceiverModelId() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransceiverModelId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransceiverModelId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.platform_id_.Destroy();
  _impl_.transceiver_model_id_.Destroy();
}

void TransceiverModelId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransceiverModelId::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransceiverModelId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.platform_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.transceiver_model_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransceiverModelId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_platform_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransceiverModelId.platform_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string transceiver_model_id = 2 [json_name = "transceiverModelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transceiver_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransceiverModelId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransceiverModelId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string platform_id = 1 [json_name = "platformId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_platform_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransceiverModelId.platform_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string transceiver_model_id = 2 [json_name = "transceiverModelId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_transceiver_model_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransceiverModelId)
  return target;
}

::size_t TransceiverModelId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransceiverModelId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string platform_id = 1 [json_name = "platformId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_platform_id());
    }

    // optional string transceiver_model_id = 2 [json_name = "transceiverModelId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_transceiver_model_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransceiverModelId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransceiverModelId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransceiverModelId::GetClassData() const { return &_class_data_; }


void TransceiverModelId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransceiverModelId*>(&to_msg);
  auto& from = static_cast<const TransceiverModelId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransceiverModelId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_platform_id(from._internal_platform_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_transceiver_model_id(from._internal_transceiver_model_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransceiverModelId::CopyFrom(const TransceiverModelId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransceiverModelId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiverModelId::IsInitialized() const {
  return true;
}

void TransceiverModelId::InternalSwap(TransceiverModelId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_id_, lhs_arena,
                                       &other->_impl_.platform_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transceiver_model_id_, lhs_arena,
                                       &other->_impl_.transceiver_model_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiverModelId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[2]);
}
// ===================================================================

class CenterFrequencySpacing::_Internal {
 public:
  using HasBits = decltype(std::declval<CenterFrequencySpacing>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CenterFrequencySpacing, _impl_._has_bits_);
  static void set_has_min_center_frequency_spacing_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_center_frequency_spacing_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CenterFrequencySpacing::CenterFrequencySpacing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.CenterFrequencySpacing)
}
CenterFrequencySpacing::CenterFrequencySpacing(const CenterFrequencySpacing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.CenterFrequencySpacing)
}

inline void CenterFrequencySpacing::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_center_frequency_spacing_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.max_center_frequency_spacing_hz_) { ::uint64_t{0u} }

  };
}

CenterFrequencySpacing::~CenterFrequencySpacing() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.CenterFrequencySpacing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CenterFrequencySpacing::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CenterFrequencySpacing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CenterFrequencySpacing::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.CenterFrequencySpacing)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_center_frequency_spacing_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_center_frequency_spacing_hz_) -
        reinterpret_cast<char*>(&_impl_.min_center_frequency_spacing_hz_)) + sizeof(_impl_.max_center_frequency_spacing_hz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CenterFrequencySpacing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 min_center_frequency_spacing_hz = 1 [json_name = "minCenterFrequencySpacingHz"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_min_center_frequency_spacing_hz(&has_bits);
          _impl_.min_center_frequency_spacing_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 max_center_frequency_spacing_hz = 2 [json_name = "maxCenterFrequencySpacingHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_max_center_frequency_spacing_hz(&has_bits);
          _impl_.max_center_frequency_spacing_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CenterFrequencySpacing::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.CenterFrequencySpacing)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 min_center_frequency_spacing_hz = 1 [json_name = "minCenterFrequencySpacingHz"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_min_center_frequency_spacing_hz(), target);
  }

  // optional uint64 max_center_frequency_spacing_hz = 2 [json_name = "maxCenterFrequencySpacingHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_max_center_frequency_spacing_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.CenterFrequencySpacing)
  return target;
}

::size_t CenterFrequencySpacing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.CenterFrequencySpacing)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 min_center_frequency_spacing_hz = 1 [json_name = "minCenterFrequencySpacingHz"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_min_center_frequency_spacing_hz());
    }

    // optional uint64 max_center_frequency_spacing_hz = 2 [json_name = "maxCenterFrequencySpacingHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_max_center_frequency_spacing_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CenterFrequencySpacing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CenterFrequencySpacing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CenterFrequencySpacing::GetClassData() const { return &_class_data_; }


void CenterFrequencySpacing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CenterFrequencySpacing*>(&to_msg);
  auto& from = static_cast<const CenterFrequencySpacing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.CenterFrequencySpacing)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_center_frequency_spacing_hz_ = from._impl_.min_center_frequency_spacing_hz_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_center_frequency_spacing_hz_ = from._impl_.max_center_frequency_spacing_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CenterFrequencySpacing::CopyFrom(const CenterFrequencySpacing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.CenterFrequencySpacing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterFrequencySpacing::IsInitialized() const {
  return true;
}

void CenterFrequencySpacing::InternalSwap(CenterFrequencySpacing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CenterFrequencySpacing, _impl_.max_center_frequency_spacing_hz_)
      + sizeof(CenterFrequencySpacing::_impl_.max_center_frequency_spacing_hz_)
      - PROTOBUF_FIELD_OFFSET(CenterFrequencySpacing, _impl_.min_center_frequency_spacing_hz_)>(
          reinterpret_cast<char*>(&_impl_.min_center_frequency_spacing_hz_),
          reinterpret_cast<char*>(&other->_impl_.min_center_frequency_spacing_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CenterFrequencySpacing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[3]);
}
// ===================================================================

class WirelessMac::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessMac>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessMac, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WirelessMac::WirelessMac(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.WirelessMac)
}
WirelessMac::WirelessMac(const WirelessMac& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessMac* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.role_) {}

    , decltype(_impl_.max_connections_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.role_.Set(from._internal_role(), _this->GetArenaForAllocation());
  }
  _this->_impl_.max_connections_ = from._impl_.max_connections_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.WirelessMac)
}

inline void WirelessMac::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.role_) {}

    , decltype(_impl_.max_connections_) { 0 }

  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WirelessMac::~WirelessMac() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.WirelessMac)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessMac::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.type_.Destroy();
  _impl_.role_.Destroy();
}

void WirelessMac::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessMac::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.WirelessMac)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.role_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.max_connections_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessMac::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.WirelessMac.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string role = 2 [json_name = "role"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.WirelessMac.role");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_connections = 3 [json_name = "maxConnections"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_max_connections(&has_bits);
          _impl_.max_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessMac::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.WirelessMac)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.WirelessMac.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string role = 2 [json_name = "role"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_role();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.WirelessMac.role");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 max_connections = 3 [json_name = "maxConnections"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_max_connections(), target);
  }

  // Extension range [100, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.WirelessMac)
  return target;
}

::size_t WirelessMac::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.WirelessMac)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional string role = 2 [json_name = "role"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_role());
    }

    // optional int32 max_connections = 3 [json_name = "maxConnections"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_connections());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessMac::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessMac::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessMac::GetClassData() const { return &_class_data_; }


void WirelessMac::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessMac*>(&to_msg);
  auto& from = static_cast<const WirelessMac&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.WirelessMac)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_role(from._internal_role());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_connections_ = from._impl_.max_connections_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessMac::CopyFrom(const WirelessMac& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.WirelessMac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessMac::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void WirelessMac::InternalSwap(WirelessMac* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.role_, lhs_arena,
                                       &other->_impl_.role_, rhs_arena);

  swap(_impl_.max_connections_, other->_impl_.max_connections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessMac::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransceiver_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransceiverModel_Impairment*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransceiverModel*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransceiverModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransceiverModel >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransceiverModelId*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransceiverModelId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransceiverModelId >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CenterFrequencySpacing*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CenterFrequencySpacing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CenterFrequencySpacing >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::WirelessMac*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::WirelessMac >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::WirelessMac >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

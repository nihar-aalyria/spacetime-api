// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control_flow.proto

#include "api/common/control_flow.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR FlowUpdate::FlowUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flow_rule_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rule_)*/nullptr
  , /*decltype(_impl_.sequence_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.operation_)*/ 0
} {}
struct FlowUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowUpdateDefaultTypeInternal() {}
  union {
    FlowUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowUpdateDefaultTypeInternal _FlowUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_SetField::FlowRule_ActionBucket_Action_SetField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_ascii_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.field_)*/ 0
} {}
struct FlowRule_ActionBucket_Action_SetFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_SetFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucket_Action_SetFieldDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket_Action_SetField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucket_Action_SetFieldDefaultTypeInternal _FlowRule_ActionBucket_Action_SetField_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_Forward::FlowRule_ActionBucket_Action_Forward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.out_interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_hop_ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct FlowRule_ActionBucket_Action_ForwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_ForwardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucket_Action_ForwardDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket_Action_Forward _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucket_Action_ForwardDefaultTypeInternal _FlowRule_ActionBucket_Action_Forward_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_PushHeader::FlowRule_ActionBucket_Action_PushHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ether_type_)*/nullptr
  , /*decltype(_impl_.field_)*/ 0
} {}
struct FlowRule_ActionBucket_Action_PushHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_PushHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucket_Action_PushHeaderDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket_Action_PushHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucket_Action_PushHeaderDefaultTypeInternal _FlowRule_ActionBucket_Action_PushHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_PopHeader::FlowRule_ActionBucket_Action_PopHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ether_type_)*/nullptr
  , /*decltype(_impl_.field_)*/ 0
} {}
struct FlowRule_ActionBucket_Action_PopHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action_PopHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucket_Action_PopHeaderDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket_Action_PopHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucket_Action_PopHeaderDefaultTypeInternal _FlowRule_ActionBucket_Action_PopHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket_Action::FlowRule_ActionBucket_Action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FlowRule_ActionBucket_ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucket_ActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucket_ActionDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket_Action _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucket_ActionDefaultTypeInternal _FlowRule_ActionBucket_Action_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule_ActionBucket::FlowRule_ActionBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlowRule_ActionBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRule_ActionBucketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRule_ActionBucketDefaultTypeInternal() {}
  union {
    FlowRule_ActionBucket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRule_ActionBucketDefaultTypeInternal _FlowRule_ActionBucket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowRule::FlowRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_bucket_)*/{}
  , /*decltype(_impl_.classifier_)*/nullptr} {}
struct FlowRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowRuleDefaultTypeInternal() {}
  union {
    FlowRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowRuleDefaultTypeInternal _FlowRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowState::FlowState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flow_rule_ids_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr} {}
struct FlowStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowStateDefaultTypeInternal() {}
  union {
    FlowState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowStateDefaultTypeInternal _FlowState_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fcontrol_5fflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _impl_.flow_rule_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowUpdate, _impl_.sequence_number_),
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField, _impl_.value_ascii_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward, _impl_.out_interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward, _impl_.next_hop_ip_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader, _impl_.ether_type_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader, _impl_.ether_type_),
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action, _impl_.action_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket, _impl_.action_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule, _impl_.classifier_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule, _impl_.action_bucket_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowState, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowState, _impl_.flow_rule_ids_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::aalyria::spacetime::api::common::FlowUpdate)},
        { 16, 26, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField)},
        { 28, 38, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward)},
        { 40, 50, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader)},
        { 52, 62, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader)},
        { 64, -1, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action)},
        { 77, -1, -1, sizeof(::aalyria::spacetime::api::common::FlowRule_ActionBucket)},
        { 86, 96, -1, sizeof(::aalyria::spacetime::api::common::FlowRule)},
        { 98, 108, -1, sizeof(::aalyria::spacetime::api::common::FlowState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_FlowUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_Action_SetField_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_Action_Forward_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_Action_PushHeader_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_Action_PopHeader_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_Action_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_ActionBucket_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowRule_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowState_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fcontrol_5fflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035api/common/control_flow.proto\022\034aalyria"
    ".spacetime.api.common\032\030api/common/networ"
    "k.proto\032\025api/common/time.proto\032\030api/type"
    "s/ethernet.proto\"\224\002\n\nFlowUpdate\022 \n\014flow_"
    "rule_id\030\001 \001(\tR\nflowRuleId\022P\n\toperation\030\002"
    " \001(\01622.aalyria.spacetime.api.common.Flow"
    "Update.OperationR\toperation\022:\n\004rule\030\003 \001("
    "\0132&.aalyria.spacetime.api.common.FlowRul"
    "eR\004rule\022\'\n\017sequence_number\030\004 \001(\003R\016sequen"
    "ceNumber\"-\n\tOperation\022\013\n\007UNKNOWN\020\000\022\007\n\003AD"
    "D\020\001\022\n\n\006DELETE\020\002\"\324\014\n\010FlowRule\022N\n\nclassifi"
    "er\030\005 \001(\0132..aalyria.spacetime.api.common."
    "PacketClassifierR\nclassifier\022X\n\raction_b"
    "ucket\030\004 \003(\01323.aalyria.spacetime.api.comm"
    "on.FlowRule.ActionBucketR\014actionBucket\032\215"
    "\013\n\014ActionBucket\022R\n\006action\030\001 \003(\0132:.aalyri"
    "a.spacetime.api.common.FlowRule.ActionBu"
    "cket.ActionR\006action\032\250\n\n\006Action\022b\n\tset_fi"
    "eld\030\001 \001(\0132C.aalyria.spacetime.api.common"
    ".FlowRule.ActionBucket.Action.SetFieldH\000"
    "R\010setField\022^\n\007forward\030\002 \001(\0132B.aalyria.sp"
    "acetime.api.common.FlowRule.ActionBucket"
    ".Action.ForwardH\000R\007forward\022h\n\013push_heade"
    "r\030\003 \001(\0132E.aalyria.spacetime.api.common.F"
    "lowRule.ActionBucket.Action.PushHeaderH\000"
    "R\npushHeader\022e\n\npop_header\030\004 \001(\0132D.aalyr"
    "ia.spacetime.api.common.FlowRule.ActionB"
    "ucket.Action.PopHeaderH\000R\tpopHeader\032\214\002\n\010"
    "SetField\022_\n\005field\030\001 \001(\0162I.aalyria.spacet"
    "ime.api.common.FlowRule.ActionBucket.Act"
    "ion.SetField.FieldR\005field\022\037\n\013value_ascii"
    "\030\003 \001(\tR\nvalueAscii\"n\n\005Field\022\025\n\021FIELD_UNS"
    "PECIFIED\020\000\022\021\n\rFIELD_ETH_DST\020\002\022\024\n\020FIELD_M"
    "PLS_LABEL\020\003\022\021\n\rFIELD_VLAN_ID\020\004\022\022\n\016FIELD_"
    "PBB_ITAG\020\005J\004\010\002\020\003J\010\010\004\020\200\200\200\200\002\032S\n\007Forward\022(\n"
    "\020out_interface_id\030\001 \001(\tR\016outInterfaceId\022"
    "\036\n\013next_hop_ip\030\002 \001(\tR\tnextHopIp\032\205\002\n\nPush"
    "Header\022a\n\005field\030\001 \001(\0162K.aalyria.spacetim"
    "e.api.common.FlowRule.ActionBucket.Actio"
    "n.PushHeader.FieldR\005field\022E\n\nether_type\030"
    "\002 \001(\0132&.aalyria.spacetime.api.types.Ethe"
    "rTypeR\tetherType\"M\n\005Field\022\025\n\021FIELD_UNSPE"
    "CIFIED\020\000\022\016\n\nFIELD_MPLS\020\001\022\016\n\nFIELD_VLAN\020\002"
    "\022\r\n\tFIELD_PBB\020\003\032\203\002\n\tPopHeader\022`\n\005field\030\001"
    " \001(\0162J.aalyria.spacetime.api.common.Flow"
    "Rule.ActionBucket.Action.PopHeader.Field"
    "R\005field\022E\n\nether_type\030\002 \001(\0132&.aalyria.sp"
    "acetime.api.types.EtherTypeR\tetherType\"M"
    "\n\005Field\022\025\n\021FIELD_UNSPECIFIED\020\000\022\016\n\nFIELD_"
    "MPLS\020\001\022\016\n\nFIELD_VLAN\020\002\022\r\n\tFIELD_PBB\020\003B\r\n"
    "\013action_typeJ\010\010\005\020\200\200\200\200\002J\004\010\001\020\004J\010\010\010\020\200\200\200\200\002\"\205"
    "\001\n\tFlowState\022D\n\ttimestamp\030\002 \001(\0132&.aalyri"
    "a.spacetime.api.common.DateTimeR\ttimesta"
    "mp\022\"\n\rflow_rule_ids\030\003 \003(\tR\013flowRuleIdsJ\004"
    "\010\001\020\002J\010\010\004\020\200\200\200\200\002BD\n com.aalyria.spacetime."
    "api.commonZ aalyria.com/spacetime/api/co"
    "mmon"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_deps[3] =
    {
        &::descriptor_table_api_2fcommon_2fnetwork_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_api_2ftypes_2fethernet_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto = {
    false,
    false,
    2244,
    descriptor_table_protodef_api_2fcommon_2fcontrol_5fflow_2eproto,
    "api/common/control_flow.proto",
    &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
    descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_deps,
    3,
    9,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fcontrol_5fflow_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto,
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fcontrol_5fflow_2eproto(&descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowUpdate_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto[0];
}
bool FlowUpdate_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FlowUpdate_Operation FlowUpdate::UNKNOWN;
constexpr FlowUpdate_Operation FlowUpdate::ADD;
constexpr FlowUpdate_Operation FlowUpdate::DELETE;
constexpr FlowUpdate_Operation FlowUpdate::Operation_MIN;
constexpr FlowUpdate_Operation FlowUpdate::Operation_MAX;
constexpr int FlowUpdate::Operation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowRule_ActionBucket_Action_SetField_Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto[1];
}
bool FlowRule_ActionBucket_Action_SetField_Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::FIELD_UNSPECIFIED;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::FIELD_ETH_DST;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::FIELD_MPLS_LABEL;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::FIELD_VLAN_ID;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::FIELD_PBB_ITAG;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::Field_MIN;
constexpr FlowRule_ActionBucket_Action_SetField_Field FlowRule_ActionBucket_Action_SetField::Field_MAX;
constexpr int FlowRule_ActionBucket_Action_SetField::Field_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowRule_ActionBucket_Action_PushHeader_Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto[2];
}
bool FlowRule_ActionBucket_Action_PushHeader_Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::FIELD_UNSPECIFIED;
constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::FIELD_MPLS;
constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::FIELD_VLAN;
constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::FIELD_PBB;
constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::Field_MIN;
constexpr FlowRule_ActionBucket_Action_PushHeader_Field FlowRule_ActionBucket_Action_PushHeader::Field_MAX;
constexpr int FlowRule_ActionBucket_Action_PushHeader::Field_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowRule_ActionBucket_Action_PopHeader_Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fflow_2eproto[3];
}
bool FlowRule_ActionBucket_Action_PopHeader_Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::FIELD_UNSPECIFIED;
constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::FIELD_MPLS;
constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::FIELD_VLAN;
constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::FIELD_PBB;
constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::Field_MIN;
constexpr FlowRule_ActionBucket_Action_PopHeader_Field FlowRule_ActionBucket_Action_PopHeader::Field_MAX;
constexpr int FlowRule_ActionBucket_Action_PopHeader::Field_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class FlowUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowUpdate, _impl_._has_bits_);
  static void set_has_flow_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::FlowRule& rule(const FlowUpdate* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::FlowRule&
FlowUpdate::_Internal::rule(const FlowUpdate* msg) {
  return *msg->_impl_.rule_;
}
FlowUpdate::FlowUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowUpdate)
}
FlowUpdate::FlowUpdate(const FlowUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flow_rule_id_) {}

    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.sequence_number_) {}

    , decltype(_impl_.operation_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flow_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.flow_rule_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.flow_rule_id_.Set(from._internal_flow_rule_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.rule_ = new ::aalyria::spacetime::api::common::FlowRule(*from._impl_.rule_);
  }
  ::memcpy(&_impl_.sequence_number_, &from._impl_.sequence_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowUpdate)
}

inline void FlowUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flow_rule_id_) {}

    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.sequence_number_) { ::int64_t{0} }

    , decltype(_impl_.operation_) { 0 }

  };
  _impl_.flow_rule_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.flow_rule_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlowUpdate::~FlowUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flow_rule_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rule_;
}

void FlowUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.flow_rule_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.sequence_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.operation_) -
        reinterpret_cast<char*>(&_impl_.sequence_number_)) + sizeof(_impl_.operation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string flow_rule_id = 1 [json_name = "flowRuleId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flow_rule_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.FlowUpdate.flow_rule_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.FlowUpdate.Operation operation = 2 [json_name = "operation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::FlowUpdate_Operation_IsValid(static_cast<int>(val)))) {
            _internal_set_operation(static_cast<::aalyria::spacetime::api::common::FlowUpdate_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.FlowRule rule = 3 [json_name = "rule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string flow_rule_id = 1 [json_name = "flowRuleId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_flow_rule_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.FlowUpdate.flow_rule_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.FlowUpdate.Operation operation = 2 [json_name = "operation"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_operation(), target);
  }

  // optional .aalyria.spacetime.api.common.FlowRule rule = 3 [json_name = "rule"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowUpdate)
  return target;
}

::size_t FlowUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string flow_rule_id = 1 [json_name = "flowRuleId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_flow_rule_id());
    }

    // optional .aalyria.spacetime.api.common.FlowRule rule = 3 [json_name = "rule"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_);
    }

    // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_sequence_number());
    }

    // optional .aalyria.spacetime.api.common.FlowUpdate.Operation operation = 2 [json_name = "operation"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowUpdate::GetClassData() const { return &_class_data_; }


void FlowUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowUpdate*>(&to_msg);
  auto& from = static_cast<const FlowUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_flow_rule_id(from._internal_flow_rule_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rule()->::aalyria::spacetime::api::common::FlowRule::MergeFrom(
          from._internal_rule());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowUpdate::CopyFrom(const FlowUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowUpdate::IsInitialized() const {
  return true;
}

void FlowUpdate::InternalSwap(FlowUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.flow_rule_id_, lhs_arena,
                                       &other->_impl_.flow_rule_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowUpdate, _impl_.operation_)
      + sizeof(FlowUpdate::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(FlowUpdate, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[0]);
}
// ===================================================================

class FlowRule_ActionBucket_Action_SetField::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowRule_ActionBucket_Action_SetField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_SetField, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_ascii(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FlowRule_ActionBucket_Action_SetField::FlowRule_ActionBucket_Action_SetField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
}
FlowRule_ActionBucket_Action_SetField::FlowRule_ActionBucket_Action_SetField(const FlowRule_ActionBucket_Action_SetField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket_Action_SetField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_ascii_) {}

    , decltype(_impl_.field_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_ascii_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_ascii_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ascii_.Set(from._internal_value_ascii(), _this->GetArenaForAllocation());
  }
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
}

inline void FlowRule_ActionBucket_Action_SetField::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_ascii_) {}

    , decltype(_impl_.field_) { 0 }

  };
  _impl_.value_ascii_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_ascii_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlowRule_ActionBucket_Action_SetField::~FlowRule_ActionBucket_Action_SetField() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket_Action_SetField::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_ascii_.Destroy();
}

void FlowRule_ActionBucket_Action_SetField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket_Action_SetField::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_ascii_.ClearNonDefaultToEmpty();
  }
  _impl_.field_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket_Action_SetField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField.Field field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField_Field_IsValid(static_cast<int>(val)))) {
            _internal_set_field(static_cast<::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField_Field>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string value_ascii = 3 [json_name = "valueAscii"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value_ascii();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField.value_ascii");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket_Action_SetField::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField.Field field = 1 [json_name = "field"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_field(), target);
  }

  // optional string value_ascii = 3 [json_name = "valueAscii"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_value_ascii();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField.value_ascii");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  return target;
}

::size_t FlowRule_ActionBucket_Action_SetField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value_ascii = 3 [json_name = "valueAscii"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_value_ascii());
    }

    // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField.Field field = 1 [json_name = "field"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_field());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket_Action_SetField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket_Action_SetField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket_Action_SetField::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket_Action_SetField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket_Action_SetField*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket_Action_SetField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_ascii(from._internal_value_ascii());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket_Action_SetField::CopyFrom(const FlowRule_ActionBucket_Action_SetField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket_Action_SetField::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket_Action_SetField::InternalSwap(FlowRule_ActionBucket_Action_SetField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_ascii_, lhs_arena,
                                       &other->_impl_.value_ascii_, rhs_arena);
  swap(_impl_.field_, other->_impl_.field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket_Action_SetField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[1]);
}
// ===================================================================

class FlowRule_ActionBucket_Action_Forward::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowRule_ActionBucket_Action_Forward>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_Forward, _impl_._has_bits_);
  static void set_has_out_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_hop_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FlowRule_ActionBucket_Action_Forward::FlowRule_ActionBucket_Action_Forward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
}
FlowRule_ActionBucket_Action_Forward::FlowRule_ActionBucket_Action_Forward(const FlowRule_ActionBucket_Action_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket_Action_Forward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_interface_id_) {}

    , decltype(_impl_.next_hop_ip_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.out_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.out_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.out_interface_id_.Set(from._internal_out_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.next_hop_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_hop_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.next_hop_ip_.Set(from._internal_next_hop_ip(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
}

inline void FlowRule_ActionBucket_Action_Forward::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_interface_id_) {}

    , decltype(_impl_.next_hop_ip_) {}

  };
  _impl_.out_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.out_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_hop_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_hop_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlowRule_ActionBucket_Action_Forward::~FlowRule_ActionBucket_Action_Forward() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket_Action_Forward::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.out_interface_id_.Destroy();
  _impl_.next_hop_ip_.Destroy();
}

void FlowRule_ActionBucket_Action_Forward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket_Action_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.out_interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.next_hop_ip_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket_Action_Forward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string out_interface_id = 1 [json_name = "outInterfaceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_out_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward.out_interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string next_hop_ip = 2 [json_name = "nextHopIp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_hop_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward.next_hop_ip");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket_Action_Forward::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string out_interface_id = 1 [json_name = "outInterfaceId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_out_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward.out_interface_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string next_hop_ip = 2 [json_name = "nextHopIp"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_next_hop_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward.next_hop_ip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  return target;
}

::size_t FlowRule_ActionBucket_Action_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string out_interface_id = 1 [json_name = "outInterfaceId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_out_interface_id());
    }

    // optional string next_hop_ip = 2 [json_name = "nextHopIp"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_next_hop_ip());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket_Action_Forward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket_Action_Forward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket_Action_Forward::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket_Action_Forward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket_Action_Forward*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket_Action_Forward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_out_interface_id(from._internal_out_interface_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_next_hop_ip(from._internal_next_hop_ip());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket_Action_Forward::CopyFrom(const FlowRule_ActionBucket_Action_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket_Action_Forward::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket_Action_Forward::InternalSwap(FlowRule_ActionBucket_Action_Forward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.out_interface_id_, lhs_arena,
                                       &other->_impl_.out_interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_hop_ip_, lhs_arena,
                                       &other->_impl_.next_hop_ip_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket_Action_Forward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[2]);
}
// ===================================================================

class FlowRule_ActionBucket_Action_PushHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowRule_ActionBucket_Action_PushHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PushHeader, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::types::EtherType& ether_type(const FlowRule_ActionBucket_Action_PushHeader* msg);
  static void set_has_ether_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::types::EtherType&
FlowRule_ActionBucket_Action_PushHeader::_Internal::ether_type(const FlowRule_ActionBucket_Action_PushHeader* msg) {
  return *msg->_impl_.ether_type_;
}
void FlowRule_ActionBucket_Action_PushHeader::clear_ether_type() {
  if (_impl_.ether_type_ != nullptr) _impl_.ether_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FlowRule_ActionBucket_Action_PushHeader::FlowRule_ActionBucket_Action_PushHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
}
FlowRule_ActionBucket_Action_PushHeader::FlowRule_ActionBucket_Action_PushHeader(const FlowRule_ActionBucket_Action_PushHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket_Action_PushHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ether_type_){nullptr}
    , decltype(_impl_.field_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ether_type_ = new ::aalyria::spacetime::api::types::EtherType(*from._impl_.ether_type_);
  }
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
}

inline void FlowRule_ActionBucket_Action_PushHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ether_type_){nullptr}
    , decltype(_impl_.field_) { 0 }

  };
}

FlowRule_ActionBucket_Action_PushHeader::~FlowRule_ActionBucket_Action_PushHeader() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket_Action_PushHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ether_type_;
}

void FlowRule_ActionBucket_Action_PushHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket_Action_PushHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ether_type_ != nullptr);
    _impl_.ether_type_->Clear();
  }
  _impl_.field_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket_Action_PushHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader.Field field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader_Field_IsValid(static_cast<int>(val)))) {
            _internal_set_field(static_cast<::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader_Field>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ether_type(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket_Action_PushHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader.Field field = 1 [json_name = "field"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_field(), target);
  }

  // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ether_type(this),
        _Internal::ether_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  return target;
}

::size_t FlowRule_ActionBucket_Action_PushHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ether_type_);
    }

    // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader.Field field = 1 [json_name = "field"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_field());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket_Action_PushHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket_Action_PushHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket_Action_PushHeader::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket_Action_PushHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket_Action_PushHeader*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket_Action_PushHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ether_type()->::aalyria::spacetime::api::types::EtherType::MergeFrom(
          from._internal_ether_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket_Action_PushHeader::CopyFrom(const FlowRule_ActionBucket_Action_PushHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket_Action_PushHeader::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket_Action_PushHeader::InternalSwap(FlowRule_ActionBucket_Action_PushHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PushHeader, _impl_.field_)
      + sizeof(FlowRule_ActionBucket_Action_PushHeader::_impl_.field_)
      - PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PushHeader, _impl_.ether_type_)>(
          reinterpret_cast<char*>(&_impl_.ether_type_),
          reinterpret_cast<char*>(&other->_impl_.ether_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket_Action_PushHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[3]);
}
// ===================================================================

class FlowRule_ActionBucket_Action_PopHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowRule_ActionBucket_Action_PopHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PopHeader, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::types::EtherType& ether_type(const FlowRule_ActionBucket_Action_PopHeader* msg);
  static void set_has_ether_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::types::EtherType&
FlowRule_ActionBucket_Action_PopHeader::_Internal::ether_type(const FlowRule_ActionBucket_Action_PopHeader* msg) {
  return *msg->_impl_.ether_type_;
}
void FlowRule_ActionBucket_Action_PopHeader::clear_ether_type() {
  if (_impl_.ether_type_ != nullptr) _impl_.ether_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FlowRule_ActionBucket_Action_PopHeader::FlowRule_ActionBucket_Action_PopHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
}
FlowRule_ActionBucket_Action_PopHeader::FlowRule_ActionBucket_Action_PopHeader(const FlowRule_ActionBucket_Action_PopHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket_Action_PopHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ether_type_){nullptr}
    , decltype(_impl_.field_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ether_type_ = new ::aalyria::spacetime::api::types::EtherType(*from._impl_.ether_type_);
  }
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
}

inline void FlowRule_ActionBucket_Action_PopHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ether_type_){nullptr}
    , decltype(_impl_.field_) { 0 }

  };
}

FlowRule_ActionBucket_Action_PopHeader::~FlowRule_ActionBucket_Action_PopHeader() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket_Action_PopHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ether_type_;
}

void FlowRule_ActionBucket_Action_PopHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket_Action_PopHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ether_type_ != nullptr);
    _impl_.ether_type_->Clear();
  }
  _impl_.field_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket_Action_PopHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader.Field field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader_Field_IsValid(static_cast<int>(val)))) {
            _internal_set_field(static_cast<::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader_Field>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ether_type(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket_Action_PopHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader.Field field = 1 [json_name = "field"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_field(), target);
  }

  // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ether_type(this),
        _Internal::ether_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  return target;
}

::size_t FlowRule_ActionBucket_Action_PopHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.types.EtherType ether_type = 2 [json_name = "etherType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ether_type_);
    }

    // optional .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader.Field field = 1 [json_name = "field"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_field());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket_Action_PopHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket_Action_PopHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket_Action_PopHeader::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket_Action_PopHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket_Action_PopHeader*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket_Action_PopHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ether_type()->::aalyria::spacetime::api::types::EtherType::MergeFrom(
          from._internal_ether_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket_Action_PopHeader::CopyFrom(const FlowRule_ActionBucket_Action_PopHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket_Action_PopHeader::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket_Action_PopHeader::InternalSwap(FlowRule_ActionBucket_Action_PopHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PopHeader, _impl_.field_)
      + sizeof(FlowRule_ActionBucket_Action_PopHeader::_impl_.field_)
      - PROTOBUF_FIELD_OFFSET(FlowRule_ActionBucket_Action_PopHeader, _impl_.ether_type_)>(
          reinterpret_cast<char*>(&_impl_.ether_type_),
          reinterpret_cast<char*>(&other->_impl_.ether_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket_Action_PopHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[4]);
}
// ===================================================================

class FlowRule_ActionBucket_Action::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField& set_field(const FlowRule_ActionBucket_Action* msg);
  static const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward& forward(const FlowRule_ActionBucket_Action* msg);
  static const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader& push_header(const FlowRule_ActionBucket_Action* msg);
  static const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader& pop_header(const FlowRule_ActionBucket_Action* msg);
};

const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField&
FlowRule_ActionBucket_Action::_Internal::set_field(const FlowRule_ActionBucket_Action* msg) {
  return *msg->_impl_.action_type_.set_field_;
}
const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward&
FlowRule_ActionBucket_Action::_Internal::forward(const FlowRule_ActionBucket_Action* msg) {
  return *msg->_impl_.action_type_.forward_;
}
const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader&
FlowRule_ActionBucket_Action::_Internal::push_header(const FlowRule_ActionBucket_Action* msg) {
  return *msg->_impl_.action_type_.push_header_;
}
const ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader&
FlowRule_ActionBucket_Action::_Internal::pop_header(const FlowRule_ActionBucket_Action* msg) {
  return *msg->_impl_.action_type_.pop_header_;
}
void FlowRule_ActionBucket_Action::set_allocated_set_field(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField* set_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_type();
  if (set_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_field);
    if (message_arena != submessage_arena) {
      set_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_field, submessage_arena);
    }
    set_has_set_field();
    _impl_.action_type_.set_field_ = set_field;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.set_field)
}
void FlowRule_ActionBucket_Action::set_allocated_forward(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_type();
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forward);
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    set_has_forward();
    _impl_.action_type_.forward_ = forward;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.forward)
}
void FlowRule_ActionBucket_Action::set_allocated_push_header(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader* push_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_type();
  if (push_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(push_header);
    if (message_arena != submessage_arena) {
      push_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_header, submessage_arena);
    }
    set_has_push_header();
    _impl_.action_type_.push_header_ = push_header;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.push_header)
}
void FlowRule_ActionBucket_Action::set_allocated_pop_header(::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader* pop_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_type();
  if (pop_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pop_header);
    if (message_arena != submessage_arena) {
      pop_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pop_header, submessage_arena);
    }
    set_has_pop_header();
    _impl_.action_type_.pop_header_ = pop_header;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.pop_header)
}
FlowRule_ActionBucket_Action::FlowRule_ActionBucket_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
}
FlowRule_ActionBucket_Action::FlowRule_ActionBucket_Action(const FlowRule_ActionBucket_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket_Action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action_type();
  switch (from.action_type_case()) {
    case kSetField: {
      _this->_internal_mutable_set_field()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField::MergeFrom(
          from._internal_set_field());
      break;
    }
    case kForward: {
      _this->_internal_mutable_forward()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward::MergeFrom(
          from._internal_forward());
      break;
    }
    case kPushHeader: {
      _this->_internal_mutable_push_header()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader::MergeFrom(
          from._internal_push_header());
      break;
    }
    case kPopHeader: {
      _this->_internal_mutable_pop_header()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader::MergeFrom(
          from._internal_pop_header());
      break;
    }
    case ACTION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
}

inline void FlowRule_ActionBucket_Action::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.action_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action_type();
}

FlowRule_ActionBucket_Action::~FlowRule_ActionBucket_Action() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket_Action::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action_type()) {
    clear_action_type();
  }
}

void FlowRule_ActionBucket_Action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket_Action::clear_action_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  switch (action_type_case()) {
    case kSetField: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_type_.set_field_;
      }
      break;
    }
    case kForward: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_type_.forward_;
      }
      break;
    }
    case kPushHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_type_.push_header_;
      }
      break;
    }
    case kPopHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_type_.pop_header_;
      }
      break;
    }
    case ACTION_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_TYPE_NOT_SET;
}


void FlowRule_ActionBucket_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket_Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField set_field = 1 [json_name = "setField"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward forward = 2 [json_name = "forward"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader push_header = 3 [json_name = "pushHeader"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader pop_header = 4 [json_name = "popHeader"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pop_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket_Action::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_type_case()) {
    case kSetField: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::set_field(this),
          _Internal::set_field(this).GetCachedSize(), target, stream);
      break;
    }
    case kForward: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::forward(this),
          _Internal::forward(this).GetCachedSize(), target, stream);
      break;
    }
    case kPushHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::push_header(this),
          _Internal::push_header(this).GetCachedSize(), target, stream);
      break;
    }
    case kPopHeader: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::pop_header(this),
          _Internal::pop_header(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  return target;
}

::size_t FlowRule_ActionBucket_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_type_case()) {
    // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.SetField set_field = 1 [json_name = "setField"];
    case kSetField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_type_.set_field_);
      break;
    }
    // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.Forward forward = 2 [json_name = "forward"];
    case kForward: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_type_.forward_);
      break;
    }
    // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PushHeader push_header = 3 [json_name = "pushHeader"];
    case kPushHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_type_.push_header_);
      break;
    }
    // .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action.PopHeader pop_header = 4 [json_name = "popHeader"];
    case kPopHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_type_.pop_header_);
      break;
    }
    case ACTION_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket_Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket_Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket_Action::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket_Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket_Action*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket_Action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_type_case()) {
    case kSetField: {
      _this->_internal_mutable_set_field()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField::MergeFrom(
          from._internal_set_field());
      break;
    }
    case kForward: {
      _this->_internal_mutable_forward()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward::MergeFrom(
          from._internal_forward());
      break;
    }
    case kPushHeader: {
      _this->_internal_mutable_push_header()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader::MergeFrom(
          from._internal_push_header());
      break;
    }
    case kPopHeader: {
      _this->_internal_mutable_pop_header()->::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader::MergeFrom(
          from._internal_pop_header());
      break;
    }
    case ACTION_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket_Action::CopyFrom(const FlowRule_ActionBucket_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket_Action::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket_Action::InternalSwap(FlowRule_ActionBucket_Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_type_, other->_impl_.action_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket_Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[5]);
}
// ===================================================================

class FlowRule_ActionBucket::_Internal {
 public:
};

FlowRule_ActionBucket::FlowRule_ActionBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket)
}
FlowRule_ActionBucket::FlowRule_ActionBucket(const FlowRule_ActionBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule_ActionBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){from._impl_.action_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule.ActionBucket)
}

inline void FlowRule_ActionBucket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlowRule_ActionBucket::~FlowRule_ActionBucket() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule_ActionBucket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_action()->~RepeatedPtrField();
}

void FlowRule_ActionBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule_ActionBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_action()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule_ActionBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action action = 1 [json_name = "action"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule_ActionBucket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action action = 1 [json_name = "action"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_size()); i < n; i++) {
    const auto& repfield = this->_internal_action(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  return target;
}

::size_t FlowRule_ActionBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket.Action action = 1 [json_name = "action"];
  total_size += 1UL * this->_internal_action_size();
  for (const auto& msg : this->_internal_action()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule_ActionBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule_ActionBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule_ActionBucket::GetClassData() const { return &_class_data_; }


void FlowRule_ActionBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule_ActionBucket*>(&to_msg);
  auto& from = static_cast<const FlowRule_ActionBucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_action()->MergeFrom(from._internal_action());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule_ActionBucket::CopyFrom(const FlowRule_ActionBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule.ActionBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule_ActionBucket::IsInitialized() const {
  return true;
}

void FlowRule_ActionBucket::InternalSwap(FlowRule_ActionBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_action()->InternalSwap(other->_internal_mutable_action());
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule_ActionBucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[6]);
}
// ===================================================================

class FlowRule::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowRule, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::PacketClassifier& classifier(const FlowRule* msg);
  static void set_has_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::PacketClassifier&
FlowRule::_Internal::classifier(const FlowRule* msg) {
  return *msg->_impl_.classifier_;
}
void FlowRule::clear_classifier() {
  if (_impl_.classifier_ != nullptr) _impl_.classifier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FlowRule::FlowRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowRule)
}
FlowRule::FlowRule(const FlowRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_bucket_){from._impl_.action_bucket_}
    , decltype(_impl_.classifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.classifier_ = new ::aalyria::spacetime::api::common::PacketClassifier(*from._impl_.classifier_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowRule)
}

inline void FlowRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_bucket_){arena}
    , decltype(_impl_.classifier_){nullptr}
  };
}

FlowRule::~FlowRule() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_action_bucket()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.classifier_;
}

void FlowRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowRule::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_action_bucket()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.classifier_ != nullptr);
    _impl_.classifier_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket action_bucket = 4 [json_name = "actionBucket"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_bucket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 5 [json_name = "classifier"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket action_bucket = 4 [json_name = "actionBucket"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_bucket_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_bucket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 5 [json_name = "classifier"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::classifier(this),
        _Internal::classifier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowRule)
  return target;
}

::size_t FlowRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.FlowRule.ActionBucket action_bucket = 4 [json_name = "actionBucket"];
  total_size += 1UL * this->_internal_action_bucket_size();
  for (const auto& msg : this->_internal_action_bucket()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 5 [json_name = "classifier"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.classifier_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowRule::GetClassData() const { return &_class_data_; }


void FlowRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowRule*>(&to_msg);
  auto& from = static_cast<const FlowRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_action_bucket()->MergeFrom(from._internal_action_bucket());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_classifier()->::aalyria::spacetime::api::common::PacketClassifier::MergeFrom(
        from._internal_classifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowRule::CopyFrom(const FlowRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowRule::IsInitialized() const {
  return true;
}

void FlowRule::InternalSwap(FlowRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_action_bucket()->InternalSwap(other->_internal_mutable_action_bucket());
  swap(_impl_.classifier_, other->_impl_.classifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[7]);
}
// ===================================================================

class FlowState::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowState, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const FlowState* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
FlowState::_Internal::timestamp(const FlowState* msg) {
  return *msg->_impl_.timestamp_;
}
void FlowState::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FlowState::FlowState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowState)
}
FlowState::FlowState(const FlowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flow_rule_ids_){from._impl_.flow_rule_ids_}
    , decltype(_impl_.timestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowState)
}

inline void FlowState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flow_rule_ids_){arena}
    , decltype(_impl_.timestamp_){nullptr}
  };
}

FlowState::~FlowState() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_flow_rule_ids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void FlowState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowState::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_flow_rule_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string flow_rule_ids = 3 [json_name = "flowRuleIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_flow_rule_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.FlowState.flow_rule_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated string flow_rule_ids = 3 [json_name = "flowRuleIds"];
  for (int i = 0, n = this->_internal_flow_rule_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_flow_rule_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.FlowState.flow_rule_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowState)
  return target;
}

::size_t FlowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string flow_rule_ids = 3 [json_name = "flowRuleIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_flow_rule_ids().size());
  for (int i = 0, n = _internal_flow_rule_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_flow_rule_ids().Get(i));
  }

  // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowState::GetClassData() const { return &_class_data_; }


void FlowState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowState*>(&to_msg);
  auto& from = static_cast<const FlowState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_flow_rule_ids()->MergeFrom(from._internal_flow_rule_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowState::CopyFrom(const FlowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowState::IsInitialized() const {
  return true;
}

void FlowState::InternalSwap(FlowState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_flow_rule_ids()->InternalSwap(
      other->_internal_mutable_flow_rule_ids());
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fflow_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_SetField >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PushHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action_PopHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule_ActionBucket*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule_ActionBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule_ActionBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowRule*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowRule >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowState*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/network.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInterfaceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      *string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	InterfaceId *string `protobuf:"bytes,2,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
}

func (x *NetworkInterfaceId) Reset() {
	*x = NetworkInterfaceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfaceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceId) ProtoMessage() {}

func (x *NetworkInterfaceId) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceId.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceId) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInterfaceId) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *NetworkInterfaceId) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

type PacketClassifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpHeader            *PacketClassifier_IpHeader            `protobuf:"bytes,1,opt,name=ip_header,json=ipHeader" json:"ip_header,omitempty"`
	L4Header            *PacketClassifier_GenericLayer4Header `protobuf:"bytes,2,opt,name=l4_header,json=l4Header" json:"l4_header,omitempty"`
	EthernetHeader      *PacketClassifier_EthernetHeader      `protobuf:"bytes,3,opt,name=ethernet_header,json=ethernetHeader" json:"ethernet_header,omitempty"`
	MplsLabelStackEntry *PacketClassifier_MplsLabelStackEntry `protobuf:"bytes,4,opt,name=mpls_label_stack_entry,json=mplsLabelStackEntry" json:"mpls_label_stack_entry,omitempty"`
}

func (x *PacketClassifier) Reset() {
	*x = PacketClassifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier) ProtoMessage() {}

func (x *PacketClassifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier.ProtoReflect.Descriptor instead.
func (*PacketClassifier) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1}
}

func (x *PacketClassifier) GetIpHeader() *PacketClassifier_IpHeader {
	if x != nil {
		return x.IpHeader
	}
	return nil
}

func (x *PacketClassifier) GetL4Header() *PacketClassifier_GenericLayer4Header {
	if x != nil {
		return x.L4Header
	}
	return nil
}

func (x *PacketClassifier) GetEthernetHeader() *PacketClassifier_EthernetHeader {
	if x != nil {
		return x.EthernetHeader
	}
	return nil
}

func (x *PacketClassifier) GetMplsLabelStackEntry() *PacketClassifier_MplsLabelStackEntry {
	if x != nil {
		return x.MplsLabelStackEntry
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subnet:
	//
	//	*Subnet_IpRange
	//	*Subnet_NodeId
	//	*Subnet_InterfaceId
	Subnet isSubnet_Subnet `protobuf_oneof:"subnet"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{2}
}

func (m *Subnet) GetSubnet() isSubnet_Subnet {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (x *Subnet) GetIpRange() string {
	if x, ok := x.GetSubnet().(*Subnet_IpRange); ok {
		return x.IpRange
	}
	return ""
}

func (x *Subnet) GetNodeId() string {
	if x, ok := x.GetSubnet().(*Subnet_NodeId); ok {
		return x.NodeId
	}
	return ""
}

func (x *Subnet) GetInterfaceId() *NetworkInterfaceId {
	if x, ok := x.GetSubnet().(*Subnet_InterfaceId); ok {
		return x.InterfaceId
	}
	return nil
}

type isSubnet_Subnet interface {
	isSubnet_Subnet()
}

type Subnet_IpRange struct {
	IpRange string `protobuf:"bytes,1,opt,name=ip_range,json=ipRange,oneof"`
}

type Subnet_NodeId struct {
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,oneof"`
}

type Subnet_InterfaceId struct {
	InterfaceId *NetworkInterfaceId `protobuf:"bytes,3,opt,name=interface_id,json=interfaceId,oneof"`
}

func (*Subnet_IpRange) isSubnet_Subnet() {}

func (*Subnet_NodeId) isSubnet_Subnet() {}

func (*Subnet_InterfaceId) isSubnet_Subnet() {}

type IpFlowClassifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      *Subnet `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst      *Subnet `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
	Protocol *uint32 `protobuf:"varint,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *IpFlowClassifier) Reset() {
	*x = IpFlowClassifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpFlowClassifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpFlowClassifier) ProtoMessage() {}

func (x *IpFlowClassifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpFlowClassifier.ProtoReflect.Descriptor instead.
func (*IpFlowClassifier) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{3}
}

func (x *IpFlowClassifier) GetSrc() *Subnet {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *IpFlowClassifier) GetDst() *Subnet {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *IpFlowClassifier) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type FlowClassifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpClassifier       *IpFlowClassifier                     `protobuf:"bytes,1,opt,name=ip_classifier,json=ipClassifier" json:"ip_classifier,omitempty"`
	L4Classifier       *PacketClassifier_GenericLayer4Header `protobuf:"bytes,2,opt,name=l4_classifier,json=l4Classifier" json:"l4_classifier,omitempty"`
	EthernetClassifier *PacketClassifier_EthernetHeader      `protobuf:"bytes,3,opt,name=ethernet_classifier,json=ethernetClassifier" json:"ethernet_classifier,omitempty"`
}

func (x *FlowClassifier) Reset() {
	*x = FlowClassifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowClassifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowClassifier) ProtoMessage() {}

func (x *FlowClassifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowClassifier.ProtoReflect.Descriptor instead.
func (*FlowClassifier) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{4}
}

func (x *FlowClassifier) GetIpClassifier() *IpFlowClassifier {
	if x != nil {
		return x.IpClassifier
	}
	return nil
}

func (x *FlowClassifier) GetL4Classifier() *PacketClassifier_GenericLayer4Header {
	if x != nil {
		return x.L4Classifier
	}
	return nil
}

func (x *FlowClassifier) GetEthernetClassifier() *PacketClassifier_EthernetHeader {
	if x != nil {
		return x.EthernetClassifier
	}
	return nil
}

type PacketClassifier_ValueRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Low  *uint32 `protobuf:"varint,1,opt,name=low" json:"low,omitempty"`
	High *uint32 `protobuf:"varint,2,opt,name=high" json:"high,omitempty"`
}

func (x *PacketClassifier_ValueRange) Reset() {
	*x = PacketClassifier_ValueRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier_ValueRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier_ValueRange) ProtoMessage() {}

func (x *PacketClassifier_ValueRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier_ValueRange.ProtoReflect.Descriptor instead.
func (*PacketClassifier_ValueRange) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PacketClassifier_ValueRange) GetLow() uint32 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *PacketClassifier_ValueRange) GetHigh() uint32 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

type PacketClassifier_IpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpRange *string `protobuf:"bytes,1,opt,name=src_ip_range,json=srcIpRange" json:"src_ip_range,omitempty"`
	DstIpRange *string `protobuf:"bytes,2,opt,name=dst_ip_range,json=dstIpRange" json:"dst_ip_range,omitempty"`
	Protocol   *uint32 `protobuf:"varint,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *PacketClassifier_IpHeader) Reset() {
	*x = PacketClassifier_IpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier_IpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier_IpHeader) ProtoMessage() {}

func (x *PacketClassifier_IpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier_IpHeader.ProtoReflect.Descriptor instead.
func (*PacketClassifier_IpHeader) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PacketClassifier_IpHeader) GetSrcIpRange() string {
	if x != nil && x.SrcIpRange != nil {
		return *x.SrcIpRange
	}
	return ""
}

func (x *PacketClassifier_IpHeader) GetDstIpRange() string {
	if x != nil && x.DstIpRange != nil {
		return *x.DstIpRange
	}
	return ""
}

func (x *PacketClassifier_IpHeader) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type PacketClassifier_GenericLayer4Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort      []*PacketClassifier_ValueRange `protobuf:"bytes,1,rep,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestinationPort []*PacketClassifier_ValueRange `protobuf:"bytes,2,rep,name=destination_port,json=destinationPort" json:"destination_port,omitempty"`
}

func (x *PacketClassifier_GenericLayer4Header) Reset() {
	*x = PacketClassifier_GenericLayer4Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier_GenericLayer4Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier_GenericLayer4Header) ProtoMessage() {}

func (x *PacketClassifier_GenericLayer4Header) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier_GenericLayer4Header.ProtoReflect.Descriptor instead.
func (*PacketClassifier_GenericLayer4Header) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1, 2}
}

func (x *PacketClassifier_GenericLayer4Header) GetSourcePort() []*PacketClassifier_ValueRange {
	if x != nil {
		return x.SourcePort
	}
	return nil
}

func (x *PacketClassifier_GenericLayer4Header) GetDestinationPort() []*PacketClassifier_ValueRange {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

type PacketClassifier_EthernetHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//
	//	*PacketClassifier_EthernetHeader_Multicast
	//	*PacketClassifier_EthernetHeader_Address
	Destination isPacketClassifier_EthernetHeader_Destination `protobuf_oneof:"destination"`
}

func (x *PacketClassifier_EthernetHeader) Reset() {
	*x = PacketClassifier_EthernetHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier_EthernetHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier_EthernetHeader) ProtoMessage() {}

func (x *PacketClassifier_EthernetHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier_EthernetHeader.ProtoReflect.Descriptor instead.
func (*PacketClassifier_EthernetHeader) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1, 3}
}

func (m *PacketClassifier_EthernetHeader) GetDestination() isPacketClassifier_EthernetHeader_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *PacketClassifier_EthernetHeader) GetMulticast() *emptypb.Empty {
	if x, ok := x.GetDestination().(*PacketClassifier_EthernetHeader_Multicast); ok {
		return x.Multicast
	}
	return nil
}

func (x *PacketClassifier_EthernetHeader) GetAddress() string {
	if x, ok := x.GetDestination().(*PacketClassifier_EthernetHeader_Address); ok {
		return x.Address
	}
	return ""
}

type isPacketClassifier_EthernetHeader_Destination interface {
	isPacketClassifier_EthernetHeader_Destination()
}

type PacketClassifier_EthernetHeader_Multicast struct {
	Multicast *emptypb.Empty `protobuf:"bytes,1,opt,name=multicast,oneof"`
}

type PacketClassifier_EthernetHeader_Address struct {
	Address string `protobuf:"bytes,2,opt,name=address,oneof"`
}

func (*PacketClassifier_EthernetHeader_Multicast) isPacketClassifier_EthernetHeader_Destination() {}

func (*PacketClassifier_EthernetHeader_Address) isPacketClassifier_EthernetHeader_Destination() {}

type PacketClassifier_MplsLabelStackEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *uint32 `protobuf:"varint,1,opt,name=label" json:"label,omitempty"`
}

func (x *PacketClassifier_MplsLabelStackEntry) Reset() {
	*x = PacketClassifier_MplsLabelStackEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketClassifier_MplsLabelStackEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketClassifier_MplsLabelStackEntry) ProtoMessage() {}

func (x *PacketClassifier_MplsLabelStackEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketClassifier_MplsLabelStackEntry.ProtoReflect.Descriptor instead.
func (*PacketClassifier_MplsLabelStackEntry) Descriptor() ([]byte, []int) {
	return file_api_common_network_proto_rawDescGZIP(), []int{1, 4}
}

func (x *PacketClassifier_MplsLabelStackEntry) GetLabel() uint32 {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return 0
}

var File_api_common_network_proto protoreflect.FileDescriptor

var file_api_common_network_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf8, 0x07, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09,
	0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x09, 0x6c, 0x34, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x34, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x16, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x3c, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x4a, 0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x1a, 0x74, 0x0a, 0x08, 0x49, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x49, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4a, 0x08,
	0x08, 0x04, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x1a, 0xe1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x4a, 0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x1a, 0x7d, 0x0a, 0x0e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x1a, 0x2b, 0x0a, 0x13, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4a, 0x08, 0x08, 0x05, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x22, 0xab, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4a, 0x08, 0x08, 0x04, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x22, 0xa8, 0x01, 0x0a, 0x10, 0x49, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x36, 0x0a,
	0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4a, 0x08, 0x08, 0x04, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xc8, 0x02, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0d, 0x6c, 0x34, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x6c, 0x34, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x13,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x08, 0x08, 0x04,
	0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_network_proto_rawDescOnce sync.Once
	file_api_common_network_proto_rawDescData = file_api_common_network_proto_rawDesc
)

func file_api_common_network_proto_rawDescGZIP() []byte {
	file_api_common_network_proto_rawDescOnce.Do(func() {
		file_api_common_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_network_proto_rawDescData)
	})
	return file_api_common_network_proto_rawDescData
}

var file_api_common_network_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_common_network_proto_goTypes = []interface{}{
	(*NetworkInterfaceId)(nil),                   // 0: aalyria.spacetime.api.common.NetworkInterfaceId
	(*PacketClassifier)(nil),                     // 1: aalyria.spacetime.api.common.PacketClassifier
	(*Subnet)(nil),                               // 2: aalyria.spacetime.api.common.Subnet
	(*IpFlowClassifier)(nil),                     // 3: aalyria.spacetime.api.common.IpFlowClassifier
	(*FlowClassifier)(nil),                       // 4: aalyria.spacetime.api.common.FlowClassifier
	(*PacketClassifier_ValueRange)(nil),          // 5: aalyria.spacetime.api.common.PacketClassifier.ValueRange
	(*PacketClassifier_IpHeader)(nil),            // 6: aalyria.spacetime.api.common.PacketClassifier.IpHeader
	(*PacketClassifier_GenericLayer4Header)(nil), // 7: aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header
	(*PacketClassifier_EthernetHeader)(nil),      // 8: aalyria.spacetime.api.common.PacketClassifier.EthernetHeader
	(*PacketClassifier_MplsLabelStackEntry)(nil), // 9: aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry
	(*emptypb.Empty)(nil),                        // 10: google.protobuf.Empty
}
var file_api_common_network_proto_depIdxs = []int32{
	6,  // 0: aalyria.spacetime.api.common.PacketClassifier.ip_header:type_name -> aalyria.spacetime.api.common.PacketClassifier.IpHeader
	7,  // 1: aalyria.spacetime.api.common.PacketClassifier.l4_header:type_name -> aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header
	8,  // 2: aalyria.spacetime.api.common.PacketClassifier.ethernet_header:type_name -> aalyria.spacetime.api.common.PacketClassifier.EthernetHeader
	9,  // 3: aalyria.spacetime.api.common.PacketClassifier.mpls_label_stack_entry:type_name -> aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry
	0,  // 4: aalyria.spacetime.api.common.Subnet.interface_id:type_name -> aalyria.spacetime.api.common.NetworkInterfaceId
	2,  // 5: aalyria.spacetime.api.common.IpFlowClassifier.src:type_name -> aalyria.spacetime.api.common.Subnet
	2,  // 6: aalyria.spacetime.api.common.IpFlowClassifier.dst:type_name -> aalyria.spacetime.api.common.Subnet
	3,  // 7: aalyria.spacetime.api.common.FlowClassifier.ip_classifier:type_name -> aalyria.spacetime.api.common.IpFlowClassifier
	7,  // 8: aalyria.spacetime.api.common.FlowClassifier.l4_classifier:type_name -> aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header
	8,  // 9: aalyria.spacetime.api.common.FlowClassifier.ethernet_classifier:type_name -> aalyria.spacetime.api.common.PacketClassifier.EthernetHeader
	5,  // 10: aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header.source_port:type_name -> aalyria.spacetime.api.common.PacketClassifier.ValueRange
	5,  // 11: aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header.destination_port:type_name -> aalyria.spacetime.api.common.PacketClassifier.ValueRange
	10, // 12: aalyria.spacetime.api.common.PacketClassifier.EthernetHeader.multicast:type_name -> google.protobuf.Empty
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_common_network_proto_init() }
func file_api_common_network_proto_init() {
	if File_api_common_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_common_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfaceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpFlowClassifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowClassifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier_ValueRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier_IpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier_GenericLayer4Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier_EthernetHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketClassifier_MplsLabelStackEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_network_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Subnet_IpRange)(nil),
		(*Subnet_NodeId)(nil),
		(*Subnet_InterfaceId)(nil),
	}
	file_api_common_network_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PacketClassifier_EthernetHeader_Multicast)(nil),
		(*PacketClassifier_EthernetHeader_Address)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_network_proto_goTypes,
		DependencyIndexes: file_api_common_network_proto_depIdxs,
		MessageInfos:      file_api_common_network_proto_msgTypes,
	}.Build()
	File_api_common_network_proto = out.File
	file_api_common_network_proto_rawDesc = nil
	file_api_common_network_proto_goTypes = nil
	file_api_common_network_proto_depIdxs = nil
}

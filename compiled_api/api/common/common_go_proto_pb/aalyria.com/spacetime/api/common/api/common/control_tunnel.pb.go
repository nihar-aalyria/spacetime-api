// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/control_tunnel.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelUpdate_Operation int32

const (
	TunnelUpdate_UNKNOWN TunnelUpdate_Operation = 0
	TunnelUpdate_ADD     TunnelUpdate_Operation = 1
	TunnelUpdate_DELETE  TunnelUpdate_Operation = 2
)

// Enum value maps for TunnelUpdate_Operation.
var (
	TunnelUpdate_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD",
		2: "DELETE",
	}
	TunnelUpdate_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"ADD":     1,
		"DELETE":  2,
	}
)

func (x TunnelUpdate_Operation) Enum() *TunnelUpdate_Operation {
	p := new(TunnelUpdate_Operation)
	*p = x
	return p
}

func (x TunnelUpdate_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelUpdate_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_control_tunnel_proto_enumTypes[0].Descriptor()
}

func (TunnelUpdate_Operation) Type() protoreflect.EnumType {
	return &file_api_common_control_tunnel_proto_enumTypes[0]
}

func (x TunnelUpdate_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TunnelUpdate_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TunnelUpdate_Operation(num)
	return nil
}

// Deprecated: Use TunnelUpdate_Operation.Descriptor instead.
func (TunnelUpdate_Operation) EnumDescriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{0, 0}
}

type TunnelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelRuleId   *string                 `protobuf:"bytes,1,opt,name=tunnel_rule_id,json=tunnelRuleId" json:"tunnel_rule_id,omitempty"`
	Operation      *TunnelUpdate_Operation `protobuf:"varint,2,opt,name=operation,enum=aalyria.spacetime.api.common.TunnelUpdate_Operation" json:"operation,omitempty"`
	Rule           *TunnelRule             `protobuf:"bytes,3,opt,name=rule" json:"rule,omitempty"`
	SequenceNumber *int64                  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (x *TunnelUpdate) Reset() {
	*x = TunnelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelUpdate) ProtoMessage() {}

func (x *TunnelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelUpdate.ProtoReflect.Descriptor instead.
func (*TunnelUpdate) Descriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelUpdate) GetTunnelRuleId() string {
	if x != nil && x.TunnelRuleId != nil {
		return *x.TunnelRuleId
	}
	return ""
}

func (x *TunnelUpdate) GetOperation() TunnelUpdate_Operation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return TunnelUpdate_UNKNOWN
}

func (x *TunnelUpdate) GetRule() *TunnelRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *TunnelUpdate) GetSequenceNumber() int64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

type TunnelRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncapRule *TunnelRule_EncapRule `protobuf:"bytes,10,opt,name=encap_rule,json=encapRule" json:"encap_rule,omitempty"`
	DecapRule *TunnelRule_DecapRule `protobuf:"bytes,11,opt,name=decap_rule,json=decapRule" json:"decap_rule,omitempty"`
}

func (x *TunnelRule) Reset() {
	*x = TunnelRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelRule) ProtoMessage() {}

func (x *TunnelRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelRule.ProtoReflect.Descriptor instead.
func (*TunnelRule) Descriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelRule) GetEncapRule() *TunnelRule_EncapRule {
	if x != nil {
		return x.EncapRule
	}
	return nil
}

func (x *TunnelRule) GetDecapRule() *TunnelRule_DecapRule {
	if x != nil {
		return x.DecapRule
	}
	return nil
}

type TunnelStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp     *DateTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TunnelRuleIds []string  `protobuf:"bytes,3,rep,name=tunnel_rule_ids,json=tunnelRuleIds" json:"tunnel_rule_ids,omitempty"`
}

func (x *TunnelStates) Reset() {
	*x = TunnelStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStates) ProtoMessage() {}

func (x *TunnelStates) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStates.ProtoReflect.Descriptor instead.
func (*TunnelStates) Descriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *TunnelStates) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TunnelStates) GetTunnelRuleIds() []string {
	if x != nil {
		return x.TunnelRuleIds
	}
	return nil
}

type TunnelRule_EncapRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifier          *PacketClassifier `protobuf:"bytes,1,opt,name=classifier" json:"classifier,omitempty"`
	EncapsulatedSrcIp   *string           `protobuf:"bytes,2,opt,name=encapsulated_src_ip,json=encapsulatedSrcIp" json:"encapsulated_src_ip,omitempty"`
	EncapsulatedDstIp   *string           `protobuf:"bytes,3,opt,name=encapsulated_dst_ip,json=encapsulatedDstIp" json:"encapsulated_dst_ip,omitempty"`
	EncapsulatedSrcPort *int32            `protobuf:"varint,4,opt,name=encapsulated_src_port,json=encapsulatedSrcPort" json:"encapsulated_src_port,omitempty"`
	EncapsulatedDstPort *int32            `protobuf:"varint,5,opt,name=encapsulated_dst_port,json=encapsulatedDstPort" json:"encapsulated_dst_port,omitempty"`
	// Types that are assignable to Parameters:
	//
	//	*TunnelRule_EncapRule_Esp
	Parameters isTunnelRule_EncapRule_Parameters `protobuf_oneof:"parameters"`
}

func (x *TunnelRule_EncapRule) Reset() {
	*x = TunnelRule_EncapRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelRule_EncapRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelRule_EncapRule) ProtoMessage() {}

func (x *TunnelRule_EncapRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelRule_EncapRule.ProtoReflect.Descriptor instead.
func (*TunnelRule_EncapRule) Descriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TunnelRule_EncapRule) GetClassifier() *PacketClassifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (x *TunnelRule_EncapRule) GetEncapsulatedSrcIp() string {
	if x != nil && x.EncapsulatedSrcIp != nil {
		return *x.EncapsulatedSrcIp
	}
	return ""
}

func (x *TunnelRule_EncapRule) GetEncapsulatedDstIp() string {
	if x != nil && x.EncapsulatedDstIp != nil {
		return *x.EncapsulatedDstIp
	}
	return ""
}

func (x *TunnelRule_EncapRule) GetEncapsulatedSrcPort() int32 {
	if x != nil && x.EncapsulatedSrcPort != nil {
		return *x.EncapsulatedSrcPort
	}
	return 0
}

func (x *TunnelRule_EncapRule) GetEncapsulatedDstPort() int32 {
	if x != nil && x.EncapsulatedDstPort != nil {
		return *x.EncapsulatedDstPort
	}
	return 0
}

func (m *TunnelRule_EncapRule) GetParameters() isTunnelRule_EncapRule_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *TunnelRule_EncapRule) GetEsp() *EspParameters {
	if x, ok := x.GetParameters().(*TunnelRule_EncapRule_Esp); ok {
		return x.Esp
	}
	return nil
}

type isTunnelRule_EncapRule_Parameters interface {
	isTunnelRule_EncapRule_Parameters()
}

type TunnelRule_EncapRule_Esp struct {
	Esp *EspParameters `protobuf:"bytes,6,opt,name=esp,oneof"`
}

func (*TunnelRule_EncapRule_Esp) isTunnelRule_EncapRule_Parameters() {}

type TunnelRule_DecapRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifier *PacketClassifier `protobuf:"bytes,1,opt,name=classifier" json:"classifier,omitempty"`
	// Types that are assignable to Parameters:
	//
	//	*TunnelRule_DecapRule_Esp
	Parameters isTunnelRule_DecapRule_Parameters `protobuf_oneof:"parameters"`
}

func (x *TunnelRule_DecapRule) Reset() {
	*x = TunnelRule_DecapRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelRule_DecapRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelRule_DecapRule) ProtoMessage() {}

func (x *TunnelRule_DecapRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelRule_DecapRule.ProtoReflect.Descriptor instead.
func (*TunnelRule_DecapRule) Descriptor() ([]byte, []int) {
	return file_api_common_control_tunnel_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TunnelRule_DecapRule) GetClassifier() *PacketClassifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (m *TunnelRule_DecapRule) GetParameters() isTunnelRule_DecapRule_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *TunnelRule_DecapRule) GetEsp() *EspParameters {
	if x, ok := x.GetParameters().(*TunnelRule_DecapRule_Esp); ok {
		return x.Esp
	}
	return nil
}

type isTunnelRule_DecapRule_Parameters interface {
	isTunnelRule_DecapRule_Parameters()
}

type TunnelRule_DecapRule_Esp struct {
	Esp *EspParameters `protobuf:"bytes,2,opt,name=esp,oneof"`
}

func (*TunnelRule_DecapRule_Esp) isTunnelRule_DecapRule_Parameters() {}

var File_api_common_control_tunnel_proto protoreflect.FileDescriptor

var file_api_common_control_tunnel_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x52, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0xda, 0x05, 0x0a, 0x0a, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x61, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x65, 0x63, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x1a,
	0xf2, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4e, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x65, 0x73, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x61, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x03, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x73, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x08, 0x08, 0x04,
	0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_control_tunnel_proto_rawDescOnce sync.Once
	file_api_common_control_tunnel_proto_rawDescData = file_api_common_control_tunnel_proto_rawDesc
)

func file_api_common_control_tunnel_proto_rawDescGZIP() []byte {
	file_api_common_control_tunnel_proto_rawDescOnce.Do(func() {
		file_api_common_control_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_control_tunnel_proto_rawDescData)
	})
	return file_api_common_control_tunnel_proto_rawDescData
}

var file_api_common_control_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_common_control_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_common_control_tunnel_proto_goTypes = []interface{}{
	(TunnelUpdate_Operation)(0),  // 0: aalyria.spacetime.api.common.TunnelUpdate.Operation
	(*TunnelUpdate)(nil),         // 1: aalyria.spacetime.api.common.TunnelUpdate
	(*TunnelRule)(nil),           // 2: aalyria.spacetime.api.common.TunnelRule
	(*TunnelStates)(nil),         // 3: aalyria.spacetime.api.common.TunnelStates
	(*TunnelRule_EncapRule)(nil), // 4: aalyria.spacetime.api.common.TunnelRule.EncapRule
	(*TunnelRule_DecapRule)(nil), // 5: aalyria.spacetime.api.common.TunnelRule.DecapRule
	(*DateTime)(nil),             // 6: aalyria.spacetime.api.common.DateTime
	(*PacketClassifier)(nil),     // 7: aalyria.spacetime.api.common.PacketClassifier
	(*EspParameters)(nil),        // 8: aalyria.spacetime.api.common.EspParameters
}
var file_api_common_control_tunnel_proto_depIdxs = []int32{
	0, // 0: aalyria.spacetime.api.common.TunnelUpdate.operation:type_name -> aalyria.spacetime.api.common.TunnelUpdate.Operation
	2, // 1: aalyria.spacetime.api.common.TunnelUpdate.rule:type_name -> aalyria.spacetime.api.common.TunnelRule
	4, // 2: aalyria.spacetime.api.common.TunnelRule.encap_rule:type_name -> aalyria.spacetime.api.common.TunnelRule.EncapRule
	5, // 3: aalyria.spacetime.api.common.TunnelRule.decap_rule:type_name -> aalyria.spacetime.api.common.TunnelRule.DecapRule
	6, // 4: aalyria.spacetime.api.common.TunnelStates.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	7, // 5: aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier:type_name -> aalyria.spacetime.api.common.PacketClassifier
	8, // 6: aalyria.spacetime.api.common.TunnelRule.EncapRule.esp:type_name -> aalyria.spacetime.api.common.EspParameters
	7, // 7: aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier:type_name -> aalyria.spacetime.api.common.PacketClassifier
	8, // 8: aalyria.spacetime.api.common.TunnelRule.DecapRule.esp:type_name -> aalyria.spacetime.api.common.EspParameters
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_api_common_control_tunnel_proto_init() }
func file_api_common_control_tunnel_proto_init() {
	if File_api_common_control_tunnel_proto != nil {
		return
	}
	file_api_common_network_proto_init()
	file_api_common_time_proto_init()
	file_api_common_tunnel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_control_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelRule_EncapRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelRule_DecapRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_control_tunnel_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TunnelRule_EncapRule_Esp)(nil),
	}
	file_api_common_control_tunnel_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TunnelRule_DecapRule_Esp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_control_tunnel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_control_tunnel_proto_goTypes,
		DependencyIndexes: file_api_common_control_tunnel_proto_depIdxs,
		EnumInfos:         file_api_common_control_tunnel_proto_enumTypes,
		MessageInfos:      file_api_common_control_tunnel_proto_msgTypes,
	}.Build()
	File_api_common_control_tunnel_proto = out.File
	file_api_common_control_tunnel_proto_rawDesc = nil
	file_api_common_control_tunnel_proto_goTypes = nil
	file_api_common_control_tunnel_proto_depIdxs = nil
}

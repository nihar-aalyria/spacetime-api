// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/wireless_propagation.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Parameter int32

const (
	Parameter_UNSPECIFIED_PARAMETER               Parameter = 0
	Parameter_ATMOSPHERIC_PRESSURE_PA             Parameter = 1
	Parameter_TEMPERATURE_K                       Parameter = 2
	Parameter_WATER_VAPOR_PRESSURE_PA             Parameter = 3
	Parameter_RAIN_HEIGHT_WGS84_M                 Parameter = 4
	Parameter_RAIN_RATE_M_PER_SECOND              Parameter = 5
	Parameter_CLOUD_CEILING_WGS84_M               Parameter = 6
	Parameter_CLOUD_LAYER_THICKNESS_M             Parameter = 7
	Parameter_CLOUD_LIQUID_WATER_DENSITY_G_PER_M3 Parameter = 8
	Parameter_CLOUD_TEMPERATURE_K                 Parameter = 9
)

// Enum value maps for Parameter.
var (
	Parameter_name = map[int32]string{
		0: "UNSPECIFIED_PARAMETER",
		1: "ATMOSPHERIC_PRESSURE_PA",
		2: "TEMPERATURE_K",
		3: "WATER_VAPOR_PRESSURE_PA",
		4: "RAIN_HEIGHT_WGS84_M",
		5: "RAIN_RATE_M_PER_SECOND",
		6: "CLOUD_CEILING_WGS84_M",
		7: "CLOUD_LAYER_THICKNESS_M",
		8: "CLOUD_LIQUID_WATER_DENSITY_G_PER_M3",
		9: "CLOUD_TEMPERATURE_K",
	}
	Parameter_value = map[string]int32{
		"UNSPECIFIED_PARAMETER":               0,
		"ATMOSPHERIC_PRESSURE_PA":             1,
		"TEMPERATURE_K":                       2,
		"WATER_VAPOR_PRESSURE_PA":             3,
		"RAIN_HEIGHT_WGS84_M":                 4,
		"RAIN_RATE_M_PER_SECOND":              5,
		"CLOUD_CEILING_WGS84_M":               6,
		"CLOUD_LAYER_THICKNESS_M":             7,
		"CLOUD_LIQUID_WATER_DENSITY_G_PER_M3": 8,
		"CLOUD_TEMPERATURE_K":                 9,
	}
)

func (x Parameter) Enum() *Parameter {
	p := new(Parameter)
	*p = x
	return p
}

func (x Parameter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Parameter) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_wireless_propagation_proto_enumTypes[0].Descriptor()
}

func (Parameter) Type() protoreflect.EnumType {
	return &file_api_common_wireless_propagation_proto_enumTypes[0]
}

func (x Parameter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Parameter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Parameter(num)
	return nil
}

// Deprecated: Use Parameter.Descriptor instead.
func (Parameter) EnumDescriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{0}
}

type Provenance int32

const (
	Provenance_UNSPECIFIED               Provenance = 0
	Provenance_ADMINISTRATIVE            Provenance = 1
	Provenance_SENSOR                    Provenance = 2
	Provenance_ECMWF                     Provenance = 3
	Provenance_NOAA_GFS                  Provenance = 4
	Provenance_LOON_WIND                 Provenance = 5
	Provenance_SEASONAL_REGIONAL_AVERAGE Provenance = 7
	Provenance_DEFAULT_FALLBACK          Provenance = 8
)

// Enum value maps for Provenance.
var (
	Provenance_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ADMINISTRATIVE",
		2: "SENSOR",
		3: "ECMWF",
		4: "NOAA_GFS",
		5: "LOON_WIND",
		7: "SEASONAL_REGIONAL_AVERAGE",
		8: "DEFAULT_FALLBACK",
	}
	Provenance_value = map[string]int32{
		"UNSPECIFIED":               0,
		"ADMINISTRATIVE":            1,
		"SENSOR":                    2,
		"ECMWF":                     3,
		"NOAA_GFS":                  4,
		"LOON_WIND":                 5,
		"SEASONAL_REGIONAL_AVERAGE": 7,
		"DEFAULT_FALLBACK":          8,
	}
)

func (x Provenance) Enum() *Provenance {
	p := new(Provenance)
	*p = x
	return p
}

func (x Provenance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Provenance) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_wireless_propagation_proto_enumTypes[1].Descriptor()
}

func (Provenance) Type() protoreflect.EnumType {
	return &file_api_common_wireless_propagation_proto_enumTypes[1]
}

func (x Provenance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Provenance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Provenance(num)
	return nil
}

// Deprecated: Use Provenance.Descriptor instead.
func (Provenance) EnumDescriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{1}
}

type WeatherDataForecast_Provenance int32

const (
	WeatherDataForecast_UNSPECIFIED               WeatherDataForecast_Provenance = 0
	WeatherDataForecast_ADMINISTRATIVE            WeatherDataForecast_Provenance = 1
	WeatherDataForecast_SENSOR                    WeatherDataForecast_Provenance = 2
	WeatherDataForecast_ECMWF                     WeatherDataForecast_Provenance = 3
	WeatherDataForecast_NOAA_GFS                  WeatherDataForecast_Provenance = 4
	WeatherDataForecast_LOON_WIND                 WeatherDataForecast_Provenance = 5
	WeatherDataForecast_SEASONAL_REGIONAL_AVERAGE WeatherDataForecast_Provenance = 7
)

// Enum value maps for WeatherDataForecast_Provenance.
var (
	WeatherDataForecast_Provenance_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ADMINISTRATIVE",
		2: "SENSOR",
		3: "ECMWF",
		4: "NOAA_GFS",
		5: "LOON_WIND",
		7: "SEASONAL_REGIONAL_AVERAGE",
	}
	WeatherDataForecast_Provenance_value = map[string]int32{
		"UNSPECIFIED":               0,
		"ADMINISTRATIVE":            1,
		"SENSOR":                    2,
		"ECMWF":                     3,
		"NOAA_GFS":                  4,
		"LOON_WIND":                 5,
		"SEASONAL_REGIONAL_AVERAGE": 7,
	}
)

func (x WeatherDataForecast_Provenance) Enum() *WeatherDataForecast_Provenance {
	p := new(WeatherDataForecast_Provenance)
	*p = x
	return p
}

func (x WeatherDataForecast_Provenance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeatherDataForecast_Provenance) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_wireless_propagation_proto_enumTypes[2].Descriptor()
}

func (WeatherDataForecast_Provenance) Type() protoreflect.EnumType {
	return &file_api_common_wireless_propagation_proto_enumTypes[2]
}

func (x WeatherDataForecast_Provenance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WeatherDataForecast_Provenance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WeatherDataForecast_Provenance(num)
	return nil
}

// Deprecated: Use WeatherDataForecast_Provenance.Descriptor instead.
func (WeatherDataForecast_Provenance) EnumDescriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{3, 0}
}

type PropagationWeather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval  *TimeInterval           `protobuf:"bytes,1,opt,name=interval" json:"interval,omitempty"`
	S2CellId  *uint64                 `protobuf:"varint,2,opt,name=s2_cell_id,json=s2CellId" json:"s2_cell_id,omitempty"`
	Forecasts []*WeatherDataForecast  `protobuf:"bytes,6,rep,name=forecasts" json:"forecasts,omitempty"`
	Tables    []*WeatherTable         `protobuf:"bytes,7,rep,name=tables" json:"tables,omitempty"`
	Samples   []*SparseWeatherSamples `protobuf:"bytes,8,rep,name=samples" json:"samples,omitempty"`
}

func (x *PropagationWeather) Reset() {
	*x = PropagationWeather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagationWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagationWeather) ProtoMessage() {}

func (x *PropagationWeather) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagationWeather.ProtoReflect.Descriptor instead.
func (*PropagationWeather) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{0}
}

func (x *PropagationWeather) GetInterval() *TimeInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *PropagationWeather) GetS2CellId() uint64 {
	if x != nil && x.S2CellId != nil {
		return *x.S2CellId
	}
	return 0
}

func (x *PropagationWeather) GetForecasts() []*WeatherDataForecast {
	if x != nil {
		return x.Forecasts
	}
	return nil
}

func (x *PropagationWeather) GetTables() []*WeatherTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *PropagationWeather) GetSamples() []*SparseWeatherSamples {
	if x != nil {
		return x.Samples
	}
	return nil
}

type WeatherTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provenance    *Provenance `protobuf:"varint,1,opt,name=provenance,enum=aalyria.spacetime.api.common.Provenance,def=0" json:"provenance,omitempty"`
	Params        []Parameter `protobuf:"varint,2,rep,name=params,enum=aalyria.spacetime.api.common.Parameter" json:"params,omitempty"`
	TimesS        []int64     `protobuf:"varint,3,rep,name=times_s,json=timesS" json:"times_s,omitempty"`
	HeightsWgs84M []int32     `protobuf:"varint,4,rep,name=heights_wgs84_m,json=heightsWgs84M" json:"heights_wgs84_m,omitempty"`
	Values        []float64   `protobuf:"fixed64,5,rep,name=values" json:"values,omitempty"`
}

// Default values for WeatherTable fields.
const (
	Default_WeatherTable_Provenance = Provenance_UNSPECIFIED
)

func (x *WeatherTable) Reset() {
	*x = WeatherTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherTable) ProtoMessage() {}

func (x *WeatherTable) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherTable.ProtoReflect.Descriptor instead.
func (*WeatherTable) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{1}
}

func (x *WeatherTable) GetProvenance() Provenance {
	if x != nil && x.Provenance != nil {
		return *x.Provenance
	}
	return Default_WeatherTable_Provenance
}

func (x *WeatherTable) GetParams() []Parameter {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *WeatherTable) GetTimesS() []int64 {
	if x != nil {
		return x.TimesS
	}
	return nil
}

func (x *WeatherTable) GetHeightsWgs84M() []int32 {
	if x != nil {
		return x.HeightsWgs84M
	}
	return nil
}

func (x *WeatherTable) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type SparseWeatherSamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provenance            *Provenance                    `protobuf:"varint,1,opt,name=provenance,enum=aalyria.spacetime.api.common.Provenance" json:"provenance,omitempty"`
	Param                 *Parameter                     `protobuf:"varint,2,opt,name=param,enum=aalyria.spacetime.api.common.Parameter" json:"param,omitempty"`
	TimeDomainRadius      *durationpb.Duration           `protobuf:"bytes,3,opt,name=time_domain_radius,json=timeDomainRadius" json:"time_domain_radius,omitempty"`
	AltitudeDomainRadiusM *int32                         `protobuf:"varint,4,opt,name=altitude_domain_radius_m,json=altitudeDomainRadiusM" json:"altitude_domain_radius_m,omitempty"`
	Samples               []*SparseWeatherSamples_Sample `protobuf:"bytes,5,rep,name=samples" json:"samples,omitempty"`
}

func (x *SparseWeatherSamples) Reset() {
	*x = SparseWeatherSamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseWeatherSamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseWeatherSamples) ProtoMessage() {}

func (x *SparseWeatherSamples) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseWeatherSamples.ProtoReflect.Descriptor instead.
func (*SparseWeatherSamples) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{2}
}

func (x *SparseWeatherSamples) GetProvenance() Provenance {
	if x != nil && x.Provenance != nil {
		return *x.Provenance
	}
	return Provenance_UNSPECIFIED
}

func (x *SparseWeatherSamples) GetParam() Parameter {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Parameter_UNSPECIFIED_PARAMETER
}

func (x *SparseWeatherSamples) GetTimeDomainRadius() *durationpb.Duration {
	if x != nil {
		return x.TimeDomainRadius
	}
	return nil
}

func (x *SparseWeatherSamples) GetAltitudeDomainRadiusM() int32 {
	if x != nil && x.AltitudeDomainRadiusM != nil {
		return *x.AltitudeDomainRadiusM
	}
	return 0
}

func (x *SparseWeatherSamples) GetSamples() []*SparseWeatherSamples_Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type WeatherDataForecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provenance                    *WeatherDataForecast_Provenance `protobuf:"varint,10,opt,name=provenance,enum=aalyria.spacetime.api.common.WeatherDataForecast_Provenance,def=0" json:"provenance,omitempty"`
	Interval                      *TimeInterval                   `protobuf:"bytes,11,opt,name=interval" json:"interval,omitempty"`
	AtmosphericPressurePa         *float64                        `protobuf:"fixed64,1,opt,name=atmospheric_pressure_pa,json=atmosphericPressurePa" json:"atmospheric_pressure_pa,omitempty"`
	TemperatureK                  *float64                        `protobuf:"fixed64,2,opt,name=temperature_k,json=temperatureK" json:"temperature_k,omitempty"`
	WaterVaporPressurePa          *float64                        `protobuf:"fixed64,3,opt,name=water_vapor_pressure_pa,json=waterVaporPressurePa" json:"water_vapor_pressure_pa,omitempty"`
	RainHeightWgs84M              *float64                        `protobuf:"fixed64,4,opt,name=rain_height_wgs84_m,json=rainHeightWgs84M" json:"rain_height_wgs84_m,omitempty"`
	RainRateMPerSecond            *float64                        `protobuf:"fixed64,5,opt,name=rain_rate_m_per_second,json=rainRateMPerSecond" json:"rain_rate_m_per_second,omitempty"`
	CloudCeilingWgs84M            *float64                        `protobuf:"fixed64,6,opt,name=cloud_ceiling_wgs84_m,json=cloudCeilingWgs84M" json:"cloud_ceiling_wgs84_m,omitempty"`
	CloudLayerThicknessM          *float64                        `protobuf:"fixed64,7,opt,name=cloud_layer_thickness_m,json=cloudLayerThicknessM" json:"cloud_layer_thickness_m,omitempty"`
	CloudLiquidWaterDensityGPerM3 *float64                        `protobuf:"fixed64,8,opt,name=cloud_liquid_water_density_g_per_m3,json=cloudLiquidWaterDensityGPerM3" json:"cloud_liquid_water_density_g_per_m3,omitempty"`
	CloudTemperatureK             *float64                        `protobuf:"fixed64,9,opt,name=cloud_temperature_k,json=cloudTemperatureK" json:"cloud_temperature_k,omitempty"`
}

// Default values for WeatherDataForecast fields.
const (
	Default_WeatherDataForecast_Provenance = WeatherDataForecast_UNSPECIFIED
)

func (x *WeatherDataForecast) Reset() {
	*x = WeatherDataForecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherDataForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherDataForecast) ProtoMessage() {}

func (x *WeatherDataForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherDataForecast.ProtoReflect.Descriptor instead.
func (*WeatherDataForecast) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{3}
}

func (x *WeatherDataForecast) GetProvenance() WeatherDataForecast_Provenance {
	if x != nil && x.Provenance != nil {
		return *x.Provenance
	}
	return Default_WeatherDataForecast_Provenance
}

func (x *WeatherDataForecast) GetInterval() *TimeInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *WeatherDataForecast) GetAtmosphericPressurePa() float64 {
	if x != nil && x.AtmosphericPressurePa != nil {
		return *x.AtmosphericPressurePa
	}
	return 0
}

func (x *WeatherDataForecast) GetTemperatureK() float64 {
	if x != nil && x.TemperatureK != nil {
		return *x.TemperatureK
	}
	return 0
}

func (x *WeatherDataForecast) GetWaterVaporPressurePa() float64 {
	if x != nil && x.WaterVaporPressurePa != nil {
		return *x.WaterVaporPressurePa
	}
	return 0
}

func (x *WeatherDataForecast) GetRainHeightWgs84M() float64 {
	if x != nil && x.RainHeightWgs84M != nil {
		return *x.RainHeightWgs84M
	}
	return 0
}

func (x *WeatherDataForecast) GetRainRateMPerSecond() float64 {
	if x != nil && x.RainRateMPerSecond != nil {
		return *x.RainRateMPerSecond
	}
	return 0
}

func (x *WeatherDataForecast) GetCloudCeilingWgs84M() float64 {
	if x != nil && x.CloudCeilingWgs84M != nil {
		return *x.CloudCeilingWgs84M
	}
	return 0
}

func (x *WeatherDataForecast) GetCloudLayerThicknessM() float64 {
	if x != nil && x.CloudLayerThicknessM != nil {
		return *x.CloudLayerThicknessM
	}
	return 0
}

func (x *WeatherDataForecast) GetCloudLiquidWaterDensityGPerM3() float64 {
	if x != nil && x.CloudLiquidWaterDensityGPerM3 != nil {
		return *x.CloudLiquidWaterDensityGPerM3
	}
	return 0
}

func (x *WeatherDataForecast) GetCloudTemperatureK() float64 {
	if x != nil && x.CloudTemperatureK != nil {
		return *x.CloudTemperatureK
	}
	return 0
}

type GaussianProcessPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean     *float64 `protobuf:"fixed64,1,opt,name=mean" json:"mean,omitempty"`
	Variance *float64 `protobuf:"fixed64,2,opt,name=variance" json:"variance,omitempty"`
}

func (x *GaussianProcessPrediction) Reset() {
	*x = GaussianProcessPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaussianProcessPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaussianProcessPrediction) ProtoMessage() {}

func (x *GaussianProcessPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaussianProcessPrediction.ProtoReflect.Descriptor instead.
func (*GaussianProcessPrediction) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{4}
}

func (x *GaussianProcessPrediction) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *GaussianProcessPrediction) GetVariance() float64 {
	if x != nil && x.Variance != nil {
		return *x.Variance
	}
	return 0
}

type SparseWeatherSamples_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampS   *int64   `protobuf:"varint,4,opt,name=timestamp_s,json=timestampS" json:"timestamp_s,omitempty"`
	HeightWgs84M *int32   `protobuf:"varint,2,opt,name=height_wgs84_m,json=heightWgs84M" json:"height_wgs84_m,omitempty"`
	Value        *float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
}

func (x *SparseWeatherSamples_Sample) Reset() {
	*x = SparseWeatherSamples_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_propagation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseWeatherSamples_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseWeatherSamples_Sample) ProtoMessage() {}

func (x *SparseWeatherSamples_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_propagation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseWeatherSamples_Sample.ProtoReflect.Descriptor instead.
func (*SparseWeatherSamples_Sample) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_propagation_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SparseWeatherSamples_Sample) GetTimestampS() int64 {
	if x != nil && x.TimestampS != nil {
		return *x.TimestampS
	}
	return 0
}

func (x *SparseWeatherSamples_Sample) GetHeightWgs84M() int32 {
	if x != nil && x.HeightWgs84M != nil {
		return *x.HeightWgs84M
	}
	return 0
}

func (x *SparseWeatherSamples_Sample) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

var File_api_common_wireless_propagation_proto protoreflect.FileDescriptor

var file_api_common_wireless_propagation_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x73,
	0x32, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x06, 0x4a, 0x08, 0x08, 0x09, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xff, 0x01, 0x0a,
	0x0c, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x77, 0x67, 0x73, 0x38, 0x34, 0x5f,
	0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x57, 0x67, 0x73, 0x38, 0x34, 0x4d, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe3,
	0x03, 0x0a, 0x14, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x47, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x4d, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0x6b, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x67, 0x73,
	0x38, 0x34, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x57, 0x67, 0x73, 0x38, 0x34, 0x4d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xbc, 0x06, 0x0a, 0x13, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x50, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x12, 0x35, 0x0a, 0x17,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x70, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x56, 0x61, 0x70, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x77, 0x67, 0x73, 0x38, 0x34, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x72, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x67, 0x73, 0x38,
	0x34, 0x4d, 0x12, 0x32, 0x0a, 0x16, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x67, 0x73, 0x38, 0x34, 0x5f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x65, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x57, 0x67, 0x73, 0x38, 0x34, 0x4d, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x4d,
	0x12, 0x4a, 0x0a, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x47, 0x50, 0x65, 0x72, 0x4d, 0x33, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x22, 0x8a, 0x01, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x43, 0x4d, 0x57, 0x46, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x41, 0x41, 0x5f,
	0x47, 0x46, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x4f, 0x4e, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x07, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x4a, 0x08, 0x08, 0x0c, 0x10, 0x80, 0x80,
	0x80, 0x80, 0x02, 0x22, 0x4b, 0x0a, 0x19, 0x47, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2a, 0xa2, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x4d,
	0x4f, 0x53, 0x50, 0x48, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x56, 0x41, 0x50, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x57, 0x47, 0x53, 0x38, 0x34, 0x5f, 0x4d, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x45, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x47, 0x53,
	0x38, 0x34, 0x5f, 0x4d, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x49, 0x43, 0x4b, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x4d, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x49, 0x51,
	0x55, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x49, 0x54,
	0x59, 0x5f, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x33, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4b, 0x10, 0x09, 0x2a, 0xa0, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x43, 0x4d, 0x57, 0x46, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x41, 0x41, 0x5f, 0x47, 0x46, 0x53, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4f, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x08, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_wireless_propagation_proto_rawDescOnce sync.Once
	file_api_common_wireless_propagation_proto_rawDescData = file_api_common_wireless_propagation_proto_rawDesc
)

func file_api_common_wireless_propagation_proto_rawDescGZIP() []byte {
	file_api_common_wireless_propagation_proto_rawDescOnce.Do(func() {
		file_api_common_wireless_propagation_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_wireless_propagation_proto_rawDescData)
	})
	return file_api_common_wireless_propagation_proto_rawDescData
}

var file_api_common_wireless_propagation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_common_wireless_propagation_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_common_wireless_propagation_proto_goTypes = []interface{}{
	(Parameter)(0),                      // 0: aalyria.spacetime.api.common.Parameter
	(Provenance)(0),                     // 1: aalyria.spacetime.api.common.Provenance
	(WeatherDataForecast_Provenance)(0), // 2: aalyria.spacetime.api.common.WeatherDataForecast.Provenance
	(*PropagationWeather)(nil),          // 3: aalyria.spacetime.api.common.PropagationWeather
	(*WeatherTable)(nil),                // 4: aalyria.spacetime.api.common.WeatherTable
	(*SparseWeatherSamples)(nil),        // 5: aalyria.spacetime.api.common.SparseWeatherSamples
	(*WeatherDataForecast)(nil),         // 6: aalyria.spacetime.api.common.WeatherDataForecast
	(*GaussianProcessPrediction)(nil),   // 7: aalyria.spacetime.api.common.GaussianProcessPrediction
	(*SparseWeatherSamples_Sample)(nil), // 8: aalyria.spacetime.api.common.SparseWeatherSamples.Sample
	(*TimeInterval)(nil),                // 9: aalyria.spacetime.api.common.TimeInterval
	(*durationpb.Duration)(nil),         // 10: google.protobuf.Duration
}
var file_api_common_wireless_propagation_proto_depIdxs = []int32{
	9,  // 0: aalyria.spacetime.api.common.PropagationWeather.interval:type_name -> aalyria.spacetime.api.common.TimeInterval
	6,  // 1: aalyria.spacetime.api.common.PropagationWeather.forecasts:type_name -> aalyria.spacetime.api.common.WeatherDataForecast
	4,  // 2: aalyria.spacetime.api.common.PropagationWeather.tables:type_name -> aalyria.spacetime.api.common.WeatherTable
	5,  // 3: aalyria.spacetime.api.common.PropagationWeather.samples:type_name -> aalyria.spacetime.api.common.SparseWeatherSamples
	1,  // 4: aalyria.spacetime.api.common.WeatherTable.provenance:type_name -> aalyria.spacetime.api.common.Provenance
	0,  // 5: aalyria.spacetime.api.common.WeatherTable.params:type_name -> aalyria.spacetime.api.common.Parameter
	1,  // 6: aalyria.spacetime.api.common.SparseWeatherSamples.provenance:type_name -> aalyria.spacetime.api.common.Provenance
	0,  // 7: aalyria.spacetime.api.common.SparseWeatherSamples.param:type_name -> aalyria.spacetime.api.common.Parameter
	10, // 8: aalyria.spacetime.api.common.SparseWeatherSamples.time_domain_radius:type_name -> google.protobuf.Duration
	8,  // 9: aalyria.spacetime.api.common.SparseWeatherSamples.samples:type_name -> aalyria.spacetime.api.common.SparseWeatherSamples.Sample
	2,  // 10: aalyria.spacetime.api.common.WeatherDataForecast.provenance:type_name -> aalyria.spacetime.api.common.WeatherDataForecast.Provenance
	9,  // 11: aalyria.spacetime.api.common.WeatherDataForecast.interval:type_name -> aalyria.spacetime.api.common.TimeInterval
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_common_wireless_propagation_proto_init() }
func file_api_common_wireless_propagation_proto_init() {
	if File_api_common_wireless_propagation_proto != nil {
		return
	}
	file_api_common_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_wireless_propagation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagationWeather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_propagation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_propagation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseWeatherSamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_propagation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherDataForecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_propagation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaussianProcessPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_propagation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseWeatherSamples_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_wireless_propagation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_wireless_propagation_proto_goTypes,
		DependencyIndexes: file_api_common_wireless_propagation_proto_depIdxs,
		EnumInfos:         file_api_common_wireless_propagation_proto_enumTypes,
		MessageInfos:      file_api_common_wireless_propagation_proto_msgTypes,
	}.Build()
	File_api_common_wireless_propagation_proto = out.File
	file_api_common_wireless_propagation_proto_rawDesc = nil
	file_api_common_wireless_propagation_proto_goTypes = nil
	file_api_common_wireless_propagation_proto_depIdxs = nil
}

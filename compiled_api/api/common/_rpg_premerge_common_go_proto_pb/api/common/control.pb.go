// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/control.proto

package common

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduledControlUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      *string                `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	UpdateId    *string                `protobuf:"bytes,2,opt,name=update_id,json=updateId" json:"update_id,omitempty"`
	TimeToEnact *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_to_enact,json=timeToEnact" json:"time_to_enact,omitempty"`
	Change      *ControlPlaneUpdate    `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
}

func (x *ScheduledControlUpdate) Reset() {
	*x = ScheduledControlUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledControlUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledControlUpdate) ProtoMessage() {}

func (x *ScheduledControlUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledControlUpdate.ProtoReflect.Descriptor instead.
func (*ScheduledControlUpdate) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduledControlUpdate) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *ScheduledControlUpdate) GetUpdateId() string {
	if x != nil && x.UpdateId != nil {
		return *x.UpdateId
	}
	return ""
}

func (x *ScheduledControlUpdate) GetTimeToEnact() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeToEnact
	}
	return nil
}

func (x *ScheduledControlUpdate) GetChange() *ControlPlaneUpdate {
	if x != nil {
		return x.Change
	}
	return nil
}

type ScheduledControlDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    *string  `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	UpdateIds []string `protobuf:"bytes,2,rep,name=update_ids,json=updateIds" json:"update_ids,omitempty"`
}

func (x *ScheduledControlDeletion) Reset() {
	*x = ScheduledControlDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledControlDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledControlDeletion) ProtoMessage() {}

func (x *ScheduledControlDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledControlDeletion.ProtoReflect.Descriptor instead.
func (*ScheduledControlDeletion) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduledControlDeletion) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *ScheduledControlDeletion) GetUpdateIds() []string {
	if x != nil {
		return x.UpdateIds
	}
	return nil
}

type ScheduledControlUpdateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateId  *string   `protobuf:"bytes,1,opt,name=update_id,json=updateId" json:"update_id,omitempty"`
	Timestamp *DateTime `protobuf:"bytes,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to State:
	//
	//	*ScheduledControlUpdateStatus_Scheduled
	//	*ScheduledControlUpdateStatus_EnactmentAttempted
	//	*ScheduledControlUpdateStatus_Unscheduled
	State isScheduledControlUpdateStatus_State `protobuf_oneof:"state"`
}

func (x *ScheduledControlUpdateStatus) Reset() {
	*x = ScheduledControlUpdateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledControlUpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledControlUpdateStatus) ProtoMessage() {}

func (x *ScheduledControlUpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledControlUpdateStatus.ProtoReflect.Descriptor instead.
func (*ScheduledControlUpdateStatus) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduledControlUpdateStatus) GetUpdateId() string {
	if x != nil && x.UpdateId != nil {
		return *x.UpdateId
	}
	return ""
}

func (x *ScheduledControlUpdateStatus) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *ScheduledControlUpdateStatus) GetState() isScheduledControlUpdateStatus_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *ScheduledControlUpdateStatus) GetScheduled() *status.Status {
	if x, ok := x.GetState().(*ScheduledControlUpdateStatus_Scheduled); ok {
		return x.Scheduled
	}
	return nil
}

func (x *ScheduledControlUpdateStatus) GetEnactmentAttempted() *status.Status {
	if x, ok := x.GetState().(*ScheduledControlUpdateStatus_EnactmentAttempted); ok {
		return x.EnactmentAttempted
	}
	return nil
}

func (x *ScheduledControlUpdateStatus) GetUnscheduled() *status.Status {
	if x, ok := x.GetState().(*ScheduledControlUpdateStatus_Unscheduled); ok {
		return x.Unscheduled
	}
	return nil
}

type isScheduledControlUpdateStatus_State interface {
	isScheduledControlUpdateStatus_State()
}

type ScheduledControlUpdateStatus_Scheduled struct {
	Scheduled *status.Status `protobuf:"bytes,4,opt,name=scheduled,oneof"`
}

type ScheduledControlUpdateStatus_EnactmentAttempted struct {
	EnactmentAttempted *status.Status `protobuf:"bytes,6,opt,name=enactment_attempted,json=enactmentAttempted,oneof"`
}

type ScheduledControlUpdateStatus_Unscheduled struct {
	Unscheduled *status.Status `protobuf:"bytes,8,opt,name=unscheduled,oneof"`
}

func (*ScheduledControlUpdateStatus_Scheduled) isScheduledControlUpdateStatus_State() {}

func (*ScheduledControlUpdateStatus_EnactmentAttempted) isScheduledControlUpdateStatus_State() {}

func (*ScheduledControlUpdateStatus_Unscheduled) isScheduledControlUpdateStatus_State() {}

type ControlPlaneUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UpdateType:
	//
	//	*ControlPlaneUpdate_BeamUpdate
	//	*ControlPlaneUpdate_RadioUpdate
	//	*ControlPlaneUpdate_FlowUpdate
	//	*ControlPlaneUpdate_TunnelUpdate
	UpdateType isControlPlaneUpdate_UpdateType `protobuf_oneof:"update_type"`
}

func (x *ControlPlaneUpdate) Reset() {
	*x = ControlPlaneUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneUpdate) ProtoMessage() {}

func (x *ControlPlaneUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneUpdate.ProtoReflect.Descriptor instead.
func (*ControlPlaneUpdate) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{3}
}

func (m *ControlPlaneUpdate) GetUpdateType() isControlPlaneUpdate_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return nil
}

func (x *ControlPlaneUpdate) GetBeamUpdate() *BeamUpdate {
	if x, ok := x.GetUpdateType().(*ControlPlaneUpdate_BeamUpdate); ok {
		return x.BeamUpdate
	}
	return nil
}

func (x *ControlPlaneUpdate) GetRadioUpdate() *RadioUpdate {
	if x, ok := x.GetUpdateType().(*ControlPlaneUpdate_RadioUpdate); ok {
		return x.RadioUpdate
	}
	return nil
}

func (x *ControlPlaneUpdate) GetFlowUpdate() *FlowUpdate {
	if x, ok := x.GetUpdateType().(*ControlPlaneUpdate_FlowUpdate); ok {
		return x.FlowUpdate
	}
	return nil
}

func (x *ControlPlaneUpdate) GetTunnelUpdate() *TunnelUpdate {
	if x, ok := x.GetUpdateType().(*ControlPlaneUpdate_TunnelUpdate); ok {
		return x.TunnelUpdate
	}
	return nil
}

type isControlPlaneUpdate_UpdateType interface {
	isControlPlaneUpdate_UpdateType()
}

type ControlPlaneUpdate_BeamUpdate struct {
	BeamUpdate *BeamUpdate `protobuf:"bytes,1,opt,name=beam_update,json=beamUpdate,oneof"`
}

type ControlPlaneUpdate_RadioUpdate struct {
	RadioUpdate *RadioUpdate `protobuf:"bytes,2,opt,name=radio_update,json=radioUpdate,oneof"`
}

type ControlPlaneUpdate_FlowUpdate struct {
	FlowUpdate *FlowUpdate `protobuf:"bytes,3,opt,name=flow_update,json=flowUpdate,oneof"`
}

type ControlPlaneUpdate_TunnelUpdate struct {
	TunnelUpdate *TunnelUpdate `protobuf:"bytes,4,opt,name=tunnel_update,json=tunnelUpdate,oneof"`
}

func (*ControlPlaneUpdate_BeamUpdate) isControlPlaneUpdate_UpdateType() {}

func (*ControlPlaneUpdate_RadioUpdate) isControlPlaneUpdate_UpdateType() {}

func (*ControlPlaneUpdate_FlowUpdate) isControlPlaneUpdate_UpdateType() {}

func (*ControlPlaneUpdate_TunnelUpdate) isControlPlaneUpdate_UpdateType() {}

type ControlPlaneState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeamStates      *BeamStates   `protobuf:"bytes,2,opt,name=beam_states,json=beamStates" json:"beam_states,omitempty"`
	RadioStates     *RadioStates  `protobuf:"bytes,3,opt,name=radio_states,json=radioStates" json:"radio_states,omitempty"`
	ForwardingState *FlowState    `protobuf:"bytes,5,opt,name=forwarding_state,json=forwardingState" json:"forwarding_state,omitempty"`
	TunnelStates    *TunnelStates `protobuf:"bytes,6,opt,name=tunnel_states,json=tunnelStates" json:"tunnel_states,omitempty"`
}

func (x *ControlPlaneState) Reset() {
	*x = ControlPlaneState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneState) ProtoMessage() {}

func (x *ControlPlaneState) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneState.ProtoReflect.Descriptor instead.
func (*ControlPlaneState) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{4}
}

func (x *ControlPlaneState) GetBeamStates() *BeamStates {
	if x != nil {
		return x.BeamStates
	}
	return nil
}

func (x *ControlPlaneState) GetRadioStates() *RadioStates {
	if x != nil {
		return x.RadioStates
	}
	return nil
}

func (x *ControlPlaneState) GetForwardingState() *FlowState {
	if x != nil {
		return x.ForwardingState
	}
	return nil
}

func (x *ControlPlaneState) GetTunnelStates() *TunnelStates {
	if x != nil {
		return x.TunnelStates
	}
	return nil
}

type ScheduledControlUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompiledUpdate *ScheduledControlUpdate `protobuf:"bytes,1,opt,name=compiled_update,json=compiledUpdate" json:"compiled_update,omitempty"`
	Completed      *status.Status          `protobuf:"bytes,8,opt,name=completed" json:"completed,omitempty"`
	Scheduled      *bool                   `protobuf:"varint,11,opt,name=scheduled" json:"scheduled,omitempty"`
	Unscheduled    *status.Status          `protobuf:"bytes,12,opt,name=unscheduled" json:"unscheduled,omitempty"`
}

func (x *ScheduledControlUpdateReq) Reset() {
	*x = ScheduledControlUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledControlUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledControlUpdateReq) ProtoMessage() {}

func (x *ScheduledControlUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledControlUpdateReq.ProtoReflect.Descriptor instead.
func (*ScheduledControlUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduledControlUpdateReq) GetCompiledUpdate() *ScheduledControlUpdate {
	if x != nil {
		return x.CompiledUpdate
	}
	return nil
}

func (x *ScheduledControlUpdateReq) GetCompleted() *status.Status {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *ScheduledControlUpdateReq) GetScheduled() bool {
	if x != nil && x.Scheduled != nil {
		return *x.Scheduled
	}
	return false
}

func (x *ScheduledControlUpdateReq) GetUnscheduled() *status.Status {
	if x != nil {
		return x.Unscheduled
	}
	return nil
}

type TaskCdpiStreamCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamCountPerPriority map[uint32]int32 `protobuf:"bytes,1,rep,name=stream_count_per_priority,json=streamCountPerPriority" json:"stream_count_per_priority,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *TaskCdpiStreamCount) Reset() {
	*x = TaskCdpiStreamCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCdpiStreamCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCdpiStreamCount) ProtoMessage() {}

func (x *TaskCdpiStreamCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCdpiStreamCount.ProtoReflect.Descriptor instead.
func (*TaskCdpiStreamCount) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{6}
}

func (x *TaskCdpiStreamCount) GetStreamCountPerPriority() map[uint32]int32 {
	if x != nil {
		return x.StreamCountPerPriority
	}
	return nil
}

type CdpiFrontendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamCountPerNode map[string]*TaskCdpiStreamCount `protobuf:"bytes,1,rep,name=stream_count_per_node,json=streamCountPerNode" json:"stream_count_per_node,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *CdpiFrontendInfo) Reset() {
	*x = CdpiFrontendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiFrontendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiFrontendInfo) ProtoMessage() {}

func (x *CdpiFrontendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiFrontendInfo.ProtoReflect.Descriptor instead.
func (*CdpiFrontendInfo) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{7}
}

func (x *CdpiFrontendInfo) GetStreamCountPerNode() map[string]*TaskCdpiStreamCount {
	if x != nil {
		return x.StreamCountPerNode
	}
	return nil
}

type CdpiStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamCountPerTask     map[string]*TaskCdpiStreamCount `protobuf:"bytes,2,rep,name=stream_count_per_task,json=streamCountPerTask" json:"stream_count_per_task,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StreamCountPerPriority map[uint32]int32                `protobuf:"bytes,3,rep,name=stream_count_per_priority,json=streamCountPerPriority" json:"stream_count_per_priority,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *CdpiStreamInfo) Reset() {
	*x = CdpiStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiStreamInfo) ProtoMessage() {}

func (x *CdpiStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiStreamInfo.ProtoReflect.Descriptor instead.
func (*CdpiStreamInfo) Descriptor() ([]byte, []int) {
	return file_api_common_control_proto_rawDescGZIP(), []int{8}
}

func (x *CdpiStreamInfo) GetStreamCountPerTask() map[string]*TaskCdpiStreamCount {
	if x != nil {
		return x.StreamCountPerTask
	}
	return nil
}

func (x *CdpiStreamInfo) GetStreamCountPerPriority() map[uint32]int32 {
	if x != nil {
		return x.StreamCountPerPriority
	}
	return nil
}

var File_api_common_control_proto protoreflect.FileDescriptor

var file_api_common_control_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x02, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4f, 0x0a, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x92, 0x02, 0x0a,
	0x19, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x64, 0x70, 0x69, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x64, 0x70, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0x49, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x87, 0x02, 0x0a, 0x10, 0x43, 0x64, 0x70, 0x69, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x79, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x78, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x64, 0x70, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x03, 0x0a, 0x0e, 0x43, 0x64,
	0x70, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x77, 0x0a, 0x15,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x78, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x64, 0x70, 0x69, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x08, 0x08, 0x04, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_control_proto_rawDescOnce sync.Once
	file_api_common_control_proto_rawDescData = file_api_common_control_proto_rawDesc
)

func file_api_common_control_proto_rawDescGZIP() []byte {
	file_api_common_control_proto_rawDescOnce.Do(func() {
		file_api_common_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_control_proto_rawDescData)
	})
	return file_api_common_control_proto_rawDescData
}

var file_api_common_control_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_common_control_proto_goTypes = []interface{}{
	(*ScheduledControlUpdate)(nil),       // 0: aalyria.spacetime.api.common.ScheduledControlUpdate
	(*ScheduledControlDeletion)(nil),     // 1: aalyria.spacetime.api.common.ScheduledControlDeletion
	(*ScheduledControlUpdateStatus)(nil), // 2: aalyria.spacetime.api.common.ScheduledControlUpdateStatus
	(*ControlPlaneUpdate)(nil),           // 3: aalyria.spacetime.api.common.ControlPlaneUpdate
	(*ControlPlaneState)(nil),            // 4: aalyria.spacetime.api.common.ControlPlaneState
	(*ScheduledControlUpdateReq)(nil),    // 5: aalyria.spacetime.api.common.ScheduledControlUpdateReq
	(*TaskCdpiStreamCount)(nil),          // 6: aalyria.spacetime.api.common.TaskCdpiStreamCount
	(*CdpiFrontendInfo)(nil),             // 7: aalyria.spacetime.api.common.CdpiFrontendInfo
	(*CdpiStreamInfo)(nil),               // 8: aalyria.spacetime.api.common.CdpiStreamInfo
	nil,                                  // 9: aalyria.spacetime.api.common.TaskCdpiStreamCount.StreamCountPerPriorityEntry
	nil,                                  // 10: aalyria.spacetime.api.common.CdpiFrontendInfo.StreamCountPerNodeEntry
	nil,                                  // 11: aalyria.spacetime.api.common.CdpiStreamInfo.StreamCountPerTaskEntry
	nil,                                  // 12: aalyria.spacetime.api.common.CdpiStreamInfo.StreamCountPerPriorityEntry
	(*timestamppb.Timestamp)(nil),        // 13: google.protobuf.Timestamp
	(*DateTime)(nil),                     // 14: aalyria.spacetime.api.common.DateTime
	(*status.Status)(nil),                // 15: google.rpc.Status
	(*BeamUpdate)(nil),                   // 16: aalyria.spacetime.api.common.BeamUpdate
	(*RadioUpdate)(nil),                  // 17: aalyria.spacetime.api.common.RadioUpdate
	(*FlowUpdate)(nil),                   // 18: aalyria.spacetime.api.common.FlowUpdate
	(*TunnelUpdate)(nil),                 // 19: aalyria.spacetime.api.common.TunnelUpdate
	(*BeamStates)(nil),                   // 20: aalyria.spacetime.api.common.BeamStates
	(*RadioStates)(nil),                  // 21: aalyria.spacetime.api.common.RadioStates
	(*FlowState)(nil),                    // 22: aalyria.spacetime.api.common.FlowState
	(*TunnelStates)(nil),                 // 23: aalyria.spacetime.api.common.TunnelStates
}
var file_api_common_control_proto_depIdxs = []int32{
	13, // 0: aalyria.spacetime.api.common.ScheduledControlUpdate.time_to_enact:type_name -> google.protobuf.Timestamp
	3,  // 1: aalyria.spacetime.api.common.ScheduledControlUpdate.change:type_name -> aalyria.spacetime.api.common.ControlPlaneUpdate
	14, // 2: aalyria.spacetime.api.common.ScheduledControlUpdateStatus.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	15, // 3: aalyria.spacetime.api.common.ScheduledControlUpdateStatus.scheduled:type_name -> google.rpc.Status
	15, // 4: aalyria.spacetime.api.common.ScheduledControlUpdateStatus.enactment_attempted:type_name -> google.rpc.Status
	15, // 5: aalyria.spacetime.api.common.ScheduledControlUpdateStatus.unscheduled:type_name -> google.rpc.Status
	16, // 6: aalyria.spacetime.api.common.ControlPlaneUpdate.beam_update:type_name -> aalyria.spacetime.api.common.BeamUpdate
	17, // 7: aalyria.spacetime.api.common.ControlPlaneUpdate.radio_update:type_name -> aalyria.spacetime.api.common.RadioUpdate
	18, // 8: aalyria.spacetime.api.common.ControlPlaneUpdate.flow_update:type_name -> aalyria.spacetime.api.common.FlowUpdate
	19, // 9: aalyria.spacetime.api.common.ControlPlaneUpdate.tunnel_update:type_name -> aalyria.spacetime.api.common.TunnelUpdate
	20, // 10: aalyria.spacetime.api.common.ControlPlaneState.beam_states:type_name -> aalyria.spacetime.api.common.BeamStates
	21, // 11: aalyria.spacetime.api.common.ControlPlaneState.radio_states:type_name -> aalyria.spacetime.api.common.RadioStates
	22, // 12: aalyria.spacetime.api.common.ControlPlaneState.forwarding_state:type_name -> aalyria.spacetime.api.common.FlowState
	23, // 13: aalyria.spacetime.api.common.ControlPlaneState.tunnel_states:type_name -> aalyria.spacetime.api.common.TunnelStates
	0,  // 14: aalyria.spacetime.api.common.ScheduledControlUpdateReq.compiled_update:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdate
	15, // 15: aalyria.spacetime.api.common.ScheduledControlUpdateReq.completed:type_name -> google.rpc.Status
	15, // 16: aalyria.spacetime.api.common.ScheduledControlUpdateReq.unscheduled:type_name -> google.rpc.Status
	9,  // 17: aalyria.spacetime.api.common.TaskCdpiStreamCount.stream_count_per_priority:type_name -> aalyria.spacetime.api.common.TaskCdpiStreamCount.StreamCountPerPriorityEntry
	10, // 18: aalyria.spacetime.api.common.CdpiFrontendInfo.stream_count_per_node:type_name -> aalyria.spacetime.api.common.CdpiFrontendInfo.StreamCountPerNodeEntry
	11, // 19: aalyria.spacetime.api.common.CdpiStreamInfo.stream_count_per_task:type_name -> aalyria.spacetime.api.common.CdpiStreamInfo.StreamCountPerTaskEntry
	12, // 20: aalyria.spacetime.api.common.CdpiStreamInfo.stream_count_per_priority:type_name -> aalyria.spacetime.api.common.CdpiStreamInfo.StreamCountPerPriorityEntry
	6,  // 21: aalyria.spacetime.api.common.CdpiFrontendInfo.StreamCountPerNodeEntry.value:type_name -> aalyria.spacetime.api.common.TaskCdpiStreamCount
	6,  // 22: aalyria.spacetime.api.common.CdpiStreamInfo.StreamCountPerTaskEntry.value:type_name -> aalyria.spacetime.api.common.TaskCdpiStreamCount
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_common_control_proto_init() }
func file_api_common_control_proto_init() {
	if File_api_common_control_proto != nil {
		return
	}
	file_api_common_control_beam_proto_init()
	file_api_common_control_flow_proto_init()
	file_api_common_control_radio_proto_init()
	file_api_common_control_tunnel_proto_init()
	file_api_common_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledControlUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledControlDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledControlUpdateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledControlUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCdpiStreamCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiFrontendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_control_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ScheduledControlUpdateStatus_Scheduled)(nil),
		(*ScheduledControlUpdateStatus_EnactmentAttempted)(nil),
		(*ScheduledControlUpdateStatus_Unscheduled)(nil),
	}
	file_api_common_control_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ControlPlaneUpdate_BeamUpdate)(nil),
		(*ControlPlaneUpdate_RadioUpdate)(nil),
		(*ControlPlaneUpdate_FlowUpdate)(nil),
		(*ControlPlaneUpdate_TunnelUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_control_proto_goTypes,
		DependencyIndexes: file_api_common_control_proto_depIdxs,
		MessageInfos:      file_api_common_control_proto_msgTypes,
	}.Build()
	File_api_common_control_proto = out.File
	file_api_common_control_proto_rawDesc = nil
	file_api_common_control_proto_goTypes = nil
	file_api_common_control_proto_depIdxs = nil
}

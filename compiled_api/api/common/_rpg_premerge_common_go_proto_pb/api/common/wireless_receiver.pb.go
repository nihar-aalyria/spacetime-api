// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/wireless_receiver.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RxChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterFrequencyHz []int64 `protobuf:"varint,1,rep,name=center_frequency_hz,json=centerFrequencyHz" json:"center_frequency_hz,omitempty"`
}

func (x *RxChannels) Reset() {
	*x = RxChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxChannels) ProtoMessage() {}

func (x *RxChannels) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxChannels.ProtoReflect.Descriptor instead.
func (*RxChannels) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{0}
}

func (x *RxChannels) GetCenterFrequencyHz() []int64 {
	if x != nil {
		return x.CenterFrequencyHz
	}
	return nil
}

type ReceiverDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ChannelSet             map[string]*RxChannels    `protobuf:"bytes,10,rep,name=channel_set,json=channelSet" json:"channel_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ChannelSelectionMethod *ChannelSelectionMethod   `protobuf:"varint,9,opt,name=channel_selection_method,json=channelSelectionMethod,enum=aalyria.spacetime.api.common.ChannelSelectionMethod" json:"channel_selection_method,omitempty"`
	SignalProcessingStep   []*ReceiveSignalProcessor `protobuf:"bytes,11,rep,name=signal_processing_step,json=signalProcessingStep" json:"signal_processing_step,omitempty"`
}

func (x *ReceiverDefinition) Reset() {
	*x = ReceiverDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverDefinition) ProtoMessage() {}

func (x *ReceiverDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverDefinition.ProtoReflect.Descriptor instead.
func (*ReceiverDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{1}
}

func (x *ReceiverDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ReceiverDefinition) GetChannelSet() map[string]*RxChannels {
	if x != nil {
		return x.ChannelSet
	}
	return nil
}

func (x *ReceiverDefinition) GetChannelSelectionMethod() ChannelSelectionMethod {
	if x != nil && x.ChannelSelectionMethod != nil {
		return *x.ChannelSelectionMethod
	}
	return ChannelSelectionMethod_CHANNEL_SELECTION_METHOD_UNKNOWN
}

func (x *ReceiverDefinition) GetSignalProcessingStep() []*ReceiveSignalProcessor {
	if x != nil {
		return x.SignalProcessingStep
	}
	return nil
}

type ReceiveSignalProcessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ReceiveSignalProcessor_Filter
	//	*ReceiveSignalProcessor_Photodetector
	//	*ReceiveSignalProcessor_Amplifier
	//	*ReceiveSignalProcessor_GainOrLoss
	Type isReceiveSignalProcessor_Type `protobuf_oneof:"type"`
}

func (x *ReceiveSignalProcessor) Reset() {
	*x = ReceiveSignalProcessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSignalProcessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSignalProcessor) ProtoMessage() {}

func (x *ReceiveSignalProcessor) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSignalProcessor.ProtoReflect.Descriptor instead.
func (*ReceiveSignalProcessor) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{2}
}

func (m *ReceiveSignalProcessor) GetType() isReceiveSignalProcessor_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ReceiveSignalProcessor) GetFilter() *Filter {
	if x, ok := x.GetType().(*ReceiveSignalProcessor_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *ReceiveSignalProcessor) GetPhotodetector() *PhotodetectorDefinition {
	if x, ok := x.GetType().(*ReceiveSignalProcessor_Photodetector); ok {
		return x.Photodetector
	}
	return nil
}

func (x *ReceiveSignalProcessor) GetAmplifier() *AmplifierDefinition {
	if x, ok := x.GetType().(*ReceiveSignalProcessor_Amplifier); ok {
		return x.Amplifier
	}
	return nil
}

func (x *ReceiveSignalProcessor) GetGainOrLoss() *MiscGainOrLoss {
	if x, ok := x.GetType().(*ReceiveSignalProcessor_GainOrLoss); ok {
		return x.GainOrLoss
	}
	return nil
}

type isReceiveSignalProcessor_Type interface {
	isReceiveSignalProcessor_Type()
}

type ReceiveSignalProcessor_Filter struct {
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,oneof"`
}

type ReceiveSignalProcessor_Photodetector struct {
	Photodetector *PhotodetectorDefinition `protobuf:"bytes,2,opt,name=photodetector,oneof"`
}

type ReceiveSignalProcessor_Amplifier struct {
	Amplifier *AmplifierDefinition `protobuf:"bytes,3,opt,name=amplifier,oneof"`
}

type ReceiveSignalProcessor_GainOrLoss struct {
	GainOrLoss *MiscGainOrLoss `protobuf:"bytes,4,opt,name=gain_or_loss,json=gainOrLoss,oneof"`
}

func (*ReceiveSignalProcessor_Filter) isReceiveSignalProcessor_Type() {}

func (*ReceiveSignalProcessor_Photodetector) isReceiveSignalProcessor_Type() {}

func (*ReceiveSignalProcessor_Amplifier) isReceiveSignalProcessor_Type() {}

func (*ReceiveSignalProcessor_GainOrLoss) isReceiveSignalProcessor_Type() {}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrequencyHz           *float64 `protobuf:"fixed64,1,opt,name=frequency_hz,json=frequencyHz" json:"frequency_hz,omitempty"`
	LowerBandwidthLimitHz *float64 `protobuf:"fixed64,2,opt,name=lower_bandwidth_limit_hz,json=lowerBandwidthLimitHz" json:"lower_bandwidth_limit_hz,omitempty"`
	UpperBandwidthLimitHz *float64 `protobuf:"fixed64,3,opt,name=upper_bandwidth_limit_hz,json=upperBandwidthLimitHz" json:"upper_bandwidth_limit_hz,omitempty"`
	NoiseTemperatureK     *float64 `protobuf:"fixed64,4,opt,name=noise_temperature_k,json=noiseTemperatureK" json:"noise_temperature_k,omitempty"`
	// Types that are assignable to FilterType:
	//
	//	*Filter_Rectangular
	//	*Filter_Linear
	FilterType isFilter_FilterType `protobuf_oneof:"filter_type"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetFrequencyHz() float64 {
	if x != nil && x.FrequencyHz != nil {
		return *x.FrequencyHz
	}
	return 0
}

func (x *Filter) GetLowerBandwidthLimitHz() float64 {
	if x != nil && x.LowerBandwidthLimitHz != nil {
		return *x.LowerBandwidthLimitHz
	}
	return 0
}

func (x *Filter) GetUpperBandwidthLimitHz() float64 {
	if x != nil && x.UpperBandwidthLimitHz != nil {
		return *x.UpperBandwidthLimitHz
	}
	return 0
}

func (x *Filter) GetNoiseTemperatureK() float64 {
	if x != nil && x.NoiseTemperatureK != nil {
		return *x.NoiseTemperatureK
	}
	return 0
}

func (m *Filter) GetFilterType() isFilter_FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func (x *Filter) GetRectangular() *Filter_RectangularFilterDefinition {
	if x, ok := x.GetFilterType().(*Filter_Rectangular); ok {
		return x.Rectangular
	}
	return nil
}

func (x *Filter) GetLinear() *Filter_LinearFilterDefinition {
	if x, ok := x.GetFilterType().(*Filter_Linear); ok {
		return x.Linear
	}
	return nil
}

type isFilter_FilterType interface {
	isFilter_FilterType()
}

type Filter_Rectangular struct {
	Rectangular *Filter_RectangularFilterDefinition `protobuf:"bytes,5,opt,name=rectangular,oneof"`
}

type Filter_Linear struct {
	Linear *Filter_LinearFilterDefinition `protobuf:"bytes,6,opt,name=linear,oneof"`
}

func (*Filter_Rectangular) isFilter_FilterType() {}

func (*Filter_Linear) isFilter_FilterType() {}

type PhotodetectorDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PhotodetectorType:
	//
	//	*PhotodetectorDefinition_AvalanchePhotodiode
	//	*PhotodetectorDefinition_PinPhotodiode
	PhotodetectorType isPhotodetectorDefinition_PhotodetectorType `protobuf_oneof:"photodetector_type"`
}

func (x *PhotodetectorDefinition) Reset() {
	*x = PhotodetectorDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotodetectorDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotodetectorDefinition) ProtoMessage() {}

func (x *PhotodetectorDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotodetectorDefinition.ProtoReflect.Descriptor instead.
func (*PhotodetectorDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{4}
}

func (m *PhotodetectorDefinition) GetPhotodetectorType() isPhotodetectorDefinition_PhotodetectorType {
	if m != nil {
		return m.PhotodetectorType
	}
	return nil
}

func (x *PhotodetectorDefinition) GetAvalanchePhotodiode() *PhotodetectorDefinition_AvalanchePhotodiodeDefinition {
	if x, ok := x.GetPhotodetectorType().(*PhotodetectorDefinition_AvalanchePhotodiode); ok {
		return x.AvalanchePhotodiode
	}
	return nil
}

func (x *PhotodetectorDefinition) GetPinPhotodiode() *PhotodetectorDefinition_PinPhotodiodeDefinition {
	if x, ok := x.GetPhotodetectorType().(*PhotodetectorDefinition_PinPhotodiode); ok {
		return x.PinPhotodiode
	}
	return nil
}

type isPhotodetectorDefinition_PhotodetectorType interface {
	isPhotodetectorDefinition_PhotodetectorType()
}

type PhotodetectorDefinition_AvalanchePhotodiode struct {
	AvalanchePhotodiode *PhotodetectorDefinition_AvalanchePhotodiodeDefinition `protobuf:"bytes,1,opt,name=avalanche_photodiode,json=avalanchePhotodiode,oneof"`
}

type PhotodetectorDefinition_PinPhotodiode struct {
	PinPhotodiode *PhotodetectorDefinition_PinPhotodiodeDefinition `protobuf:"bytes,2,opt,name=pin_photodiode,json=pinPhotodiode,oneof"`
}

func (*PhotodetectorDefinition_AvalanchePhotodiode) isPhotodetectorDefinition_PhotodetectorType() {}

func (*PhotodetectorDefinition_PinPhotodiode) isPhotodetectorDefinition_PhotodetectorType() {}

type Filter_RectangularFilterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Filter_RectangularFilterDefinition) Reset() {
	*x = Filter_RectangularFilterDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_RectangularFilterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_RectangularFilterDefinition) ProtoMessage() {}

func (x *Filter_RectangularFilterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_RectangularFilterDefinition.ProtoReflect.Descriptor instead.
func (*Filter_RectangularFilterDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{3, 0}
}

type Filter_LinearFilterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RejectionDbPerHz *float64 `protobuf:"fixed64,1,opt,name=rejection_db_per_hz,json=rejectionDbPerHz" json:"rejection_db_per_hz,omitempty"`
}

func (x *Filter_LinearFilterDefinition) Reset() {
	*x = Filter_LinearFilterDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_LinearFilterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_LinearFilterDefinition) ProtoMessage() {}

func (x *Filter_LinearFilterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_LinearFilterDefinition.ProtoReflect.Descriptor instead.
func (*Filter_LinearFilterDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Filter_LinearFilterDefinition) GetRejectionDbPerHz() float64 {
	if x != nil && x.RejectionDbPerHz != nil {
		return *x.RejectionDbPerHz
	}
	return 0
}

type PhotodetectorDefinition_AvalanchePhotodiodeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldOfViewRad                   *float64 `protobuf:"fixed64,1,opt,name=field_of_view_rad,json=fieldOfViewRad" json:"field_of_view_rad,omitempty"`
	BandwidthHz                      *float64 `protobuf:"fixed64,2,opt,name=bandwidth_hz,json=bandwidthHz" json:"bandwidth_hz,omitempty"`
	NoiseTemperatureK                *float64 `protobuf:"fixed64,3,opt,name=noise_temperature_k,json=noiseTemperatureK" json:"noise_temperature_k,omitempty"`
	EfficiencyPercent                *float64 `protobuf:"fixed64,4,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	DarkCurrentAmp                   *float64 `protobuf:"fixed64,5,opt,name=dark_current_amp,json=darkCurrentAmp" json:"dark_current_amp,omitempty"`
	LoadImpedanceOhm                 *float64 `protobuf:"fixed64,6,opt,name=load_impedance_ohm,json=loadImpedanceOhm" json:"load_impedance_ohm,omitempty"`
	NoiseFactor                      *float64 `protobuf:"fixed64,7,opt,name=noise_factor,json=noiseFactor" json:"noise_factor,omitempty"`
	GainDb                           *float64 `protobuf:"fixed64,8,opt,name=gain_db,json=gainDb" json:"gain_db,omitempty"`
	OpticalBandpassFilterBandwidthHz *float64 `protobuf:"fixed64,9,opt,name=optical_bandpass_filter_bandwidth_hz,json=opticalBandpassFilterBandwidthHz" json:"optical_bandpass_filter_bandwidth_hz,omitempty"`
	SkySpectralRadiance              *float64 `protobuf:"fixed64,10,opt,name=sky_spectral_radiance,json=skySpectralRadiance" json:"sky_spectral_radiance,omitempty"`
	SunSpectralRadiantEmittance      *float64 `protobuf:"fixed64,11,opt,name=sun_spectral_radiant_emittance,json=sunSpectralRadiantEmittance" json:"sun_spectral_radiant_emittance,omitempty"`
	WavelengthM                      *float64 `protobuf:"fixed64,12,opt,name=wavelength_m,json=wavelengthM" json:"wavelength_m,omitempty"`
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) Reset() {
	*x = PhotodetectorDefinition_AvalanchePhotodiodeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotodetectorDefinition_AvalanchePhotodiodeDefinition) ProtoMessage() {}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotodetectorDefinition_AvalanchePhotodiodeDefinition.ProtoReflect.Descriptor instead.
func (*PhotodetectorDefinition_AvalanchePhotodiodeDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetFieldOfViewRad() float64 {
	if x != nil && x.FieldOfViewRad != nil {
		return *x.FieldOfViewRad
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetBandwidthHz() float64 {
	if x != nil && x.BandwidthHz != nil {
		return *x.BandwidthHz
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetNoiseTemperatureK() float64 {
	if x != nil && x.NoiseTemperatureK != nil {
		return *x.NoiseTemperatureK
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetDarkCurrentAmp() float64 {
	if x != nil && x.DarkCurrentAmp != nil {
		return *x.DarkCurrentAmp
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetLoadImpedanceOhm() float64 {
	if x != nil && x.LoadImpedanceOhm != nil {
		return *x.LoadImpedanceOhm
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetNoiseFactor() float64 {
	if x != nil && x.NoiseFactor != nil {
		return *x.NoiseFactor
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetGainDb() float64 {
	if x != nil && x.GainDb != nil {
		return *x.GainDb
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetOpticalBandpassFilterBandwidthHz() float64 {
	if x != nil && x.OpticalBandpassFilterBandwidthHz != nil {
		return *x.OpticalBandpassFilterBandwidthHz
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetSkySpectralRadiance() float64 {
	if x != nil && x.SkySpectralRadiance != nil {
		return *x.SkySpectralRadiance
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetSunSpectralRadiantEmittance() float64 {
	if x != nil && x.SunSpectralRadiantEmittance != nil {
		return *x.SunSpectralRadiantEmittance
	}
	return 0
}

func (x *PhotodetectorDefinition_AvalanchePhotodiodeDefinition) GetWavelengthM() float64 {
	if x != nil && x.WavelengthM != nil {
		return *x.WavelengthM
	}
	return 0
}

type PhotodetectorDefinition_PinPhotodiodeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldOfViewRad                   *float64 `protobuf:"fixed64,1,opt,name=field_of_view_rad,json=fieldOfViewRad" json:"field_of_view_rad,omitempty"`
	BandwidthHz                      *float64 `protobuf:"fixed64,2,opt,name=bandwidth_hz,json=bandwidthHz" json:"bandwidth_hz,omitempty"`
	NoiseTemperatureK                *float64 `protobuf:"fixed64,3,opt,name=noise_temperature_k,json=noiseTemperatureK" json:"noise_temperature_k,omitempty"`
	EfficiencyPercent                *float64 `protobuf:"fixed64,4,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	DarkCurrentAmp                   *float64 `protobuf:"fixed64,5,opt,name=dark_current_amp,json=darkCurrentAmp" json:"dark_current_amp,omitempty"`
	LoadImpedanceOhm                 *float64 `protobuf:"fixed64,6,opt,name=load_impedance_ohm,json=loadImpedanceOhm" json:"load_impedance_ohm,omitempty"`
	OpticalBandpassFilterBandwidthHz *float64 `protobuf:"fixed64,7,opt,name=optical_bandpass_filter_bandwidth_hz,json=opticalBandpassFilterBandwidthHz" json:"optical_bandpass_filter_bandwidth_hz,omitempty"`
	SkySpectralRadiance              *float64 `protobuf:"fixed64,8,opt,name=sky_spectral_radiance,json=skySpectralRadiance" json:"sky_spectral_radiance,omitempty"`
	SunSpectralRadiantEmittance      *float64 `protobuf:"fixed64,9,opt,name=sun_spectral_radiant_emittance,json=sunSpectralRadiantEmittance" json:"sun_spectral_radiant_emittance,omitempty"`
	WavelengthM                      *float64 `protobuf:"fixed64,10,opt,name=wavelength_m,json=wavelengthM" json:"wavelength_m,omitempty"`
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) Reset() {
	*x = PhotodetectorDefinition_PinPhotodiodeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_wireless_receiver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotodetectorDefinition_PinPhotodiodeDefinition) ProtoMessage() {}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_wireless_receiver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotodetectorDefinition_PinPhotodiodeDefinition.ProtoReflect.Descriptor instead.
func (*PhotodetectorDefinition_PinPhotodiodeDefinition) Descriptor() ([]byte, []int) {
	return file_api_common_wireless_receiver_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetFieldOfViewRad() float64 {
	if x != nil && x.FieldOfViewRad != nil {
		return *x.FieldOfViewRad
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetBandwidthHz() float64 {
	if x != nil && x.BandwidthHz != nil {
		return *x.BandwidthHz
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetNoiseTemperatureK() float64 {
	if x != nil && x.NoiseTemperatureK != nil {
		return *x.NoiseTemperatureK
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetDarkCurrentAmp() float64 {
	if x != nil && x.DarkCurrentAmp != nil {
		return *x.DarkCurrentAmp
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetLoadImpedanceOhm() float64 {
	if x != nil && x.LoadImpedanceOhm != nil {
		return *x.LoadImpedanceOhm
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetOpticalBandpassFilterBandwidthHz() float64 {
	if x != nil && x.OpticalBandpassFilterBandwidthHz != nil {
		return *x.OpticalBandpassFilterBandwidthHz
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetSkySpectralRadiance() float64 {
	if x != nil && x.SkySpectralRadiance != nil {
		return *x.SkySpectralRadiance
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetSunSpectralRadiantEmittance() float64 {
	if x != nil && x.SunSpectralRadiantEmittance != nil {
		return *x.SunSpectralRadiantEmittance
	}
	return 0
}

func (x *PhotodetectorDefinition_PinPhotodiodeDefinition) GetWavelengthM() float64 {
	if x != nil && x.WavelengthM != nil {
		return *x.WavelengthM
	}
	return 0
}

var File_api_common_wireless_receiver_proto protoreflect.FileDescriptor

var file_api_common_wireless_receiver_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0a, 0x52, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x48, 0x7a, 0x22, 0xec, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x16, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x6a, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x1a,
	0x67, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x08, 0x08, 0x0d, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0xe4, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x5d, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x47, 0x61, 0x69, 0x6e, 0x4f,
	0x72, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x4c,
	0x6f, 0x73, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x48, 0x7a, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x7a, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x12, 0x64, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x12, 0x55, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x1a, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x62, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x62, 0x50, 0x65, 0x72, 0x48, 0x7a,
	0x42, 0x0d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x8e, 0x0b, 0x0a, 0x17, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x14,
	0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x64,
	0x69, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x64, 0x69, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x5f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x1a, 0xcc,
	0x04, 0x0a, 0x1d, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x52, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x48, 0x7a, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x6f, 0x69,
	0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x68, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x68, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x6f, 0x69,
	0x73, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x67, 0x61, 0x69, 0x6e, 0x44,
	0x62, 0x12, 0x4e, 0x0a, 0x24, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x20, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x73, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x48,
	0x7a, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x73, 0x6b, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73,
	0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x1a, 0x8a, 0x04,
	0x0a, 0x17, 0x50, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x48, 0x7a, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x68, 0x6d, 0x12, 0x4e,
	0x0a, 0x24, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x73, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x48, 0x7a, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x6b, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73,
	0x6b, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x75, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x45, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x42, 0x14, 0x0a, 0x12, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_wireless_receiver_proto_rawDescOnce sync.Once
	file_api_common_wireless_receiver_proto_rawDescData = file_api_common_wireless_receiver_proto_rawDesc
)

func file_api_common_wireless_receiver_proto_rawDescGZIP() []byte {
	file_api_common_wireless_receiver_proto_rawDescOnce.Do(func() {
		file_api_common_wireless_receiver_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_wireless_receiver_proto_rawDescData)
	})
	return file_api_common_wireless_receiver_proto_rawDescData
}

var file_api_common_wireless_receiver_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_common_wireless_receiver_proto_goTypes = []interface{}{
	(*RxChannels)(nil),              // 0: aalyria.spacetime.api.common.RxChannels
	(*ReceiverDefinition)(nil),      // 1: aalyria.spacetime.api.common.ReceiverDefinition
	(*ReceiveSignalProcessor)(nil),  // 2: aalyria.spacetime.api.common.ReceiveSignalProcessor
	(*Filter)(nil),                  // 3: aalyria.spacetime.api.common.Filter
	(*PhotodetectorDefinition)(nil), // 4: aalyria.spacetime.api.common.PhotodetectorDefinition
	nil,                             // 5: aalyria.spacetime.api.common.ReceiverDefinition.ChannelSetEntry
	(*Filter_RectangularFilterDefinition)(nil),                    // 6: aalyria.spacetime.api.common.Filter.RectangularFilterDefinition
	(*Filter_LinearFilterDefinition)(nil),                         // 7: aalyria.spacetime.api.common.Filter.LinearFilterDefinition
	(*PhotodetectorDefinition_AvalanchePhotodiodeDefinition)(nil), // 8: aalyria.spacetime.api.common.PhotodetectorDefinition.AvalanchePhotodiodeDefinition
	(*PhotodetectorDefinition_PinPhotodiodeDefinition)(nil),       // 9: aalyria.spacetime.api.common.PhotodetectorDefinition.PinPhotodiodeDefinition
	(ChannelSelectionMethod)(0),                                   // 10: aalyria.spacetime.api.common.ChannelSelectionMethod
	(*AmplifierDefinition)(nil),                                   // 11: aalyria.spacetime.api.common.AmplifierDefinition
	(*MiscGainOrLoss)(nil),                                        // 12: aalyria.spacetime.api.common.MiscGainOrLoss
}
var file_api_common_wireless_receiver_proto_depIdxs = []int32{
	5,  // 0: aalyria.spacetime.api.common.ReceiverDefinition.channel_set:type_name -> aalyria.spacetime.api.common.ReceiverDefinition.ChannelSetEntry
	10, // 1: aalyria.spacetime.api.common.ReceiverDefinition.channel_selection_method:type_name -> aalyria.spacetime.api.common.ChannelSelectionMethod
	2,  // 2: aalyria.spacetime.api.common.ReceiverDefinition.signal_processing_step:type_name -> aalyria.spacetime.api.common.ReceiveSignalProcessor
	3,  // 3: aalyria.spacetime.api.common.ReceiveSignalProcessor.filter:type_name -> aalyria.spacetime.api.common.Filter
	4,  // 4: aalyria.spacetime.api.common.ReceiveSignalProcessor.photodetector:type_name -> aalyria.spacetime.api.common.PhotodetectorDefinition
	11, // 5: aalyria.spacetime.api.common.ReceiveSignalProcessor.amplifier:type_name -> aalyria.spacetime.api.common.AmplifierDefinition
	12, // 6: aalyria.spacetime.api.common.ReceiveSignalProcessor.gain_or_loss:type_name -> aalyria.spacetime.api.common.MiscGainOrLoss
	6,  // 7: aalyria.spacetime.api.common.Filter.rectangular:type_name -> aalyria.spacetime.api.common.Filter.RectangularFilterDefinition
	7,  // 8: aalyria.spacetime.api.common.Filter.linear:type_name -> aalyria.spacetime.api.common.Filter.LinearFilterDefinition
	8,  // 9: aalyria.spacetime.api.common.PhotodetectorDefinition.avalanche_photodiode:type_name -> aalyria.spacetime.api.common.PhotodetectorDefinition.AvalanchePhotodiodeDefinition
	9,  // 10: aalyria.spacetime.api.common.PhotodetectorDefinition.pin_photodiode:type_name -> aalyria.spacetime.api.common.PhotodetectorDefinition.PinPhotodiodeDefinition
	0,  // 11: aalyria.spacetime.api.common.ReceiverDefinition.ChannelSetEntry.value:type_name -> aalyria.spacetime.api.common.RxChannels
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_common_wireless_receiver_proto_init() }
func file_api_common_wireless_receiver_proto_init() {
	if File_api_common_wireless_receiver_proto != nil {
		return
	}
	file_api_common_channel_proto_init()
	file_api_common_wireless_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_wireless_receiver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSignalProcessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotodetectorDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_RectangularFilterDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_LinearFilterDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotodetectorDefinition_AvalanchePhotodiodeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_wireless_receiver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotodetectorDefinition_PinPhotodiodeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_wireless_receiver_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ReceiveSignalProcessor_Filter)(nil),
		(*ReceiveSignalProcessor_Photodetector)(nil),
		(*ReceiveSignalProcessor_Amplifier)(nil),
		(*ReceiveSignalProcessor_GainOrLoss)(nil),
	}
	file_api_common_wireless_receiver_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Filter_Rectangular)(nil),
		(*Filter_Linear)(nil),
	}
	file_api_common_wireless_receiver_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PhotodetectorDefinition_AvalanchePhotodiode)(nil),
		(*PhotodetectorDefinition_PinPhotodiode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_wireless_receiver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_wireless_receiver_proto_goTypes,
		DependencyIndexes: file_api_common_wireless_receiver_proto_depIdxs,
		MessageInfos:      file_api_common_wireless_receiver_proto_msgTypes,
	}.Build()
	File_api_common_wireless_receiver_proto = out.File
	file_api_common_wireless_receiver_proto_rawDesc = nil
	file_api_common_wireless_receiver_proto_goTypes = nil
	file_api_common_wireless_receiver_proto_depIdxs = nil
}

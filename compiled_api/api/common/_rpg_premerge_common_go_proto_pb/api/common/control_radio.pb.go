// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/control_radio.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TdmaSchedule_ScheduleType int32

const (
	TdmaSchedule_UNKNOWN TdmaSchedule_ScheduleType = 0
	TdmaSchedule_TX_ONLY TdmaSchedule_ScheduleType = 1
	TdmaSchedule_RX_ONLY TdmaSchedule_ScheduleType = 2
	TdmaSchedule_TX_RX   TdmaSchedule_ScheduleType = 3
)

// Enum value maps for TdmaSchedule_ScheduleType.
var (
	TdmaSchedule_ScheduleType_name = map[int32]string{
		0: "UNKNOWN",
		1: "TX_ONLY",
		2: "RX_ONLY",
		3: "TX_RX",
	}
	TdmaSchedule_ScheduleType_value = map[string]int32{
		"UNKNOWN": 0,
		"TX_ONLY": 1,
		"RX_ONLY": 2,
		"TX_RX":   3,
	}
)

func (x TdmaSchedule_ScheduleType) Enum() *TdmaSchedule_ScheduleType {
	p := new(TdmaSchedule_ScheduleType)
	*p = x
	return p
}

func (x TdmaSchedule_ScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TdmaSchedule_ScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_control_radio_proto_enumTypes[0].Descriptor()
}

func (TdmaSchedule_ScheduleType) Type() protoreflect.EnumType {
	return &file_api_common_control_radio_proto_enumTypes[0]
}

func (x TdmaSchedule_ScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TdmaSchedule_ScheduleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TdmaSchedule_ScheduleType(num)
	return nil
}

// Deprecated: Use TdmaSchedule_ScheduleType.Descriptor instead.
func (TdmaSchedule_ScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0}
}

type TdmaSchedule_TdmaSlot_TxSlot_TxSlotType int32

const (
	TdmaSchedule_TdmaSlot_TxSlot_UNKNOWN    TdmaSchedule_TdmaSlot_TxSlot_TxSlotType = 0
	TdmaSchedule_TdmaSlot_TxSlot_UNICAST    TdmaSchedule_TdmaSlot_TxSlot_TxSlotType = 1
	TdmaSchedule_TdmaSlot_TxSlot_BEACON     TdmaSchedule_TdmaSlot_TxSlot_TxSlotType = 2
	TdmaSchedule_TdmaSlot_TxSlot_POLLED     TdmaSchedule_TdmaSlot_TxSlot_TxSlotType = 3
	TdmaSchedule_TdmaSlot_TxSlot_CONTENTION TdmaSchedule_TdmaSlot_TxSlot_TxSlotType = 4
)

// Enum value maps for TdmaSchedule_TdmaSlot_TxSlot_TxSlotType.
var (
	TdmaSchedule_TdmaSlot_TxSlot_TxSlotType_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNICAST",
		2: "BEACON",
		3: "POLLED",
		4: "CONTENTION",
	}
	TdmaSchedule_TdmaSlot_TxSlot_TxSlotType_value = map[string]int32{
		"UNKNOWN":    0,
		"UNICAST":    1,
		"BEACON":     2,
		"POLLED":     3,
		"CONTENTION": 4,
	}
)

func (x TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) Enum() *TdmaSchedule_TdmaSlot_TxSlot_TxSlotType {
	p := new(TdmaSchedule_TdmaSlot_TxSlot_TxSlotType)
	*p = x
	return p
}

func (x TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_control_radio_proto_enumTypes[1].Descriptor()
}

func (TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) Type() protoreflect.EnumType {
	return &file_api_common_control_radio_proto_enumTypes[1]
}

func (x TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TdmaSchedule_TdmaSlot_TxSlot_TxSlotType(num)
	return nil
}

// Deprecated: Use TdmaSchedule_TdmaSlot_TxSlot_TxSlotType.Descriptor instead.
func (TdmaSchedule_TdmaSlot_TxSlot_TxSlotType) EnumDescriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

type TdmaSchedule_TdmaSlot_RxSlot_RxSlotType int32

const (
	TdmaSchedule_TdmaSlot_RxSlot_UNKNOWN   TdmaSchedule_TdmaSlot_RxSlot_RxSlotType = 0
	TdmaSchedule_TdmaSlot_RxSlot_UNICAST   TdmaSchedule_TdmaSlot_RxSlot_RxSlotType = 1
	TdmaSchedule_TdmaSlot_RxSlot_BROADCAST TdmaSchedule_TdmaSlot_RxSlot_RxSlotType = 2
)

// Enum value maps for TdmaSchedule_TdmaSlot_RxSlot_RxSlotType.
var (
	TdmaSchedule_TdmaSlot_RxSlot_RxSlotType_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNICAST",
		2: "BROADCAST",
	}
	TdmaSchedule_TdmaSlot_RxSlot_RxSlotType_value = map[string]int32{
		"UNKNOWN":   0,
		"UNICAST":   1,
		"BROADCAST": 2,
	}
)

func (x TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) Enum() *TdmaSchedule_TdmaSlot_RxSlot_RxSlotType {
	p := new(TdmaSchedule_TdmaSlot_RxSlot_RxSlotType)
	*p = x
	return p
}

func (x TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_control_radio_proto_enumTypes[2].Descriptor()
}

func (TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) Type() protoreflect.EnumType {
	return &file_api_common_control_radio_proto_enumTypes[2]
}

func (x TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TdmaSchedule_TdmaSlot_RxSlot_RxSlotType(num)
	return nil
}

// Deprecated: Use TdmaSchedule_TdmaSlot_RxSlot_RxSlotType.Descriptor instead.
func (TdmaSchedule_TdmaSlot_RxSlot_RxSlotType) EnumDescriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

type TransmitterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterFrequencyHz  *uint64  `protobuf:"varint,5,opt,name=center_frequency_hz,json=centerFrequencyHz" json:"center_frequency_hz,omitempty"`
	ChannelWidthHz     *uint64  `protobuf:"varint,6,opt,name=channel_width_hz,json=channelWidthHz" json:"channel_width_hz,omitempty"`
	TransmitPowerWatts *float64 `protobuf:"fixed64,3,opt,name=transmit_power_watts,json=transmitPowerWatts" json:"transmit_power_watts,omitempty"`
}

func (x *TransmitterState) Reset() {
	*x = TransmitterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitterState) ProtoMessage() {}

func (x *TransmitterState) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitterState.ProtoReflect.Descriptor instead.
func (*TransmitterState) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{0}
}

func (x *TransmitterState) GetCenterFrequencyHz() uint64 {
	if x != nil && x.CenterFrequencyHz != nil {
		return *x.CenterFrequencyHz
	}
	return 0
}

func (x *TransmitterState) GetChannelWidthHz() uint64 {
	if x != nil && x.ChannelWidthHz != nil {
		return *x.ChannelWidthHz
	}
	return 0
}

func (x *TransmitterState) GetTransmitPowerWatts() float64 {
	if x != nil && x.TransmitPowerWatts != nil {
		return *x.TransmitPowerWatts
	}
	return 0
}

type ReceiverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterFrequencyHz *uint64 `protobuf:"varint,4,opt,name=center_frequency_hz,json=centerFrequencyHz" json:"center_frequency_hz,omitempty"`
	ChannelWidthHz    *uint64 `protobuf:"varint,5,opt,name=channel_width_hz,json=channelWidthHz" json:"channel_width_hz,omitempty"`
}

func (x *ReceiverState) Reset() {
	*x = ReceiverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverState) ProtoMessage() {}

func (x *ReceiverState) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverState.ProtoReflect.Descriptor instead.
func (*ReceiverState) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{1}
}

func (x *ReceiverState) GetCenterFrequencyHz() uint64 {
	if x != nil && x.CenterFrequencyHz != nil {
		return *x.CenterFrequencyHz
	}
	return 0
}

func (x *ReceiverState) GetChannelWidthHz() uint64 {
	if x != nil && x.ChannelWidthHz != nil {
		return *x.ChannelWidthHz
	}
	return 0
}

type TdmaSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *TdmaSchedule_ScheduleType `protobuf:"varint,1,opt,name=type,enum=aalyria.spacetime.api.common.TdmaSchedule_ScheduleType" json:"type,omitempty"`
	ScheduleDuration *Duration                  `protobuf:"bytes,2,opt,name=schedule_duration,json=scheduleDuration" json:"schedule_duration,omitempty"`
	Schedule         []*TdmaSchedule_TdmaSlot   `protobuf:"bytes,3,rep,name=schedule" json:"schedule,omitempty"`
}

func (x *TdmaSchedule) Reset() {
	*x = TdmaSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TdmaSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TdmaSchedule) ProtoMessage() {}

func (x *TdmaSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TdmaSchedule.ProtoReflect.Descriptor instead.
func (*TdmaSchedule) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2}
}

func (x *TdmaSchedule) GetType() TdmaSchedule_ScheduleType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TdmaSchedule_UNKNOWN
}

func (x *TdmaSchedule) GetScheduleDuration() *Duration {
	if x != nil {
		return x.ScheduleDuration
	}
	return nil
}

func (x *TdmaSchedule) GetSchedule() []*TdmaSchedule_TdmaSlot {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type RadioUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadioConfigId              *string           `protobuf:"bytes,6,opt,name=radio_config_id,json=radioConfigId" json:"radio_config_id,omitempty"`
	InterfaceId                *string           `protobuf:"bytes,4,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	TxState                    *TransmitterState `protobuf:"bytes,1,opt,name=tx_state,json=txState" json:"tx_state,omitempty"`
	RxState                    *ReceiverState    `protobuf:"bytes,2,opt,name=rx_state,json=rxState" json:"rx_state,omitempty"`
	TdmaSchedule               *TdmaSchedule     `protobuf:"bytes,3,opt,name=tdma_schedule,json=tdmaSchedule" json:"tdma_schedule,omitempty"`
	ModemConfigId              *string           `protobuf:"bytes,8,opt,name=modem_config_id,json=modemConfigId" json:"modem_config_id,omitempty"`
	PerInterfaceSequenceNumber *int64            `protobuf:"varint,5,opt,name=per_interface_sequence_number,json=perInterfaceSequenceNumber" json:"per_interface_sequence_number,omitempty"`
}

func (x *RadioUpdate) Reset() {
	*x = RadioUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioUpdate) ProtoMessage() {}

func (x *RadioUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioUpdate.ProtoReflect.Descriptor instead.
func (*RadioUpdate) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{3}
}

func (x *RadioUpdate) GetRadioConfigId() string {
	if x != nil && x.RadioConfigId != nil {
		return *x.RadioConfigId
	}
	return ""
}

func (x *RadioUpdate) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *RadioUpdate) GetTxState() *TransmitterState {
	if x != nil {
		return x.TxState
	}
	return nil
}

func (x *RadioUpdate) GetRxState() *ReceiverState {
	if x != nil {
		return x.RxState
	}
	return nil
}

func (x *RadioUpdate) GetTdmaSchedule() *TdmaSchedule {
	if x != nil {
		return x.TdmaSchedule
	}
	return nil
}

func (x *RadioUpdate) GetModemConfigId() string {
	if x != nil && x.ModemConfigId != nil {
		return *x.ModemConfigId
	}
	return ""
}

func (x *RadioUpdate) GetPerInterfaceSequenceNumber() int64 {
	if x != nil && x.PerInterfaceSequenceNumber != nil {
		return *x.PerInterfaceSequenceNumber
	}
	return 0
}

type RadioStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                  *DateTime         `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	RadioConfigIdByInterfaceId map[string]string `protobuf:"bytes,4,rep,name=radio_config_id_by_interface_id,json=radioConfigIdByInterfaceId" json:"radio_config_id_by_interface_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *RadioStates) Reset() {
	*x = RadioStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStates) ProtoMessage() {}

func (x *RadioStates) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStates.ProtoReflect.Descriptor instead.
func (*RadioStates) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{4}
}

func (x *RadioStates) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RadioStates) GetRadioConfigIdByInterfaceId() map[string]string {
	if x != nil {
		return x.RadioConfigIdByInterfaceId
	}
	return nil
}

type TdmaSchedule_TdmaSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	// Types that are assignable to SlotType:
	//
	//	*TdmaSchedule_TdmaSlot_Transmit
	//	*TdmaSchedule_TdmaSlot_Receive
	SlotType isTdmaSchedule_TdmaSlot_SlotType `protobuf_oneof:"slot_type"`
}

func (x *TdmaSchedule_TdmaSlot) Reset() {
	*x = TdmaSchedule_TdmaSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TdmaSchedule_TdmaSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TdmaSchedule_TdmaSlot) ProtoMessage() {}

func (x *TdmaSchedule_TdmaSlot) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TdmaSchedule_TdmaSlot.ProtoReflect.Descriptor instead.
func (*TdmaSchedule_TdmaSlot) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TdmaSchedule_TdmaSlot) GetDuration() *Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (m *TdmaSchedule_TdmaSlot) GetSlotType() isTdmaSchedule_TdmaSlot_SlotType {
	if m != nil {
		return m.SlotType
	}
	return nil
}

func (x *TdmaSchedule_TdmaSlot) GetTransmit() *TdmaSchedule_TdmaSlot_TxSlot {
	if x, ok := x.GetSlotType().(*TdmaSchedule_TdmaSlot_Transmit); ok {
		return x.Transmit
	}
	return nil
}

func (x *TdmaSchedule_TdmaSlot) GetReceive() *TdmaSchedule_TdmaSlot_RxSlot {
	if x, ok := x.GetSlotType().(*TdmaSchedule_TdmaSlot_Receive); ok {
		return x.Receive
	}
	return nil
}

type isTdmaSchedule_TdmaSlot_SlotType interface {
	isTdmaSchedule_TdmaSlot_SlotType()
}

type TdmaSchedule_TdmaSlot_Transmit struct {
	Transmit *TdmaSchedule_TdmaSlot_TxSlot `protobuf:"bytes,2,opt,name=transmit,oneof"`
}

type TdmaSchedule_TdmaSlot_Receive struct {
	Receive *TdmaSchedule_TdmaSlot_RxSlot `protobuf:"bytes,3,opt,name=receive,oneof"`
}

func (*TdmaSchedule_TdmaSlot_Transmit) isTdmaSchedule_TdmaSlot_SlotType() {}

func (*TdmaSchedule_TdmaSlot_Receive) isTdmaSchedule_TdmaSlot_SlotType() {}

type TdmaSchedule_TdmaSlot_TxSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *TdmaSchedule_TdmaSlot_TxSlot_TxSlotType `protobuf:"varint,1,opt,name=type,enum=aalyria.spacetime.api.common.TdmaSchedule_TdmaSlot_TxSlot_TxSlotType" json:"type,omitempty"`
	RemoteReceiverId *string                                  `protobuf:"bytes,2,opt,name=remote_receiver_id,json=remoteReceiverId" json:"remote_receiver_id,omitempty"`
}

func (x *TdmaSchedule_TdmaSlot_TxSlot) Reset() {
	*x = TdmaSchedule_TdmaSlot_TxSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TdmaSchedule_TdmaSlot_TxSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TdmaSchedule_TdmaSlot_TxSlot) ProtoMessage() {}

func (x *TdmaSchedule_TdmaSlot_TxSlot) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TdmaSchedule_TdmaSlot_TxSlot.ProtoReflect.Descriptor instead.
func (*TdmaSchedule_TdmaSlot_TxSlot) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *TdmaSchedule_TdmaSlot_TxSlot) GetType() TdmaSchedule_TdmaSlot_TxSlot_TxSlotType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TdmaSchedule_TdmaSlot_TxSlot_UNKNOWN
}

func (x *TdmaSchedule_TdmaSlot_TxSlot) GetRemoteReceiverId() string {
	if x != nil && x.RemoteReceiverId != nil {
		return *x.RemoteReceiverId
	}
	return ""
}

type TdmaSchedule_TdmaSlot_RxSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *TdmaSchedule_TdmaSlot_RxSlot_RxSlotType `protobuf:"varint,1,opt,name=type,enum=aalyria.spacetime.api.common.TdmaSchedule_TdmaSlot_RxSlot_RxSlotType" json:"type,omitempty"`
	RemoteTransmitterId *string                                  `protobuf:"bytes,2,opt,name=remote_transmitter_id,json=remoteTransmitterId" json:"remote_transmitter_id,omitempty"`
}

func (x *TdmaSchedule_TdmaSlot_RxSlot) Reset() {
	*x = TdmaSchedule_TdmaSlot_RxSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TdmaSchedule_TdmaSlot_RxSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TdmaSchedule_TdmaSlot_RxSlot) ProtoMessage() {}

func (x *TdmaSchedule_TdmaSlot_RxSlot) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TdmaSchedule_TdmaSlot_RxSlot.ProtoReflect.Descriptor instead.
func (*TdmaSchedule_TdmaSlot_RxSlot) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *TdmaSchedule_TdmaSlot_RxSlot) GetType() TdmaSchedule_TdmaSlot_RxSlot_RxSlotType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TdmaSchedule_TdmaSlot_RxSlot_UNKNOWN
}

func (x *TdmaSchedule_TdmaSlot_RxSlot) GetRemoteTransmitterId() string {
	if x != nil && x.RemoteTransmitterId != nil {
		return *x.RemoteTransmitterId
	}
	return ""
}

type RadioStates_RadioState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadioConfigId *string           `protobuf:"bytes,4,opt,name=radio_config_id,json=radioConfigId" json:"radio_config_id,omitempty"`
	TxState       *TransmitterState `protobuf:"bytes,1,opt,name=tx_state,json=txState" json:"tx_state,omitempty"`
	RxState       *ReceiverState    `protobuf:"bytes,2,opt,name=rx_state,json=rxState" json:"rx_state,omitempty"`
	TdmaSchedule  *TdmaSchedule     `protobuf:"bytes,3,opt,name=tdma_schedule,json=tdmaSchedule" json:"tdma_schedule,omitempty"`
}

func (x *RadioStates_RadioState) Reset() {
	*x = RadioStates_RadioState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_control_radio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStates_RadioState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStates_RadioState) ProtoMessage() {}

func (x *RadioStates_RadioState) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_control_radio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStates_RadioState.ProtoReflect.Descriptor instead.
func (*RadioStates_RadioState) Descriptor() ([]byte, []int) {
	return file_api_common_control_radio_proto_rawDescGZIP(), []int{4, 0}
}

func (x *RadioStates_RadioState) GetRadioConfigId() string {
	if x != nil && x.RadioConfigId != nil {
		return *x.RadioConfigId
	}
	return ""
}

func (x *RadioStates_RadioState) GetTxState() *TransmitterState {
	if x != nil {
		return x.TxState
	}
	return nil
}

func (x *RadioStates_RadioState) GetRxState() *ReceiverState {
	if x != nil {
		return x.RxState
	}
	return nil
}

func (x *RadioStates_RadioState) GetTdmaSchedule() *TdmaSchedule {
	if x != nil {
		return x.TdmaSchedule
	}
	return nil
}

var File_api_common_control_radio_proto protoreflect.FileDescriptor

var file_api_common_control_radio_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x15,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68,
	0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x48, 0x7a, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x7b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x48, 0x7a, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x88, 0x08, 0x0a, 0x0c, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xc2, 0x05, 0x0a, 0x08, 0x54, 0x64,
	0x6d, 0x61, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x54, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x78, 0x53, 0x6c, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x1a, 0xe1, 0x01, 0x0a,
	0x06, 0x54, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x54, 0x78, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x54, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x0a, 0x54, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x1a, 0xce, 0x01, 0x0a, 0x06, 0x52, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x52,
	0x78, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0a, 0x52, 0x78,
	0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x02, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40,
	0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x58, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x10, 0x03,
	0x22, 0xad, 0x03, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x0d, 0x74, 0x64, 0x6d, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x0c, 0x74, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a,
	0x70, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0xe4, 0x04, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x98, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x74, 0x64, 0x6d, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x64, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x1a, 0x4d, 0x0a, 0x1f, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x08, 0x08,
	0x05, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_control_radio_proto_rawDescOnce sync.Once
	file_api_common_control_radio_proto_rawDescData = file_api_common_control_radio_proto_rawDesc
)

func file_api_common_control_radio_proto_rawDescGZIP() []byte {
	file_api_common_control_radio_proto_rawDescOnce.Do(func() {
		file_api_common_control_radio_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_control_radio_proto_rawDescData)
	})
	return file_api_common_control_radio_proto_rawDescData
}

var file_api_common_control_radio_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_common_control_radio_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_common_control_radio_proto_goTypes = []interface{}{
	(TdmaSchedule_ScheduleType)(0),               // 0: aalyria.spacetime.api.common.TdmaSchedule.ScheduleType
	(TdmaSchedule_TdmaSlot_TxSlot_TxSlotType)(0), // 1: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.TxSlotType
	(TdmaSchedule_TdmaSlot_RxSlot_RxSlotType)(0), // 2: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.RxSlotType
	(*TransmitterState)(nil),                     // 3: aalyria.spacetime.api.common.TransmitterState
	(*ReceiverState)(nil),                        // 4: aalyria.spacetime.api.common.ReceiverState
	(*TdmaSchedule)(nil),                         // 5: aalyria.spacetime.api.common.TdmaSchedule
	(*RadioUpdate)(nil),                          // 6: aalyria.spacetime.api.common.RadioUpdate
	(*RadioStates)(nil),                          // 7: aalyria.spacetime.api.common.RadioStates
	(*TdmaSchedule_TdmaSlot)(nil),                // 8: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot
	(*TdmaSchedule_TdmaSlot_TxSlot)(nil),         // 9: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot
	(*TdmaSchedule_TdmaSlot_RxSlot)(nil),         // 10: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot
	(*RadioStates_RadioState)(nil),               // 11: aalyria.spacetime.api.common.RadioStates.RadioState
	nil,                                          // 12: aalyria.spacetime.api.common.RadioStates.RadioConfigIdByInterfaceIdEntry
	(*Duration)(nil),                             // 13: aalyria.spacetime.api.common.Duration
	(*DateTime)(nil),                             // 14: aalyria.spacetime.api.common.DateTime
}
var file_api_common_control_radio_proto_depIdxs = []int32{
	0,  // 0: aalyria.spacetime.api.common.TdmaSchedule.type:type_name -> aalyria.spacetime.api.common.TdmaSchedule.ScheduleType
	13, // 1: aalyria.spacetime.api.common.TdmaSchedule.schedule_duration:type_name -> aalyria.spacetime.api.common.Duration
	8,  // 2: aalyria.spacetime.api.common.TdmaSchedule.schedule:type_name -> aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot
	3,  // 3: aalyria.spacetime.api.common.RadioUpdate.tx_state:type_name -> aalyria.spacetime.api.common.TransmitterState
	4,  // 4: aalyria.spacetime.api.common.RadioUpdate.rx_state:type_name -> aalyria.spacetime.api.common.ReceiverState
	5,  // 5: aalyria.spacetime.api.common.RadioUpdate.tdma_schedule:type_name -> aalyria.spacetime.api.common.TdmaSchedule
	14, // 6: aalyria.spacetime.api.common.RadioStates.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	12, // 7: aalyria.spacetime.api.common.RadioStates.radio_config_id_by_interface_id:type_name -> aalyria.spacetime.api.common.RadioStates.RadioConfigIdByInterfaceIdEntry
	13, // 8: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.duration:type_name -> aalyria.spacetime.api.common.Duration
	9,  // 9: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.transmit:type_name -> aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot
	10, // 10: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.receive:type_name -> aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot
	1,  // 11: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.type:type_name -> aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.TxSlotType
	2,  // 12: aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.type:type_name -> aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.RxSlotType
	3,  // 13: aalyria.spacetime.api.common.RadioStates.RadioState.tx_state:type_name -> aalyria.spacetime.api.common.TransmitterState
	4,  // 14: aalyria.spacetime.api.common.RadioStates.RadioState.rx_state:type_name -> aalyria.spacetime.api.common.ReceiverState
	5,  // 15: aalyria.spacetime.api.common.RadioStates.RadioState.tdma_schedule:type_name -> aalyria.spacetime.api.common.TdmaSchedule
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_common_control_radio_proto_init() }
func file_api_common_control_radio_proto_init() {
	if File_api_common_control_radio_proto != nil {
		return
	}
	file_api_common_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_control_radio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TdmaSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TdmaSchedule_TdmaSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TdmaSchedule_TdmaSlot_TxSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TdmaSchedule_TdmaSlot_RxSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_control_radio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStates_RadioState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_control_radio_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TdmaSchedule_TdmaSlot_Transmit)(nil),
		(*TdmaSchedule_TdmaSlot_Receive)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_control_radio_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_control_radio_proto_goTypes,
		DependencyIndexes: file_api_common_control_radio_proto_depIdxs,
		EnumInfos:         file_api_common_control_radio_proto_enumTypes,
		MessageInfos:      file_api_common_control_radio_proto_msgTypes,
	}.Build()
	File_api_common_control_radio_proto = out.File
	file_api_common_control_radio_proto_rawDesc = nil
	file_api_common_control_radio_proto_goTypes = nil
	file_api_common_control_radio_proto_depIdxs = nil
}

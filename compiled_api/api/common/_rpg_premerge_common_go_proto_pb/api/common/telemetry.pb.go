// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/common/telemetry.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BeamStats_TargetingStats_ConnectionStatus int32

const (
	BeamStats_TargetingStats_UNKNOWN BeamStats_TargetingStats_ConnectionStatus = 0
	BeamStats_TargetingStats_SEEKING BeamStats_TargetingStats_ConnectionStatus = 1
	BeamStats_TargetingStats_LOCKED  BeamStats_TargetingStats_ConnectionStatus = 2
)

// Enum value maps for BeamStats_TargetingStats_ConnectionStatus.
var (
	BeamStats_TargetingStats_ConnectionStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SEEKING",
		2: "LOCKED",
	}
	BeamStats_TargetingStats_ConnectionStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"SEEKING": 1,
		"LOCKED":  2,
	}
)

func (x BeamStats_TargetingStats_ConnectionStatus) Enum() *BeamStats_TargetingStats_ConnectionStatus {
	p := new(BeamStats_TargetingStats_ConnectionStatus)
	*p = x
	return p
}

func (x BeamStats_TargetingStats_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeamStats_TargetingStats_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_telemetry_proto_enumTypes[0].Descriptor()
}

func (BeamStats_TargetingStats_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_api_common_telemetry_proto_enumTypes[0]
}

func (x BeamStats_TargetingStats_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BeamStats_TargetingStats_ConnectionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BeamStats_TargetingStats_ConnectionStatus(num)
	return nil
}

// Deprecated: Use BeamStats_TargetingStats_ConnectionStatus.Descriptor instead.
func (BeamStats_TargetingStats_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{1, 0, 0}
}

type RadioEvent_LinkStatus int32

const (
	RadioEvent_UNKNOWN RadioEvent_LinkStatus = 0
	RadioEvent_DOWN    RadioEvent_LinkStatus = 1
	RadioEvent_UP      RadioEvent_LinkStatus = 2
)

// Enum value maps for RadioEvent_LinkStatus.
var (
	RadioEvent_LinkStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DOWN",
		2: "UP",
	}
	RadioEvent_LinkStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"DOWN":    1,
		"UP":      2,
	}
)

func (x RadioEvent_LinkStatus) Enum() *RadioEvent_LinkStatus {
	p := new(RadioEvent_LinkStatus)
	*p = x
	return p
}

func (x RadioEvent_LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioEvent_LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_telemetry_proto_enumTypes[1].Descriptor()
}

func (RadioEvent_LinkStatus) Type() protoreflect.EnumType {
	return &file_api_common_telemetry_proto_enumTypes[1]
}

func (x RadioEvent_LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RadioEvent_LinkStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RadioEvent_LinkStatus(num)
	return nil
}

// Deprecated: Use RadioEvent_LinkStatus.Descriptor instead.
func (RadioEvent_LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{8, 0}
}

type PortEvent_PortStatus int32

const (
	PortEvent_UNKNOWN PortEvent_PortStatus = 0
	PortEvent_DOWN    PortEvent_PortStatus = 1
	PortEvent_UP      PortEvent_PortStatus = 2
)

// Enum value maps for PortEvent_PortStatus.
var (
	PortEvent_PortStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DOWN",
		2: "UP",
	}
	PortEvent_PortStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"DOWN":    1,
		"UP":      2,
	}
)

func (x PortEvent_PortStatus) Enum() *PortEvent_PortStatus {
	p := new(PortEvent_PortStatus)
	*p = x
	return p
}

func (x PortEvent_PortStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortEvent_PortStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_telemetry_proto_enumTypes[2].Descriptor()
}

func (PortEvent_PortStatus) Type() protoreflect.EnumType {
	return &file_api_common_telemetry_proto_enumTypes[2]
}

func (x PortEvent_PortStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PortEvent_PortStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PortEvent_PortStatus(num)
	return nil
}

// Deprecated: Use PortEvent_PortStatus.Descriptor instead.
func (PortEvent_PortStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{9, 0}
}

type InterfaceEvent_InterfaceStatus int32

const (
	InterfaceEvent_UNKNOWN  InterfaceEvent_InterfaceStatus = 0
	InterfaceEvent_DISABLED InterfaceEvent_InterfaceStatus = 1
	InterfaceEvent_ENABLED  InterfaceEvent_InterfaceStatus = 2
)

// Enum value maps for InterfaceEvent_InterfaceStatus.
var (
	InterfaceEvent_InterfaceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DISABLED",
		2: "ENABLED",
	}
	InterfaceEvent_InterfaceStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"DISABLED": 1,
		"ENABLED":  2,
	}
)

func (x InterfaceEvent_InterfaceStatus) Enum() *InterfaceEvent_InterfaceStatus {
	p := new(InterfaceEvent_InterfaceStatus)
	*p = x
	return p
}

func (x InterfaceEvent_InterfaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceEvent_InterfaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_telemetry_proto_enumTypes[3].Descriptor()
}

func (InterfaceEvent_InterfaceStatus) Type() protoreflect.EnumType {
	return &file_api_common_telemetry_proto_enumTypes[3]
}

func (x InterfaceEvent_InterfaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InterfaceEvent_InterfaceStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InterfaceEvent_InterfaceStatus(num)
	return nil
}

// Deprecated: Use InterfaceEvent_InterfaceStatus.Descriptor instead.
func (InterfaceEvent_InterfaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{10, 0}
}

type NetworkStatsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                  *string                    `protobuf:"bytes,7,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Timestamp               *DateTime                  `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	RadioStatsByInterfaceId map[string]*RadioStats     `protobuf:"bytes,4,rep,name=radio_stats_by_interface_id,json=radioStatsByInterfaceId" json:"radio_stats_by_interface_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InterfaceStatsById      map[string]*InterfaceStats `protobuf:"bytes,3,rep,name=interface_stats_by_id,json=interfaceStatsById" json:"interface_stats_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BeamStatsByAntennaId    map[string]*BeamStats      `protobuf:"bytes,5,rep,name=beam_stats_by_antenna_id,json=beamStatsByAntennaId" json:"beam_stats_by_antenna_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FlowStatsById           map[string]*FlowStats      `protobuf:"bytes,6,rep,name=flow_stats_by_id,json=flowStatsById" json:"flow_stats_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *NetworkStatsReport) Reset() {
	*x = NetworkStatsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStatsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStatsReport) ProtoMessage() {}

func (x *NetworkStatsReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStatsReport.ProtoReflect.Descriptor instead.
func (*NetworkStatsReport) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkStatsReport) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *NetworkStatsReport) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NetworkStatsReport) GetRadioStatsByInterfaceId() map[string]*RadioStats {
	if x != nil {
		return x.RadioStatsByInterfaceId
	}
	return nil
}

func (x *NetworkStatsReport) GetInterfaceStatsById() map[string]*InterfaceStats {
	if x != nil {
		return x.InterfaceStatsById
	}
	return nil
}

func (x *NetworkStatsReport) GetBeamStatsByAntennaId() map[string]*BeamStats {
	if x != nil {
		return x.BeamStatsByAntennaId
	}
	return nil
}

func (x *NetworkStatsReport) GetFlowStatsById() map[string]*FlowStats {
	if x != nil {
		return x.FlowStatsById
	}
	return nil
}

type BeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *DateTime                 `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Targeting *BeamStats_TargetingStats `protobuf:"bytes,2,opt,name=targeting" json:"targeting,omitempty"`
	Gimbal    *BeamStats_GimbalStats    `protobuf:"bytes,3,opt,name=gimbal" json:"gimbal,omitempty"`
}

func (x *BeamStats) Reset() {
	*x = BeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeamStats) ProtoMessage() {}

func (x *BeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeamStats.ProtoReflect.Descriptor instead.
func (*BeamStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *BeamStats) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BeamStats) GetTargeting() *BeamStats_TargetingStats {
	if x != nil {
		return x.Targeting
	}
	return nil
}

func (x *BeamStats) GetGimbal() *BeamStats_GimbalStats {
	if x != nil {
		return x.Gimbal
	}
	return nil
}

type TransmitterStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp               *DateTime `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	ReceiverPhysicalAddress *string   `protobuf:"bytes,5,opt,name=receiver_physical_address,json=receiverPhysicalAddress" json:"receiver_physical_address,omitempty"`
	DataRateBps             *float64  `protobuf:"fixed64,2,opt,name=data_rate_bps,json=dataRateBps" json:"data_rate_bps,omitempty"`
	TxPacketErrorRate       *float64  `protobuf:"fixed64,3,opt,name=tx_packet_error_rate,json=txPacketErrorRate" json:"tx_packet_error_rate,omitempty"`
}

func (x *TransmitterStats) Reset() {
	*x = TransmitterStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitterStats) ProtoMessage() {}

func (x *TransmitterStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitterStats.ProtoReflect.Descriptor instead.
func (*TransmitterStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *TransmitterStats) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TransmitterStats) GetReceiverPhysicalAddress() string {
	if x != nil && x.ReceiverPhysicalAddress != nil {
		return *x.ReceiverPhysicalAddress
	}
	return ""
}

func (x *TransmitterStats) GetDataRateBps() float64 {
	if x != nil && x.DataRateBps != nil {
		return *x.DataRateBps
	}
	return 0
}

func (x *TransmitterStats) GetTxPacketErrorRate() float64 {
	if x != nil && x.TxPacketErrorRate != nil {
		return *x.TxPacketErrorRate
	}
	return 0
}

type ReceiverStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                        *DateTime `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TransmitterPhysicalAddress       *string   `protobuf:"bytes,4,opt,name=transmitter_physical_address,json=transmitterPhysicalAddress" json:"transmitter_physical_address,omitempty"`
	PowerAtReceiverOutputDbw         *float64  `protobuf:"fixed64,2,opt,name=power_at_receiver_output_dbw,json=powerAtReceiverOutputDbw" json:"power_at_receiver_output_dbw,omitempty"`
	PowerAtReceiverOutputByChainDbw  []float64 `protobuf:"fixed64,5,rep,name=power_at_receiver_output_by_chain_dbw,json=powerAtReceiverOutputByChainDbw" json:"power_at_receiver_output_by_chain_dbw,omitempty"`
	MseDb                            *float64  `protobuf:"fixed64,6,opt,name=mse_db,json=mseDb" json:"mse_db,omitempty"`
	CarrierToNoisePlusInterferenceDb *float64  `protobuf:"fixed64,7,opt,name=carrier_to_noise_plus_interference_db,json=carrierToNoisePlusInterferenceDb" json:"carrier_to_noise_plus_interference_db,omitempty"`
}

func (x *ReceiverStats) Reset() {
	*x = ReceiverStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverStats) ProtoMessage() {}

func (x *ReceiverStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverStats.ProtoReflect.Descriptor instead.
func (*ReceiverStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *ReceiverStats) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReceiverStats) GetTransmitterPhysicalAddress() string {
	if x != nil && x.TransmitterPhysicalAddress != nil {
		return *x.TransmitterPhysicalAddress
	}
	return ""
}

func (x *ReceiverStats) GetPowerAtReceiverOutputDbw() float64 {
	if x != nil && x.PowerAtReceiverOutputDbw != nil {
		return *x.PowerAtReceiverOutputDbw
	}
	return 0
}

func (x *ReceiverStats) GetPowerAtReceiverOutputByChainDbw() []float64 {
	if x != nil {
		return x.PowerAtReceiverOutputByChainDbw
	}
	return nil
}

func (x *ReceiverStats) GetMseDb() float64 {
	if x != nil && x.MseDb != nil {
		return *x.MseDb
	}
	return 0
}

func (x *ReceiverStats) GetCarrierToNoisePlusInterferenceDb() float64 {
	if x != nil && x.CarrierToNoisePlusInterferenceDb != nil {
		return *x.CarrierToNoisePlusInterferenceDb
	}
	return 0
}

type RadioStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId      *string             `protobuf:"bytes,5,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	TransmitterStats []*TransmitterStats `protobuf:"bytes,3,rep,name=transmitter_stats,json=transmitterStats" json:"transmitter_stats,omitempty"`
	ReceiverStats    []*ReceiverStats    `protobuf:"bytes,4,rep,name=receiver_stats,json=receiverStats" json:"receiver_stats,omitempty"`
}

func (x *RadioStats) Reset() {
	*x = RadioStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStats) ProtoMessage() {}

func (x *RadioStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStats.ProtoReflect.Descriptor instead.
func (*RadioStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *RadioStats) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *RadioStats) GetTransmitterStats() []*TransmitterStats {
	if x != nil {
		return x.TransmitterStats
	}
	return nil
}

func (x *RadioStats) GetReceiverStats() []*ReceiverStats {
	if x != nil {
		return x.ReceiverStats
	}
	return nil
}

type InterfaceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *DateTime `protobuf:"bytes,9,opt,name=timestamp" json:"timestamp,omitempty"`
	TxPackets *int64    `protobuf:"varint,1,opt,name=tx_packets,json=txPackets" json:"tx_packets,omitempty"`
	RxPackets *int64    `protobuf:"varint,2,opt,name=rx_packets,json=rxPackets" json:"rx_packets,omitempty"`
	TxBytes   *int64    `protobuf:"varint,3,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	RxBytes   *int64    `protobuf:"varint,4,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	TxDropped *int64    `protobuf:"varint,5,opt,name=tx_dropped,json=txDropped" json:"tx_dropped,omitempty"`
	RxDropped *int64    `protobuf:"varint,6,opt,name=rx_dropped,json=rxDropped" json:"rx_dropped,omitempty"`
	RxErrors  *int64    `protobuf:"varint,7,opt,name=rx_errors,json=rxErrors" json:"rx_errors,omitempty"`
	TxErrors  *int64    `protobuf:"varint,8,opt,name=tx_errors,json=txErrors" json:"tx_errors,omitempty"`
}

func (x *InterfaceStats) Reset() {
	*x = InterfaceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStats) ProtoMessage() {}

func (x *InterfaceStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStats.ProtoReflect.Descriptor instead.
func (*InterfaceStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *InterfaceStats) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *InterfaceStats) GetTxPackets() int64 {
	if x != nil && x.TxPackets != nil {
		return *x.TxPackets
	}
	return 0
}

func (x *InterfaceStats) GetRxPackets() int64 {
	if x != nil && x.RxPackets != nil {
		return *x.RxPackets
	}
	return 0
}

func (x *InterfaceStats) GetTxBytes() int64 {
	if x != nil && x.TxBytes != nil {
		return *x.TxBytes
	}
	return 0
}

func (x *InterfaceStats) GetRxBytes() int64 {
	if x != nil && x.RxBytes != nil {
		return *x.RxBytes
	}
	return 0
}

func (x *InterfaceStats) GetTxDropped() int64 {
	if x != nil && x.TxDropped != nil {
		return *x.TxDropped
	}
	return 0
}

func (x *InterfaceStats) GetRxDropped() int64 {
	if x != nil && x.RxDropped != nil {
		return *x.RxDropped
	}
	return 0
}

func (x *InterfaceStats) GetRxErrors() int64 {
	if x != nil && x.RxErrors != nil {
		return *x.RxErrors
	}
	return 0
}

func (x *InterfaceStats) GetTxErrors() int64 {
	if x != nil && x.TxErrors != nil {
		return *x.TxErrors
	}
	return 0
}

type FlowStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *DateTime `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TxPackets *int64    `protobuf:"varint,2,opt,name=tx_packets,json=txPackets" json:"tx_packets,omitempty"`
	RxPackets *int64    `protobuf:"varint,3,opt,name=rx_packets,json=rxPackets" json:"rx_packets,omitempty"`
	TxBytes   *int64    `protobuf:"varint,4,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	RxBytes   *int64    `protobuf:"varint,5,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
}

func (x *FlowStats) Reset() {
	*x = FlowStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowStats) ProtoMessage() {}

func (x *FlowStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowStats.ProtoReflect.Descriptor instead.
func (*FlowStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *FlowStats) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FlowStats) GetTxPackets() int64 {
	if x != nil && x.TxPackets != nil {
		return *x.TxPackets
	}
	return 0
}

func (x *FlowStats) GetRxPackets() int64 {
	if x != nil && x.RxPackets != nil {
		return *x.RxPackets
	}
	return 0
}

func (x *FlowStats) GetTxBytes() int64 {
	if x != nil && x.TxBytes != nil {
		return *x.TxBytes
	}
	return 0
}

func (x *FlowStats) GetRxBytes() int64 {
	if x != nil && x.RxBytes != nil {
		return *x.RxBytes
	}
	return 0
}

type NetworkEventReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    *string   `protobuf:"bytes,5,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Timestamp *DateTime `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to SourceType:
	//
	//	*NetworkEventReport_RadioEvent
	//	*NetworkEventReport_PortEvent
	//	*NetworkEventReport_InterfaceEvent
	SourceType isNetworkEventReport_SourceType `protobuf_oneof:"source_type"`
}

func (x *NetworkEventReport) Reset() {
	*x = NetworkEventReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEventReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEventReport) ProtoMessage() {}

func (x *NetworkEventReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEventReport.ProtoReflect.Descriptor instead.
func (*NetworkEventReport) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkEventReport) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *NetworkEventReport) GetTimestamp() *DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *NetworkEventReport) GetSourceType() isNetworkEventReport_SourceType {
	if m != nil {
		return m.SourceType
	}
	return nil
}

func (x *NetworkEventReport) GetRadioEvent() *RadioEvent {
	if x, ok := x.GetSourceType().(*NetworkEventReport_RadioEvent); ok {
		return x.RadioEvent
	}
	return nil
}

func (x *NetworkEventReport) GetPortEvent() *PortEvent {
	if x, ok := x.GetSourceType().(*NetworkEventReport_PortEvent); ok {
		return x.PortEvent
	}
	return nil
}

func (x *NetworkEventReport) GetInterfaceEvent() *InterfaceEvent {
	if x, ok := x.GetSourceType().(*NetworkEventReport_InterfaceEvent); ok {
		return x.InterfaceEvent
	}
	return nil
}

type isNetworkEventReport_SourceType interface {
	isNetworkEventReport_SourceType()
}

type NetworkEventReport_RadioEvent struct {
	RadioEvent *RadioEvent `protobuf:"bytes,2,opt,name=radio_event,json=radioEvent,oneof"`
}

type NetworkEventReport_PortEvent struct {
	PortEvent *PortEvent `protobuf:"bytes,3,opt,name=port_event,json=portEvent,oneof"`
}

type NetworkEventReport_InterfaceEvent struct {
	InterfaceEvent *InterfaceEvent `protobuf:"bytes,4,opt,name=interface_event,json=interfaceEvent,oneof"`
}

func (*NetworkEventReport_RadioEvent) isNetworkEventReport_SourceType() {}

func (*NetworkEventReport_PortEvent) isNetworkEventReport_SourceType() {}

func (*NetworkEventReport_InterfaceEvent) isNetworkEventReport_SourceType() {}

type RadioEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RadioId:
	//
	//	*RadioEvent_TransmitterId
	//	*RadioEvent_ReceiverId
	RadioId isRadioEvent_RadioId `protobuf_oneof:"radio_id"`
	// Types that are assignable to Event:
	//
	//	*RadioEvent_LinkStatus_
	Event isRadioEvent_Event `protobuf_oneof:"event"`
}

func (x *RadioEvent) Reset() {
	*x = RadioEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioEvent) ProtoMessage() {}

func (x *RadioEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioEvent.ProtoReflect.Descriptor instead.
func (*RadioEvent) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{8}
}

func (m *RadioEvent) GetRadioId() isRadioEvent_RadioId {
	if m != nil {
		return m.RadioId
	}
	return nil
}

func (x *RadioEvent) GetTransmitterId() string {
	if x, ok := x.GetRadioId().(*RadioEvent_TransmitterId); ok {
		return x.TransmitterId
	}
	return ""
}

func (x *RadioEvent) GetReceiverId() string {
	if x, ok := x.GetRadioId().(*RadioEvent_ReceiverId); ok {
		return x.ReceiverId
	}
	return ""
}

func (m *RadioEvent) GetEvent() isRadioEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RadioEvent) GetLinkStatus() RadioEvent_LinkStatus {
	if x, ok := x.GetEvent().(*RadioEvent_LinkStatus_); ok {
		return x.LinkStatus
	}
	return RadioEvent_UNKNOWN
}

type isRadioEvent_RadioId interface {
	isRadioEvent_RadioId()
}

type RadioEvent_TransmitterId struct {
	TransmitterId string `protobuf:"bytes,1,opt,name=transmitter_id,json=transmitterId,oneof"`
}

type RadioEvent_ReceiverId struct {
	ReceiverId string `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,oneof"`
}

func (*RadioEvent_TransmitterId) isRadioEvent_RadioId() {}

func (*RadioEvent_ReceiverId) isRadioEvent_RadioId() {}

type isRadioEvent_Event interface {
	isRadioEvent_Event()
}

type RadioEvent_LinkStatus_ struct {
	LinkStatus RadioEvent_LinkStatus `protobuf:"varint,3,opt,name=link_status,json=linkStatus,enum=aalyria.spacetime.api.common.RadioEvent_LinkStatus,oneof"`
}

func (*RadioEvent_LinkStatus_) isRadioEvent_Event() {}

type PortEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId *string `protobuf:"bytes,1,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	// Types that are assignable to Event:
	//
	//	*PortEvent_PortStatus_
	Event isPortEvent_Event `protobuf_oneof:"event"`
}

func (x *PortEvent) Reset() {
	*x = PortEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortEvent) ProtoMessage() {}

func (x *PortEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortEvent.ProtoReflect.Descriptor instead.
func (*PortEvent) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *PortEvent) GetPortId() string {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return ""
}

func (m *PortEvent) GetEvent() isPortEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *PortEvent) GetPortStatus() PortEvent_PortStatus {
	if x, ok := x.GetEvent().(*PortEvent_PortStatus_); ok {
		return x.PortStatus
	}
	return PortEvent_UNKNOWN
}

type isPortEvent_Event interface {
	isPortEvent_Event()
}

type PortEvent_PortStatus_ struct {
	PortStatus PortEvent_PortStatus `protobuf:"varint,2,opt,name=port_status,json=portStatus,enum=aalyria.spacetime.api.common.PortEvent_PortStatus,oneof"`
}

func (*PortEvent_PortStatus_) isPortEvent_Event() {}

type InterfaceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId *string `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	// Types that are assignable to Event:
	//
	//	*InterfaceEvent_InterfaceStatus_
	//	*InterfaceEvent_IpAddress
	Event isInterfaceEvent_Event `protobuf_oneof:"event"`
}

func (x *InterfaceEvent) Reset() {
	*x = InterfaceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceEvent) ProtoMessage() {}

func (x *InterfaceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceEvent.ProtoReflect.Descriptor instead.
func (*InterfaceEvent) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *InterfaceEvent) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (m *InterfaceEvent) GetEvent() isInterfaceEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *InterfaceEvent) GetInterfaceStatus() InterfaceEvent_InterfaceStatus {
	if x, ok := x.GetEvent().(*InterfaceEvent_InterfaceStatus_); ok {
		return x.InterfaceStatus
	}
	return InterfaceEvent_UNKNOWN
}

func (x *InterfaceEvent) GetIpAddress() string {
	if x, ok := x.GetEvent().(*InterfaceEvent_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

type isInterfaceEvent_Event interface {
	isInterfaceEvent_Event()
}

type InterfaceEvent_InterfaceStatus_ struct {
	InterfaceStatus InterfaceEvent_InterfaceStatus `protobuf:"varint,2,opt,name=interface_status,json=interfaceStatus,enum=aalyria.spacetime.api.common.InterfaceEvent_InterfaceStatus,oneof"`
}

type InterfaceEvent_IpAddress struct {
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,oneof"`
}

func (*InterfaceEvent_InterfaceStatus_) isInterfaceEvent_Event() {}

func (*InterfaceEvent_IpAddress) isInterfaceEvent_Event() {}

type BeamStats_TargetingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetLocation   *GeodeticWgs84                             `protobuf:"bytes,1,opt,name=target_location,json=targetLocation" json:"target_location,omitempty"`
	ConnectionStatus *BeamStats_TargetingStats_ConnectionStatus `protobuf:"varint,2,opt,name=connection_status,json=connectionStatus,enum=aalyria.spacetime.api.common.BeamStats_TargetingStats_ConnectionStatus" json:"connection_status,omitempty"`
	BeamTaskId       *string                                    `protobuf:"bytes,3,opt,name=beam_task_id,json=beamTaskId" json:"beam_task_id,omitempty"`
	TargetIdentifier *string                                    `protobuf:"bytes,4,opt,name=target_identifier,json=targetIdentifier" json:"target_identifier,omitempty"`
}

func (x *BeamStats_TargetingStats) Reset() {
	*x = BeamStats_TargetingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeamStats_TargetingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeamStats_TargetingStats) ProtoMessage() {}

func (x *BeamStats_TargetingStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeamStats_TargetingStats.ProtoReflect.Descriptor instead.
func (*BeamStats_TargetingStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BeamStats_TargetingStats) GetTargetLocation() *GeodeticWgs84 {
	if x != nil {
		return x.TargetLocation
	}
	return nil
}

func (x *BeamStats_TargetingStats) GetConnectionStatus() BeamStats_TargetingStats_ConnectionStatus {
	if x != nil && x.ConnectionStatus != nil {
		return *x.ConnectionStatus
	}
	return BeamStats_TargetingStats_UNKNOWN
}

func (x *BeamStats_TargetingStats) GetBeamTaskId() string {
	if x != nil && x.BeamTaskId != nil {
		return *x.BeamTaskId
	}
	return ""
}

func (x *BeamStats_TargetingStats) GetTargetIdentifier() string {
	if x != nil && x.TargetIdentifier != nil {
		return *x.TargetIdentifier
	}
	return ""
}

type BeamStats_GimbalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *GeodeticWgs84 `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// Types that are assignable to SiteOrientation:
	//
	//	*BeamStats_GimbalStats_OrientationQuaternion
	//	*BeamStats_GimbalStats_OrientationYpr
	SiteOrientation isBeamStats_GimbalStats_SiteOrientation `protobuf_oneof:"site_orientation"`
	PointingVector  *PointingVector                         `protobuf:"bytes,4,opt,name=pointing_vector,json=pointingVector" json:"pointing_vector,omitempty"`
	Initialized     *bool                                   `protobuf:"varint,5,opt,name=initialized" json:"initialized,omitempty"`
}

func (x *BeamStats_GimbalStats) Reset() {
	*x = BeamStats_GimbalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_telemetry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeamStats_GimbalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeamStats_GimbalStats) ProtoMessage() {}

func (x *BeamStats_GimbalStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_telemetry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeamStats_GimbalStats.ProtoReflect.Descriptor instead.
func (*BeamStats_GimbalStats) Descriptor() ([]byte, []int) {
	return file_api_common_telemetry_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BeamStats_GimbalStats) GetLocation() *GeodeticWgs84 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (m *BeamStats_GimbalStats) GetSiteOrientation() isBeamStats_GimbalStats_SiteOrientation {
	if m != nil {
		return m.SiteOrientation
	}
	return nil
}

func (x *BeamStats_GimbalStats) GetOrientationQuaternion() *Quaternion {
	if x, ok := x.GetSiteOrientation().(*BeamStats_GimbalStats_OrientationQuaternion); ok {
		return x.OrientationQuaternion
	}
	return nil
}

func (x *BeamStats_GimbalStats) GetOrientationYpr() *YawPitchRoll {
	if x, ok := x.GetSiteOrientation().(*BeamStats_GimbalStats_OrientationYpr); ok {
		return x.OrientationYpr
	}
	return nil
}

func (x *BeamStats_GimbalStats) GetPointingVector() *PointingVector {
	if x != nil {
		return x.PointingVector
	}
	return nil
}

func (x *BeamStats_GimbalStats) GetInitialized() bool {
	if x != nil && x.Initialized != nil {
		return *x.Initialized
	}
	return false
}

type isBeamStats_GimbalStats_SiteOrientation interface {
	isBeamStats_GimbalStats_SiteOrientation()
}

type BeamStats_GimbalStats_OrientationQuaternion struct {
	OrientationQuaternion *Quaternion `protobuf:"bytes,2,opt,name=orientation_quaternion,json=orientationQuaternion,oneof"`
}

type BeamStats_GimbalStats_OrientationYpr struct {
	OrientationYpr *YawPitchRoll `protobuf:"bytes,3,opt,name=orientation_ypr,json=orientationYpr,oneof"`
}

func (*BeamStats_GimbalStats_OrientationQuaternion) isBeamStats_GimbalStats_SiteOrientation() {}

func (*BeamStats_GimbalStats_OrientationYpr) isBeamStats_GimbalStats_SiteOrientation() {}

var File_api_common_telemetry_proto protoreflect.FileDescriptor

var file_api_common_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbf, 0x08, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x82, 0x01, 0x0a, 0x18, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x62, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x1a, 0x74, 0x0a, 0x1c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x17, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70,
	0x0a, 0x19, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x69, 0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xfc, 0x07, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x06, 0x67,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x06, 0x67, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x1a, 0xe5, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x57, 0x67, 0x73, 0x38,
	0x34, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x74, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x65, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x9d, 0x03, 0x0a, 0x0b, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x57, 0x67, 0x73, 0x38, 0x34, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x70, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x61, 0x77, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x70, 0x72, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xef, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x42, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x95, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1c,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x62, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x62, 0x77, 0x12, 0x4e, 0x0a, 0x25,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x64, 0x62, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x1f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x41, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x62, 0x77, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x73, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x73,
	0x65, 0x44, 0x62, 0x12, 0x4f, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x69,
	0x73, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x62, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc5,
	0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x0b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0a,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b,
	0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xb1, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b,
	0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x44, 0x0a, 0x20, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x20,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_api_common_telemetry_proto_rawDescOnce sync.Once
	file_api_common_telemetry_proto_rawDescData = file_api_common_telemetry_proto_rawDesc
)

func file_api_common_telemetry_proto_rawDescGZIP() []byte {
	file_api_common_telemetry_proto_rawDescOnce.Do(func() {
		file_api_common_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_telemetry_proto_rawDescData)
	})
	return file_api_common_telemetry_proto_rawDescData
}

var file_api_common_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_common_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_common_telemetry_proto_goTypes = []interface{}{
	(BeamStats_TargetingStats_ConnectionStatus)(0), // 0: aalyria.spacetime.api.common.BeamStats.TargetingStats.ConnectionStatus
	(RadioEvent_LinkStatus)(0),                     // 1: aalyria.spacetime.api.common.RadioEvent.LinkStatus
	(PortEvent_PortStatus)(0),                      // 2: aalyria.spacetime.api.common.PortEvent.PortStatus
	(InterfaceEvent_InterfaceStatus)(0),            // 3: aalyria.spacetime.api.common.InterfaceEvent.InterfaceStatus
	(*NetworkStatsReport)(nil),                     // 4: aalyria.spacetime.api.common.NetworkStatsReport
	(*BeamStats)(nil),                              // 5: aalyria.spacetime.api.common.BeamStats
	(*TransmitterStats)(nil),                       // 6: aalyria.spacetime.api.common.TransmitterStats
	(*ReceiverStats)(nil),                          // 7: aalyria.spacetime.api.common.ReceiverStats
	(*RadioStats)(nil),                             // 8: aalyria.spacetime.api.common.RadioStats
	(*InterfaceStats)(nil),                         // 9: aalyria.spacetime.api.common.InterfaceStats
	(*FlowStats)(nil),                              // 10: aalyria.spacetime.api.common.FlowStats
	(*NetworkEventReport)(nil),                     // 11: aalyria.spacetime.api.common.NetworkEventReport
	(*RadioEvent)(nil),                             // 12: aalyria.spacetime.api.common.RadioEvent
	(*PortEvent)(nil),                              // 13: aalyria.spacetime.api.common.PortEvent
	(*InterfaceEvent)(nil),                         // 14: aalyria.spacetime.api.common.InterfaceEvent
	nil,                                            // 15: aalyria.spacetime.api.common.NetworkStatsReport.RadioStatsByInterfaceIdEntry
	nil,                                            // 16: aalyria.spacetime.api.common.NetworkStatsReport.InterfaceStatsByIdEntry
	nil,                                            // 17: aalyria.spacetime.api.common.NetworkStatsReport.BeamStatsByAntennaIdEntry
	nil,                                            // 18: aalyria.spacetime.api.common.NetworkStatsReport.FlowStatsByIdEntry
	(*BeamStats_TargetingStats)(nil),               // 19: aalyria.spacetime.api.common.BeamStats.TargetingStats
	(*BeamStats_GimbalStats)(nil),                  // 20: aalyria.spacetime.api.common.BeamStats.GimbalStats
	(*DateTime)(nil),                               // 21: aalyria.spacetime.api.common.DateTime
	(*GeodeticWgs84)(nil),                          // 22: aalyria.spacetime.api.common.GeodeticWgs84
	(*Quaternion)(nil),                             // 23: aalyria.spacetime.api.common.Quaternion
	(*YawPitchRoll)(nil),                           // 24: aalyria.spacetime.api.common.YawPitchRoll
	(*PointingVector)(nil),                         // 25: aalyria.spacetime.api.common.PointingVector
}
var file_api_common_telemetry_proto_depIdxs = []int32{
	21, // 0: aalyria.spacetime.api.common.NetworkStatsReport.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	15, // 1: aalyria.spacetime.api.common.NetworkStatsReport.radio_stats_by_interface_id:type_name -> aalyria.spacetime.api.common.NetworkStatsReport.RadioStatsByInterfaceIdEntry
	16, // 2: aalyria.spacetime.api.common.NetworkStatsReport.interface_stats_by_id:type_name -> aalyria.spacetime.api.common.NetworkStatsReport.InterfaceStatsByIdEntry
	17, // 3: aalyria.spacetime.api.common.NetworkStatsReport.beam_stats_by_antenna_id:type_name -> aalyria.spacetime.api.common.NetworkStatsReport.BeamStatsByAntennaIdEntry
	18, // 4: aalyria.spacetime.api.common.NetworkStatsReport.flow_stats_by_id:type_name -> aalyria.spacetime.api.common.NetworkStatsReport.FlowStatsByIdEntry
	21, // 5: aalyria.spacetime.api.common.BeamStats.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	19, // 6: aalyria.spacetime.api.common.BeamStats.targeting:type_name -> aalyria.spacetime.api.common.BeamStats.TargetingStats
	20, // 7: aalyria.spacetime.api.common.BeamStats.gimbal:type_name -> aalyria.spacetime.api.common.BeamStats.GimbalStats
	21, // 8: aalyria.spacetime.api.common.TransmitterStats.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	21, // 9: aalyria.spacetime.api.common.ReceiverStats.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	6,  // 10: aalyria.spacetime.api.common.RadioStats.transmitter_stats:type_name -> aalyria.spacetime.api.common.TransmitterStats
	7,  // 11: aalyria.spacetime.api.common.RadioStats.receiver_stats:type_name -> aalyria.spacetime.api.common.ReceiverStats
	21, // 12: aalyria.spacetime.api.common.InterfaceStats.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	21, // 13: aalyria.spacetime.api.common.FlowStats.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	21, // 14: aalyria.spacetime.api.common.NetworkEventReport.timestamp:type_name -> aalyria.spacetime.api.common.DateTime
	12, // 15: aalyria.spacetime.api.common.NetworkEventReport.radio_event:type_name -> aalyria.spacetime.api.common.RadioEvent
	13, // 16: aalyria.spacetime.api.common.NetworkEventReport.port_event:type_name -> aalyria.spacetime.api.common.PortEvent
	14, // 17: aalyria.spacetime.api.common.NetworkEventReport.interface_event:type_name -> aalyria.spacetime.api.common.InterfaceEvent
	1,  // 18: aalyria.spacetime.api.common.RadioEvent.link_status:type_name -> aalyria.spacetime.api.common.RadioEvent.LinkStatus
	2,  // 19: aalyria.spacetime.api.common.PortEvent.port_status:type_name -> aalyria.spacetime.api.common.PortEvent.PortStatus
	3,  // 20: aalyria.spacetime.api.common.InterfaceEvent.interface_status:type_name -> aalyria.spacetime.api.common.InterfaceEvent.InterfaceStatus
	8,  // 21: aalyria.spacetime.api.common.NetworkStatsReport.RadioStatsByInterfaceIdEntry.value:type_name -> aalyria.spacetime.api.common.RadioStats
	9,  // 22: aalyria.spacetime.api.common.NetworkStatsReport.InterfaceStatsByIdEntry.value:type_name -> aalyria.spacetime.api.common.InterfaceStats
	5,  // 23: aalyria.spacetime.api.common.NetworkStatsReport.BeamStatsByAntennaIdEntry.value:type_name -> aalyria.spacetime.api.common.BeamStats
	10, // 24: aalyria.spacetime.api.common.NetworkStatsReport.FlowStatsByIdEntry.value:type_name -> aalyria.spacetime.api.common.FlowStats
	22, // 25: aalyria.spacetime.api.common.BeamStats.TargetingStats.target_location:type_name -> aalyria.spacetime.api.common.GeodeticWgs84
	0,  // 26: aalyria.spacetime.api.common.BeamStats.TargetingStats.connection_status:type_name -> aalyria.spacetime.api.common.BeamStats.TargetingStats.ConnectionStatus
	22, // 27: aalyria.spacetime.api.common.BeamStats.GimbalStats.location:type_name -> aalyria.spacetime.api.common.GeodeticWgs84
	23, // 28: aalyria.spacetime.api.common.BeamStats.GimbalStats.orientation_quaternion:type_name -> aalyria.spacetime.api.common.Quaternion
	24, // 29: aalyria.spacetime.api.common.BeamStats.GimbalStats.orientation_ypr:type_name -> aalyria.spacetime.api.common.YawPitchRoll
	25, // 30: aalyria.spacetime.api.common.BeamStats.GimbalStats.pointing_vector:type_name -> aalyria.spacetime.api.common.PointingVector
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_api_common_telemetry_proto_init() }
func file_api_common_telemetry_proto_init() {
	if File_api_common_telemetry_proto != nil {
		return
	}
	file_api_common_coordinates_proto_init()
	file_api_common_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStatsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitterStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEventReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeamStats_TargetingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_telemetry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeamStats_GimbalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_telemetry_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*NetworkEventReport_RadioEvent)(nil),
		(*NetworkEventReport_PortEvent)(nil),
		(*NetworkEventReport_InterfaceEvent)(nil),
	}
	file_api_common_telemetry_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RadioEvent_TransmitterId)(nil),
		(*RadioEvent_ReceiverId)(nil),
		(*RadioEvent_LinkStatus_)(nil),
	}
	file_api_common_telemetry_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PortEvent_PortStatus_)(nil),
	}
	file_api_common_telemetry_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*InterfaceEvent_InterfaceStatus_)(nil),
		(*InterfaceEvent_IpAddress)(nil),
	}
	file_api_common_telemetry_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BeamStats_GimbalStats_OrientationQuaternion)(nil),
		(*BeamStats_GimbalStats_OrientationYpr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_telemetry_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_telemetry_proto_goTypes,
		DependencyIndexes: file_api_common_telemetry_proto_depIdxs,
		EnumInfos:         file_api_common_telemetry_proto_enumTypes,
		MessageInfos:      file_api_common_telemetry_proto_msgTypes,
	}.Build()
	File_api_common_telemetry_proto = out.File
	file_api_common_telemetry_proto_rawDesc = nil
	file_api_common_telemetry_proto_goTypes = nil
	file_api_common_telemetry_proto_depIdxs = nil
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/network.proto

#include "api/common/network.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR NetworkInterfaceId::NetworkInterfaceId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct NetworkInterfaceIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInterfaceIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInterfaceIdDefaultTypeInternal() {}
  union {
    NetworkInterfaceId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInterfaceIdDefaultTypeInternal _NetworkInterfaceId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier_ValueRange::PacketClassifier_ValueRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.low_)*/ 0u

  , /*decltype(_impl_.high_)*/ 0u
} {}
struct PacketClassifier_ValueRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifier_ValueRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifier_ValueRangeDefaultTypeInternal() {}
  union {
    PacketClassifier_ValueRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifier_ValueRangeDefaultTypeInternal _PacketClassifier_ValueRange_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier_IpHeader::PacketClassifier_IpHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.src_ip_range_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_ip_range_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct PacketClassifier_IpHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifier_IpHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifier_IpHeaderDefaultTypeInternal() {}
  union {
    PacketClassifier_IpHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifier_IpHeaderDefaultTypeInternal _PacketClassifier_IpHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier_GenericLayer4Header::PacketClassifier_GenericLayer4Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_port_)*/{}
  , /*decltype(_impl_.destination_port_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketClassifier_GenericLayer4HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifier_GenericLayer4HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifier_GenericLayer4HeaderDefaultTypeInternal() {}
  union {
    PacketClassifier_GenericLayer4Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifier_GenericLayer4HeaderDefaultTypeInternal _PacketClassifier_GenericLayer4Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier_EthernetHeader::PacketClassifier_EthernetHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketClassifier_EthernetHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifier_EthernetHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifier_EthernetHeaderDefaultTypeInternal() {}
  union {
    PacketClassifier_EthernetHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifier_EthernetHeaderDefaultTypeInternal _PacketClassifier_EthernetHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier_MplsLabelStackEntry::PacketClassifier_MplsLabelStackEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.label_)*/ 0u
} {}
struct PacketClassifier_MplsLabelStackEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifier_MplsLabelStackEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifier_MplsLabelStackEntryDefaultTypeInternal() {}
  union {
    PacketClassifier_MplsLabelStackEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifier_MplsLabelStackEntryDefaultTypeInternal _PacketClassifier_MplsLabelStackEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketClassifier::PacketClassifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_header_)*/nullptr
  , /*decltype(_impl_.l4_header_)*/nullptr
  , /*decltype(_impl_.ethernet_header_)*/nullptr
  , /*decltype(_impl_.mpls_label_stack_entry_)*/nullptr} {}
struct PacketClassifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketClassifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketClassifierDefaultTypeInternal() {}
  union {
    PacketClassifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketClassifierDefaultTypeInternal _PacketClassifier_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Subnet::Subnet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subnet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SubnetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubnetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubnetDefaultTypeInternal() {}
  union {
    Subnet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubnetDefaultTypeInternal _Subnet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IpFlowClassifier::IpFlowClassifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.src_)*/nullptr
  , /*decltype(_impl_.dst_)*/nullptr
  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct IpFlowClassifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IpFlowClassifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IpFlowClassifierDefaultTypeInternal() {}
  union {
    IpFlowClassifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IpFlowClassifierDefaultTypeInternal _IpFlowClassifier_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlowClassifier::FlowClassifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_classifier_)*/nullptr
  , /*decltype(_impl_.l4_classifier_)*/nullptr
  , /*decltype(_impl_.ethernet_classifier_)*/nullptr} {}
struct FlowClassifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowClassifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowClassifierDefaultTypeInternal() {}
  union {
    FlowClassifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowClassifierDefaultTypeInternal _FlowClassifier_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fnetwork_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fnetwork_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fnetwork_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fnetwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::NetworkInterfaceId, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::NetworkInterfaceId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::NetworkInterfaceId, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::NetworkInterfaceId, _impl_.interface_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_ValueRange, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_ValueRange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_ValueRange, _impl_.low_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_ValueRange, _impl_.high_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_IpHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_IpHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_IpHeader, _impl_.src_ip_range_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_IpHeader, _impl_.dst_ip_range_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_IpHeader, _impl_.protocol_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header, _impl_.source_port_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header, _impl_.destination_port_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry, _impl_.label_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _impl_.ip_header_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _impl_.l4_header_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _impl_.ethernet_header_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier, _impl_.mpls_label_stack_entry_),
    0,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Subnet, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Subnet, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Subnet, _impl_.subnet_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::IpFlowClassifier, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::IpFlowClassifier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::IpFlowClassifier, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::IpFlowClassifier, _impl_.dst_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::IpFlowClassifier, _impl_.protocol_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowClassifier, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowClassifier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowClassifier, _impl_.ip_classifier_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowClassifier, _impl_.l4_classifier_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::FlowClassifier, _impl_.ethernet_classifier_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::common::NetworkInterfaceId)},
        { 12, 22, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier_ValueRange)},
        { 24, 35, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier_IpHeader)},
        { 38, -1, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header)},
        { 48, -1, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader)},
        { 59, 68, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry)},
        { 69, 81, -1, sizeof(::aalyria::spacetime::api::common::PacketClassifier)},
        { 85, -1, -1, sizeof(::aalyria::spacetime::api::common::Subnet)},
        { 97, 108, -1, sizeof(::aalyria::spacetime::api::common::IpFlowClassifier)},
        { 111, 122, -1, sizeof(::aalyria::spacetime::api::common::FlowClassifier)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_NetworkInterfaceId_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_ValueRange_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_IpHeader_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_GenericLayer4Header_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_EthernetHeader_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_MplsLabelStackEntry_default_instance_._instance,
    &::aalyria::spacetime::api::common::_PacketClassifier_default_instance_._instance,
    &::aalyria::spacetime::api::common::_Subnet_default_instance_._instance,
    &::aalyria::spacetime::api::common::_IpFlowClassifier_default_instance_._instance,
    &::aalyria::spacetime::api::common::_FlowClassifier_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030api/common/network.proto\022\034aalyria.spac"
    "etime.api.common\032\033google/protobuf/empty."
    "proto\"P\n\022NetworkInterfaceId\022\027\n\007node_id\030\001"
    " \001(\tR\006nodeId\022!\n\014interface_id\030\002 \001(\tR\013inte"
    "rfaceId\"\370\007\n\020PacketClassifier\022T\n\tip_heade"
    "r\030\001 \001(\01327.aalyria.spacetime.api.common.P"
    "acketClassifier.IpHeaderR\010ipHeader\022_\n\tl4"
    "_header\030\002 \001(\0132B.aalyria.spacetime.api.co"
    "mmon.PacketClassifier.GenericLayer4Heade"
    "rR\010l4Header\022f\n\017ethernet_header\030\003 \001(\0132=.a"
    "alyria.spacetime.api.common.PacketClassi"
    "fier.EthernetHeaderR\016ethernetHeader\022w\n\026m"
    "pls_label_stack_entry\030\004 \001(\0132B.aalyria.sp"
    "acetime.api.common.PacketClassifier.Mpls"
    "LabelStackEntryR\023mplsLabelStackEntry\032<\n\n"
    "ValueRange\022\020\n\003low\030\001 \001(\rR\003low\022\022\n\004high\030\002 \001"
    "(\rR\004highJ\010\010\003\020\200\200\200\200\002\032t\n\010IpHeader\022 \n\014src_ip"
    "_range\030\001 \001(\tR\nsrcIpRange\022 \n\014dst_ip_range"
    "\030\002 \001(\tR\ndstIpRange\022\032\n\010protocol\030\003 \001(\rR\010pr"
    "otocolJ\010\010\004\020\200\200\200\200\002\032\341\001\n\023GenericLayer4Header"
    "\022Z\n\013source_port\030\001 \003(\01329.aalyria.spacetim"
    "e.api.common.PacketClassifier.ValueRange"
    "R\nsourcePort\022d\n\020destination_port\030\002 \003(\01329"
    ".aalyria.spacetime.api.common.PacketClas"
    "sifier.ValueRangeR\017destinationPortJ\010\010\003\020\200"
    "\200\200\200\002\032}\n\016EthernetHeader\0226\n\tmulticast\030\001 \001("
    "\0132\026.google.protobuf.EmptyH\000R\tmulticast\022\032"
    "\n\007address\030\002 \001(\tH\000R\007addressB\r\n\013destinatio"
    "nJ\010\010\003\020\200\200\200\200\002\032+\n\023MplsLabelStackEntry\022\024\n\005la"
    "bel\030\001 \001(\rR\005labelJ\010\010\005\020\200\200\200\200\002\"\253\001\n\006Subnet\022\033\n"
    "\010ip_range\030\001 \001(\tH\000R\007ipRange\022\031\n\007node_id\030\002 "
    "\001(\tH\000R\006nodeId\022U\n\014interface_id\030\003 \001(\01320.aa"
    "lyria.spacetime.api.common.NetworkInterf"
    "aceIdH\000R\013interfaceIdB\010\n\006subnetJ\010\010\004\020\200\200\200\200\002"
    "\"\250\001\n\020IpFlowClassifier\0226\n\003src\030\001 \001(\0132$.aal"
    "yria.spacetime.api.common.SubnetR\003src\0226\n"
    "\003dst\030\002 \001(\0132$.aalyria.spacetime.api.commo"
    "n.SubnetR\003dst\022\032\n\010protocol\030\003 \001(\rR\010protoco"
    "lJ\010\010\004\020\200\200\200\200\002\"\310\002\n\016FlowClassifier\022S\n\rip_cla"
    "ssifier\030\001 \001(\0132..aalyria.spacetime.api.co"
    "mmon.IpFlowClassifierR\014ipClassifier\022g\n\rl"
    "4_classifier\030\002 \001(\0132B.aalyria.spacetime.a"
    "pi.common.PacketClassifier.GenericLayer4"
    "HeaderR\014l4Classifier\022n\n\023ethernet_classif"
    "ier\030\003 \001(\0132=.aalyria.spacetime.api.common"
    ".PacketClassifier.EthernetHeaderR\022ethern"
    "etClassifierJ\010\010\004\020\200\200\200\200\002BD\n com.aalyria.sp"
    "acetime.api.commonZ aalyria.com/spacetim"
    "e/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fnetwork_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fnetwork_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fnetwork_2eproto = {
    false,
    false,
    1932,
    descriptor_table_protodef_api_2fcommon_2fnetwork_2eproto,
    "api/common/network.proto",
    &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
    descriptor_table_api_2fcommon_2fnetwork_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fnetwork_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fnetwork_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fnetwork_2eproto,
    file_level_service_descriptors_api_2fcommon_2fnetwork_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fnetwork_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fnetwork_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fnetwork_2eproto(&descriptor_table_api_2fcommon_2fnetwork_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class NetworkInterfaceId::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterfaceId>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkInterfaceId, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NetworkInterfaceId::NetworkInterfaceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.NetworkInterfaceId)
}
NetworkInterfaceId::NetworkInterfaceId(const NetworkInterfaceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkInterfaceId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.interface_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.NetworkInterfaceId)
}

inline void NetworkInterfaceId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.interface_id_) {}

  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkInterfaceId::~NetworkInterfaceId() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.NetworkInterfaceId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInterfaceId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  _impl_.interface_id_.Destroy();
}

void NetworkInterfaceId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkInterfaceId::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.NetworkInterfaceId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.interface_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkInterfaceId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.NetworkInterfaceId.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string interface_id = 2 [json_name = "interfaceId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.NetworkInterfaceId.interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkInterfaceId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.NetworkInterfaceId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.NetworkInterfaceId.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string interface_id = 2 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.NetworkInterfaceId.interface_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.NetworkInterfaceId)
  return target;
}

::size_t NetworkInterfaceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.NetworkInterfaceId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional string interface_id = 2 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_interface_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkInterfaceId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkInterfaceId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkInterfaceId::GetClassData() const { return &_class_data_; }


void NetworkInterfaceId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkInterfaceId*>(&to_msg);
  auto& from = static_cast<const NetworkInterfaceId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.NetworkInterfaceId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_interface_id(from._internal_interface_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkInterfaceId::CopyFrom(const NetworkInterfaceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.NetworkInterfaceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterfaceId::IsInitialized() const {
  return true;
}

void NetworkInterfaceId::InternalSwap(NetworkInterfaceId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_id_, lhs_arena,
                                       &other->_impl_.interface_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInterfaceId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[0]);
}
// ===================================================================

class PacketClassifier_ValueRange::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketClassifier_ValueRange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketClassifier_ValueRange, _impl_._has_bits_);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PacketClassifier_ValueRange::PacketClassifier_ValueRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
}
PacketClassifier_ValueRange::PacketClassifier_ValueRange(const PacketClassifier_ValueRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
}

inline void PacketClassifier_ValueRange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.low_) { 0u }

    , decltype(_impl_.high_) { 0u }

  };
}

PacketClassifier_ValueRange::~PacketClassifier_ValueRange() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier_ValueRange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PacketClassifier_ValueRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier_ValueRange::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.low_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.high_) -
        reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier_ValueRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 low = 1 [json_name = "low"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_low(&has_bits);
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 high = 2 [json_name = "high"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_high(&has_bits);
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier_ValueRange::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 low = 1 [json_name = "low"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_low(), target);
  }

  // optional uint32 high = 2 [json_name = "high"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  return target;
}

::size_t PacketClassifier_ValueRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 low = 1 [json_name = "low"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_low());
    }

    // optional uint32 high = 2 [json_name = "high"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_high());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier_ValueRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier_ValueRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier_ValueRange::GetClassData() const { return &_class_data_; }


void PacketClassifier_ValueRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier_ValueRange*>(&to_msg);
  auto& from = static_cast<const PacketClassifier_ValueRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.low_ = from._impl_.low_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_ = from._impl_.high_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier_ValueRange::CopyFrom(const PacketClassifier_ValueRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier.ValueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier_ValueRange::IsInitialized() const {
  return true;
}

void PacketClassifier_ValueRange::InternalSwap(PacketClassifier_ValueRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketClassifier_ValueRange, _impl_.high_)
      + sizeof(PacketClassifier_ValueRange::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(PacketClassifier_ValueRange, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier_ValueRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[1]);
}
// ===================================================================

class PacketClassifier_IpHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketClassifier_IpHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketClassifier_IpHeader, _impl_._has_bits_);
  static void set_has_src_ip_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_ip_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PacketClassifier_IpHeader::PacketClassifier_IpHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
}
PacketClassifier_IpHeader::PacketClassifier_IpHeader(const PacketClassifier_IpHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketClassifier_IpHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_ip_range_) {}

    , decltype(_impl_.dst_ip_range_) {}

    , decltype(_impl_.protocol_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_ip_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_ip_range_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.src_ip_range_.Set(from._internal_src_ip_range(), _this->GetArenaForAllocation());
  }
  _impl_.dst_ip_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_ip_range_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dst_ip_range_.Set(from._internal_dst_ip_range(), _this->GetArenaForAllocation());
  }
  _this->_impl_.protocol_ = from._impl_.protocol_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
}

inline void PacketClassifier_IpHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_ip_range_) {}

    , decltype(_impl_.dst_ip_range_) {}

    , decltype(_impl_.protocol_) { 0u }

  };
  _impl_.src_ip_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_ip_range_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_ip_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_ip_range_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketClassifier_IpHeader::~PacketClassifier_IpHeader() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier_IpHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_ip_range_.Destroy();
  _impl_.dst_ip_range_.Destroy();
}

void PacketClassifier_IpHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier_IpHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.src_ip_range_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dst_ip_range_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.protocol_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier_IpHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string src_ip_range = 1 [json_name = "srcIpRange"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src_ip_range();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PacketClassifier.IpHeader.src_ip_range");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dst_ip_range = 2 [json_name = "dstIpRange"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst_ip_range();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PacketClassifier.IpHeader.dst_ip_range");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 3 [json_name = "protocol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier_IpHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string src_ip_range = 1 [json_name = "srcIpRange"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_src_ip_range();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.PacketClassifier.IpHeader.src_ip_range");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string dst_ip_range = 2 [json_name = "dstIpRange"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_dst_ip_range();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.PacketClassifier.IpHeader.dst_ip_range");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 protocol = 3 [json_name = "protocol"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  return target;
}

::size_t PacketClassifier_IpHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string src_ip_range = 1 [json_name = "srcIpRange"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_src_ip_range());
    }

    // optional string dst_ip_range = 2 [json_name = "dstIpRange"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dst_ip_range());
    }

    // optional uint32 protocol = 3 [json_name = "protocol"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier_IpHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier_IpHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier_IpHeader::GetClassData() const { return &_class_data_; }


void PacketClassifier_IpHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier_IpHeader*>(&to_msg);
  auto& from = static_cast<const PacketClassifier_IpHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_src_ip_range(from._internal_src_ip_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_dst_ip_range(from._internal_dst_ip_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier_IpHeader::CopyFrom(const PacketClassifier_IpHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier.IpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier_IpHeader::IsInitialized() const {
  return true;
}

void PacketClassifier_IpHeader::InternalSwap(PacketClassifier_IpHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_ip_range_, lhs_arena,
                                       &other->_impl_.src_ip_range_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dst_ip_range_, lhs_arena,
                                       &other->_impl_.dst_ip_range_, rhs_arena);

  swap(_impl_.protocol_, other->_impl_.protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier_IpHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[2]);
}
// ===================================================================

class PacketClassifier_GenericLayer4Header::_Internal {
 public:
};

PacketClassifier_GenericLayer4Header::PacketClassifier_GenericLayer4Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
}
PacketClassifier_GenericLayer4Header::PacketClassifier_GenericLayer4Header(const PacketClassifier_GenericLayer4Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketClassifier_GenericLayer4Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_port_){from._impl_.source_port_}
    , decltype(_impl_.destination_port_){from._impl_.destination_port_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
}

inline void PacketClassifier_GenericLayer4Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.source_port_){arena}
    , decltype(_impl_.destination_port_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PacketClassifier_GenericLayer4Header::~PacketClassifier_GenericLayer4Header() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier_GenericLayer4Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_source_port()->~RepeatedPtrField();
  _internal_mutable_destination_port()->~RepeatedPtrField();
}

void PacketClassifier_GenericLayer4Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier_GenericLayer4Header::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_source_port()->Clear();
  _internal_mutable_destination_port()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier_GenericLayer4Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange source_port = 1 [json_name = "sourcePort"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange destination_port = 2 [json_name = "destinationPort"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destination_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier_GenericLayer4Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange source_port = 1 [json_name = "sourcePort"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_port_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_port(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange destination_port = 2 [json_name = "destinationPort"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destination_port_size()); i < n; i++) {
    const auto& repfield = this->_internal_destination_port(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  return target;
}

::size_t PacketClassifier_GenericLayer4Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange source_port = 1 [json_name = "sourcePort"];
  total_size += 1UL * this->_internal_source_port_size();
  for (const auto& msg : this->_internal_source_port()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.PacketClassifier.ValueRange destination_port = 2 [json_name = "destinationPort"];
  total_size += 1UL * this->_internal_destination_port_size();
  for (const auto& msg : this->_internal_destination_port()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier_GenericLayer4Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier_GenericLayer4Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier_GenericLayer4Header::GetClassData() const { return &_class_data_; }


void PacketClassifier_GenericLayer4Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier_GenericLayer4Header*>(&to_msg);
  auto& from = static_cast<const PacketClassifier_GenericLayer4Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_source_port()->MergeFrom(from._internal_source_port());
  _this->_internal_mutable_destination_port()->MergeFrom(from._internal_destination_port());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier_GenericLayer4Header::CopyFrom(const PacketClassifier_GenericLayer4Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier_GenericLayer4Header::IsInitialized() const {
  return true;
}

void PacketClassifier_GenericLayer4Header::InternalSwap(PacketClassifier_GenericLayer4Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_source_port()->InternalSwap(other->_internal_mutable_source_port());
  _internal_mutable_destination_port()->InternalSwap(other->_internal_mutable_destination_port());
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier_GenericLayer4Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[3]);
}
// ===================================================================

class PacketClassifier_EthernetHeader::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader, _impl_._oneof_case_);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& multicast(const PacketClassifier_EthernetHeader* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
PacketClassifier_EthernetHeader::_Internal::multicast(const PacketClassifier_EthernetHeader* msg) {
  return *msg->_impl_.destination_.multicast_;
}
void PacketClassifier_EthernetHeader::set_allocated_multicast(::PROTOBUF_NAMESPACE_ID::Empty* multicast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_destination();
  if (multicast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multicast));
    if (message_arena != submessage_arena) {
      multicast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multicast, submessage_arena);
    }
    set_has_multicast();
    _impl_.destination_.multicast_ = multicast;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader.multicast)
}
void PacketClassifier_EthernetHeader::clear_multicast() {
  if (destination_case() == kMulticast) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.destination_.multicast_;
    }
    clear_has_destination();
  }
}
PacketClassifier_EthernetHeader::PacketClassifier_EthernetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
}
PacketClassifier_EthernetHeader::PacketClassifier_EthernetHeader(const PacketClassifier_EthernetHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketClassifier_EthernetHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_destination();
  switch (from.destination_case()) {
    case kMulticast: {
      _this->_internal_mutable_multicast()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_multicast());
      break;
    }
    case kAddress: {
      _this->_internal_set_address(from._internal_address());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
}

inline void PacketClassifier_EthernetHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_destination();
}

PacketClassifier_EthernetHeader::~PacketClassifier_EthernetHeader() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier_EthernetHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_destination()) {
    clear_destination();
  }
}

void PacketClassifier_EthernetHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier_EthernetHeader::clear_destination() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  switch (destination_case()) {
    case kMulticast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.destination_.multicast_;
      }
      break;
    }
    case kAddress: {
      _impl_.destination_.address_.Destroy();
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}


void PacketClassifier_EthernetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_destination();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier_EthernetHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty multicast = 1 [json_name = "multicast"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multicast(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.PacketClassifier.EthernetHeader.address");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier_EthernetHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (destination_case()) {
    case kMulticast: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::multicast(this),
          _Internal::multicast(this).GetCachedSize(), target, stream);
      break;
    }
    case kAddress: {
      const std::string& _s = this->_internal_address();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.PacketClassifier.EthernetHeader.address");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  return target;
}

::size_t PacketClassifier_EthernetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (destination_case()) {
    // .google.protobuf.Empty multicast = 1 [json_name = "multicast"];
    case kMulticast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.destination_.multicast_);
      break;
    }
    // string address = 2 [json_name = "address"];
    case kAddress: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_address());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier_EthernetHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier_EthernetHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier_EthernetHeader::GetClassData() const { return &_class_data_; }


void PacketClassifier_EthernetHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier_EthernetHeader*>(&to_msg);
  auto& from = static_cast<const PacketClassifier_EthernetHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.destination_case()) {
    case kMulticast: {
      _this->_internal_mutable_multicast()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_multicast());
      break;
    }
    case kAddress: {
      _this->_internal_set_address(from._internal_address());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier_EthernetHeader::CopyFrom(const PacketClassifier_EthernetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier.EthernetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier_EthernetHeader::IsInitialized() const {
  return true;
}

void PacketClassifier_EthernetHeader::InternalSwap(PacketClassifier_EthernetHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.destination_, other->_impl_.destination_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier_EthernetHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[4]);
}
// ===================================================================

class PacketClassifier_MplsLabelStackEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketClassifier_MplsLabelStackEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketClassifier_MplsLabelStackEntry, _impl_._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PacketClassifier_MplsLabelStackEntry::PacketClassifier_MplsLabelStackEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
}
PacketClassifier_MplsLabelStackEntry::PacketClassifier_MplsLabelStackEntry(const PacketClassifier_MplsLabelStackEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
}

inline void PacketClassifier_MplsLabelStackEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.label_) { 0u }

  };
}

PacketClassifier_MplsLabelStackEntry::~PacketClassifier_MplsLabelStackEntry() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier_MplsLabelStackEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PacketClassifier_MplsLabelStackEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier_MplsLabelStackEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier_MplsLabelStackEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 label = 1 [json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_label(&has_bits);
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier_MplsLabelStackEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 label = 1 [json_name = "label"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  return target;
}

::size_t PacketClassifier_MplsLabelStackEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 label = 1 [json_name = "label"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier_MplsLabelStackEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier_MplsLabelStackEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier_MplsLabelStackEntry::GetClassData() const { return &_class_data_; }


void PacketClassifier_MplsLabelStackEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier_MplsLabelStackEntry*>(&to_msg);
  auto& from = static_cast<const PacketClassifier_MplsLabelStackEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_label(from._internal_label());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier_MplsLabelStackEntry::CopyFrom(const PacketClassifier_MplsLabelStackEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier_MplsLabelStackEntry::IsInitialized() const {
  return true;
}

void PacketClassifier_MplsLabelStackEntry::InternalSwap(PacketClassifier_MplsLabelStackEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.label_, other->_impl_.label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier_MplsLabelStackEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[5]);
}
// ===================================================================

class PacketClassifier::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketClassifier>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketClassifier, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::PacketClassifier_IpHeader& ip_header(const PacketClassifier* msg);
  static void set_has_ip_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header& l4_header(const PacketClassifier* msg);
  static void set_has_l4_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader& ethernet_header(const PacketClassifier* msg);
  static void set_has_ethernet_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry& mpls_label_stack_entry(const PacketClassifier* msg);
  static void set_has_mpls_label_stack_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::common::PacketClassifier_IpHeader&
PacketClassifier::_Internal::ip_header(const PacketClassifier* msg) {
  return *msg->_impl_.ip_header_;
}
const ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header&
PacketClassifier::_Internal::l4_header(const PacketClassifier* msg) {
  return *msg->_impl_.l4_header_;
}
const ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader&
PacketClassifier::_Internal::ethernet_header(const PacketClassifier* msg) {
  return *msg->_impl_.ethernet_header_;
}
const ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry&
PacketClassifier::_Internal::mpls_label_stack_entry(const PacketClassifier* msg) {
  return *msg->_impl_.mpls_label_stack_entry_;
}
PacketClassifier::PacketClassifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PacketClassifier)
}
PacketClassifier::PacketClassifier(const PacketClassifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketClassifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_header_){nullptr}
    , decltype(_impl_.l4_header_){nullptr}
    , decltype(_impl_.ethernet_header_){nullptr}
    , decltype(_impl_.mpls_label_stack_entry_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ip_header_ = new ::aalyria::spacetime::api::common::PacketClassifier_IpHeader(*from._impl_.ip_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.l4_header_ = new ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header(*from._impl_.l4_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ethernet_header_ = new ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader(*from._impl_.ethernet_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.mpls_label_stack_entry_ = new ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry(*from._impl_.mpls_label_stack_entry_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PacketClassifier)
}

inline void PacketClassifier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_header_){nullptr}
    , decltype(_impl_.l4_header_){nullptr}
    , decltype(_impl_.ethernet_header_){nullptr}
    , decltype(_impl_.mpls_label_stack_entry_){nullptr}
  };
}

PacketClassifier::~PacketClassifier() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PacketClassifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketClassifier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ip_header_;
  if (this != internal_default_instance()) delete _impl_.l4_header_;
  if (this != internal_default_instance()) delete _impl_.ethernet_header_;
  if (this != internal_default_instance()) delete _impl_.mpls_label_stack_entry_;
}

void PacketClassifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketClassifier::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PacketClassifier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ip_header_ != nullptr);
      _impl_.ip_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.l4_header_ != nullptr);
      _impl_.l4_header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ethernet_header_ != nullptr);
      _impl_.ethernet_header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.mpls_label_stack_entry_ != nullptr);
      _impl_.mpls_label_stack_entry_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketClassifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.PacketClassifier.IpHeader ip_header = 1 [json_name = "ipHeader"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_header = 2 [json_name = "l4Header"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_l4_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_header = 3 [json_name = "ethernetHeader"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry mpls_label_stack_entry = 4 [json_name = "mplsLabelStackEntry"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mpls_label_stack_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketClassifier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PacketClassifier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.PacketClassifier.IpHeader ip_header = 1 [json_name = "ipHeader"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ip_header(this),
        _Internal::ip_header(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_header = 2 [json_name = "l4Header"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::l4_header(this),
        _Internal::l4_header(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_header = 3 [json_name = "ethernetHeader"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ethernet_header(this),
        _Internal::ethernet_header(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry mpls_label_stack_entry = 4 [json_name = "mplsLabelStackEntry"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mpls_label_stack_entry(this),
        _Internal::mpls_label_stack_entry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PacketClassifier)
  return target;
}

::size_t PacketClassifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PacketClassifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aalyria.spacetime.api.common.PacketClassifier.IpHeader ip_header = 1 [json_name = "ipHeader"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ip_header_);
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_header = 2 [json_name = "l4Header"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.l4_header_);
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_header = 3 [json_name = "ethernetHeader"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ethernet_header_);
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier.MplsLabelStackEntry mpls_label_stack_entry = 4 [json_name = "mplsLabelStackEntry"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mpls_label_stack_entry_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketClassifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketClassifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketClassifier::GetClassData() const { return &_class_data_; }


void PacketClassifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketClassifier*>(&to_msg);
  auto& from = static_cast<const PacketClassifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PacketClassifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ip_header()->::aalyria::spacetime::api::common::PacketClassifier_IpHeader::MergeFrom(
          from._internal_ip_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_l4_header()->::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header::MergeFrom(
          from._internal_l4_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ethernet_header()->::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader::MergeFrom(
          from._internal_ethernet_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mpls_label_stack_entry()->::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry::MergeFrom(
          from._internal_mpls_label_stack_entry());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketClassifier::CopyFrom(const PacketClassifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PacketClassifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketClassifier::IsInitialized() const {
  return true;
}

void PacketClassifier::InternalSwap(PacketClassifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketClassifier, _impl_.mpls_label_stack_entry_)
      + sizeof(PacketClassifier::_impl_.mpls_label_stack_entry_)
      - PROTOBUF_FIELD_OFFSET(PacketClassifier, _impl_.ip_header_)>(
          reinterpret_cast<char*>(&_impl_.ip_header_),
          reinterpret_cast<char*>(&other->_impl_.ip_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketClassifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[6]);
}
// ===================================================================

class Subnet::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Subnet, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& interface_id(const Subnet* msg);
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
Subnet::_Internal::interface_id(const Subnet* msg) {
  return *msg->_impl_.subnet_.interface_id_;
}
void Subnet::set_allocated_interface_id(::aalyria::spacetime::api::common::NetworkInterfaceId* interface_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subnet();
  if (interface_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interface_id);
    if (message_arena != submessage_arena) {
      interface_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface_id, submessage_arena);
    }
    set_has_interface_id();
    _impl_.subnet_.interface_id_ = interface_id;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.Subnet.interface_id)
}
Subnet::Subnet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.Subnet)
}
Subnet::Subnet(const Subnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subnet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subnet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_subnet();
  switch (from.subnet_case()) {
    case kIpRange: {
      _this->_internal_set_ip_range(from._internal_ip_range());
      break;
    }
    case kNodeId: {
      _this->_internal_set_node_id(from._internal_node_id());
      break;
    }
    case kInterfaceId: {
      _this->_internal_mutable_interface_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_interface_id());
      break;
    }
    case SUBNET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.Subnet)
}

inline void Subnet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subnet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_subnet();
}

Subnet::~Subnet() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.Subnet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subnet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_subnet()) {
    clear_subnet();
  }
}

void Subnet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subnet::clear_subnet() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.Subnet)
  switch (subnet_case()) {
    case kIpRange: {
      _impl_.subnet_.ip_range_.Destroy();
      break;
    }
    case kNodeId: {
      _impl_.subnet_.node_id_.Destroy();
      break;
    }
    case kInterfaceId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subnet_.interface_id_;
      }
      break;
    }
    case SUBNET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUBNET_NOT_SET;
}


void Subnet::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.Subnet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_subnet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subnet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_range = 1 [json_name = "ipRange"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_range();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.Subnet.ip_range");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // string node_id = 2 [json_name = "nodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.Subnet.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 3 [json_name = "interfaceId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Subnet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.Subnet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (subnet_case()) {
    case kIpRange: {
      const std::string& _s = this->_internal_ip_range();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.Subnet.ip_range");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kNodeId: {
      const std::string& _s = this->_internal_node_id();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.Subnet.node_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kInterfaceId: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::interface_id(this),
          _Internal::interface_id(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.Subnet)
  return target;
}

::size_t Subnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.Subnet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (subnet_case()) {
    // string ip_range = 1 [json_name = "ipRange"];
    case kIpRange: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_ip_range());
      break;
    }
    // string node_id = 2 [json_name = "nodeId"];
    case kNodeId: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
      break;
    }
    // .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 3 [json_name = "interfaceId"];
    case kInterfaceId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subnet_.interface_id_);
      break;
    }
    case SUBNET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subnet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subnet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subnet::GetClassData() const { return &_class_data_; }


void Subnet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subnet*>(&to_msg);
  auto& from = static_cast<const Subnet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.Subnet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.subnet_case()) {
    case kIpRange: {
      _this->_internal_set_ip_range(from._internal_ip_range());
      break;
    }
    case kNodeId: {
      _this->_internal_set_node_id(from._internal_node_id());
      break;
    }
    case kInterfaceId: {
      _this->_internal_mutable_interface_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_interface_id());
      break;
    }
    case SUBNET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subnet::CopyFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subnet::IsInitialized() const {
  return true;
}

void Subnet::InternalSwap(Subnet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.subnet_, other->_impl_.subnet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subnet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[7]);
}
// ===================================================================

class IpFlowClassifier::_Internal {
 public:
  using HasBits = decltype(std::declval<IpFlowClassifier>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IpFlowClassifier, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::Subnet& src(const IpFlowClassifier* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::Subnet& dst(const IpFlowClassifier* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::Subnet&
IpFlowClassifier::_Internal::src(const IpFlowClassifier* msg) {
  return *msg->_impl_.src_;
}
const ::aalyria::spacetime::api::common::Subnet&
IpFlowClassifier::_Internal::dst(const IpFlowClassifier* msg) {
  return *msg->_impl_.dst_;
}
IpFlowClassifier::IpFlowClassifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.IpFlowClassifier)
}
IpFlowClassifier::IpFlowClassifier(const IpFlowClassifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IpFlowClassifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
    , decltype(_impl_.protocol_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.src_ = new ::aalyria::spacetime::api::common::Subnet(*from._impl_.src_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dst_ = new ::aalyria::spacetime::api::common::Subnet(*from._impl_.dst_);
  }
  _this->_impl_.protocol_ = from._impl_.protocol_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.IpFlowClassifier)
}

inline void IpFlowClassifier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
    , decltype(_impl_.protocol_) { 0u }

  };
}

IpFlowClassifier::~IpFlowClassifier() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.IpFlowClassifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IpFlowClassifier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.src_;
  if (this != internal_default_instance()) delete _impl_.dst_;
}

void IpFlowClassifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IpFlowClassifier::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.IpFlowClassifier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.src_ != nullptr);
      _impl_.src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dst_ != nullptr);
      _impl_.dst_->Clear();
    }
  }
  _impl_.protocol_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpFlowClassifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.Subnet src = 1 [json_name = "src"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Subnet dst = 2 [json_name = "dst"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 3 [json_name = "protocol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IpFlowClassifier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.IpFlowClassifier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.Subnet src = 1 [json_name = "src"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::src(this),
        _Internal::src(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.Subnet dst = 2 [json_name = "dst"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dst(this),
        _Internal::dst(this).GetCachedSize(), target, stream);
  }

  // optional uint32 protocol = 3 [json_name = "protocol"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.IpFlowClassifier)
  return target;
}

::size_t IpFlowClassifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.IpFlowClassifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.common.Subnet src = 1 [json_name = "src"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.src_);
    }

    // optional .aalyria.spacetime.api.common.Subnet dst = 2 [json_name = "dst"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_);
    }

    // optional uint32 protocol = 3 [json_name = "protocol"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IpFlowClassifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IpFlowClassifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IpFlowClassifier::GetClassData() const { return &_class_data_; }


void IpFlowClassifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IpFlowClassifier*>(&to_msg);
  auto& from = static_cast<const IpFlowClassifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.IpFlowClassifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_src()->::aalyria::spacetime::api::common::Subnet::MergeFrom(
          from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst()->::aalyria::spacetime::api::common::Subnet::MergeFrom(
          from._internal_dst());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IpFlowClassifier::CopyFrom(const IpFlowClassifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.IpFlowClassifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpFlowClassifier::IsInitialized() const {
  return true;
}

void IpFlowClassifier::InternalSwap(IpFlowClassifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpFlowClassifier, _impl_.protocol_)
      + sizeof(IpFlowClassifier::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(IpFlowClassifier, _impl_.src_)>(
          reinterpret_cast<char*>(&_impl_.src_),
          reinterpret_cast<char*>(&other->_impl_.src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IpFlowClassifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[8]);
}
// ===================================================================

class FlowClassifier::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowClassifier>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FlowClassifier, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::IpFlowClassifier& ip_classifier(const FlowClassifier* msg);
  static void set_has_ip_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header& l4_classifier(const FlowClassifier* msg);
  static void set_has_l4_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader& ethernet_classifier(const FlowClassifier* msg);
  static void set_has_ethernet_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::IpFlowClassifier&
FlowClassifier::_Internal::ip_classifier(const FlowClassifier* msg) {
  return *msg->_impl_.ip_classifier_;
}
const ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header&
FlowClassifier::_Internal::l4_classifier(const FlowClassifier* msg) {
  return *msg->_impl_.l4_classifier_;
}
const ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader&
FlowClassifier::_Internal::ethernet_classifier(const FlowClassifier* msg) {
  return *msg->_impl_.ethernet_classifier_;
}
FlowClassifier::FlowClassifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.FlowClassifier)
}
FlowClassifier::FlowClassifier(const FlowClassifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlowClassifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_classifier_){nullptr}
    , decltype(_impl_.l4_classifier_){nullptr}
    , decltype(_impl_.ethernet_classifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ip_classifier_ = new ::aalyria::spacetime::api::common::IpFlowClassifier(*from._impl_.ip_classifier_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.l4_classifier_ = new ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header(*from._impl_.l4_classifier_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ethernet_classifier_ = new ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader(*from._impl_.ethernet_classifier_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.FlowClassifier)
}

inline void FlowClassifier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_classifier_){nullptr}
    , decltype(_impl_.l4_classifier_){nullptr}
    , decltype(_impl_.ethernet_classifier_){nullptr}
  };
}

FlowClassifier::~FlowClassifier() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.FlowClassifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlowClassifier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ip_classifier_;
  if (this != internal_default_instance()) delete _impl_.l4_classifier_;
  if (this != internal_default_instance()) delete _impl_.ethernet_classifier_;
}

void FlowClassifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlowClassifier::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.FlowClassifier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ip_classifier_ != nullptr);
      _impl_.ip_classifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.l4_classifier_ != nullptr);
      _impl_.l4_classifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ethernet_classifier_ != nullptr);
      _impl_.ethernet_classifier_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowClassifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.IpFlowClassifier ip_classifier = 1 [json_name = "ipClassifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_classifier = 2 [json_name = "l4Classifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_l4_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_classifier = 3 [json_name = "ethernetClassifier"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet_classifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlowClassifier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.FlowClassifier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.IpFlowClassifier ip_classifier = 1 [json_name = "ipClassifier"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ip_classifier(this),
        _Internal::ip_classifier(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_classifier = 2 [json_name = "l4Classifier"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::l4_classifier(this),
        _Internal::l4_classifier(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_classifier = 3 [json_name = "ethernetClassifier"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ethernet_classifier(this),
        _Internal::ethernet_classifier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.FlowClassifier)
  return target;
}

::size_t FlowClassifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.FlowClassifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.common.IpFlowClassifier ip_classifier = 1 [json_name = "ipClassifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ip_classifier_);
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier.GenericLayer4Header l4_classifier = 2 [json_name = "l4Classifier"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.l4_classifier_);
    }

    // optional .aalyria.spacetime.api.common.PacketClassifier.EthernetHeader ethernet_classifier = 3 [json_name = "ethernetClassifier"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ethernet_classifier_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowClassifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlowClassifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowClassifier::GetClassData() const { return &_class_data_; }


void FlowClassifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlowClassifier*>(&to_msg);
  auto& from = static_cast<const FlowClassifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.FlowClassifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ip_classifier()->::aalyria::spacetime::api::common::IpFlowClassifier::MergeFrom(
          from._internal_ip_classifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_l4_classifier()->::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header::MergeFrom(
          from._internal_l4_classifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ethernet_classifier()->::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader::MergeFrom(
          from._internal_ethernet_classifier());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowClassifier::CopyFrom(const FlowClassifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.FlowClassifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowClassifier::IsInitialized() const {
  return true;
}

void FlowClassifier::InternalSwap(FlowClassifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowClassifier, _impl_.ethernet_classifier_)
      + sizeof(FlowClassifier::_impl_.ethernet_classifier_)
      - PROTOBUF_FIELD_OFFSET(FlowClassifier, _impl_.ip_classifier_)>(
          reinterpret_cast<char*>(&_impl_.ip_classifier_),
          reinterpret_cast<char*>(&other->_impl_.ip_classifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowClassifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fnetwork_2eproto_getter, &descriptor_table_api_2fcommon_2fnetwork_2eproto_once,
      file_level_metadata_api_2fcommon_2fnetwork_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::NetworkInterfaceId*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::NetworkInterfaceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::NetworkInterfaceId >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier_ValueRange*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier_ValueRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier_ValueRange >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier_IpHeader*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier_IpHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier_IpHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier_GenericLayer4Header >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier_EthernetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier_MplsLabelStackEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PacketClassifier*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PacketClassifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PacketClassifier >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::Subnet*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::Subnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::Subnet >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::IpFlowClassifier*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::IpFlowClassifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::IpFlowClassifier >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::FlowClassifier*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::FlowClassifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::FlowClassifier >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

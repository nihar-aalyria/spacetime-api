// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control.proto

#include "api/common/control.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR ScheduledControlUpdate::ScheduledControlUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.update_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_to_enact_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr} {}
struct ScheduledControlUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduledControlUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduledControlUpdateDefaultTypeInternal() {}
  union {
    ScheduledControlUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduledControlUpdateDefaultTypeInternal _ScheduledControlUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScheduledControlDeletion::ScheduledControlDeletion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.update_ids_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScheduledControlDeletionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduledControlDeletionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduledControlDeletionDefaultTypeInternal() {}
  union {
    ScheduledControlDeletion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduledControlDeletionDefaultTypeInternal _ScheduledControlDeletion_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScheduledControlUpdateStatus::ScheduledControlUpdateStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.update_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.state_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ScheduledControlUpdateStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduledControlUpdateStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduledControlUpdateStatusDefaultTypeInternal() {}
  union {
    ScheduledControlUpdateStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduledControlUpdateStatusDefaultTypeInternal _ScheduledControlUpdateStatus_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControlPlaneUpdate::ControlPlaneUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControlPlaneUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlPlaneUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlPlaneUpdateDefaultTypeInternal() {}
  union {
    ControlPlaneUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlPlaneUpdateDefaultTypeInternal _ControlPlaneUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControlPlaneState::ControlPlaneState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.beam_states_)*/nullptr
  , /*decltype(_impl_.radio_states_)*/nullptr
  , /*decltype(_impl_.forwarding_state_)*/nullptr
  , /*decltype(_impl_.tunnel_states_)*/nullptr} {}
struct ControlPlaneStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlPlaneStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlPlaneStateDefaultTypeInternal() {}
  union {
    ControlPlaneState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlPlaneStateDefaultTypeInternal _ControlPlaneState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScheduledControlUpdateReq::ScheduledControlUpdateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.compiled_update_)*/nullptr
  , /*decltype(_impl_.completed_)*/nullptr
  , /*decltype(_impl_.unscheduled_)*/nullptr
  , /*decltype(_impl_.scheduled_)*/ false
} {}
struct ScheduledControlUpdateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduledControlUpdateReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduledControlUpdateReqDefaultTypeInternal() {}
  union {
    ScheduledControlUpdateReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduledControlUpdateReqDefaultTypeInternal _ScheduledControlUpdateReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal _TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TaskCdpiStreamCount::TaskCdpiStreamCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_count_per_priority_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskCdpiStreamCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskCdpiStreamCountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskCdpiStreamCountDefaultTypeInternal() {}
  union {
    TaskCdpiStreamCount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskCdpiStreamCountDefaultTypeInternal _TaskCdpiStreamCount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUseDefaultTypeInternal _CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiFrontendInfo::CdpiFrontendInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_count_per_node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CdpiFrontendInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiFrontendInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiFrontendInfoDefaultTypeInternal() {}
  union {
    CdpiFrontendInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiFrontendInfoDefaultTypeInternal _CdpiFrontendInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUseDefaultTypeInternal _CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUseDefaultTypeInternal _CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiStreamInfo::CdpiStreamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_count_per_task_)*/{}
  , /*decltype(_impl_.stream_count_per_priority_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CdpiStreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiStreamInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiStreamInfoDefaultTypeInternal() {}
  union {
    CdpiStreamInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiStreamInfoDefaultTypeInternal _CdpiStreamInfo_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fcontrol_2eproto[13];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fcontrol_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fcontrol_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _impl_.update_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _impl_.time_to_enact_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdate, _impl_.change_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlDeletion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlDeletion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlDeletion, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlDeletion, _impl_.update_ids_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_.update_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_.timestamp_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_.state_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneUpdate, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneUpdate, _impl_.update_type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _impl_.beam_states_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _impl_.radio_states_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _impl_.forwarding_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneState, _impl_.tunnel_states_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _impl_.compiled_update_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _impl_.completed_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _impl_.scheduled_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateReq, _impl_.unscheduled_),
    0,
    1,
    3,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TaskCdpiStreamCount, _impl_.stream_count_per_priority_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiFrontendInfo, _impl_.stream_count_per_node_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo, _impl_.stream_count_per_task_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::CdpiStreamInfo, _impl_.stream_count_per_priority_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::aalyria::spacetime::api::common::ScheduledControlUpdate)},
        { 16, 26, -1, sizeof(::aalyria::spacetime::api::common::ScheduledControlDeletion)},
        { 28, 42, -1, sizeof(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus)},
        { 47, -1, -1, sizeof(::aalyria::spacetime::api::common::ControlPlaneUpdate)},
        { 60, 72, -1, sizeof(::aalyria::spacetime::api::common::ControlPlaneState)},
        { 76, 88, -1, sizeof(::aalyria::spacetime::api::common::ScheduledControlUpdateReq)},
        { 92, 102, -1, sizeof(::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse)},
        { 104, -1, -1, sizeof(::aalyria::spacetime::api::common::TaskCdpiStreamCount)},
        { 113, 123, -1, sizeof(::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse)},
        { 125, -1, -1, sizeof(::aalyria::spacetime::api::common::CdpiFrontendInfo)},
        { 134, 144, -1, sizeof(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse)},
        { 146, 156, -1, sizeof(::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse)},
        { 158, -1, -1, sizeof(::aalyria::spacetime::api::common::CdpiStreamInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_ScheduledControlUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ScheduledControlDeletion_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ScheduledControlUpdateStatus_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ControlPlaneUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ControlPlaneState_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ScheduledControlUpdateReq_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TaskCdpiStreamCount_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CdpiFrontendInfo_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_CdpiStreamInfo_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030api/common/control.proto\022\034aalyria.spac"
    "etime.api.common\032\035api/common/control_bea"
    "m.proto\032\035api/common/control_flow.proto\032\036"
    "api/common/control_radio.proto\032\037api/comm"
    "on/control_tunnel.proto\032\025api/common/time"
    ".proto\032\037google/protobuf/timestamp.proto\032"
    "\027google/rpc/status.proto\"\330\001\n\026ScheduledCo"
    "ntrolUpdate\022\027\n\007node_id\030\001 \001(\tR\006nodeId\022\033\n\t"
    "update_id\030\002 \001(\tR\010updateId\022>\n\rtime_to_ena"
    "ct\030\003 \001(\0132\032.google.protobuf.TimestampR\013ti"
    "meToEnact\022H\n\006change\030\004 \001(\01320.aalyria.spac"
    "etime.api.common.ControlPlaneUpdateR\006cha"
    "nge\"R\n\030ScheduledControlDeletion\022\027\n\007node_"
    "id\030\001 \001(\tR\006nodeId\022\035\n\nupdate_ids\030\002 \003(\tR\tup"
    "dateIds\"\317\002\n\034ScheduledControlUpdateStatus"
    "\022\033\n\tupdate_id\030\001 \001(\tR\010updateId\022D\n\ttimesta"
    "mp\030\007 \001(\0132&.aalyria.spacetime.api.common."
    "DateTimeR\ttimestamp\0222\n\tscheduled\030\004 \001(\0132\022"
    ".google.rpc.StatusH\000R\tscheduled\022E\n\023enact"
    "ment_attempted\030\006 \001(\0132\022.google.rpc.Status"
    "H\000R\022enactmentAttempted\0226\n\013unscheduled\030\010 "
    "\001(\0132\022.google.rpc.StatusH\000R\013unscheduledB\007"
    "\n\005stateJ\004\010\002\020\003J\004\010\003\020\004J\004\010\005\020\006\"\340\002\n\022ControlPla"
    "neUpdate\022K\n\013beam_update\030\001 \001(\0132(.aalyria."
    "spacetime.api.common.BeamUpdateH\000R\nbeamU"
    "pdate\022N\n\014radio_update\030\002 \001(\0132).aalyria.sp"
    "acetime.api.common.RadioUpdateH\000R\013radioU"
    "pdate\022K\n\013flow_update\030\003 \001(\0132(.aalyria.spa"
    "cetime.api.common.FlowUpdateH\000R\nflowUpda"
    "te\022Q\n\rtunnel_update\030\004 \001(\0132*.aalyria.spac"
    "etime.api.common.TunnelUpdateH\000R\014tunnelU"
    "pdateB\r\n\013update_type\"\335\002\n\021ControlPlaneSta"
    "te\022I\n\013beam_states\030\002 \001(\0132(.aalyria.spacet"
    "ime.api.common.BeamStatesR\nbeamStates\022L\n"
    "\014radio_states\030\003 \001(\0132).aalyria.spacetime."
    "api.common.RadioStatesR\013radioStates\022R\n\020f"
    "orwarding_state\030\005 \001(\0132\'.aalyria.spacetim"
    "e.api.common.FlowStateR\017forwardingState\022"
    "O\n\rtunnel_states\030\006 \001(\0132*.aalyria.spaceti"
    "me.api.common.TunnelStatesR\014tunnelStates"
    "J\004\010\001\020\002J\004\010\004\020\005\"\222\002\n\031ScheduledControlUpdateR"
    "eq\022]\n\017compiled_update\030\001 \001(\01324.aalyria.sp"
    "acetime.api.common.ScheduledControlUpdat"
    "eR\016compiledUpdate\0220\n\tcompleted\030\010 \001(\0132\022.g"
    "oogle.rpc.StatusR\tcompleted\022\034\n\tscheduled"
    "\030\013 \001(\010R\tscheduled\0224\n\013unscheduled\030\014 \001(\0132\022"
    ".google.rpc.StatusR\013unscheduledJ\004\010\002\020\010J\004\010"
    "\t\020\nJ\004\010\n\020\013\"\353\001\n\023TaskCdpiStreamCount\022\210\001\n\031st"
    "ream_count_per_priority\030\001 \003(\0132M.aalyria."
    "spacetime.api.common.TaskCdpiStreamCount"
    ".StreamCountPerPriorityEntryR\026streamCoun"
    "tPerPriority\032I\n\033StreamCountPerPriorityEn"
    "try\022\020\n\003key\030\001 \001(\rR\003key\022\024\n\005value\030\002 \001(\005R\005va"
    "lue:\0028\001\"\207\002\n\020CdpiFrontendInfo\022y\n\025stream_c"
    "ount_per_node\030\001 \003(\0132F.aalyria.spacetime."
    "api.common.CdpiFrontendInfo.StreamCountP"
    "erNodeEntryR\022streamCountPerNode\032x\n\027Strea"
    "mCountPerNodeEntry\022\020\n\003key\030\001 \001(\tR\003key\022G\n\005"
    "value\030\002 \001(\01321.aalyria.spacetime.api.comm"
    "on.TaskCdpiStreamCountR\005value:\0028\001\"\344\003\n\016Cd"
    "piStreamInfo\022w\n\025stream_count_per_task\030\002 "
    "\003(\0132D.aalyria.spacetime.api.common.CdpiS"
    "treamInfo.StreamCountPerTaskEntryR\022strea"
    "mCountPerTask\022\203\001\n\031stream_count_per_prior"
    "ity\030\003 \003(\0132H.aalyria.spacetime.api.common"
    ".CdpiStreamInfo.StreamCountPerPriorityEn"
    "tryR\026streamCountPerPriority\032x\n\027StreamCou"
    "ntPerTaskEntry\022\020\n\003key\030\001 \001(\tR\003key\022G\n\005valu"
    "e\030\002 \001(\01321.aalyria.spacetime.api.common.T"
    "askCdpiStreamCountR\005value:\0028\001\032I\n\033StreamC"
    "ountPerPriorityEntry\022\020\n\003key\030\001 \001(\rR\003key\022\024"
    "\n\005value\030\002 \001(\005R\005value:\0028\001J\004\010\001\020\002J\010\010\004\020\200\200\200\200\002"
    "BD\n com.aalyria.spacetime.api.commonZ aa"
    "lyria.com/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fcontrol_2eproto_deps[7] =
    {
        &::descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto,
        &::descriptor_table_api_2fcommon_2fcontrol_5fflow_2eproto,
        &::descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto,
        &::descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fcontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fcontrol_2eproto = {
    false,
    false,
    2950,
    descriptor_table_protodef_api_2fcommon_2fcontrol_2eproto,
    "api/common/control.proto",
    &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
    descriptor_table_api_2fcommon_2fcontrol_2eproto_deps,
    7,
    13,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fcontrol_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fcontrol_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fcontrol_2eproto,
    file_level_service_descriptors_api_2fcommon_2fcontrol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fcontrol_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fcontrol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fcontrol_2eproto(&descriptor_table_api_2fcommon_2fcontrol_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class ScheduledControlUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduledControlUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScheduledControlUpdate, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_to_enact(const ScheduledControlUpdate* msg);
  static void set_has_time_to_enact(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::ControlPlaneUpdate& change(const ScheduledControlUpdate* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ScheduledControlUpdate::_Internal::time_to_enact(const ScheduledControlUpdate* msg) {
  return *msg->_impl_.time_to_enact_;
}
const ::aalyria::spacetime::api::common::ControlPlaneUpdate&
ScheduledControlUpdate::_Internal::change(const ScheduledControlUpdate* msg) {
  return *msg->_impl_.change_;
}
void ScheduledControlUpdate::clear_time_to_enact() {
  if (_impl_.time_to_enact_ != nullptr) _impl_.time_to_enact_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ScheduledControlUpdate::ScheduledControlUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ScheduledControlUpdate)
}
ScheduledControlUpdate::ScheduledControlUpdate(const ScheduledControlUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduledControlUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.update_id_) {}

    , decltype(_impl_.time_to_enact_){nullptr}
    , decltype(_impl_.change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.update_id_.Set(from._internal_update_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.time_to_enact_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_to_enact_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.change_ = new ::aalyria::spacetime::api::common::ControlPlaneUpdate(*from._impl_.change_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ScheduledControlUpdate)
}

inline void ScheduledControlUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.update_id_) {}

    , decltype(_impl_.time_to_enact_){nullptr}
    , decltype(_impl_.change_){nullptr}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduledControlUpdate::~ScheduledControlUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ScheduledControlUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduledControlUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  _impl_.update_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_to_enact_;
  if (this != internal_default_instance()) delete _impl_.change_;
}

void ScheduledControlUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduledControlUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ScheduledControlUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.update_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_to_enact_ != nullptr);
      _impl_.time_to_enact_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduledControlUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.ScheduledControlUpdate.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string update_id = 2 [json_name = "updateId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_update_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.ScheduledControlUpdate.update_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp time_to_enact = 3 [json_name = "timeToEnact"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_to_enact(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ControlPlaneUpdate change = 4 [json_name = "change"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScheduledControlUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ScheduledControlUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.ScheduledControlUpdate.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string update_id = 2 [json_name = "updateId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_update_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.ScheduledControlUpdate.update_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .google.protobuf.Timestamp time_to_enact = 3 [json_name = "timeToEnact"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_to_enact(this),
        _Internal::time_to_enact(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ControlPlaneUpdate change = 4 [json_name = "change"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ScheduledControlUpdate)
  return target;
}

::size_t ScheduledControlUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ScheduledControlUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional string update_id = 2 [json_name = "updateId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_update_id());
    }

    // optional .google.protobuf.Timestamp time_to_enact = 3 [json_name = "timeToEnact"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_to_enact_);
    }

    // optional .aalyria.spacetime.api.common.ControlPlaneUpdate change = 4 [json_name = "change"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduledControlUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduledControlUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduledControlUpdate::GetClassData() const { return &_class_data_; }


void ScheduledControlUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduledControlUpdate*>(&to_msg);
  auto& from = static_cast<const ScheduledControlUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ScheduledControlUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_update_id(from._internal_update_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time_to_enact()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time_to_enact());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_change()->::aalyria::spacetime::api::common::ControlPlaneUpdate::MergeFrom(
          from._internal_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduledControlUpdate::CopyFrom(const ScheduledControlUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ScheduledControlUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduledControlUpdate::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void ScheduledControlUpdate::InternalSwap(ScheduledControlUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.update_id_, lhs_arena,
                                       &other->_impl_.update_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduledControlUpdate, _impl_.change_)
      + sizeof(ScheduledControlUpdate::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(ScheduledControlUpdate, _impl_.time_to_enact_)>(
          reinterpret_cast<char*>(&_impl_.time_to_enact_),
          reinterpret_cast<char*>(&other->_impl_.time_to_enact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduledControlUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[0]);
}
// ===================================================================

class ScheduledControlDeletion::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduledControlDeletion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScheduledControlDeletion, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScheduledControlDeletion::ScheduledControlDeletion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ScheduledControlDeletion)
}
ScheduledControlDeletion::ScheduledControlDeletion(const ScheduledControlDeletion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduledControlDeletion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_ids_){from._impl_.update_ids_}
    , decltype(_impl_.node_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ScheduledControlDeletion)
}

inline void ScheduledControlDeletion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_ids_){arena}
    , decltype(_impl_.node_id_) {}

  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduledControlDeletion::~ScheduledControlDeletion() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ScheduledControlDeletion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduledControlDeletion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_update_ids()->~RepeatedPtrField();
  _impl_.node_id_.Destroy();
}

void ScheduledControlDeletion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduledControlDeletion::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ScheduledControlDeletion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_update_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduledControlDeletion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.ScheduledControlDeletion.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string update_ids = 2 [json_name = "updateIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_update_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.ScheduledControlDeletion.update_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScheduledControlDeletion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ScheduledControlDeletion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.ScheduledControlDeletion.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string update_ids = 2 [json_name = "updateIds"];
  for (int i = 0, n = this->_internal_update_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_update_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.ScheduledControlDeletion.update_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ScheduledControlDeletion)
  return target;
}

::size_t ScheduledControlDeletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ScheduledControlDeletion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string update_ids = 2 [json_name = "updateIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_update_ids().size());
  for (int i = 0, n = _internal_update_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_update_ids().Get(i));
  }

  // optional string node_id = 1 [json_name = "nodeId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduledControlDeletion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduledControlDeletion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduledControlDeletion::GetClassData() const { return &_class_data_; }


void ScheduledControlDeletion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduledControlDeletion*>(&to_msg);
  auto& from = static_cast<const ScheduledControlDeletion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ScheduledControlDeletion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_update_ids()->MergeFrom(from._internal_update_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduledControlDeletion::CopyFrom(const ScheduledControlDeletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ScheduledControlDeletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduledControlDeletion::IsInitialized() const {
  return true;
}

void ScheduledControlDeletion::InternalSwap(ScheduledControlDeletion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_update_ids()->InternalSwap(
      other->_internal_mutable_update_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduledControlDeletion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[1]);
}
// ===================================================================

class ScheduledControlUpdateStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduledControlUpdateStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScheduledControlUpdateStatus, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ScheduledControlUpdateStatus, _impl_._oneof_case_);
  static void set_has_update_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const ScheduledControlUpdateStatus* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::rpc::Status& scheduled(const ScheduledControlUpdateStatus* msg);
  static const ::google::rpc::Status& enactment_attempted(const ScheduledControlUpdateStatus* msg);
  static const ::google::rpc::Status& unscheduled(const ScheduledControlUpdateStatus* msg);
};

const ::aalyria::spacetime::api::common::DateTime&
ScheduledControlUpdateStatus::_Internal::timestamp(const ScheduledControlUpdateStatus* msg) {
  return *msg->_impl_.timestamp_;
}
const ::google::rpc::Status&
ScheduledControlUpdateStatus::_Internal::scheduled(const ScheduledControlUpdateStatus* msg) {
  return *msg->_impl_.state_.scheduled_;
}
const ::google::rpc::Status&
ScheduledControlUpdateStatus::_Internal::enactment_attempted(const ScheduledControlUpdateStatus* msg) {
  return *msg->_impl_.state_.enactment_attempted_;
}
const ::google::rpc::Status&
ScheduledControlUpdateStatus::_Internal::unscheduled(const ScheduledControlUpdateStatus* msg) {
  return *msg->_impl_.state_.unscheduled_;
}
void ScheduledControlUpdateStatus::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ScheduledControlUpdateStatus::set_allocated_scheduled(::google::rpc::Status* scheduled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (scheduled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduled));
    if (message_arena != submessage_arena) {
      scheduled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduled, submessage_arena);
    }
    set_has_scheduled();
    _impl_.state_.scheduled_ = scheduled;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ScheduledControlUpdateStatus.scheduled)
}
void ScheduledControlUpdateStatus::clear_scheduled() {
  if (state_case() == kScheduled) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_.scheduled_;
    }
    clear_has_state();
  }
}
void ScheduledControlUpdateStatus::set_allocated_enactment_attempted(::google::rpc::Status* enactment_attempted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (enactment_attempted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enactment_attempted));
    if (message_arena != submessage_arena) {
      enactment_attempted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enactment_attempted, submessage_arena);
    }
    set_has_enactment_attempted();
    _impl_.state_.enactment_attempted_ = enactment_attempted;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ScheduledControlUpdateStatus.enactment_attempted)
}
void ScheduledControlUpdateStatus::clear_enactment_attempted() {
  if (state_case() == kEnactmentAttempted) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_.enactment_attempted_;
    }
    clear_has_state();
  }
}
void ScheduledControlUpdateStatus::set_allocated_unscheduled(::google::rpc::Status* unscheduled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (unscheduled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unscheduled));
    if (message_arena != submessage_arena) {
      unscheduled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unscheduled, submessage_arena);
    }
    set_has_unscheduled();
    _impl_.state_.unscheduled_ = unscheduled;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ScheduledControlUpdateStatus.unscheduled)
}
void ScheduledControlUpdateStatus::clear_unscheduled() {
  if (state_case() == kUnscheduled) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_.unscheduled_;
    }
    clear_has_state();
  }
}
ScheduledControlUpdateStatus::ScheduledControlUpdateStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
}
ScheduledControlUpdateStatus::ScheduledControlUpdateStatus(const ScheduledControlUpdateStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduledControlUpdateStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_id_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.update_id_.Set(from._internal_update_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  clear_has_state();
  switch (from.state_case()) {
    case kScheduled: {
      _this->_internal_mutable_scheduled()->::google::rpc::Status::MergeFrom(
          from._internal_scheduled());
      break;
    }
    case kEnactmentAttempted: {
      _this->_internal_mutable_enactment_attempted()->::google::rpc::Status::MergeFrom(
          from._internal_enactment_attempted());
      break;
    }
    case kUnscheduled: {
      _this->_internal_mutable_unscheduled()->::google::rpc::Status::MergeFrom(
          from._internal_unscheduled());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
}

inline void ScheduledControlUpdateStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_id_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.update_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.update_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_state();
}

ScheduledControlUpdateStatus::~ScheduledControlUpdateStatus() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduledControlUpdateStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_state()) {
    clear_state();
  }
}

void ScheduledControlUpdateStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduledControlUpdateStatus::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  switch (state_case()) {
    case kScheduled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.scheduled_;
      }
      break;
    }
    case kEnactmentAttempted: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.enactment_attempted_;
      }
      break;
    }
    case kUnscheduled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.unscheduled_;
      }
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATE_NOT_SET;
}


void ScheduledControlUpdateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.update_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  clear_state();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduledControlUpdateStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string update_id = 1 [json_name = "updateId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_update_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.ScheduledControlUpdateStatus.update_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.rpc.Status scheduled = 4 [json_name = "scheduled"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.rpc.Status enactment_attempted = 6 [json_name = "enactmentAttempted"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enactment_attempted(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 7 [json_name = "timestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.rpc.Status unscheduled = 8 [json_name = "unscheduled"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unscheduled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScheduledControlUpdateStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string update_id = 1 [json_name = "updateId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_update_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.ScheduledControlUpdateStatus.update_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (state_case()) {
    case kScheduled: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::scheduled(this),
          _Internal::scheduled(this).GetCachedSize(), target, stream);
      break;
    }
    case kEnactmentAttempted: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::enactment_attempted(this),
          _Internal::enactment_attempted(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 7 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.Status unscheduled = 8 [json_name = "unscheduled"];
  if (state_case() == kUnscheduled) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::unscheduled(this),
        _Internal::unscheduled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  return target;
}

::size_t ScheduledControlUpdateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string update_id = 1 [json_name = "updateId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_update_id());
    }

    // optional .aalyria.spacetime.api.common.DateTime timestamp = 7 [json_name = "timestamp"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  switch (state_case()) {
    // .google.rpc.Status scheduled = 4 [json_name = "scheduled"];
    case kScheduled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_.scheduled_);
      break;
    }
    // .google.rpc.Status enactment_attempted = 6 [json_name = "enactmentAttempted"];
    case kEnactmentAttempted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_.enactment_attempted_);
      break;
    }
    // .google.rpc.Status unscheduled = 8 [json_name = "unscheduled"];
    case kUnscheduled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_.unscheduled_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduledControlUpdateStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduledControlUpdateStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduledControlUpdateStatus::GetClassData() const { return &_class_data_; }


void ScheduledControlUpdateStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduledControlUpdateStatus*>(&to_msg);
  auto& from = static_cast<const ScheduledControlUpdateStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_update_id(from._internal_update_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
          from._internal_timestamp());
    }
  }
  switch (from.state_case()) {
    case kScheduled: {
      _this->_internal_mutable_scheduled()->::google::rpc::Status::MergeFrom(
          from._internal_scheduled());
      break;
    }
    case kEnactmentAttempted: {
      _this->_internal_mutable_enactment_attempted()->::google::rpc::Status::MergeFrom(
          from._internal_enactment_attempted());
      break;
    }
    case kUnscheduled: {
      _this->_internal_mutable_unscheduled()->::google::rpc::Status::MergeFrom(
          from._internal_unscheduled());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduledControlUpdateStatus::CopyFrom(const ScheduledControlUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ScheduledControlUpdateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduledControlUpdateStatus::IsInitialized() const {
  return true;
}

void ScheduledControlUpdateStatus::InternalSwap(ScheduledControlUpdateStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.update_id_, lhs_arena,
                                       &other->_impl_.update_id_, rhs_arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.state_, other->_impl_.state_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduledControlUpdateStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[2]);
}
// ===================================================================

class ControlPlaneUpdate::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ControlPlaneUpdate, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::BeamUpdate& beam_update(const ControlPlaneUpdate* msg);
  static const ::aalyria::spacetime::api::common::RadioUpdate& radio_update(const ControlPlaneUpdate* msg);
  static const ::aalyria::spacetime::api::common::FlowUpdate& flow_update(const ControlPlaneUpdate* msg);
  static const ::aalyria::spacetime::api::common::TunnelUpdate& tunnel_update(const ControlPlaneUpdate* msg);
};

const ::aalyria::spacetime::api::common::BeamUpdate&
ControlPlaneUpdate::_Internal::beam_update(const ControlPlaneUpdate* msg) {
  return *msg->_impl_.update_type_.beam_update_;
}
const ::aalyria::spacetime::api::common::RadioUpdate&
ControlPlaneUpdate::_Internal::radio_update(const ControlPlaneUpdate* msg) {
  return *msg->_impl_.update_type_.radio_update_;
}
const ::aalyria::spacetime::api::common::FlowUpdate&
ControlPlaneUpdate::_Internal::flow_update(const ControlPlaneUpdate* msg) {
  return *msg->_impl_.update_type_.flow_update_;
}
const ::aalyria::spacetime::api::common::TunnelUpdate&
ControlPlaneUpdate::_Internal::tunnel_update(const ControlPlaneUpdate* msg) {
  return *msg->_impl_.update_type_.tunnel_update_;
}
void ControlPlaneUpdate::set_allocated_beam_update(::aalyria::spacetime::api::common::BeamUpdate* beam_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_type();
  if (beam_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beam_update));
    if (message_arena != submessage_arena) {
      beam_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beam_update, submessage_arena);
    }
    set_has_beam_update();
    _impl_.update_type_.beam_update_ = beam_update;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ControlPlaneUpdate.beam_update)
}
void ControlPlaneUpdate::clear_beam_update() {
  if (update_type_case() == kBeamUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_type_.beam_update_;
    }
    clear_has_update_type();
  }
}
void ControlPlaneUpdate::set_allocated_radio_update(::aalyria::spacetime::api::common::RadioUpdate* radio_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_type();
  if (radio_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_update));
    if (message_arena != submessage_arena) {
      radio_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_update, submessage_arena);
    }
    set_has_radio_update();
    _impl_.update_type_.radio_update_ = radio_update;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ControlPlaneUpdate.radio_update)
}
void ControlPlaneUpdate::clear_radio_update() {
  if (update_type_case() == kRadioUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_type_.radio_update_;
    }
    clear_has_update_type();
  }
}
void ControlPlaneUpdate::set_allocated_flow_update(::aalyria::spacetime::api::common::FlowUpdate* flow_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_type();
  if (flow_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_update));
    if (message_arena != submessage_arena) {
      flow_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_update, submessage_arena);
    }
    set_has_flow_update();
    _impl_.update_type_.flow_update_ = flow_update;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ControlPlaneUpdate.flow_update)
}
void ControlPlaneUpdate::clear_flow_update() {
  if (update_type_case() == kFlowUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_type_.flow_update_;
    }
    clear_has_update_type();
  }
}
void ControlPlaneUpdate::set_allocated_tunnel_update(::aalyria::spacetime::api::common::TunnelUpdate* tunnel_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_type();
  if (tunnel_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_update));
    if (message_arena != submessage_arena) {
      tunnel_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_update, submessage_arena);
    }
    set_has_tunnel_update();
    _impl_.update_type_.tunnel_update_ = tunnel_update;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.ControlPlaneUpdate.tunnel_update)
}
void ControlPlaneUpdate::clear_tunnel_update() {
  if (update_type_case() == kTunnelUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_type_.tunnel_update_;
    }
    clear_has_update_type();
  }
}
ControlPlaneUpdate::ControlPlaneUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ControlPlaneUpdate)
}
ControlPlaneUpdate::ControlPlaneUpdate(const ControlPlaneUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlPlaneUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_update_type();
  switch (from.update_type_case()) {
    case kBeamUpdate: {
      _this->_internal_mutable_beam_update()->::aalyria::spacetime::api::common::BeamUpdate::MergeFrom(
          from._internal_beam_update());
      break;
    }
    case kRadioUpdate: {
      _this->_internal_mutable_radio_update()->::aalyria::spacetime::api::common::RadioUpdate::MergeFrom(
          from._internal_radio_update());
      break;
    }
    case kFlowUpdate: {
      _this->_internal_mutable_flow_update()->::aalyria::spacetime::api::common::FlowUpdate::MergeFrom(
          from._internal_flow_update());
      break;
    }
    case kTunnelUpdate: {
      _this->_internal_mutable_tunnel_update()->::aalyria::spacetime::api::common::TunnelUpdate::MergeFrom(
          from._internal_tunnel_update());
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ControlPlaneUpdate)
}

inline void ControlPlaneUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.update_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_update_type();
}

ControlPlaneUpdate::~ControlPlaneUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ControlPlaneUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlPlaneUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_update_type()) {
    clear_update_type();
  }
}

void ControlPlaneUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlPlaneUpdate::clear_update_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  switch (update_type_case()) {
    case kBeamUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_type_.beam_update_;
      }
      break;
    }
    case kRadioUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_type_.radio_update_;
      }
      break;
    }
    case kFlowUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_type_.flow_update_;
      }
      break;
    }
    case kTunnelUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_type_.tunnel_update_;
      }
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = UPDATE_TYPE_NOT_SET;
}


void ControlPlaneUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlPlaneUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.BeamUpdate beam_update = 1 [json_name = "beamUpdate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_beam_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.RadioUpdate radio_update = 2 [json_name = "radioUpdate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.FlowUpdate flow_update = 3 [json_name = "flowUpdate"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.TunnelUpdate tunnel_update = 4 [json_name = "tunnelUpdate"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlPlaneUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (update_type_case()) {
    case kBeamUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::beam_update(this),
          _Internal::beam_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kRadioUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::radio_update(this),
          _Internal::radio_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kFlowUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::flow_update(this),
          _Internal::flow_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kTunnelUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::tunnel_update(this),
          _Internal::tunnel_update(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ControlPlaneUpdate)
  return target;
}

::size_t ControlPlaneUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_type_case()) {
    // .aalyria.spacetime.api.common.BeamUpdate beam_update = 1 [json_name = "beamUpdate"];
    case kBeamUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_type_.beam_update_);
      break;
    }
    // .aalyria.spacetime.api.common.RadioUpdate radio_update = 2 [json_name = "radioUpdate"];
    case kRadioUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_type_.radio_update_);
      break;
    }
    // .aalyria.spacetime.api.common.FlowUpdate flow_update = 3 [json_name = "flowUpdate"];
    case kFlowUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_type_.flow_update_);
      break;
    }
    // .aalyria.spacetime.api.common.TunnelUpdate tunnel_update = 4 [json_name = "tunnelUpdate"];
    case kTunnelUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_type_.tunnel_update_);
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlPlaneUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlPlaneUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlPlaneUpdate::GetClassData() const { return &_class_data_; }


void ControlPlaneUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlPlaneUpdate*>(&to_msg);
  auto& from = static_cast<const ControlPlaneUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_type_case()) {
    case kBeamUpdate: {
      _this->_internal_mutable_beam_update()->::aalyria::spacetime::api::common::BeamUpdate::MergeFrom(
          from._internal_beam_update());
      break;
    }
    case kRadioUpdate: {
      _this->_internal_mutable_radio_update()->::aalyria::spacetime::api::common::RadioUpdate::MergeFrom(
          from._internal_radio_update());
      break;
    }
    case kFlowUpdate: {
      _this->_internal_mutable_flow_update()->::aalyria::spacetime::api::common::FlowUpdate::MergeFrom(
          from._internal_flow_update());
      break;
    }
    case kTunnelUpdate: {
      _this->_internal_mutable_tunnel_update()->::aalyria::spacetime::api::common::TunnelUpdate::MergeFrom(
          from._internal_tunnel_update());
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlPlaneUpdate::CopyFrom(const ControlPlaneUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ControlPlaneUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlaneUpdate::IsInitialized() const {
  switch (update_type_case()) {
    case kBeamUpdate: {
      if (update_type_case() == kBeamUpdate) {
        if (!_impl_.update_type_.beam_update_->IsInitialized()) return false;
      }
      break;
    }
    case kRadioUpdate: {
      if (update_type_case() == kRadioUpdate) {
        if (!_impl_.update_type_.radio_update_->IsInitialized()) return false;
      }
      break;
    }
    case kFlowUpdate: {
      break;
    }
    case kTunnelUpdate: {
      break;
    }
    case UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void ControlPlaneUpdate::InternalSwap(ControlPlaneUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.update_type_, other->_impl_.update_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPlaneUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[3]);
}
// ===================================================================

class ControlPlaneState::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlPlaneState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlPlaneState, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::BeamStates& beam_states(const ControlPlaneState* msg);
  static void set_has_beam_states(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::RadioStates& radio_states(const ControlPlaneState* msg);
  static void set_has_radio_states(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::FlowState& forwarding_state(const ControlPlaneState* msg);
  static void set_has_forwarding_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::TunnelStates& tunnel_states(const ControlPlaneState* msg);
  static void set_has_tunnel_states(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::common::BeamStates&
ControlPlaneState::_Internal::beam_states(const ControlPlaneState* msg) {
  return *msg->_impl_.beam_states_;
}
const ::aalyria::spacetime::api::common::RadioStates&
ControlPlaneState::_Internal::radio_states(const ControlPlaneState* msg) {
  return *msg->_impl_.radio_states_;
}
const ::aalyria::spacetime::api::common::FlowState&
ControlPlaneState::_Internal::forwarding_state(const ControlPlaneState* msg) {
  return *msg->_impl_.forwarding_state_;
}
const ::aalyria::spacetime::api::common::TunnelStates&
ControlPlaneState::_Internal::tunnel_states(const ControlPlaneState* msg) {
  return *msg->_impl_.tunnel_states_;
}
void ControlPlaneState::clear_beam_states() {
  if (_impl_.beam_states_ != nullptr) _impl_.beam_states_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ControlPlaneState::clear_radio_states() {
  if (_impl_.radio_states_ != nullptr) _impl_.radio_states_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ControlPlaneState::clear_forwarding_state() {
  if (_impl_.forwarding_state_ != nullptr) _impl_.forwarding_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ControlPlaneState::clear_tunnel_states() {
  if (_impl_.tunnel_states_ != nullptr) _impl_.tunnel_states_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ControlPlaneState::ControlPlaneState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ControlPlaneState)
}
ControlPlaneState::ControlPlaneState(const ControlPlaneState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlPlaneState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.beam_states_){nullptr}
    , decltype(_impl_.radio_states_){nullptr}
    , decltype(_impl_.forwarding_state_){nullptr}
    , decltype(_impl_.tunnel_states_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.beam_states_ = new ::aalyria::spacetime::api::common::BeamStates(*from._impl_.beam_states_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.radio_states_ = new ::aalyria::spacetime::api::common::RadioStates(*from._impl_.radio_states_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.forwarding_state_ = new ::aalyria::spacetime::api::common::FlowState(*from._impl_.forwarding_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.tunnel_states_ = new ::aalyria::spacetime::api::common::TunnelStates(*from._impl_.tunnel_states_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ControlPlaneState)
}

inline void ControlPlaneState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.beam_states_){nullptr}
    , decltype(_impl_.radio_states_){nullptr}
    , decltype(_impl_.forwarding_state_){nullptr}
    , decltype(_impl_.tunnel_states_){nullptr}
  };
}

ControlPlaneState::~ControlPlaneState() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ControlPlaneState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlPlaneState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.beam_states_;
  if (this != internal_default_instance()) delete _impl_.radio_states_;
  if (this != internal_default_instance()) delete _impl_.forwarding_state_;
  if (this != internal_default_instance()) delete _impl_.tunnel_states_;
}

void ControlPlaneState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlPlaneState::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ControlPlaneState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.beam_states_ != nullptr);
      _impl_.beam_states_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.radio_states_ != nullptr);
      _impl_.radio_states_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.forwarding_state_ != nullptr);
      _impl_.forwarding_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.tunnel_states_ != nullptr);
      _impl_.tunnel_states_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlPlaneState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.BeamStates beam_states = 2 [json_name = "beamStates"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_beam_states(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.RadioStates radio_states = 3 [json_name = "radioStates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_states(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.FlowState forwarding_state = 5 [json_name = "forwardingState"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwarding_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TunnelStates tunnel_states = 6 [json_name = "tunnelStates"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_states(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlPlaneState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ControlPlaneState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.BeamStates beam_states = 2 [json_name = "beamStates"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::beam_states(this),
        _Internal::beam_states(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.RadioStates radio_states = 3 [json_name = "radioStates"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::radio_states(this),
        _Internal::radio_states(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.FlowState forwarding_state = 5 [json_name = "forwardingState"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::forwarding_state(this),
        _Internal::forwarding_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TunnelStates tunnel_states = 6 [json_name = "tunnelStates"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tunnel_states(this),
        _Internal::tunnel_states(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ControlPlaneState)
  return target;
}

::size_t ControlPlaneState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ControlPlaneState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aalyria.spacetime.api.common.BeamStates beam_states = 2 [json_name = "beamStates"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.beam_states_);
    }

    // optional .aalyria.spacetime.api.common.RadioStates radio_states = 3 [json_name = "radioStates"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radio_states_);
    }

    // optional .aalyria.spacetime.api.common.FlowState forwarding_state = 5 [json_name = "forwardingState"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.forwarding_state_);
    }

    // optional .aalyria.spacetime.api.common.TunnelStates tunnel_states = 6 [json_name = "tunnelStates"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tunnel_states_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlPlaneState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlPlaneState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlPlaneState::GetClassData() const { return &_class_data_; }


void ControlPlaneState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlPlaneState*>(&to_msg);
  auto& from = static_cast<const ControlPlaneState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ControlPlaneState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_beam_states()->::aalyria::spacetime::api::common::BeamStates::MergeFrom(
          from._internal_beam_states());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_radio_states()->::aalyria::spacetime::api::common::RadioStates::MergeFrom(
          from._internal_radio_states());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_forwarding_state()->::aalyria::spacetime::api::common::FlowState::MergeFrom(
          from._internal_forwarding_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tunnel_states()->::aalyria::spacetime::api::common::TunnelStates::MergeFrom(
          from._internal_tunnel_states());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlPlaneState::CopyFrom(const ControlPlaneState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ControlPlaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlaneState::IsInitialized() const {
  return true;
}

void ControlPlaneState::InternalSwap(ControlPlaneState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlPlaneState, _impl_.tunnel_states_)
      + sizeof(ControlPlaneState::_impl_.tunnel_states_)
      - PROTOBUF_FIELD_OFFSET(ControlPlaneState, _impl_.beam_states_)>(
          reinterpret_cast<char*>(&_impl_.beam_states_),
          reinterpret_cast<char*>(&other->_impl_.beam_states_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPlaneState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[4]);
}
// ===================================================================

class ScheduledControlUpdateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduledControlUpdateReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScheduledControlUpdateReq, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::ScheduledControlUpdate& compiled_update(const ScheduledControlUpdateReq* msg);
  static void set_has_compiled_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::rpc::Status& completed(const ScheduledControlUpdateReq* msg);
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scheduled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::rpc::Status& unscheduled(const ScheduledControlUpdateReq* msg);
  static void set_has_unscheduled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::ScheduledControlUpdate&
ScheduledControlUpdateReq::_Internal::compiled_update(const ScheduledControlUpdateReq* msg) {
  return *msg->_impl_.compiled_update_;
}
const ::google::rpc::Status&
ScheduledControlUpdateReq::_Internal::completed(const ScheduledControlUpdateReq* msg) {
  return *msg->_impl_.completed_;
}
const ::google::rpc::Status&
ScheduledControlUpdateReq::_Internal::unscheduled(const ScheduledControlUpdateReq* msg) {
  return *msg->_impl_.unscheduled_;
}
void ScheduledControlUpdateReq::clear_completed() {
  if (_impl_.completed_ != nullptr) _impl_.completed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ScheduledControlUpdateReq::clear_unscheduled() {
  if (_impl_.unscheduled_ != nullptr) _impl_.unscheduled_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ScheduledControlUpdateReq::ScheduledControlUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
}
ScheduledControlUpdateReq::ScheduledControlUpdateReq(const ScheduledControlUpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduledControlUpdateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.compiled_update_){nullptr}
    , decltype(_impl_.completed_){nullptr}
    , decltype(_impl_.unscheduled_){nullptr}
    , decltype(_impl_.scheduled_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.compiled_update_ = new ::aalyria::spacetime::api::common::ScheduledControlUpdate(*from._impl_.compiled_update_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.completed_ = new ::google::rpc::Status(*from._impl_.completed_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.unscheduled_ = new ::google::rpc::Status(*from._impl_.unscheduled_);
  }
  _this->_impl_.scheduled_ = from._impl_.scheduled_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
}

inline void ScheduledControlUpdateReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.compiled_update_){nullptr}
    , decltype(_impl_.completed_){nullptr}
    , decltype(_impl_.unscheduled_){nullptr}
    , decltype(_impl_.scheduled_) { false }

  };
}

ScheduledControlUpdateReq::~ScheduledControlUpdateReq() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduledControlUpdateReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.compiled_update_;
  if (this != internal_default_instance()) delete _impl_.completed_;
  if (this != internal_default_instance()) delete _impl_.unscheduled_;
}

void ScheduledControlUpdateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduledControlUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.compiled_update_ != nullptr);
      _impl_.compiled_update_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.completed_ != nullptr);
      _impl_.completed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.unscheduled_ != nullptr);
      _impl_.unscheduled_->Clear();
    }
  }
  _impl_.scheduled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduledControlUpdateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.ScheduledControlUpdate compiled_update = 1 [json_name = "compiledUpdate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compiled_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.rpc.Status completed = 8 [json_name = "completed"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool scheduled = 11 [json_name = "scheduled"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_scheduled(&has_bits);
          _impl_.scheduled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.rpc.Status unscheduled = 12 [json_name = "unscheduled"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unscheduled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScheduledControlUpdateReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.ScheduledControlUpdate compiled_update = 1 [json_name = "compiledUpdate"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::compiled_update(this),
        _Internal::compiled_update(this).GetCachedSize(), target, stream);
  }

  // optional .google.rpc.Status completed = 8 [json_name = "completed"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::completed(this),
        _Internal::completed(this).GetCachedSize(), target, stream);
  }

  // optional bool scheduled = 11 [json_name = "scheduled"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_scheduled(), target);
  }

  // optional .google.rpc.Status unscheduled = 12 [json_name = "unscheduled"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::unscheduled(this),
        _Internal::unscheduled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  return target;
}

::size_t ScheduledControlUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aalyria.spacetime.api.common.ScheduledControlUpdate compiled_update = 1 [json_name = "compiledUpdate"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.compiled_update_);
    }

    // optional .google.rpc.Status completed = 8 [json_name = "completed"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.completed_);
    }

    // optional .google.rpc.Status unscheduled = 12 [json_name = "unscheduled"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unscheduled_);
    }

    // optional bool scheduled = 11 [json_name = "scheduled"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduledControlUpdateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduledControlUpdateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduledControlUpdateReq::GetClassData() const { return &_class_data_; }


void ScheduledControlUpdateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduledControlUpdateReq*>(&to_msg);
  auto& from = static_cast<const ScheduledControlUpdateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_compiled_update()->::aalyria::spacetime::api::common::ScheduledControlUpdate::MergeFrom(
          from._internal_compiled_update());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_completed()->::google::rpc::Status::MergeFrom(
          from._internal_completed());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_unscheduled()->::google::rpc::Status::MergeFrom(
          from._internal_unscheduled());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.scheduled_ = from._impl_.scheduled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduledControlUpdateReq::CopyFrom(const ScheduledControlUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ScheduledControlUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduledControlUpdateReq::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.compiled_update_->IsInitialized()) return false;
  }
  return true;
}

void ScheduledControlUpdateReq::InternalSwap(ScheduledControlUpdateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduledControlUpdateReq, _impl_.scheduled_)
      + sizeof(ScheduledControlUpdateReq::_impl_.scheduled_)
      - PROTOBUF_FIELD_OFFSET(ScheduledControlUpdateReq, _impl_.compiled_update_)>(
          reinterpret_cast<char*>(&_impl_.compiled_update_),
          reinterpret_cast<char*>(&other->_impl_.compiled_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduledControlUpdateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[5]);
}
// ===================================================================

TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse() {}
TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::MergeFrom(const TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[6]);
}
// ===================================================================

class TaskCdpiStreamCount::_Internal {
 public:
};

TaskCdpiStreamCount::TaskCdpiStreamCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TaskCdpiStreamCount)
}
TaskCdpiStreamCount::TaskCdpiStreamCount(const TaskCdpiStreamCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskCdpiStreamCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_priority_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stream_count_per_priority_.MergeFrom(from._impl_.stream_count_per_priority_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TaskCdpiStreamCount)
}

inline void TaskCdpiStreamCount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_priority_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskCdpiStreamCount::~TaskCdpiStreamCount() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskCdpiStreamCount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_count_per_priority_.~MapField();
}

void TaskCdpiStreamCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskCdpiStreamCount::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_count_per_priority_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCdpiStreamCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, int32> stream_count_per_priority = 1 [json_name = "streamCountPerPriority"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stream_count_per_priority_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TaskCdpiStreamCount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, int32> stream_count_per_priority = 1 [json_name = "streamCountPerPriority"];
  if (!this->_internal_stream_count_per_priority().empty()) {
    using MapType = ::_pb::Map<::uint32_t, ::int32_t>;
    using WireHelper = TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stream_count_per_priority();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  return target;
}

::size_t TaskCdpiStreamCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, int32> stream_count_per_priority = 1 [json_name = "streamCountPerPriority"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_count_per_priority_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, ::int32_t >::const_iterator
      it = this->_internal_stream_count_per_priority().begin();
      it != this->_internal_stream_count_per_priority().end(); ++it) {
    total_size += TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCdpiStreamCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskCdpiStreamCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCdpiStreamCount::GetClassData() const { return &_class_data_; }


void TaskCdpiStreamCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskCdpiStreamCount*>(&to_msg);
  auto& from = static_cast<const TaskCdpiStreamCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_count_per_priority_.MergeFrom(from._impl_.stream_count_per_priority_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCdpiStreamCount::CopyFrom(const TaskCdpiStreamCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TaskCdpiStreamCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCdpiStreamCount::IsInitialized() const {
  return true;
}

void TaskCdpiStreamCount::InternalSwap(TaskCdpiStreamCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_count_per_priority_.InternalSwap(&other->_impl_.stream_count_per_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCdpiStreamCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[7]);
}
// ===================================================================

CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse() {}
CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::MergeFrom(const CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[8]);
}
// ===================================================================

class CdpiFrontendInfo::_Internal {
 public:
};

CdpiFrontendInfo::CdpiFrontendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.CdpiFrontendInfo)
}
CdpiFrontendInfo::CdpiFrontendInfo(const CdpiFrontendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiFrontendInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_node_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stream_count_per_node_.MergeFrom(from._impl_.stream_count_per_node_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.CdpiFrontendInfo)
}

inline void CdpiFrontendInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_node_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CdpiFrontendInfo::~CdpiFrontendInfo() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.CdpiFrontendInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiFrontendInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_count_per_node_.~MapField();
}

void CdpiFrontendInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiFrontendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.CdpiFrontendInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_count_per_node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiFrontendInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_node = 1 [json_name = "streamCountPerNode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stream_count_per_node_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiFrontendInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.CdpiFrontendInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_node = 1 [json_name = "streamCountPerNode"];
  if (!this->_internal_stream_count_per_node().empty()) {
    using MapType = ::_pb::Map<std::string, ::aalyria::spacetime::api::common::TaskCdpiStreamCount>;
    using WireHelper = CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stream_count_per_node();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.CdpiFrontendInfo.stream_count_per_node");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.CdpiFrontendInfo)
  return target;
}

::size_t CdpiFrontendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.CdpiFrontendInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_node = 1 [json_name = "streamCountPerNode"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_count_per_node_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TaskCdpiStreamCount >::const_iterator
      it = this->_internal_stream_count_per_node().begin();
      it != this->_internal_stream_count_per_node().end(); ++it) {
    total_size += CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiFrontendInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiFrontendInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiFrontendInfo::GetClassData() const { return &_class_data_; }


void CdpiFrontendInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiFrontendInfo*>(&to_msg);
  auto& from = static_cast<const CdpiFrontendInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.CdpiFrontendInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_count_per_node_.MergeFrom(from._impl_.stream_count_per_node_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiFrontendInfo::CopyFrom(const CdpiFrontendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.CdpiFrontendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiFrontendInfo::IsInitialized() const {
  return true;
}

void CdpiFrontendInfo::InternalSwap(CdpiFrontendInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_count_per_node_.InternalSwap(&other->_impl_.stream_count_per_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiFrontendInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[9]);
}
// ===================================================================

CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse() {}
CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::MergeFrom(const CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[10]);
}
// ===================================================================

CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse() {}
CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::MergeFrom(const CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[11]);
}
// ===================================================================

class CdpiStreamInfo::_Internal {
 public:
};

CdpiStreamInfo::CdpiStreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.CdpiStreamInfo)
}
CdpiStreamInfo::CdpiStreamInfo(const CdpiStreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiStreamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_task_)*/{}
    , /*decltype(_impl_.stream_count_per_priority_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stream_count_per_task_.MergeFrom(from._impl_.stream_count_per_task_);
  _this->_impl_.stream_count_per_priority_.MergeFrom(from._impl_.stream_count_per_priority_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.CdpiStreamInfo)
}

inline void CdpiStreamInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.stream_count_per_task_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.stream_count_per_priority_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CdpiStreamInfo::~CdpiStreamInfo() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.CdpiStreamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiStreamInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_count_per_task_.~MapField();
  _impl_.stream_count_per_priority_.~MapField();
}

void CdpiStreamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiStreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.CdpiStreamInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_count_per_task_.Clear();
  _impl_.stream_count_per_priority_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiStreamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_task = 2 [json_name = "streamCountPerTask"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stream_count_per_task_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint32, int32> stream_count_per_priority = 3 [json_name = "streamCountPerPriority"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stream_count_per_priority_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiStreamInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.CdpiStreamInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_task = 2 [json_name = "streamCountPerTask"];
  if (!this->_internal_stream_count_per_task().empty()) {
    using MapType = ::_pb::Map<std::string, ::aalyria::spacetime::api::common::TaskCdpiStreamCount>;
    using WireHelper = CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stream_count_per_task();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.CdpiStreamInfo.stream_count_per_task");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint32, int32> stream_count_per_priority = 3 [json_name = "streamCountPerPriority"];
  if (!this->_internal_stream_count_per_priority().empty()) {
    using MapType = ::_pb::Map<::uint32_t, ::int32_t>;
    using WireHelper = CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stream_count_per_priority();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.CdpiStreamInfo)
  return target;
}

::size_t CdpiStreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.CdpiStreamInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .aalyria.spacetime.api.common.TaskCdpiStreamCount> stream_count_per_task = 2 [json_name = "streamCountPerTask"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_count_per_task_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TaskCdpiStreamCount >::const_iterator
      it = this->_internal_stream_count_per_task().begin();
      it != this->_internal_stream_count_per_task().end(); ++it) {
    total_size += CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, int32> stream_count_per_priority = 3 [json_name = "streamCountPerPriority"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_count_per_priority_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, ::int32_t >::const_iterator
      it = this->_internal_stream_count_per_priority().begin();
      it != this->_internal_stream_count_per_priority().end(); ++it) {
    total_size += CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiStreamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiStreamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiStreamInfo::GetClassData() const { return &_class_data_; }


void CdpiStreamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiStreamInfo*>(&to_msg);
  auto& from = static_cast<const CdpiStreamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.CdpiStreamInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_count_per_task_.MergeFrom(from._impl_.stream_count_per_task_);
  _this->_impl_.stream_count_per_priority_.MergeFrom(from._impl_.stream_count_per_priority_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiStreamInfo::CopyFrom(const CdpiStreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.CdpiStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiStreamInfo::IsInitialized() const {
  return true;
}

void CdpiStreamInfo::InternalSwap(CdpiStreamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_count_per_task_.InternalSwap(&other->_impl_.stream_count_per_task_);
  _impl_.stream_count_per_priority_.InternalSwap(&other->_impl_.stream_count_per_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiStreamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ScheduledControlUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ScheduledControlUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ScheduledControlUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ScheduledControlDeletion*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ScheduledControlDeletion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ScheduledControlDeletion >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ControlPlaneUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ControlPlaneUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ControlPlaneUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ControlPlaneState*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ControlPlaneState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ControlPlaneState >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ScheduledControlUpdateReq*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ScheduledControlUpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ScheduledControlUpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TaskCdpiStreamCount_StreamCountPerPriorityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TaskCdpiStreamCount*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TaskCdpiStreamCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TaskCdpiStreamCount >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CdpiFrontendInfo_StreamCountPerNodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CdpiFrontendInfo*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CdpiFrontendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CdpiFrontendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerTaskEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CdpiStreamInfo_StreamCountPerPriorityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::CdpiStreamInfo*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::CdpiStreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::CdpiStreamInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_transmitter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransmitter_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransmitter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/channel.pb.h"
#include "api/common/wireless.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fwireless_5ftransmitter_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class TransmitSignalProcessor;
struct TransmitSignalProcessorDefaultTypeInternal;
extern TransmitSignalProcessorDefaultTypeInternal _TransmitSignalProcessor_default_instance_;
class TransmitterDefinition;
struct TransmitterDefinitionDefaultTypeInternal;
extern TransmitterDefinitionDefaultTypeInternal _TransmitterDefinition_default_instance_;
class TransmitterDefinition_ChannelSetEntry_DoNotUse;
struct TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal;
extern TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal _TransmitterDefinition_ChannelSetEntry_DoNotUse_default_instance_;
class TxChannels;
struct TxChannelsDefaultTypeInternal;
extern TxChannelsDefaultTypeInternal _TxChannels_default_instance_;
class TxChannels_ChannelEntry_DoNotUse;
struct TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal;
extern TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal _TxChannels_ChannelEntry_DoNotUse_default_instance_;
class TxChannels_TxChannelParams;
struct TxChannels_TxChannelParamsDefaultTypeInternal;
extern TxChannels_TxChannelParamsDefaultTypeInternal _TxChannels_TxChannelParams_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::TransmitSignalProcessor* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransmitSignalProcessor>(Arena*);
template <>
::aalyria::spacetime::api::common::TransmitterDefinition* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransmitterDefinition>(Arena*);
template <>
::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse>(Arena*);
template <>
::aalyria::spacetime::api::common::TxChannels* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TxChannels>(Arena*);
template <>
::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse>(Arena*);
template <>
::aalyria::spacetime::api::common::TxChannels_TxChannelParams* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TxChannels_TxChannelParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class TxChannels_TxChannelParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TxChannels.TxChannelParams) */ {
 public:
  inline TxChannels_TxChannelParams() : TxChannels_TxChannelParams(nullptr) {}
  ~TxChannels_TxChannelParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxChannels_TxChannelParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxChannels_TxChannelParams(const TxChannels_TxChannelParams& from);
  TxChannels_TxChannelParams(TxChannels_TxChannelParams&& from) noexcept
    : TxChannels_TxChannelParams() {
    *this = ::std::move(from);
  }

  inline TxChannels_TxChannelParams& operator=(const TxChannels_TxChannelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxChannels_TxChannelParams& operator=(TxChannels_TxChannelParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxChannels_TxChannelParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxChannels_TxChannelParams* internal_default_instance() {
    return reinterpret_cast<const TxChannels_TxChannelParams*>(
               &_TxChannels_TxChannelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxChannels_TxChannelParams& a, TxChannels_TxChannelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TxChannels_TxChannelParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxChannels_TxChannelParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxChannels_TxChannelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxChannels_TxChannelParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxChannels_TxChannelParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxChannels_TxChannelParams& from) {
    TxChannels_TxChannelParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxChannels_TxChannelParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TxChannels.TxChannelParams";
  }
  protected:
  explicit TxChannels_TxChannelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPowerWattsFieldNumber = 1,
  };
  // optional double max_power_watts = 1 [json_name = "maxPowerWatts"];
  bool has_max_power_watts() const;
  void clear_max_power_watts() ;
  double max_power_watts() const;
  void set_max_power_watts(double value);

  private:
  double _internal_max_power_watts() const;
  void _internal_set_max_power_watts(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_power_watts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};// -------------------------------------------------------------------

class TxChannels_ChannelEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TxChannels_ChannelEntry_DoNotUse, 
    ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TxChannels_ChannelEntry_DoNotUse, 
    ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TxChannels_ChannelEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxChannels_ChannelEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TxChannels_ChannelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TxChannels_ChannelEntry_DoNotUse& other);
  static const TxChannels_ChannelEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TxChannels_ChannelEntry_DoNotUse*>(&_TxChannels_ChannelEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};
// -------------------------------------------------------------------

class TxChannels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TxChannels) */ {
 public:
  inline TxChannels() : TxChannels(nullptr) {}
  ~TxChannels() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxChannels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxChannels(const TxChannels& from);
  TxChannels(TxChannels&& from) noexcept
    : TxChannels() {
    *this = ::std::move(from);
  }

  inline TxChannels& operator=(const TxChannels& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxChannels& operator=(TxChannels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxChannels& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxChannels* internal_default_instance() {
    return reinterpret_cast<const TxChannels*>(
               &_TxChannels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TxChannels& a, TxChannels& b) {
    a.Swap(&b);
  }
  inline void Swap(TxChannels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxChannels* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxChannels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxChannels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxChannels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxChannels& from) {
    TxChannels::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxChannels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TxChannels";
  }
  protected:
  explicit TxChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TxChannels_TxChannelParams TxChannelParams;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // map<uint64, .aalyria.spacetime.api.common.TxChannels.TxChannelParams> channel = 1 [json_name = "channel"];
  int channel_size() const;
  private:
  int _internal_channel_size() const;

  public:
  void clear_channel() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >&
      _internal_channel() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >*
      _internal_mutable_channel();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >&
      channel() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >*
      mutable_channel();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TxChannels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TxChannels_ChannelEntry_DoNotUse,
        ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};// -------------------------------------------------------------------

class TransmitterDefinition_ChannelSetEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransmitterDefinition_ChannelSetEntry_DoNotUse, 
    std::string, ::aalyria::spacetime::api::common::TxChannels,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransmitterDefinition_ChannelSetEntry_DoNotUse, 
    std::string, ::aalyria::spacetime::api::common::TxChannels,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TransmitterDefinition_ChannelSetEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransmitterDefinition_ChannelSetEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TransmitterDefinition_ChannelSetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TransmitterDefinition_ChannelSetEntry_DoNotUse& other);
  static const TransmitterDefinition_ChannelSetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TransmitterDefinition_ChannelSetEntry_DoNotUse*>(&_TransmitterDefinition_ChannelSetEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "aalyria.spacetime.api.common.TransmitterDefinition.ChannelSetEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};
// -------------------------------------------------------------------

class TransmitterDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TransmitterDefinition) */ {
 public:
  inline TransmitterDefinition() : TransmitterDefinition(nullptr) {}
  ~TransmitterDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransmitterDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransmitterDefinition(const TransmitterDefinition& from);
  TransmitterDefinition(TransmitterDefinition&& from) noexcept
    : TransmitterDefinition() {
    *this = ::std::move(from);
  }

  inline TransmitterDefinition& operator=(const TransmitterDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmitterDefinition& operator=(TransmitterDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransmitterDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransmitterDefinition* internal_default_instance() {
    return reinterpret_cast<const TransmitterDefinition*>(
               &_TransmitterDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransmitterDefinition& a, TransmitterDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmitterDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmitterDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransmitterDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransmitterDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransmitterDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransmitterDefinition& from) {
    TransmitterDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmitterDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TransmitterDefinition";
  }
  protected:
  explicit TransmitterDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChannelSetFieldNumber = 14,
    kSignalProcessingStepFieldNumber = 15,
    kNameFieldNumber = 2,
    kCoverageHeatmapIdFieldNumber = 17,
    kChannelSelectionMethodFieldNumber = 13,
  };
  // map<string, .aalyria.spacetime.api.common.TxChannels> channel_set = 14 [json_name = "channelSet"];
  int channel_set_size() const;
  private:
  int _internal_channel_set_size() const;

  public:
  void clear_channel_set() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >&
      _internal_channel_set() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >*
      _internal_mutable_channel_set();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >&
      channel_set() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >*
      mutable_channel_set();
  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 15 [json_name = "signalProcessingStep"];
  int signal_processing_step_size() const;
  private:
  int _internal_signal_processing_step_size() const;

  public:
  void clear_signal_processing_step() ;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* mutable_signal_processing_step(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >*
      mutable_signal_processing_step();
  private:
  const ::aalyria::spacetime::api::common::TransmitSignalProcessor& _internal_signal_processing_step(int index) const;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* _internal_add_signal_processing_step();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>& _internal_signal_processing_step() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>* _internal_mutable_signal_processing_step();
  public:
  const ::aalyria::spacetime::api::common::TransmitSignalProcessor& signal_processing_step(int index) const;
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* add_signal_processing_step();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >&
      signal_processing_step() const;
  // optional string name = 2 [json_name = "name"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string coverage_heatmap_id = 17 [json_name = "coverageHeatmapId"];
  bool has_coverage_heatmap_id() const;
  void clear_coverage_heatmap_id() ;
  const std::string& coverage_heatmap_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coverage_heatmap_id(Arg_&& arg, Args_... args);
  std::string* mutable_coverage_heatmap_id();
  PROTOBUF_NODISCARD std::string* release_coverage_heatmap_id();
  void set_allocated_coverage_heatmap_id(std::string* ptr);

  private:
  const std::string& _internal_coverage_heatmap_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coverage_heatmap_id(
      const std::string& value);
  std::string* _internal_mutable_coverage_heatmap_id();

  public:
  // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 13 [json_name = "channelSelectionMethod"];
  bool has_channel_selection_method() const;
  void clear_channel_selection_method() ;
  ::aalyria::spacetime::api::common::ChannelSelectionMethod channel_selection_method() const;
  void set_channel_selection_method(::aalyria::spacetime::api::common::ChannelSelectionMethod value);

  private:
  ::aalyria::spacetime::api::common::ChannelSelectionMethod _internal_channel_selection_method() const;
  void _internal_set_channel_selection_method(::aalyria::spacetime::api::common::ChannelSelectionMethod value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TransmitterDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TransmitterDefinition_ChannelSetEntry_DoNotUse,
        std::string, ::aalyria::spacetime::api::common::TxChannels,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> channel_set_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor > signal_processing_step_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coverage_heatmap_id_;
    int channel_selection_method_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};// -------------------------------------------------------------------

class TransmitSignalProcessor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TransmitSignalProcessor) */ {
 public:
  inline TransmitSignalProcessor() : TransmitSignalProcessor(nullptr) {}
  ~TransmitSignalProcessor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransmitSignalProcessor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransmitSignalProcessor(const TransmitSignalProcessor& from);
  TransmitSignalProcessor(TransmitSignalProcessor&& from) noexcept
    : TransmitSignalProcessor() {
    *this = ::std::move(from);
  }

  inline TransmitSignalProcessor& operator=(const TransmitSignalProcessor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmitSignalProcessor& operator=(TransmitSignalProcessor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransmitSignalProcessor& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kAmplifier = 1,
    kGainOrLoss = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const TransmitSignalProcessor* internal_default_instance() {
    return reinterpret_cast<const TransmitSignalProcessor*>(
               &_TransmitSignalProcessor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransmitSignalProcessor& a, TransmitSignalProcessor& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmitSignalProcessor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmitSignalProcessor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransmitSignalProcessor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransmitSignalProcessor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransmitSignalProcessor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransmitSignalProcessor& from) {
    TransmitSignalProcessor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmitSignalProcessor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TransmitSignalProcessor";
  }
  protected:
  explicit TransmitSignalProcessor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplifierFieldNumber = 1,
    kGainOrLossFieldNumber = 2,
  };
  // .aalyria.spacetime.api.common.AmplifierDefinition amplifier = 1 [json_name = "amplifier"];
  bool has_amplifier() const;
  private:
  bool _internal_has_amplifier() const;

  public:
  void clear_amplifier() ;
  const ::aalyria::spacetime::api::common::AmplifierDefinition& amplifier() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AmplifierDefinition* release_amplifier();
  ::aalyria::spacetime::api::common::AmplifierDefinition* mutable_amplifier();
  void set_allocated_amplifier(::aalyria::spacetime::api::common::AmplifierDefinition* amplifier);
  private:
  const ::aalyria::spacetime::api::common::AmplifierDefinition& _internal_amplifier() const;
  ::aalyria::spacetime::api::common::AmplifierDefinition* _internal_mutable_amplifier();
  public:
  void unsafe_arena_set_allocated_amplifier(
      ::aalyria::spacetime::api::common::AmplifierDefinition* amplifier);
  ::aalyria::spacetime::api::common::AmplifierDefinition* unsafe_arena_release_amplifier();
  // .aalyria.spacetime.api.common.MiscGainOrLoss gain_or_loss = 2 [json_name = "gainOrLoss"];
  bool has_gain_or_loss() const;
  private:
  bool _internal_has_gain_or_loss() const;

  public:
  void clear_gain_or_loss() ;
  const ::aalyria::spacetime::api::common::MiscGainOrLoss& gain_or_loss() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::MiscGainOrLoss* release_gain_or_loss();
  ::aalyria::spacetime::api::common::MiscGainOrLoss* mutable_gain_or_loss();
  void set_allocated_gain_or_loss(::aalyria::spacetime::api::common::MiscGainOrLoss* gain_or_loss);
  private:
  const ::aalyria::spacetime::api::common::MiscGainOrLoss& _internal_gain_or_loss() const;
  ::aalyria::spacetime::api::common::MiscGainOrLoss* _internal_mutable_gain_or_loss();
  public:
  void unsafe_arena_set_allocated_gain_or_loss(
      ::aalyria::spacetime::api::common::MiscGainOrLoss* gain_or_loss);
  ::aalyria::spacetime::api::common::MiscGainOrLoss* unsafe_arena_release_gain_or_loss();
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TransmitSignalProcessor)
 private:
  class _Internal;
  void set_has_amplifier();
  void set_has_gain_or_loss();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::common::AmplifierDefinition* amplifier_;
      ::aalyria::spacetime::api::common::MiscGainOrLoss* gain_or_loss_;
    } type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TxChannels_TxChannelParams

// optional double max_power_watts = 1 [json_name = "maxPowerWatts"];
inline bool TxChannels_TxChannelParams::has_max_power_watts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TxChannels_TxChannelParams::clear_max_power_watts() {
  _impl_.max_power_watts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double TxChannels_TxChannelParams::max_power_watts() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TxChannels.TxChannelParams.max_power_watts)
  return _internal_max_power_watts();
}
inline void TxChannels_TxChannelParams::set_max_power_watts(double value) {
  _internal_set_max_power_watts(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TxChannels.TxChannelParams.max_power_watts)
}
inline double TxChannels_TxChannelParams::_internal_max_power_watts() const {
  return _impl_.max_power_watts_;
}
inline void TxChannels_TxChannelParams::_internal_set_max_power_watts(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_power_watts_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TxChannels

// map<uint64, .aalyria.spacetime.api.common.TxChannels.TxChannelParams> channel = 1 [json_name = "channel"];
inline int TxChannels::_internal_channel_size() const {
  return _impl_.channel_.size();
}
inline int TxChannels::channel_size() const {
  return _internal_channel_size();
}
inline void TxChannels::clear_channel() {
  _impl_.channel_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >&
TxChannels::_internal_channel() const {
  return _impl_.channel_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >&
TxChannels::channel() const {
  // @@protoc_insertion_point(field_map:aalyria.spacetime.api.common.TxChannels.channel)
  return _internal_channel();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >*
TxChannels::_internal_mutable_channel() {
  return _impl_.channel_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >*
TxChannels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_map:aalyria.spacetime.api.common.TxChannels.channel)
  return _internal_mutable_channel();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TransmitterDefinition

// optional string name = 2 [json_name = "name"];
inline bool TransmitterDefinition::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransmitterDefinition::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransmitterDefinition::name() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitterDefinition.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransmitterDefinition::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransmitterDefinition.name)
}
inline std::string* TransmitterDefinition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransmitterDefinition.name)
  return _s;
}
inline const std::string& TransmitterDefinition::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TransmitterDefinition::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransmitterDefinition::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TransmitterDefinition::release_name() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransmitterDefinition.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransmitterDefinition::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransmitterDefinition.name)
}

// map<string, .aalyria.spacetime.api.common.TxChannels> channel_set = 14 [json_name = "channelSet"];
inline int TransmitterDefinition::_internal_channel_set_size() const {
  return _impl_.channel_set_.size();
}
inline int TransmitterDefinition::channel_set_size() const {
  return _internal_channel_set_size();
}
inline void TransmitterDefinition::clear_channel_set() {
  _impl_.channel_set_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >&
TransmitterDefinition::_internal_channel_set() const {
  return _impl_.channel_set_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >&
TransmitterDefinition::channel_set() const {
  // @@protoc_insertion_point(field_map:aalyria.spacetime.api.common.TransmitterDefinition.channel_set)
  return _internal_channel_set();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >*
TransmitterDefinition::_internal_mutable_channel_set() {
  return _impl_.channel_set_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >*
TransmitterDefinition::mutable_channel_set() {
  // @@protoc_insertion_point(field_mutable_map:aalyria.spacetime.api.common.TransmitterDefinition.channel_set)
  return _internal_mutable_channel_set();
}

// optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 13 [json_name = "channelSelectionMethod"];
inline bool TransmitterDefinition::has_channel_selection_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TransmitterDefinition::clear_channel_selection_method() {
  _impl_.channel_selection_method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::aalyria::spacetime::api::common::ChannelSelectionMethod TransmitterDefinition::channel_selection_method() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitterDefinition.channel_selection_method)
  return _internal_channel_selection_method();
}
inline void TransmitterDefinition::set_channel_selection_method(::aalyria::spacetime::api::common::ChannelSelectionMethod value) {
   _internal_set_channel_selection_method(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransmitterDefinition.channel_selection_method)
}
inline ::aalyria::spacetime::api::common::ChannelSelectionMethod TransmitterDefinition::_internal_channel_selection_method() const {
  return static_cast<::aalyria::spacetime::api::common::ChannelSelectionMethod>(_impl_.channel_selection_method_);
}
inline void TransmitterDefinition::_internal_set_channel_selection_method(::aalyria::spacetime::api::common::ChannelSelectionMethod value) {
  assert(::aalyria::spacetime::api::common::ChannelSelectionMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_selection_method_ = value;
}

// repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 15 [json_name = "signalProcessingStep"];
inline int TransmitterDefinition::_internal_signal_processing_step_size() const {
  return _impl_.signal_processing_step_.size();
}
inline int TransmitterDefinition::signal_processing_step_size() const {
  return _internal_signal_processing_step_size();
}
inline void TransmitterDefinition::clear_signal_processing_step() {
  _internal_mutable_signal_processing_step()->Clear();
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* TransmitterDefinition::mutable_signal_processing_step(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransmitterDefinition.signal_processing_step)
  return _internal_mutable_signal_processing_step()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >*
TransmitterDefinition::mutable_signal_processing_step() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.TransmitterDefinition.signal_processing_step)
  return _internal_mutable_signal_processing_step();
}
inline const ::aalyria::spacetime::api::common::TransmitSignalProcessor& TransmitterDefinition::_internal_signal_processing_step(int index) const {
  return _internal_signal_processing_step().Get(index);
}
inline const ::aalyria::spacetime::api::common::TransmitSignalProcessor& TransmitterDefinition::signal_processing_step(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitterDefinition.signal_processing_step)
  return _internal_signal_processing_step(index);
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* TransmitterDefinition::_internal_add_signal_processing_step() {
  return _internal_mutable_signal_processing_step()->Add();
}
inline ::aalyria::spacetime::api::common::TransmitSignalProcessor* TransmitterDefinition::add_signal_processing_step() {
  ::aalyria::spacetime::api::common::TransmitSignalProcessor* _add = _internal_add_signal_processing_step();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.TransmitterDefinition.signal_processing_step)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransmitSignalProcessor >&
TransmitterDefinition::signal_processing_step() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.TransmitterDefinition.signal_processing_step)
  return _internal_signal_processing_step();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>&
TransmitterDefinition::_internal_signal_processing_step() const {
  return _impl_.signal_processing_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransmitSignalProcessor>*
TransmitterDefinition::_internal_mutable_signal_processing_step() {
  return &_impl_.signal_processing_step_;
}

// optional string coverage_heatmap_id = 17 [json_name = "coverageHeatmapId"];
inline bool TransmitterDefinition::has_coverage_heatmap_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TransmitterDefinition::clear_coverage_heatmap_id() {
  _impl_.coverage_heatmap_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransmitterDefinition::coverage_heatmap_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id)
  return _internal_coverage_heatmap_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransmitterDefinition::set_coverage_heatmap_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.coverage_heatmap_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id)
}
inline std::string* TransmitterDefinition::mutable_coverage_heatmap_id() {
  std::string* _s = _internal_mutable_coverage_heatmap_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id)
  return _s;
}
inline const std::string& TransmitterDefinition::_internal_coverage_heatmap_id() const {
  return _impl_.coverage_heatmap_id_.Get();
}
inline void TransmitterDefinition::_internal_set_coverage_heatmap_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.coverage_heatmap_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransmitterDefinition::_internal_mutable_coverage_heatmap_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.coverage_heatmap_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TransmitterDefinition::release_coverage_heatmap_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.coverage_heatmap_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coverage_heatmap_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransmitterDefinition::set_allocated_coverage_heatmap_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.coverage_heatmap_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.coverage_heatmap_id_.IsDefault()) {
          _impl_.coverage_heatmap_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id)
}

// -------------------------------------------------------------------

// TransmitSignalProcessor

// .aalyria.spacetime.api.common.AmplifierDefinition amplifier = 1 [json_name = "amplifier"];
inline bool TransmitSignalProcessor::has_amplifier() const {
  return type_case() == kAmplifier;
}
inline bool TransmitSignalProcessor::_internal_has_amplifier() const {
  return type_case() == kAmplifier;
}
inline void TransmitSignalProcessor::set_has_amplifier() {
  _impl_._oneof_case_[0] = kAmplifier;
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition* TransmitSignalProcessor::release_amplifier() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
  if (type_case() == kAmplifier) {
    clear_has_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition* temp = _impl_.type_.amplifier_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.amplifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition& TransmitSignalProcessor::_internal_amplifier() const {
  return type_case() == kAmplifier
      ? *_impl_.type_.amplifier_
      : reinterpret_cast<::aalyria::spacetime::api::common::AmplifierDefinition&>(::aalyria::spacetime::api::common::_AmplifierDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition& TransmitSignalProcessor::amplifier() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
  return _internal_amplifier();
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition* TransmitSignalProcessor::unsafe_arena_release_amplifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
  if (type_case() == kAmplifier) {
    clear_has_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition* temp = _impl_.type_.amplifier_;
    _impl_.type_.amplifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransmitSignalProcessor::unsafe_arena_set_allocated_amplifier(::aalyria::spacetime::api::common::AmplifierDefinition* amplifier) {
  clear_type();
  if (amplifier) {
    set_has_amplifier();
    _impl_.type_.amplifier_ = amplifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition* TransmitSignalProcessor::_internal_mutable_amplifier() {
  if (type_case() != kAmplifier) {
    clear_type();
    set_has_amplifier();
    _impl_.type_.amplifier_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition >(GetArenaForAllocation());
  }
  return _impl_.type_.amplifier_;
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition* TransmitSignalProcessor::mutable_amplifier() {
  ::aalyria::spacetime::api::common::AmplifierDefinition* _msg = _internal_mutable_amplifier();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
  return _msg;
}

// .aalyria.spacetime.api.common.MiscGainOrLoss gain_or_loss = 2 [json_name = "gainOrLoss"];
inline bool TransmitSignalProcessor::has_gain_or_loss() const {
  return type_case() == kGainOrLoss;
}
inline bool TransmitSignalProcessor::_internal_has_gain_or_loss() const {
  return type_case() == kGainOrLoss;
}
inline void TransmitSignalProcessor::set_has_gain_or_loss() {
  _impl_._oneof_case_[0] = kGainOrLoss;
}
inline ::aalyria::spacetime::api::common::MiscGainOrLoss* TransmitSignalProcessor::release_gain_or_loss() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
  if (type_case() == kGainOrLoss) {
    clear_has_type();
    ::aalyria::spacetime::api::common::MiscGainOrLoss* temp = _impl_.type_.gain_or_loss_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.gain_or_loss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::MiscGainOrLoss& TransmitSignalProcessor::_internal_gain_or_loss() const {
  return type_case() == kGainOrLoss
      ? *_impl_.type_.gain_or_loss_
      : reinterpret_cast<::aalyria::spacetime::api::common::MiscGainOrLoss&>(::aalyria::spacetime::api::common::_MiscGainOrLoss_default_instance_);
}
inline const ::aalyria::spacetime::api::common::MiscGainOrLoss& TransmitSignalProcessor::gain_or_loss() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
  return _internal_gain_or_loss();
}
inline ::aalyria::spacetime::api::common::MiscGainOrLoss* TransmitSignalProcessor::unsafe_arena_release_gain_or_loss() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
  if (type_case() == kGainOrLoss) {
    clear_has_type();
    ::aalyria::spacetime::api::common::MiscGainOrLoss* temp = _impl_.type_.gain_or_loss_;
    _impl_.type_.gain_or_loss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransmitSignalProcessor::unsafe_arena_set_allocated_gain_or_loss(::aalyria::spacetime::api::common::MiscGainOrLoss* gain_or_loss) {
  clear_type();
  if (gain_or_loss) {
    set_has_gain_or_loss();
    _impl_.type_.gain_or_loss_ = gain_or_loss;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
}
inline ::aalyria::spacetime::api::common::MiscGainOrLoss* TransmitSignalProcessor::_internal_mutable_gain_or_loss() {
  if (type_case() != kGainOrLoss) {
    clear_type();
    set_has_gain_or_loss();
    _impl_.type_.gain_or_loss_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::MiscGainOrLoss >(GetArenaForAllocation());
  }
  return _impl_.type_.gain_or_loss_;
}
inline ::aalyria::spacetime::api::common::MiscGainOrLoss* TransmitSignalProcessor::mutable_gain_or_loss() {
  ::aalyria::spacetime::api::common::MiscGainOrLoss* _msg = _internal_mutable_gain_or_loss();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
  return _msg;
}

inline bool TransmitSignalProcessor::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TransmitSignalProcessor::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline TransmitSignalProcessor::TypeCase TransmitSignalProcessor::type_case() const {
  return TransmitSignalProcessor::TypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransmitter_2eproto_2epb_2eh

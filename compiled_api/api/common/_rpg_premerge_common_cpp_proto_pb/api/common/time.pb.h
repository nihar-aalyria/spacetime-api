// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/time.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2ftime_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2ftime_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2ftime_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2ftime_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2ftime_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class DateTime;
struct DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class Duration;
struct DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class GpsTime;
struct GpsTimeDefaultTypeInternal;
extern GpsTimeDefaultTypeInternal _GpsTime_default_instance_;
class TimeInterval;
struct TimeIntervalDefaultTypeInternal;
extern TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::DateTime* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::DateTime>(Arena*);
template <>
::aalyria::spacetime::api::common::Duration* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::Duration>(Arena*);
template <>
::aalyria::spacetime::api::common::GpsTime* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::GpsTime>(Arena*);
template <>
::aalyria::spacetime::api::common::TimeInterval* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TimeInterval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class DateTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  ~DateTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DateTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateTime(const DateTime& from);
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DateTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DateTime& from) {
    DateTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.DateTime";
  }
  protected:
  explicit DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsTimeFieldNumber = 2,
    kUnixTimeUsecFieldNumber = 1,
  };
  // optional .aalyria.spacetime.api.common.GpsTime gps_time = 2 [json_name = "gpsTime"];
  bool has_gps_time() const;
  void clear_gps_time() ;
  const ::aalyria::spacetime::api::common::GpsTime& gps_time() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::GpsTime* release_gps_time();
  ::aalyria::spacetime::api::common::GpsTime* mutable_gps_time();
  void set_allocated_gps_time(::aalyria::spacetime::api::common::GpsTime* gps_time);
  private:
  const ::aalyria::spacetime::api::common::GpsTime& _internal_gps_time() const;
  ::aalyria::spacetime::api::common::GpsTime* _internal_mutable_gps_time();
  public:
  void unsafe_arena_set_allocated_gps_time(
      ::aalyria::spacetime::api::common::GpsTime* gps_time);
  ::aalyria::spacetime::api::common::GpsTime* unsafe_arena_release_gps_time();
  // optional int64 unix_time_usec = 1 [json_name = "unixTimeUsec"];
  bool has_unix_time_usec() const;
  void clear_unix_time_usec() ;
  ::int64_t unix_time_usec() const;
  void set_unix_time_usec(::int64_t value);

  private:
  ::int64_t _internal_unix_time_usec() const;
  void _internal_set_unix_time_usec(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.DateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::GpsTime* gps_time_;
    ::int64_t unix_time_usec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2ftime_2eproto;
};// -------------------------------------------------------------------

class GpsTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.GpsTime) */ {
 public:
  inline GpsTime() : GpsTime(nullptr) {}
  ~GpsTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GpsTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsTime(const GpsTime& from);
  GpsTime(GpsTime&& from) noexcept
    : GpsTime() {
    *this = ::std::move(from);
  }

  inline GpsTime& operator=(const GpsTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsTime& operator=(GpsTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsTime* internal_default_instance() {
    return reinterpret_cast<const GpsTime*>(
               &_GpsTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpsTime& a, GpsTime& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpsTime& from) {
    GpsTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.GpsTime";
  }
  protected:
  explicit GpsTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeekNumberFieldNumber = 1,
    kSecondOfWeekFieldNumber = 2,
    kUsecFieldNumber = 3,
  };
  // optional int32 week_number = 1 [json_name = "weekNumber"];
  bool has_week_number() const;
  void clear_week_number() ;
  ::int32_t week_number() const;
  void set_week_number(::int32_t value);

  private:
  ::int32_t _internal_week_number() const;
  void _internal_set_week_number(::int32_t value);

  public:
  // optional int32 second_of_week = 2 [json_name = "secondOfWeek"];
  bool has_second_of_week() const;
  void clear_second_of_week() ;
  ::int32_t second_of_week() const;
  void set_second_of_week(::int32_t value);

  private:
  ::int32_t _internal_second_of_week() const;
  void _internal_set_second_of_week(::int32_t value);

  public:
  // optional int32 usec = 3 [json_name = "usec"];
  bool has_usec() const;
  void clear_usec() ;
  ::int32_t usec() const;
  void set_usec(::int32_t value);

  private:
  ::int32_t _internal_usec() const;
  void _internal_set_usec(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.GpsTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t week_number_;
    ::int32_t second_of_week_;
    ::int32_t usec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2ftime_2eproto;
};// -------------------------------------------------------------------

class Duration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.Duration) */ {
 public:
  inline Duration() : Duration(nullptr) {}
  ~Duration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Duration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Duration(const Duration& from);
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Duration& operator=(Duration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Duration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(Duration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Duration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Duration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Duration& from) {
    Duration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.Duration";
  }
  protected:
  explicit Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMicrosecondsFieldNumber = 1,
  };
  // required int64 microseconds = 1 [json_name = "microseconds"];
  bool has_microseconds() const;
  void clear_microseconds() ;
  ::int64_t microseconds() const;
  void set_microseconds(::int64_t value);

  private:
  ::int64_t _internal_microseconds() const;
  void _internal_set_microseconds(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t microseconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2ftime_2eproto;
};// -------------------------------------------------------------------

class TimeInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TimeInterval) */ {
 public:
  inline TimeInterval() : TimeInterval(nullptr) {}
  ~TimeInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeInterval(const TimeInterval& from);
  TimeInterval(TimeInterval&& from) noexcept
    : TimeInterval() {
    *this = ::std::move(from);
  }

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeInterval& operator=(TimeInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TimeInterval*>(
               &_TimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimeInterval& a, TimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeInterval& from) {
    TimeInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TimeInterval";
  }
  protected:
  explicit TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.common.DateTime start_time = 1 [json_name = "startTime"];
  bool has_start_time() const;
  void clear_start_time() ;
  const ::aalyria::spacetime::api::common::DateTime& start_time() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::DateTime* release_start_time();
  ::aalyria::spacetime::api::common::DateTime* mutable_start_time();
  void set_allocated_start_time(::aalyria::spacetime::api::common::DateTime* start_time);
  private:
  const ::aalyria::spacetime::api::common::DateTime& _internal_start_time() const;
  ::aalyria::spacetime::api::common::DateTime* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::aalyria::spacetime::api::common::DateTime* start_time);
  ::aalyria::spacetime::api::common::DateTime* unsafe_arena_release_start_time();
  // optional .aalyria.spacetime.api.common.DateTime end_time = 2 [json_name = "endTime"];
  bool has_end_time() const;
  void clear_end_time() ;
  const ::aalyria::spacetime::api::common::DateTime& end_time() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::DateTime* release_end_time();
  ::aalyria::spacetime::api::common::DateTime* mutable_end_time();
  void set_allocated_end_time(::aalyria::spacetime::api::common::DateTime* end_time);
  private:
  const ::aalyria::spacetime::api::common::DateTime& _internal_end_time() const;
  ::aalyria::spacetime::api::common::DateTime* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::aalyria::spacetime::api::common::DateTime* end_time);
  ::aalyria::spacetime::api::common::DateTime* unsafe_arena_release_end_time();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::DateTime* start_time_;
    ::aalyria::spacetime::api::common::DateTime* end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2ftime_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DateTime

// optional int64 unix_time_usec = 1 [json_name = "unixTimeUsec"];
inline bool DateTime::has_unix_time_usec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DateTime::clear_unix_time_usec() {
  _impl_.unix_time_usec_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t DateTime::unix_time_usec() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.DateTime.unix_time_usec)
  return _internal_unix_time_usec();
}
inline void DateTime::set_unix_time_usec(::int64_t value) {
  _internal_set_unix_time_usec(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.DateTime.unix_time_usec)
}
inline ::int64_t DateTime::_internal_unix_time_usec() const {
  return _impl_.unix_time_usec_;
}
inline void DateTime::_internal_set_unix_time_usec(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unix_time_usec_ = value;
}

// optional .aalyria.spacetime.api.common.GpsTime gps_time = 2 [json_name = "gpsTime"];
inline bool DateTime::has_gps_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gps_time_ != nullptr);
  return value;
}
inline void DateTime::clear_gps_time() {
  if (_impl_.gps_time_ != nullptr) _impl_.gps_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::common::GpsTime& DateTime::_internal_gps_time() const {
  const ::aalyria::spacetime::api::common::GpsTime* p = _impl_.gps_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::GpsTime&>(
      ::aalyria::spacetime::api::common::_GpsTime_default_instance_);
}
inline const ::aalyria::spacetime::api::common::GpsTime& DateTime::gps_time() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.DateTime.gps_time)
  return _internal_gps_time();
}
inline void DateTime::unsafe_arena_set_allocated_gps_time(
    ::aalyria::spacetime::api::common::GpsTime* gps_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gps_time_);
  }
  _impl_.gps_time_ = gps_time;
  if (gps_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.DateTime.gps_time)
}
inline ::aalyria::spacetime::api::common::GpsTime* DateTime::release_gps_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::GpsTime* temp = _impl_.gps_time_;
  _impl_.gps_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::GpsTime* DateTime::unsafe_arena_release_gps_time() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.DateTime.gps_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::GpsTime* temp = _impl_.gps_time_;
  _impl_.gps_time_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::GpsTime* DateTime::_internal_mutable_gps_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gps_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::GpsTime>(GetArenaForAllocation());
    _impl_.gps_time_ = p;
  }
  return _impl_.gps_time_;
}
inline ::aalyria::spacetime::api::common::GpsTime* DateTime::mutable_gps_time() {
  ::aalyria::spacetime::api::common::GpsTime* _msg = _internal_mutable_gps_time();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.DateTime.gps_time)
  return _msg;
}
inline void DateTime::set_allocated_gps_time(::aalyria::spacetime::api::common::GpsTime* gps_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gps_time_;
  }
  if (gps_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gps_time);
    if (message_arena != submessage_arena) {
      gps_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.gps_time_ = gps_time;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.DateTime.gps_time)
}

// -------------------------------------------------------------------

// GpsTime

// optional int32 week_number = 1 [json_name = "weekNumber"];
inline bool GpsTime::has_week_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GpsTime::clear_week_number() {
  _impl_.week_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t GpsTime::week_number() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.GpsTime.week_number)
  return _internal_week_number();
}
inline void GpsTime::set_week_number(::int32_t value) {
  _internal_set_week_number(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.GpsTime.week_number)
}
inline ::int32_t GpsTime::_internal_week_number() const {
  return _impl_.week_number_;
}
inline void GpsTime::_internal_set_week_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.week_number_ = value;
}

// optional int32 second_of_week = 2 [json_name = "secondOfWeek"];
inline bool GpsTime::has_second_of_week() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GpsTime::clear_second_of_week() {
  _impl_.second_of_week_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t GpsTime::second_of_week() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.GpsTime.second_of_week)
  return _internal_second_of_week();
}
inline void GpsTime::set_second_of_week(::int32_t value) {
  _internal_set_second_of_week(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.GpsTime.second_of_week)
}
inline ::int32_t GpsTime::_internal_second_of_week() const {
  return _impl_.second_of_week_;
}
inline void GpsTime::_internal_set_second_of_week(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.second_of_week_ = value;
}

// optional int32 usec = 3 [json_name = "usec"];
inline bool GpsTime::has_usec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GpsTime::clear_usec() {
  _impl_.usec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t GpsTime::usec() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.GpsTime.usec)
  return _internal_usec();
}
inline void GpsTime::set_usec(::int32_t value) {
  _internal_set_usec(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.GpsTime.usec)
}
inline ::int32_t GpsTime::_internal_usec() const {
  return _impl_.usec_;
}
inline void GpsTime::_internal_set_usec(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.usec_ = value;
}

// -------------------------------------------------------------------

// Duration

// required int64 microseconds = 1 [json_name = "microseconds"];
inline bool Duration::has_microseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Duration::clear_microseconds() {
  _impl_.microseconds_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Duration::microseconds() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.Duration.microseconds)
  return _internal_microseconds();
}
inline void Duration::set_microseconds(::int64_t value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.Duration.microseconds)
}
inline ::int64_t Duration::_internal_microseconds() const {
  return _impl_.microseconds_;
}
inline void Duration::_internal_set_microseconds(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.microseconds_ = value;
}

// -------------------------------------------------------------------

// TimeInterval

// optional .aalyria.spacetime.api.common.DateTime start_time = 1 [json_name = "startTime"];
inline bool TimeInterval::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline void TimeInterval::clear_start_time() {
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::common::DateTime& TimeInterval::_internal_start_time() const {
  const ::aalyria::spacetime::api::common::DateTime* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::DateTime&>(
      ::aalyria::spacetime::api::common::_DateTime_default_instance_);
}
inline const ::aalyria::spacetime::api::common::DateTime& TimeInterval::start_time() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TimeInterval.start_time)
  return _internal_start_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_start_time(
    ::aalyria::spacetime::api::common::DateTime* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TimeInterval.start_time)
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::release_start_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TimeInterval.start_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::_internal_mutable_start_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::DateTime>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::mutable_start_time() {
  ::aalyria::spacetime::api::common::DateTime* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TimeInterval.start_time)
  return _msg;
}
inline void TimeInterval::set_allocated_start_time(::aalyria::spacetime::api::common::DateTime* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_time_;
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_time);
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TimeInterval.start_time)
}

// optional .aalyria.spacetime.api.common.DateTime end_time = 2 [json_name = "endTime"];
inline bool TimeInterval::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline void TimeInterval::clear_end_time() {
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::common::DateTime& TimeInterval::_internal_end_time() const {
  const ::aalyria::spacetime::api::common::DateTime* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::DateTime&>(
      ::aalyria::spacetime::api::common::_DateTime_default_instance_);
}
inline const ::aalyria::spacetime::api::common::DateTime& TimeInterval::end_time() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TimeInterval.end_time)
  return _internal_end_time();
}
inline void TimeInterval::unsafe_arena_set_allocated_end_time(
    ::aalyria::spacetime::api::common::DateTime* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TimeInterval.end_time)
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::release_end_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TimeInterval.end_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::_internal_mutable_end_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::DateTime>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::aalyria::spacetime::api::common::DateTime* TimeInterval::mutable_end_time() {
  ::aalyria::spacetime::api::common::DateTime* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TimeInterval.end_time)
  return _msg;
}
inline void TimeInterval::set_allocated_end_time(::aalyria::spacetime::api::common::DateTime* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_time_;
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_time);
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TimeInterval.end_time)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2ftime_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control_tunnel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fcontrol_5ftunnel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fcontrol_5ftunnel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/network.pb.h"
#include "api/common/time.pb.h"
#include "api/common/tunnel.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fcontrol_5ftunnel_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fcontrol_5ftunnel_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class TunnelRule;
struct TunnelRuleDefaultTypeInternal;
extern TunnelRuleDefaultTypeInternal _TunnelRule_default_instance_;
class TunnelRule_DecapRule;
struct TunnelRule_DecapRuleDefaultTypeInternal;
extern TunnelRule_DecapRuleDefaultTypeInternal _TunnelRule_DecapRule_default_instance_;
class TunnelRule_EncapRule;
struct TunnelRule_EncapRuleDefaultTypeInternal;
extern TunnelRule_EncapRuleDefaultTypeInternal _TunnelRule_EncapRule_default_instance_;
class TunnelStates;
struct TunnelStatesDefaultTypeInternal;
extern TunnelStatesDefaultTypeInternal _TunnelStates_default_instance_;
class TunnelUpdate;
struct TunnelUpdateDefaultTypeInternal;
extern TunnelUpdateDefaultTypeInternal _TunnelUpdate_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::TunnelRule* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule>(Arena*);
template <>
::aalyria::spacetime::api::common::TunnelRule_DecapRule* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule_DecapRule>(Arena*);
template <>
::aalyria::spacetime::api::common::TunnelRule_EncapRule* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule_EncapRule>(Arena*);
template <>
::aalyria::spacetime::api::common::TunnelStates* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelStates>(Arena*);
template <>
::aalyria::spacetime::api::common::TunnelUpdate* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
enum TunnelUpdate_Operation : int {
  TunnelUpdate_Operation_UNKNOWN = 0,
  TunnelUpdate_Operation_ADD = 1,
  TunnelUpdate_Operation_DELETE = 2,
};

bool TunnelUpdate_Operation_IsValid(int value);
constexpr TunnelUpdate_Operation TunnelUpdate_Operation_Operation_MIN = static_cast<TunnelUpdate_Operation>(0);
constexpr TunnelUpdate_Operation TunnelUpdate_Operation_Operation_MAX = static_cast<TunnelUpdate_Operation>(2);
constexpr int TunnelUpdate_Operation_Operation_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TunnelUpdate_Operation_descriptor();
template <typename T>
const std::string& TunnelUpdate_Operation_Name(T value) {
  static_assert(std::is_same<T, TunnelUpdate_Operation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Operation_Name().");
  return TunnelUpdate_Operation_Name(static_cast<TunnelUpdate_Operation>(value));
}
template <>
inline const std::string& TunnelUpdate_Operation_Name(TunnelUpdate_Operation value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TunnelUpdate_Operation_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TunnelUpdate_Operation_Parse(absl::string_view name, TunnelUpdate_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TunnelUpdate_Operation>(
      TunnelUpdate_Operation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TunnelUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TunnelUpdate) */ {
 public:
  inline TunnelUpdate() : TunnelUpdate(nullptr) {}
  ~TunnelUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TunnelUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelUpdate(const TunnelUpdate& from);
  TunnelUpdate(TunnelUpdate&& from) noexcept
    : TunnelUpdate() {
    *this = ::std::move(from);
  }

  inline TunnelUpdate& operator=(const TunnelUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelUpdate& operator=(TunnelUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelUpdate* internal_default_instance() {
    return reinterpret_cast<const TunnelUpdate*>(
               &_TunnelUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TunnelUpdate& a, TunnelUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TunnelUpdate& from) {
    TunnelUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TunnelUpdate";
  }
  protected:
  explicit TunnelUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Operation = TunnelUpdate_Operation;
  static constexpr Operation UNKNOWN = TunnelUpdate_Operation_UNKNOWN;
  static constexpr Operation ADD = TunnelUpdate_Operation_ADD;
  static constexpr Operation DELETE = TunnelUpdate_Operation_DELETE;
  static inline bool Operation_IsValid(int value) {
    return TunnelUpdate_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN = TunnelUpdate_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX = TunnelUpdate_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE = TunnelUpdate_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_descriptor() {
    return TunnelUpdate_Operation_descriptor();
  }
  template <typename T>
  static inline const std::string& Operation_Name(T value) {
    return TunnelUpdate_Operation_Name(value);
  }
  static inline bool Operation_Parse(absl::string_view name, Operation* value) {
    return TunnelUpdate_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelRuleIdFieldNumber = 1,
    kRuleFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kOperationFieldNumber = 2,
  };
  // optional string tunnel_rule_id = 1 [json_name = "tunnelRuleId"];
  bool has_tunnel_rule_id() const;
  void clear_tunnel_rule_id() ;
  const std::string& tunnel_rule_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tunnel_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_tunnel_rule_id();
  PROTOBUF_NODISCARD std::string* release_tunnel_rule_id();
  void set_allocated_tunnel_rule_id(std::string* ptr);

  private:
  const std::string& _internal_tunnel_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tunnel_rule_id(
      const std::string& value);
  std::string* _internal_mutable_tunnel_rule_id();

  public:
  // optional .aalyria.spacetime.api.common.TunnelRule rule = 3 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::aalyria::spacetime::api::common::TunnelRule& rule() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TunnelRule* release_rule();
  ::aalyria::spacetime::api::common::TunnelRule* mutable_rule();
  void set_allocated_rule(::aalyria::spacetime::api::common::TunnelRule* rule);
  private:
  const ::aalyria::spacetime::api::common::TunnelRule& _internal_rule() const;
  ::aalyria::spacetime::api::common::TunnelRule* _internal_mutable_rule();
  public:
  void unsafe_arena_set_allocated_rule(
      ::aalyria::spacetime::api::common::TunnelRule* rule);
  ::aalyria::spacetime::api::common::TunnelRule* unsafe_arena_release_rule();
  // optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
  bool has_sequence_number() const;
  void clear_sequence_number() ;
  ::int64_t sequence_number() const;
  void set_sequence_number(::int64_t value);

  private:
  ::int64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::int64_t value);

  public:
  // optional .aalyria.spacetime.api.common.TunnelUpdate.Operation operation = 2 [json_name = "operation"];
  bool has_operation() const;
  void clear_operation() ;
  ::aalyria::spacetime::api::common::TunnelUpdate_Operation operation() const;
  void set_operation(::aalyria::spacetime::api::common::TunnelUpdate_Operation value);

  private:
  ::aalyria::spacetime::api::common::TunnelUpdate_Operation _internal_operation() const;
  void _internal_set_operation(::aalyria::spacetime::api::common::TunnelUpdate_Operation value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TunnelUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tunnel_rule_id_;
    ::aalyria::spacetime::api::common::TunnelRule* rule_;
    ::int64_t sequence_number_;
    int operation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto;
};// -------------------------------------------------------------------

class TunnelRule_EncapRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TunnelRule.EncapRule) */ {
 public:
  inline TunnelRule_EncapRule() : TunnelRule_EncapRule(nullptr) {}
  ~TunnelRule_EncapRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TunnelRule_EncapRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelRule_EncapRule(const TunnelRule_EncapRule& from);
  TunnelRule_EncapRule(TunnelRule_EncapRule&& from) noexcept
    : TunnelRule_EncapRule() {
    *this = ::std::move(from);
  }

  inline TunnelRule_EncapRule& operator=(const TunnelRule_EncapRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelRule_EncapRule& operator=(TunnelRule_EncapRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelRule_EncapRule& default_instance() {
    return *internal_default_instance();
  }
  enum ParametersCase {
    kEsp = 6,
    PARAMETERS_NOT_SET = 0,
  };

  static inline const TunnelRule_EncapRule* internal_default_instance() {
    return reinterpret_cast<const TunnelRule_EncapRule*>(
               &_TunnelRule_EncapRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TunnelRule_EncapRule& a, TunnelRule_EncapRule& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelRule_EncapRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelRule_EncapRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelRule_EncapRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelRule_EncapRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelRule_EncapRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TunnelRule_EncapRule& from) {
    TunnelRule_EncapRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelRule_EncapRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TunnelRule.EncapRule";
  }
  protected:
  explicit TunnelRule_EncapRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncapsulatedSrcIpFieldNumber = 2,
    kEncapsulatedDstIpFieldNumber = 3,
    kClassifierFieldNumber = 1,
    kEncapsulatedSrcPortFieldNumber = 4,
    kEncapsulatedDstPortFieldNumber = 5,
    kEspFieldNumber = 6,
  };
  // optional string encapsulated_src_ip = 2 [json_name = "encapsulatedSrcIp"];
  bool has_encapsulated_src_ip() const;
  void clear_encapsulated_src_ip() ;
  const std::string& encapsulated_src_ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encapsulated_src_ip(Arg_&& arg, Args_... args);
  std::string* mutable_encapsulated_src_ip();
  PROTOBUF_NODISCARD std::string* release_encapsulated_src_ip();
  void set_allocated_encapsulated_src_ip(std::string* ptr);

  private:
  const std::string& _internal_encapsulated_src_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encapsulated_src_ip(
      const std::string& value);
  std::string* _internal_mutable_encapsulated_src_ip();

  public:
  // optional string encapsulated_dst_ip = 3 [json_name = "encapsulatedDstIp"];
  bool has_encapsulated_dst_ip() const;
  void clear_encapsulated_dst_ip() ;
  const std::string& encapsulated_dst_ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encapsulated_dst_ip(Arg_&& arg, Args_... args);
  std::string* mutable_encapsulated_dst_ip();
  PROTOBUF_NODISCARD std::string* release_encapsulated_dst_ip();
  void set_allocated_encapsulated_dst_ip(std::string* ptr);

  private:
  const std::string& _internal_encapsulated_dst_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encapsulated_dst_ip(
      const std::string& value);
  std::string* _internal_mutable_encapsulated_dst_ip();

  public:
  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
  bool has_classifier() const;
  void clear_classifier() ;
  const ::aalyria::spacetime::api::common::PacketClassifier& classifier() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::PacketClassifier* release_classifier();
  ::aalyria::spacetime::api::common::PacketClassifier* mutable_classifier();
  void set_allocated_classifier(::aalyria::spacetime::api::common::PacketClassifier* classifier);
  private:
  const ::aalyria::spacetime::api::common::PacketClassifier& _internal_classifier() const;
  ::aalyria::spacetime::api::common::PacketClassifier* _internal_mutable_classifier();
  public:
  void unsafe_arena_set_allocated_classifier(
      ::aalyria::spacetime::api::common::PacketClassifier* classifier);
  ::aalyria::spacetime::api::common::PacketClassifier* unsafe_arena_release_classifier();
  // optional int32 encapsulated_src_port = 4 [json_name = "encapsulatedSrcPort"];
  bool has_encapsulated_src_port() const;
  void clear_encapsulated_src_port() ;
  ::int32_t encapsulated_src_port() const;
  void set_encapsulated_src_port(::int32_t value);

  private:
  ::int32_t _internal_encapsulated_src_port() const;
  void _internal_set_encapsulated_src_port(::int32_t value);

  public:
  // optional int32 encapsulated_dst_port = 5 [json_name = "encapsulatedDstPort"];
  bool has_encapsulated_dst_port() const;
  void clear_encapsulated_dst_port() ;
  ::int32_t encapsulated_dst_port() const;
  void set_encapsulated_dst_port(::int32_t value);

  private:
  ::int32_t _internal_encapsulated_dst_port() const;
  void _internal_set_encapsulated_dst_port(::int32_t value);

  public:
  // .aalyria.spacetime.api.common.EspParameters esp = 6 [json_name = "esp"];
  bool has_esp() const;
  private:
  bool _internal_has_esp() const;

  public:
  void clear_esp() ;
  const ::aalyria::spacetime::api::common::EspParameters& esp() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::EspParameters* release_esp();
  ::aalyria::spacetime::api::common::EspParameters* mutable_esp();
  void set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp);
  private:
  const ::aalyria::spacetime::api::common::EspParameters& _internal_esp() const;
  ::aalyria::spacetime::api::common::EspParameters* _internal_mutable_esp();
  public:
  void unsafe_arena_set_allocated_esp(
      ::aalyria::spacetime::api::common::EspParameters* esp);
  ::aalyria::spacetime::api::common::EspParameters* unsafe_arena_release_esp();
  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TunnelRule.EncapRule)
 private:
  class _Internal;
  void set_has_esp();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encapsulated_src_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encapsulated_dst_ip_;
    ::aalyria::spacetime::api::common::PacketClassifier* classifier_;
    ::int32_t encapsulated_src_port_;
    ::int32_t encapsulated_dst_port_;
    union ParametersUnion {
      constexpr ParametersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::common::EspParameters* esp_;
    } parameters_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto;
};// -------------------------------------------------------------------

class TunnelRule_DecapRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TunnelRule.DecapRule) */ {
 public:
  inline TunnelRule_DecapRule() : TunnelRule_DecapRule(nullptr) {}
  ~TunnelRule_DecapRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TunnelRule_DecapRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelRule_DecapRule(const TunnelRule_DecapRule& from);
  TunnelRule_DecapRule(TunnelRule_DecapRule&& from) noexcept
    : TunnelRule_DecapRule() {
    *this = ::std::move(from);
  }

  inline TunnelRule_DecapRule& operator=(const TunnelRule_DecapRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelRule_DecapRule& operator=(TunnelRule_DecapRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelRule_DecapRule& default_instance() {
    return *internal_default_instance();
  }
  enum ParametersCase {
    kEsp = 2,
    PARAMETERS_NOT_SET = 0,
  };

  static inline const TunnelRule_DecapRule* internal_default_instance() {
    return reinterpret_cast<const TunnelRule_DecapRule*>(
               &_TunnelRule_DecapRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TunnelRule_DecapRule& a, TunnelRule_DecapRule& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelRule_DecapRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelRule_DecapRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelRule_DecapRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelRule_DecapRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelRule_DecapRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TunnelRule_DecapRule& from) {
    TunnelRule_DecapRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelRule_DecapRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TunnelRule.DecapRule";
  }
  protected:
  explicit TunnelRule_DecapRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassifierFieldNumber = 1,
    kEspFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
  bool has_classifier() const;
  void clear_classifier() ;
  const ::aalyria::spacetime::api::common::PacketClassifier& classifier() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::PacketClassifier* release_classifier();
  ::aalyria::spacetime::api::common::PacketClassifier* mutable_classifier();
  void set_allocated_classifier(::aalyria::spacetime::api::common::PacketClassifier* classifier);
  private:
  const ::aalyria::spacetime::api::common::PacketClassifier& _internal_classifier() const;
  ::aalyria::spacetime::api::common::PacketClassifier* _internal_mutable_classifier();
  public:
  void unsafe_arena_set_allocated_classifier(
      ::aalyria::spacetime::api::common::PacketClassifier* classifier);
  ::aalyria::spacetime::api::common::PacketClassifier* unsafe_arena_release_classifier();
  // .aalyria.spacetime.api.common.EspParameters esp = 2 [json_name = "esp"];
  bool has_esp() const;
  private:
  bool _internal_has_esp() const;

  public:
  void clear_esp() ;
  const ::aalyria::spacetime::api::common::EspParameters& esp() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::EspParameters* release_esp();
  ::aalyria::spacetime::api::common::EspParameters* mutable_esp();
  void set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp);
  private:
  const ::aalyria::spacetime::api::common::EspParameters& _internal_esp() const;
  ::aalyria::spacetime::api::common::EspParameters* _internal_mutable_esp();
  public:
  void unsafe_arena_set_allocated_esp(
      ::aalyria::spacetime::api::common::EspParameters* esp);
  ::aalyria::spacetime::api::common::EspParameters* unsafe_arena_release_esp();
  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TunnelRule.DecapRule)
 private:
  class _Internal;
  void set_has_esp();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::PacketClassifier* classifier_;
    union ParametersUnion {
      constexpr ParametersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::common::EspParameters* esp_;
    } parameters_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto;
};// -------------------------------------------------------------------

class TunnelRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TunnelRule) */ {
 public:
  inline TunnelRule() : TunnelRule(nullptr) {}
  ~TunnelRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TunnelRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelRule(const TunnelRule& from);
  TunnelRule(TunnelRule&& from) noexcept
    : TunnelRule() {
    *this = ::std::move(from);
  }

  inline TunnelRule& operator=(const TunnelRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelRule& operator=(TunnelRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelRule* internal_default_instance() {
    return reinterpret_cast<const TunnelRule*>(
               &_TunnelRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TunnelRule& a, TunnelRule& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TunnelRule& from) {
    TunnelRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TunnelRule";
  }
  protected:
  explicit TunnelRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TunnelRule_EncapRule EncapRule;
  typedef TunnelRule_DecapRule DecapRule;

  // accessors -------------------------------------------------------

  enum : int {
    kEncapRuleFieldNumber = 10,
    kDecapRuleFieldNumber = 11,
  };
  // optional .aalyria.spacetime.api.common.TunnelRule.EncapRule encap_rule = 10 [json_name = "encapRule"];
  bool has_encap_rule() const;
  void clear_encap_rule() ;
  const ::aalyria::spacetime::api::common::TunnelRule_EncapRule& encap_rule() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TunnelRule_EncapRule* release_encap_rule();
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* mutable_encap_rule();
  void set_allocated_encap_rule(::aalyria::spacetime::api::common::TunnelRule_EncapRule* encap_rule);
  private:
  const ::aalyria::spacetime::api::common::TunnelRule_EncapRule& _internal_encap_rule() const;
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* _internal_mutable_encap_rule();
  public:
  void unsafe_arena_set_allocated_encap_rule(
      ::aalyria::spacetime::api::common::TunnelRule_EncapRule* encap_rule);
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* unsafe_arena_release_encap_rule();
  // optional .aalyria.spacetime.api.common.TunnelRule.DecapRule decap_rule = 11 [json_name = "decapRule"];
  bool has_decap_rule() const;
  void clear_decap_rule() ;
  const ::aalyria::spacetime::api::common::TunnelRule_DecapRule& decap_rule() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TunnelRule_DecapRule* release_decap_rule();
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* mutable_decap_rule();
  void set_allocated_decap_rule(::aalyria::spacetime::api::common::TunnelRule_DecapRule* decap_rule);
  private:
  const ::aalyria::spacetime::api::common::TunnelRule_DecapRule& _internal_decap_rule() const;
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* _internal_mutable_decap_rule();
  public:
  void unsafe_arena_set_allocated_decap_rule(
      ::aalyria::spacetime::api::common::TunnelRule_DecapRule* decap_rule);
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* unsafe_arena_release_decap_rule();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TunnelRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::TunnelRule_EncapRule* encap_rule_;
    ::aalyria::spacetime::api::common::TunnelRule_DecapRule* decap_rule_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto;
};// -------------------------------------------------------------------

class TunnelStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TunnelStates) */ {
 public:
  inline TunnelStates() : TunnelStates(nullptr) {}
  ~TunnelStates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TunnelStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelStates(const TunnelStates& from);
  TunnelStates(TunnelStates&& from) noexcept
    : TunnelStates() {
    *this = ::std::move(from);
  }

  inline TunnelStates& operator=(const TunnelStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelStates& operator=(TunnelStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelStates* internal_default_instance() {
    return reinterpret_cast<const TunnelStates*>(
               &_TunnelStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TunnelStates& a, TunnelStates& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelStates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TunnelStates& from) {
    TunnelStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TunnelStates";
  }
  protected:
  explicit TunnelStates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelRuleIdsFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // repeated string tunnel_rule_ids = 3 [json_name = "tunnelRuleIds"];
  int tunnel_rule_ids_size() const;
  private:
  int _internal_tunnel_rule_ids_size() const;

  public:
  void clear_tunnel_rule_ids() ;
  const std::string& tunnel_rule_ids(int index) const;
  std::string* mutable_tunnel_rule_ids(int index);
  void set_tunnel_rule_ids(int index, const std::string& value);
  void set_tunnel_rule_ids(int index, std::string&& value);
  void set_tunnel_rule_ids(int index, const char* value);
  void set_tunnel_rule_ids(int index, const char* value, std::size_t size);
  void set_tunnel_rule_ids(int index, absl::string_view value);
  std::string* add_tunnel_rule_ids();
  void add_tunnel_rule_ids(const std::string& value);
  void add_tunnel_rule_ids(std::string&& value);
  void add_tunnel_rule_ids(const char* value);
  void add_tunnel_rule_ids(const char* value, std::size_t size);
  void add_tunnel_rule_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tunnel_rule_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tunnel_rule_ids();

  private:
  const std::string& _internal_tunnel_rule_ids(int index) const;
  std::string* _internal_add_tunnel_rule_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_tunnel_rule_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_tunnel_rule_ids();

  public:
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::aalyria::spacetime::api::common::DateTime& timestamp() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::DateTime* release_timestamp();
  ::aalyria::spacetime::api::common::DateTime* mutable_timestamp();
  void set_allocated_timestamp(::aalyria::spacetime::api::common::DateTime* timestamp);
  private:
  const ::aalyria::spacetime::api::common::DateTime& _internal_timestamp() const;
  ::aalyria::spacetime::api::common::DateTime* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::aalyria::spacetime::api::common::DateTime* timestamp);
  ::aalyria::spacetime::api::common::DateTime* unsafe_arena_release_timestamp();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TunnelStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tunnel_rule_ids_;
    ::aalyria::spacetime::api::common::DateTime* timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fcontrol_5ftunnel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TunnelUpdate

// optional string tunnel_rule_id = 1 [json_name = "tunnelRuleId"];
inline bool TunnelUpdate::has_tunnel_rule_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TunnelUpdate::clear_tunnel_rule_id() {
  _impl_.tunnel_rule_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TunnelUpdate::tunnel_rule_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id)
  return _internal_tunnel_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TunnelUpdate::set_tunnel_rule_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tunnel_rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id)
}
inline std::string* TunnelUpdate::mutable_tunnel_rule_id() {
  std::string* _s = _internal_mutable_tunnel_rule_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id)
  return _s;
}
inline const std::string& TunnelUpdate::_internal_tunnel_rule_id() const {
  return _impl_.tunnel_rule_id_.Get();
}
inline void TunnelUpdate::_internal_set_tunnel_rule_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.tunnel_rule_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TunnelUpdate::_internal_mutable_tunnel_rule_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tunnel_rule_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TunnelUpdate::release_tunnel_rule_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tunnel_rule_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tunnel_rule_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TunnelUpdate::set_allocated_tunnel_rule_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tunnel_rule_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tunnel_rule_id_.IsDefault()) {
          _impl_.tunnel_rule_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelUpdate.tunnel_rule_id)
}

// optional .aalyria.spacetime.api.common.TunnelUpdate.Operation operation = 2 [json_name = "operation"];
inline bool TunnelUpdate::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TunnelUpdate::clear_operation() {
  _impl_.operation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::aalyria::spacetime::api::common::TunnelUpdate_Operation TunnelUpdate::operation() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelUpdate.operation)
  return _internal_operation();
}
inline void TunnelUpdate::set_operation(::aalyria::spacetime::api::common::TunnelUpdate_Operation value) {
   _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelUpdate.operation)
}
inline ::aalyria::spacetime::api::common::TunnelUpdate_Operation TunnelUpdate::_internal_operation() const {
  return static_cast<::aalyria::spacetime::api::common::TunnelUpdate_Operation>(_impl_.operation_);
}
inline void TunnelUpdate::_internal_set_operation(::aalyria::spacetime::api::common::TunnelUpdate_Operation value) {
  assert(::aalyria::spacetime::api::common::TunnelUpdate_Operation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.operation_ = value;
}

// optional .aalyria.spacetime.api.common.TunnelRule rule = 3 [json_name = "rule"];
inline bool TunnelUpdate::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline void TunnelUpdate::clear_rule() {
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::common::TunnelRule& TunnelUpdate::_internal_rule() const {
  const ::aalyria::spacetime::api::common::TunnelRule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TunnelRule&>(
      ::aalyria::spacetime::api::common::_TunnelRule_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TunnelRule& TunnelUpdate::rule() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelUpdate.rule)
  return _internal_rule();
}
inline void TunnelUpdate::unsafe_arena_set_allocated_rule(
    ::aalyria::spacetime::api::common::TunnelRule* rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = rule;
  if (rule) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelUpdate.rule)
}
inline ::aalyria::spacetime::api::common::TunnelRule* TunnelUpdate::release_rule() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TunnelRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule* TunnelUpdate::unsafe_arena_release_rule() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelUpdate.rule)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TunnelRule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule* TunnelUpdate::_internal_mutable_rule() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule>(GetArenaForAllocation());
    _impl_.rule_ = p;
  }
  return _impl_.rule_;
}
inline ::aalyria::spacetime::api::common::TunnelRule* TunnelUpdate::mutable_rule() {
  ::aalyria::spacetime::api::common::TunnelRule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelUpdate.rule)
  return _msg;
}
inline void TunnelUpdate::set_allocated_rule(::aalyria::spacetime::api::common::TunnelRule* rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rule_;
  }
  if (rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rule);
    if (message_arena != submessage_arena) {
      rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rule_ = rule;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelUpdate.rule)
}

// optional int64 sequence_number = 4 [json_name = "sequenceNumber"];
inline bool TunnelUpdate::has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TunnelUpdate::clear_sequence_number() {
  _impl_.sequence_number_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TunnelUpdate::sequence_number() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelUpdate.sequence_number)
  return _internal_sequence_number();
}
inline void TunnelUpdate::set_sequence_number(::int64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelUpdate.sequence_number)
}
inline ::int64_t TunnelUpdate::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline void TunnelUpdate::_internal_set_sequence_number(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_number_ = value;
}

// -------------------------------------------------------------------

// TunnelRule_EncapRule

// optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
inline bool TunnelRule_EncapRule::has_classifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.classifier_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::PacketClassifier& TunnelRule_EncapRule::_internal_classifier() const {
  const ::aalyria::spacetime::api::common::PacketClassifier* p = _impl_.classifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::PacketClassifier&>(
      ::aalyria::spacetime::api::common::_PacketClassifier_default_instance_);
}
inline const ::aalyria::spacetime::api::common::PacketClassifier& TunnelRule_EncapRule::classifier() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier)
  return _internal_classifier();
}
inline void TunnelRule_EncapRule::unsafe_arena_set_allocated_classifier(
    ::aalyria::spacetime::api::common::PacketClassifier* classifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classifier_);
  }
  _impl_.classifier_ = classifier;
  if (classifier) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier)
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_EncapRule::release_classifier() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::PacketClassifier* temp = _impl_.classifier_;
  _impl_.classifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_EncapRule::unsafe_arena_release_classifier() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::PacketClassifier* temp = _impl_.classifier_;
  _impl_.classifier_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_EncapRule::_internal_mutable_classifier() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.classifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::PacketClassifier>(GetArenaForAllocation());
    _impl_.classifier_ = p;
  }
  return _impl_.classifier_;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_EncapRule::mutable_classifier() {
  ::aalyria::spacetime::api::common::PacketClassifier* _msg = _internal_mutable_classifier();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier)
  return _msg;
}
inline void TunnelRule_EncapRule::set_allocated_classifier(::aalyria::spacetime::api::common::PacketClassifier* classifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classifier_);
  }
  if (classifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classifier));
    if (message_arena != submessage_arena) {
      classifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.classifier_ = classifier;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.classifier)
}

// optional string encapsulated_src_ip = 2 [json_name = "encapsulatedSrcIp"];
inline bool TunnelRule_EncapRule::has_encapsulated_src_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TunnelRule_EncapRule::clear_encapsulated_src_ip() {
  _impl_.encapsulated_src_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TunnelRule_EncapRule::encapsulated_src_ip() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip)
  return _internal_encapsulated_src_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TunnelRule_EncapRule::set_encapsulated_src_ip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encapsulated_src_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip)
}
inline std::string* TunnelRule_EncapRule::mutable_encapsulated_src_ip() {
  std::string* _s = _internal_mutable_encapsulated_src_ip();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip)
  return _s;
}
inline const std::string& TunnelRule_EncapRule::_internal_encapsulated_src_ip() const {
  return _impl_.encapsulated_src_ip_.Get();
}
inline void TunnelRule_EncapRule::_internal_set_encapsulated_src_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.encapsulated_src_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* TunnelRule_EncapRule::_internal_mutable_encapsulated_src_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.encapsulated_src_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* TunnelRule_EncapRule::release_encapsulated_src_ip() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.encapsulated_src_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encapsulated_src_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TunnelRule_EncapRule::set_allocated_encapsulated_src_ip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.encapsulated_src_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encapsulated_src_ip_.IsDefault()) {
          _impl_.encapsulated_src_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_ip)
}

// optional string encapsulated_dst_ip = 3 [json_name = "encapsulatedDstIp"];
inline bool TunnelRule_EncapRule::has_encapsulated_dst_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TunnelRule_EncapRule::clear_encapsulated_dst_ip() {
  _impl_.encapsulated_dst_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TunnelRule_EncapRule::encapsulated_dst_ip() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip)
  return _internal_encapsulated_dst_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TunnelRule_EncapRule::set_encapsulated_dst_ip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.encapsulated_dst_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip)
}
inline std::string* TunnelRule_EncapRule::mutable_encapsulated_dst_ip() {
  std::string* _s = _internal_mutable_encapsulated_dst_ip();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip)
  return _s;
}
inline const std::string& TunnelRule_EncapRule::_internal_encapsulated_dst_ip() const {
  return _impl_.encapsulated_dst_ip_.Get();
}
inline void TunnelRule_EncapRule::_internal_set_encapsulated_dst_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.encapsulated_dst_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* TunnelRule_EncapRule::_internal_mutable_encapsulated_dst_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.encapsulated_dst_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* TunnelRule_EncapRule::release_encapsulated_dst_ip() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.encapsulated_dst_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encapsulated_dst_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TunnelRule_EncapRule::set_allocated_encapsulated_dst_ip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.encapsulated_dst_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encapsulated_dst_ip_.IsDefault()) {
          _impl_.encapsulated_dst_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_ip)
}

// optional int32 encapsulated_src_port = 4 [json_name = "encapsulatedSrcPort"];
inline bool TunnelRule_EncapRule::has_encapsulated_src_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TunnelRule_EncapRule::clear_encapsulated_src_port() {
  _impl_.encapsulated_src_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TunnelRule_EncapRule::encapsulated_src_port() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_port)
  return _internal_encapsulated_src_port();
}
inline void TunnelRule_EncapRule::set_encapsulated_src_port(::int32_t value) {
  _internal_set_encapsulated_src_port(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_src_port)
}
inline ::int32_t TunnelRule_EncapRule::_internal_encapsulated_src_port() const {
  return _impl_.encapsulated_src_port_;
}
inline void TunnelRule_EncapRule::_internal_set_encapsulated_src_port(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.encapsulated_src_port_ = value;
}

// optional int32 encapsulated_dst_port = 5 [json_name = "encapsulatedDstPort"];
inline bool TunnelRule_EncapRule::has_encapsulated_dst_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TunnelRule_EncapRule::clear_encapsulated_dst_port() {
  _impl_.encapsulated_dst_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t TunnelRule_EncapRule::encapsulated_dst_port() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_port)
  return _internal_encapsulated_dst_port();
}
inline void TunnelRule_EncapRule::set_encapsulated_dst_port(::int32_t value) {
  _internal_set_encapsulated_dst_port(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelRule.EncapRule.encapsulated_dst_port)
}
inline ::int32_t TunnelRule_EncapRule::_internal_encapsulated_dst_port() const {
  return _impl_.encapsulated_dst_port_;
}
inline void TunnelRule_EncapRule::_internal_set_encapsulated_dst_port(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.encapsulated_dst_port_ = value;
}

// .aalyria.spacetime.api.common.EspParameters esp = 6 [json_name = "esp"];
inline bool TunnelRule_EncapRule::has_esp() const {
  return parameters_case() == kEsp;
}
inline bool TunnelRule_EncapRule::_internal_has_esp() const {
  return parameters_case() == kEsp;
}
inline void TunnelRule_EncapRule::set_has_esp() {
  _impl_._oneof_case_[0] = kEsp;
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_EncapRule::release_esp() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
  if (parameters_case() == kEsp) {
    clear_has_parameters();
    ::aalyria::spacetime::api::common::EspParameters* temp = _impl_.parameters_.esp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.esp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::EspParameters& TunnelRule_EncapRule::_internal_esp() const {
  return parameters_case() == kEsp
      ? *_impl_.parameters_.esp_
      : reinterpret_cast<::aalyria::spacetime::api::common::EspParameters&>(::aalyria::spacetime::api::common::_EspParameters_default_instance_);
}
inline const ::aalyria::spacetime::api::common::EspParameters& TunnelRule_EncapRule::esp() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
  return _internal_esp();
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_EncapRule::unsafe_arena_release_esp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
  if (parameters_case() == kEsp) {
    clear_has_parameters();
    ::aalyria::spacetime::api::common::EspParameters* temp = _impl_.parameters_.esp_;
    _impl_.parameters_.esp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelRule_EncapRule::unsafe_arena_set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp) {
  clear_parameters();
  if (esp) {
    set_has_esp();
    _impl_.parameters_.esp_ = esp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_EncapRule::_internal_mutable_esp() {
  if (parameters_case() != kEsp) {
    clear_parameters();
    set_has_esp();
    _impl_.parameters_.esp_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::EspParameters >(GetArenaForAllocation());
  }
  return _impl_.parameters_.esp_;
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_EncapRule::mutable_esp() {
  ::aalyria::spacetime::api::common::EspParameters* _msg = _internal_mutable_esp();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.EncapRule.esp)
  return _msg;
}

inline bool TunnelRule_EncapRule::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void TunnelRule_EncapRule::clear_has_parameters() {
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline TunnelRule_EncapRule::ParametersCase TunnelRule_EncapRule::parameters_case() const {
  return TunnelRule_EncapRule::ParametersCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TunnelRule_DecapRule

// optional .aalyria.spacetime.api.common.PacketClassifier classifier = 1 [json_name = "classifier"];
inline bool TunnelRule_DecapRule::has_classifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.classifier_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::PacketClassifier& TunnelRule_DecapRule::_internal_classifier() const {
  const ::aalyria::spacetime::api::common::PacketClassifier* p = _impl_.classifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::PacketClassifier&>(
      ::aalyria::spacetime::api::common::_PacketClassifier_default_instance_);
}
inline const ::aalyria::spacetime::api::common::PacketClassifier& TunnelRule_DecapRule::classifier() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier)
  return _internal_classifier();
}
inline void TunnelRule_DecapRule::unsafe_arena_set_allocated_classifier(
    ::aalyria::spacetime::api::common::PacketClassifier* classifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classifier_);
  }
  _impl_.classifier_ = classifier;
  if (classifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier)
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_DecapRule::release_classifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::PacketClassifier* temp = _impl_.classifier_;
  _impl_.classifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_DecapRule::unsafe_arena_release_classifier() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::PacketClassifier* temp = _impl_.classifier_;
  _impl_.classifier_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_DecapRule::_internal_mutable_classifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.classifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::PacketClassifier>(GetArenaForAllocation());
    _impl_.classifier_ = p;
  }
  return _impl_.classifier_;
}
inline ::aalyria::spacetime::api::common::PacketClassifier* TunnelRule_DecapRule::mutable_classifier() {
  ::aalyria::spacetime::api::common::PacketClassifier* _msg = _internal_mutable_classifier();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier)
  return _msg;
}
inline void TunnelRule_DecapRule::set_allocated_classifier(::aalyria::spacetime::api::common::PacketClassifier* classifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classifier_);
  }
  if (classifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classifier));
    if (message_arena != submessage_arena) {
      classifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.classifier_ = classifier;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.DecapRule.classifier)
}

// .aalyria.spacetime.api.common.EspParameters esp = 2 [json_name = "esp"];
inline bool TunnelRule_DecapRule::has_esp() const {
  return parameters_case() == kEsp;
}
inline bool TunnelRule_DecapRule::_internal_has_esp() const {
  return parameters_case() == kEsp;
}
inline void TunnelRule_DecapRule::set_has_esp() {
  _impl_._oneof_case_[0] = kEsp;
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_DecapRule::release_esp() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
  if (parameters_case() == kEsp) {
    clear_has_parameters();
    ::aalyria::spacetime::api::common::EspParameters* temp = _impl_.parameters_.esp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.parameters_.esp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::EspParameters& TunnelRule_DecapRule::_internal_esp() const {
  return parameters_case() == kEsp
      ? *_impl_.parameters_.esp_
      : reinterpret_cast<::aalyria::spacetime::api::common::EspParameters&>(::aalyria::spacetime::api::common::_EspParameters_default_instance_);
}
inline const ::aalyria::spacetime::api::common::EspParameters& TunnelRule_DecapRule::esp() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
  return _internal_esp();
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_DecapRule::unsafe_arena_release_esp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
  if (parameters_case() == kEsp) {
    clear_has_parameters();
    ::aalyria::spacetime::api::common::EspParameters* temp = _impl_.parameters_.esp_;
    _impl_.parameters_.esp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelRule_DecapRule::unsafe_arena_set_allocated_esp(::aalyria::spacetime::api::common::EspParameters* esp) {
  clear_parameters();
  if (esp) {
    set_has_esp();
    _impl_.parameters_.esp_ = esp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_DecapRule::_internal_mutable_esp() {
  if (parameters_case() != kEsp) {
    clear_parameters();
    set_has_esp();
    _impl_.parameters_.esp_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::EspParameters >(GetArenaForAllocation());
  }
  return _impl_.parameters_.esp_;
}
inline ::aalyria::spacetime::api::common::EspParameters* TunnelRule_DecapRule::mutable_esp() {
  ::aalyria::spacetime::api::common::EspParameters* _msg = _internal_mutable_esp();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.DecapRule.esp)
  return _msg;
}

inline bool TunnelRule_DecapRule::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void TunnelRule_DecapRule::clear_has_parameters() {
  _impl_._oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline TunnelRule_DecapRule::ParametersCase TunnelRule_DecapRule::parameters_case() const {
  return TunnelRule_DecapRule::ParametersCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TunnelRule

// optional .aalyria.spacetime.api.common.TunnelRule.EncapRule encap_rule = 10 [json_name = "encapRule"];
inline bool TunnelRule::has_encap_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.encap_rule_ != nullptr);
  return value;
}
inline void TunnelRule::clear_encap_rule() {
  if (_impl_.encap_rule_ != nullptr) _impl_.encap_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::common::TunnelRule_EncapRule& TunnelRule::_internal_encap_rule() const {
  const ::aalyria::spacetime::api::common::TunnelRule_EncapRule* p = _impl_.encap_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TunnelRule_EncapRule&>(
      ::aalyria::spacetime::api::common::_TunnelRule_EncapRule_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TunnelRule_EncapRule& TunnelRule::encap_rule() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.encap_rule)
  return _internal_encap_rule();
}
inline void TunnelRule::unsafe_arena_set_allocated_encap_rule(
    ::aalyria::spacetime::api::common::TunnelRule_EncapRule* encap_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encap_rule_);
  }
  _impl_.encap_rule_ = encap_rule;
  if (encap_rule) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.encap_rule)
}
inline ::aalyria::spacetime::api::common::TunnelRule_EncapRule* TunnelRule::release_encap_rule() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* temp = _impl_.encap_rule_;
  _impl_.encap_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule_EncapRule* TunnelRule::unsafe_arena_release_encap_rule() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.encap_rule)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* temp = _impl_.encap_rule_;
  _impl_.encap_rule_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule_EncapRule* TunnelRule::_internal_mutable_encap_rule() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.encap_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule_EncapRule>(GetArenaForAllocation());
    _impl_.encap_rule_ = p;
  }
  return _impl_.encap_rule_;
}
inline ::aalyria::spacetime::api::common::TunnelRule_EncapRule* TunnelRule::mutable_encap_rule() {
  ::aalyria::spacetime::api::common::TunnelRule_EncapRule* _msg = _internal_mutable_encap_rule();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.encap_rule)
  return _msg;
}
inline void TunnelRule::set_allocated_encap_rule(::aalyria::spacetime::api::common::TunnelRule_EncapRule* encap_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encap_rule_;
  }
  if (encap_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encap_rule);
    if (message_arena != submessage_arena) {
      encap_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encap_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.encap_rule_ = encap_rule;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.encap_rule)
}

// optional .aalyria.spacetime.api.common.TunnelRule.DecapRule decap_rule = 11 [json_name = "decapRule"];
inline bool TunnelRule::has_decap_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decap_rule_ != nullptr);
  return value;
}
inline void TunnelRule::clear_decap_rule() {
  if (_impl_.decap_rule_ != nullptr) _impl_.decap_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::common::TunnelRule_DecapRule& TunnelRule::_internal_decap_rule() const {
  const ::aalyria::spacetime::api::common::TunnelRule_DecapRule* p = _impl_.decap_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TunnelRule_DecapRule&>(
      ::aalyria::spacetime::api::common::_TunnelRule_DecapRule_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TunnelRule_DecapRule& TunnelRule::decap_rule() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelRule.decap_rule)
  return _internal_decap_rule();
}
inline void TunnelRule::unsafe_arena_set_allocated_decap_rule(
    ::aalyria::spacetime::api::common::TunnelRule_DecapRule* decap_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decap_rule_);
  }
  _impl_.decap_rule_ = decap_rule;
  if (decap_rule) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelRule.decap_rule)
}
inline ::aalyria::spacetime::api::common::TunnelRule_DecapRule* TunnelRule::release_decap_rule() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* temp = _impl_.decap_rule_;
  _impl_.decap_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule_DecapRule* TunnelRule::unsafe_arena_release_decap_rule() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelRule.decap_rule)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* temp = _impl_.decap_rule_;
  _impl_.decap_rule_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TunnelRule_DecapRule* TunnelRule::_internal_mutable_decap_rule() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.decap_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TunnelRule_DecapRule>(GetArenaForAllocation());
    _impl_.decap_rule_ = p;
  }
  return _impl_.decap_rule_;
}
inline ::aalyria::spacetime::api::common::TunnelRule_DecapRule* TunnelRule::mutable_decap_rule() {
  ::aalyria::spacetime::api::common::TunnelRule_DecapRule* _msg = _internal_mutable_decap_rule();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelRule.decap_rule)
  return _msg;
}
inline void TunnelRule::set_allocated_decap_rule(::aalyria::spacetime::api::common::TunnelRule_DecapRule* decap_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.decap_rule_;
  }
  if (decap_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decap_rule);
    if (message_arena != submessage_arena) {
      decap_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decap_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.decap_rule_ = decap_rule;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelRule.decap_rule)
}

// -------------------------------------------------------------------

// TunnelStates

// optional .aalyria.spacetime.api.common.DateTime timestamp = 2 [json_name = "timestamp"];
inline bool TunnelStates::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::DateTime& TunnelStates::_internal_timestamp() const {
  const ::aalyria::spacetime::api::common::DateTime* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::DateTime&>(
      ::aalyria::spacetime::api::common::_DateTime_default_instance_);
}
inline const ::aalyria::spacetime::api::common::DateTime& TunnelStates::timestamp() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelStates.timestamp)
  return _internal_timestamp();
}
inline void TunnelStates::unsafe_arena_set_allocated_timestamp(
    ::aalyria::spacetime::api::common::DateTime* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TunnelStates.timestamp)
}
inline ::aalyria::spacetime::api::common::DateTime* TunnelStates::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TunnelStates::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TunnelStates.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::DateTime* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::DateTime* TunnelStates::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::DateTime>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::aalyria::spacetime::api::common::DateTime* TunnelStates::mutable_timestamp() {
  ::aalyria::spacetime::api::common::DateTime* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelStates.timestamp)
  return _msg;
}
inline void TunnelStates::set_allocated_timestamp(::aalyria::spacetime::api::common::DateTime* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TunnelStates.timestamp)
}

// repeated string tunnel_rule_ids = 3 [json_name = "tunnelRuleIds"];
inline int TunnelStates::_internal_tunnel_rule_ids_size() const {
  return _impl_.tunnel_rule_ids_.size();
}
inline int TunnelStates::tunnel_rule_ids_size() const {
  return _internal_tunnel_rule_ids_size();
}
inline void TunnelStates::clear_tunnel_rule_ids() {
  _internal_mutable_tunnel_rule_ids()->Clear();
}
inline std::string* TunnelStates::add_tunnel_rule_ids() {
  std::string* _s = _internal_add_tunnel_rule_ids();
  // @@protoc_insertion_point(field_add_mutable:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
  return _s;
}
inline const std::string& TunnelStates::tunnel_rule_ids(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
  return _internal_tunnel_rule_ids(index);
}
inline std::string* TunnelStates::mutable_tunnel_rule_ids(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
  return _internal_mutable_tunnel_rule_ids()->Mutable(index);
}
inline void TunnelStates::set_tunnel_rule_ids(int index, const std::string& value) {
  _internal_mutable_tunnel_rule_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::set_tunnel_rule_ids(int index, std::string&& value) {
  _internal_mutable_tunnel_rule_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::set_tunnel_rule_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tunnel_rule_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::set_tunnel_rule_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_tunnel_rule_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::set_tunnel_rule_ids(int index, absl::string_view value) {
  _internal_mutable_tunnel_rule_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::add_tunnel_rule_ids(const std::string& value) {
  _internal_mutable_tunnel_rule_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::add_tunnel_rule_ids(std::string&& value) {
  _internal_mutable_tunnel_rule_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::add_tunnel_rule_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tunnel_rule_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::add_tunnel_rule_ids(const char* value, std::size_t size) {
  _internal_mutable_tunnel_rule_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline void TunnelStates::add_tunnel_rule_ids(absl::string_view value) {
  _internal_mutable_tunnel_rule_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TunnelStates::tunnel_rule_ids() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
  return _internal_tunnel_rule_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TunnelStates::mutable_tunnel_rule_ids() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.TunnelStates.tunnel_rule_ids)
  return _internal_mutable_tunnel_rule_ids();
}
inline const std::string& TunnelStates::_internal_tunnel_rule_ids(int index) const {
  return _internal_tunnel_rule_ids().Get(index);
}
inline std::string* TunnelStates::_internal_add_tunnel_rule_ids() {
  return _internal_mutable_tunnel_rule_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TunnelStates::_internal_tunnel_rule_ids() const {
  return _impl_.tunnel_rule_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TunnelStates::_internal_mutable_tunnel_rule_ids() {
  return &_impl_.tunnel_rule_ids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::common::TunnelUpdate_Operation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::TunnelUpdate_Operation>() {
  return ::aalyria::spacetime::api::common::TunnelUpdate_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fcontrol_5ftunnel_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control_beam.proto

#include "api/common/control_beam.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR BeamUpdate::BeamUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.target_interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.beam_task_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.acquisition_info_)*/nullptr
  , /*decltype(_impl_.target_id_)*/nullptr
  , /*decltype(_impl_.establishment_timeout_)*/nullptr
  , /*decltype(_impl_.interface_id_)*/nullptr
  , /*decltype(_impl_.radio_config_)*/nullptr
  , /*decltype(_impl_.signal_info_)*/nullptr
  , /*decltype(_impl_.per_interface_sequence_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.operation_)*/ 0
} {}
struct BeamUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeamUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeamUpdateDefaultTypeInternal() {}
  union {
    BeamUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeamUpdateDefaultTypeInternal _BeamUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioConfig_Channel::RadioConfig_Channel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.center_frequency_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.channel_width_hz_)*/ ::uint64_t{0u}
} {}
struct RadioConfig_ChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioConfig_ChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioConfig_ChannelDefaultTypeInternal() {}
  union {
    RadioConfig_Channel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioConfig_ChannelDefaultTypeInternal _RadioConfig_Channel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioConfig::RadioConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modem_config_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_channel_)*/nullptr
  , /*decltype(_impl_.rx_channel_)*/nullptr} {}
struct RadioConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioConfigDefaultTypeInternal() {}
  union {
    RadioConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioConfigDefaultTypeInternal _RadioConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignalAcquisitionInfo::SignalAcquisitionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modeled_power_at_receiver_output_dbw_)*/ 0
} {}
struct SignalAcquisitionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalAcquisitionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalAcquisitionInfoDefaultTypeInternal() {}
  union {
    SignalAcquisitionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalAcquisitionInfoDefaultTypeInternal _SignalAcquisitionInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TargetAcquisitionInfo::TargetAcquisitionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.physical_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.adsb_transponder_)*/nullptr
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_.longitude_)*/ 0

  , /*decltype(_impl_.latitude_)*/ 0

  , /*decltype(_impl_.height_)*/ 0
} {}
struct TargetAcquisitionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetAcquisitionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetAcquisitionInfoDefaultTypeInternal() {}
  union {
    TargetAcquisitionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetAcquisitionInfoDefaultTypeInternal _TargetAcquisitionInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BeamTask::BeamTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.target_interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.target_id_)*/nullptr} {}
struct BeamTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeamTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeamTaskDefaultTypeInternal() {}
  union {
    BeamTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeamTaskDefaultTypeInternal _BeamTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BeamStates::BeamStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.beam_task_ids_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr} {}
struct BeamStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeamStatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeamStatesDefaultTypeInternal() {}
  union {
    BeamStates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeamStatesDefaultTypeInternal _BeamStates_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fcontrol_5fbeam_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fbeam_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fcontrol_5fbeam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.beam_task_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.source_interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.radio_config_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.target_interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.acquisition_info_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.signal_info_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.per_interface_sequence_number_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamUpdate, _impl_.establishment_timeout_),
    2,
    10,
    0,
    6,
    7,
    1,
    4,
    3,
    8,
    9,
    5,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig_Channel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig_Channel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig_Channel, _impl_.center_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig_Channel, _impl_.channel_width_hz_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig, _impl_.tx_channel_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig, _impl_.rx_channel_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioConfig, _impl_.modem_config_id_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SignalAcquisitionInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SignalAcquisitionInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SignalAcquisitionInfo, _impl_.modeled_power_at_receiver_output_dbw_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.coordinates_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.adsb_transponder_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TargetAcquisitionInfo, _impl_.physical_address_),
    3,
    4,
    5,
    2,
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamTask, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamTask, _impl_.interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamTask, _impl_.target_interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamTask, _impl_.target_id_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamStates, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamStates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamStates, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BeamStates, _impl_.beam_task_ids_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 19, -1, sizeof(::aalyria::spacetime::api::common::BeamUpdate)},
        { 30, 40, -1, sizeof(::aalyria::spacetime::api::common::RadioConfig_Channel)},
        { 42, 53, -1, sizeof(::aalyria::spacetime::api::common::RadioConfig)},
        { 56, 65, -1, sizeof(::aalyria::spacetime::api::common::SignalAcquisitionInfo)},
        { 66, 80, -1, sizeof(::aalyria::spacetime::api::common::TargetAcquisitionInfo)},
        { 86, 97, -1, sizeof(::aalyria::spacetime::api::common::BeamTask)},
        { 100, 110, -1, sizeof(::aalyria::spacetime::api::common::BeamStates)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_BeamUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioConfig_Channel_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioConfig_default_instance_._instance,
    &::aalyria::spacetime::api::common::_SignalAcquisitionInfo_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TargetAcquisitionInfo_default_instance_._instance,
    &::aalyria::spacetime::api::common::_BeamTask_default_instance_._instance,
    &::aalyria::spacetime::api::common::_BeamStates_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fcontrol_5fbeam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035api/common/control_beam.proto\022\034aalyria"
    ".spacetime.api.common\032\034api/common/coordi"
    "nates.proto\032\030api/common/network.proto\032\031a"
    "pi/common/platform.proto\032\025api/common/tim"
    "e.proto\032\036google/protobuf/duration.proto\""
    "\342\006\n\nBeamUpdate\022 \n\014beam_task_id\030\003 \001(\tR\nbe"
    "amTaskId\022P\n\toperation\030\004 \001(\01622.aalyria.sp"
    "acetime.api.common.BeamUpdate.OperationR"
    "\toperation\0222\n\023source_interface_id\030\001 \001(\tB"
    "\002\030\001R\021sourceInterfaceId\022S\n\014interface_id\030\n"
    " \001(\01320.aalyria.spacetime.api.common.Netw"
    "orkInterfaceIdR\013interfaceId\022L\n\014radio_con"
    "fig\030\013 \001(\0132).aalyria.spacetime.api.common"
    ".RadioConfigR\013radioConfig\0222\n\023target_inte"
    "rface_id\030\002 \001(\tB\002\030\001R\021targetInterfaceId\022M\n"
    "\ttarget_id\030\010 \001(\01320.aalyria.spacetime.api"
    ".common.NetworkInterfaceIdR\010targetId\022^\n\020"
    "acquisition_info\030\005 \001(\01323.aalyria.spaceti"
    "me.api.common.TargetAcquisitionInfoR\017acq"
    "uisitionInfo\022T\n\013signal_info\030\014 \001(\01323.aaly"
    "ria.spacetime.api.common.SignalAcquisiti"
    "onInfoR\nsignalInfo\022A\n\035per_interface_sequ"
    "ence_number\030\007 \001(\003R\032perInterfaceSequenceN"
    "umber\022N\n\025establishment_timeout\030\t \001(\0132\031.g"
    "oogle.protobuf.DurationR\024establishmentTi"
    "meout\"-\n\tOperation\022\013\n\007UNKNOWN\020\000\022\007\n\003ADD\020\001"
    "\022\n\n\006DELETE\020\002J\010\010\r\020\200\200\200\200\002J\004\010\006\020\007\"\276\002\n\013RadioCo"
    "nfig\022P\n\ntx_channel\030\001 \001(\01321.aalyria.space"
    "time.api.common.RadioConfig.ChannelR\ttxC"
    "hannel\022P\n\nrx_channel\030\002 \001(\01321.aalyria.spa"
    "cetime.api.common.RadioConfig.ChannelR\tr"
    "xChannel\022&\n\017modem_config_id\030\003 \001(\tR\rmodem"
    "ConfigId\032c\n\007Channel\022.\n\023center_frequency_"
    "hz\030\001 \001(\004R\021centerFrequencyHz\022(\n\020channel_w"
    "idth_hz\030\002 \001(\004R\016channelWidthHz\"f\n\025SignalA"
    "cquisitionInfo\022M\n$modeled_power_at_recei"
    "ver_output_dbw\030\001 \001(\001R\037modeledPowerAtRece"
    "iverOutputDbw\"\360\002\n\025TargetAcquisitionInfo\022"
    " \n\tlongitude\030\003 \001(\001B\002\030\001R\tlongitude\022\036\n\010lat"
    "itude\030\004 \001(\001B\002\030\001R\010latitude\022\032\n\006height\030\005 \001("
    "\001B\002\030\001R\006height\022F\n\013coordinates\030\014 \001(\0132$.aal"
    "yria.spacetime.api.common.MotionR\013coordi"
    "nates\022X\n\020adsb_transponder\030\t \001(\0132-.aalyri"
    "a.spacetime.api.common.AdsbTransponderR\017"
    "adsbTransponder\022)\n\020physical_address\030\n \001("
    "\014R\017physicalAddressJ\004\010\001\020\002J\004\010\002\020\003J\004\010\006\020\007J\004\010\007"
    "\020\010J\004\010\010\020\tJ\004\010\013\020\014J\010\010\r\020\200\200\200\200\002\"\272\001\n\010BeamTask\022!\n"
    "\014interface_id\030\001 \001(\tR\013interfaceId\0222\n\023targ"
    "et_interface_id\030\002 \001(\tB\002\030\001R\021targetInterfa"
    "ceId\022M\n\ttarget_id\030\003 \001(\01320.aalyria.spacet"
    "ime.api.common.NetworkInterfaceIdR\010targe"
    "tIdJ\010\010\004\020\200\200\200\200\002\"\214\001\n\nBeamStates\022D\n\ttimestam"
    "p\030\003 \001(\0132&.aalyria.spacetime.api.common.D"
    "ateTimeR\ttimestamp\022\"\n\rbeam_task_ids\030\004 \003("
    "\tR\013beamTaskIdsJ\004\010\001\020\002J\004\010\002\020\003J\010\010\005\020\200\200\200\200\002BD\n "
    "com.aalyria.spacetime.api.commonZ aalyri"
    "a.com/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_deps[5] =
    {
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2fnetwork_2eproto,
        &::descriptor_table_api_2fcommon_2fplatform_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto = {
    false,
    false,
    2266,
    descriptor_table_protodef_api_2fcommon_2fcontrol_5fbeam_2eproto,
    "api/common/control_beam.proto",
    &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
    descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_deps,
    5,
    7,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fcontrol_5fbeam_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fcontrol_5fbeam_2eproto,
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fbeam_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fcontrol_5fbeam_2eproto(&descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamUpdate_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fbeam_2eproto[0];
}
bool BeamUpdate_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BeamUpdate_Operation BeamUpdate::UNKNOWN;
constexpr BeamUpdate_Operation BeamUpdate::ADD;
constexpr BeamUpdate_Operation BeamUpdate::DELETE;
constexpr BeamUpdate_Operation BeamUpdate::Operation_MIN;
constexpr BeamUpdate_Operation BeamUpdate::Operation_MAX;
constexpr int BeamUpdate::Operation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class BeamUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<BeamUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BeamUpdate, _impl_._has_bits_);
  static void set_has_beam_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_source_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& interface_id(const BeamUpdate* msg);
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::aalyria::spacetime::api::common::RadioConfig& radio_config(const BeamUpdate* msg);
  static void set_has_radio_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_target_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& target_id(const BeamUpdate* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aalyria::spacetime::api::common::TargetAcquisitionInfo& acquisition_info(const BeamUpdate* msg);
  static void set_has_acquisition_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::SignalAcquisitionInfo& signal_info(const BeamUpdate* msg);
  static void set_has_signal_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_per_interface_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& establishment_timeout(const BeamUpdate* msg);
  static void set_has_establishment_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
BeamUpdate::_Internal::interface_id(const BeamUpdate* msg) {
  return *msg->_impl_.interface_id_;
}
const ::aalyria::spacetime::api::common::RadioConfig&
BeamUpdate::_Internal::radio_config(const BeamUpdate* msg) {
  return *msg->_impl_.radio_config_;
}
const ::aalyria::spacetime::api::common::NetworkInterfaceId&
BeamUpdate::_Internal::target_id(const BeamUpdate* msg) {
  return *msg->_impl_.target_id_;
}
const ::aalyria::spacetime::api::common::TargetAcquisitionInfo&
BeamUpdate::_Internal::acquisition_info(const BeamUpdate* msg) {
  return *msg->_impl_.acquisition_info_;
}
const ::aalyria::spacetime::api::common::SignalAcquisitionInfo&
BeamUpdate::_Internal::signal_info(const BeamUpdate* msg) {
  return *msg->_impl_.signal_info_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
BeamUpdate::_Internal::establishment_timeout(const BeamUpdate* msg) {
  return *msg->_impl_.establishment_timeout_;
}
void BeamUpdate::clear_interface_id() {
  if (_impl_.interface_id_ != nullptr) _impl_.interface_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void BeamUpdate::clear_target_id() {
  if (_impl_.target_id_ != nullptr) _impl_.target_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void BeamUpdate::clear_establishment_timeout() {
  if (_impl_.establishment_timeout_ != nullptr) _impl_.establishment_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
BeamUpdate::BeamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.BeamUpdate)
}
BeamUpdate::BeamUpdate(const BeamUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeamUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_interface_id_) {}

    , decltype(_impl_.target_interface_id_) {}

    , decltype(_impl_.beam_task_id_) {}

    , decltype(_impl_.acquisition_info_){nullptr}
    , decltype(_impl_.target_id_){nullptr}
    , decltype(_impl_.establishment_timeout_){nullptr}
    , decltype(_impl_.interface_id_){nullptr}
    , decltype(_impl_.radio_config_){nullptr}
    , decltype(_impl_.signal_info_){nullptr}
    , decltype(_impl_.per_interface_sequence_number_) {}

    , decltype(_impl_.operation_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.source_interface_id_.Set(from._internal_source_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.target_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.target_interface_id_.Set(from._internal_target_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.beam_task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.beam_task_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.beam_task_id_.Set(from._internal_beam_task_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.acquisition_info_ = new ::aalyria::spacetime::api::common::TargetAcquisitionInfo(*from._impl_.acquisition_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.target_id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.target_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.establishment_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.establishment_timeout_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.interface_id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.interface_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.radio_config_ = new ::aalyria::spacetime::api::common::RadioConfig(*from._impl_.radio_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.signal_info_ = new ::aalyria::spacetime::api::common::SignalAcquisitionInfo(*from._impl_.signal_info_);
  }
  ::memcpy(&_impl_.per_interface_sequence_number_, &from._impl_.per_interface_sequence_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.per_interface_sequence_number_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.BeamUpdate)
}

inline void BeamUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_interface_id_) {}

    , decltype(_impl_.target_interface_id_) {}

    , decltype(_impl_.beam_task_id_) {}

    , decltype(_impl_.acquisition_info_){nullptr}
    , decltype(_impl_.target_id_){nullptr}
    , decltype(_impl_.establishment_timeout_){nullptr}
    , decltype(_impl_.interface_id_){nullptr}
    , decltype(_impl_.radio_config_){nullptr}
    , decltype(_impl_.signal_info_){nullptr}
    , decltype(_impl_.per_interface_sequence_number_) { ::int64_t{0} }

    , decltype(_impl_.operation_) { 0 }

  };
  _impl_.source_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.beam_task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.beam_task_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BeamUpdate::~BeamUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.BeamUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeamUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_interface_id_.Destroy();
  _impl_.target_interface_id_.Destroy();
  _impl_.beam_task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.acquisition_info_;
  if (this != internal_default_instance()) delete _impl_.target_id_;
  if (this != internal_default_instance()) delete _impl_.establishment_timeout_;
  if (this != internal_default_instance()) delete _impl_.interface_id_;
  if (this != internal_default_instance()) delete _impl_.radio_config_;
  if (this != internal_default_instance()) delete _impl_.signal_info_;
}

void BeamUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeamUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.BeamUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.beam_task_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.acquisition_info_ != nullptr);
      _impl_.acquisition_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.target_id_ != nullptr);
      _impl_.target_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.establishment_timeout_ != nullptr);
      _impl_.establishment_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.interface_id_ != nullptr);
      _impl_.interface_id_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.radio_config_ != nullptr);
      _impl_.radio_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.signal_info_ != nullptr);
    _impl_.signal_info_->Clear();
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&_impl_.per_interface_sequence_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.operation_) -
        reinterpret_cast<char*>(&_impl_.per_interface_sequence_number_)) + sizeof(_impl_.operation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeamUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_interface_id = 1 [json_name = "sourceInterfaceId", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamUpdate.source_interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamUpdate.target_interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string beam_task_id = 3 [json_name = "beamTaskId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_beam_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamUpdate.beam_task_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.BeamUpdate.Operation operation = 4 [json_name = "operation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::BeamUpdate_Operation_IsValid(static_cast<int>(val)))) {
            _internal_set_operation(static_cast<::aalyria::spacetime::api::common::BeamUpdate_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TargetAcquisitionInfo acquisition_info = 5 [json_name = "acquisitionInfo"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 per_interface_sequence_number = 7 [json_name = "perInterfaceSequenceNumber"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_per_interface_sequence_number(&has_bits);
          _impl_.per_interface_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 8 [json_name = "targetId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Duration establishment_timeout = 9 [json_name = "establishmentTimeout"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_establishment_timeout(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 10 [json_name = "interfaceId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.RadioConfig radio_config = 11 [json_name = "radioConfig"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.SignalAcquisitionInfo signal_info = 12 [json_name = "signalInfo"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BeamUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.BeamUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source_interface_id = 1 [json_name = "sourceInterfaceId", deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_source_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamUpdate.source_interface_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_target_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamUpdate.target_interface_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string beam_task_id = 3 [json_name = "beamTaskId"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_beam_task_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamUpdate.beam_task_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .aalyria.spacetime.api.common.BeamUpdate.Operation operation = 4 [json_name = "operation"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_operation(), target);
  }

  // optional .aalyria.spacetime.api.common.TargetAcquisitionInfo acquisition_info = 5 [json_name = "acquisitionInfo"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acquisition_info(this),
        _Internal::acquisition_info(this).GetCachedSize(), target, stream);
  }

  // optional int64 per_interface_sequence_number = 7 [json_name = "perInterfaceSequenceNumber"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_per_interface_sequence_number(), target);
  }

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 8 [json_name = "targetId"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::target_id(this),
        _Internal::target_id(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration establishment_timeout = 9 [json_name = "establishmentTimeout"];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::establishment_timeout(this),
        _Internal::establishment_timeout(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 10 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::interface_id(this),
        _Internal::interface_id(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.RadioConfig radio_config = 11 [json_name = "radioConfig"];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::radio_config(this),
        _Internal::radio_config(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.SignalAcquisitionInfo signal_info = 12 [json_name = "signalInfo"];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::signal_info(this),
        _Internal::signal_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.BeamUpdate)
  return target;
}

::size_t BeamUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.BeamUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source_interface_id = 1 [json_name = "sourceInterfaceId", deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_source_interface_id());
    }

    // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_target_interface_id());
    }

    // optional string beam_task_id = 3 [json_name = "beamTaskId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_beam_task_id());
    }

    // optional .aalyria.spacetime.api.common.TargetAcquisitionInfo acquisition_info = 5 [json_name = "acquisitionInfo"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acquisition_info_);
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 8 [json_name = "targetId"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_id_);
    }

    // optional .google.protobuf.Duration establishment_timeout = 9 [json_name = "establishmentTimeout"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.establishment_timeout_);
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 10 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interface_id_);
    }

    // optional .aalyria.spacetime.api.common.RadioConfig radio_config = 11 [json_name = "radioConfig"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radio_config_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .aalyria.spacetime.api.common.SignalAcquisitionInfo signal_info = 12 [json_name = "signalInfo"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_info_);
    }

    // optional int64 per_interface_sequence_number = 7 [json_name = "perInterfaceSequenceNumber"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_per_interface_sequence_number());
    }

    // optional .aalyria.spacetime.api.common.BeamUpdate.Operation operation = 4 [json_name = "operation"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeamUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeamUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeamUpdate::GetClassData() const { return &_class_data_; }


void BeamUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeamUpdate*>(&to_msg);
  auto& from = static_cast<const BeamUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.BeamUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_interface_id(from._internal_source_interface_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_target_interface_id(from._internal_target_interface_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_beam_task_id(from._internal_beam_task_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_acquisition_info()->::aalyria::spacetime::api::common::TargetAcquisitionInfo::MergeFrom(
          from._internal_acquisition_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_target_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_target_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_establishment_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_establishment_timeout());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_interface_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_interface_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_radio_config()->::aalyria::spacetime::api::common::RadioConfig::MergeFrom(
          from._internal_radio_config());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_signal_info()->::aalyria::spacetime::api::common::SignalAcquisitionInfo::MergeFrom(
          from._internal_signal_info());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.per_interface_sequence_number_ = from._impl_.per_interface_sequence_number_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeamUpdate::CopyFrom(const BeamUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.BeamUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamUpdate::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.acquisition_info_->IsInitialized()) return false;
  }
  return true;
}

void BeamUpdate::InternalSwap(BeamUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_interface_id_, lhs_arena,
                                       &other->_impl_.source_interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_interface_id_, lhs_arena,
                                       &other->_impl_.target_interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.beam_task_id_, lhs_arena,
                                       &other->_impl_.beam_task_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeamUpdate, _impl_.operation_)
      + sizeof(BeamUpdate::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(BeamUpdate, _impl_.acquisition_info_)>(
          reinterpret_cast<char*>(&_impl_.acquisition_info_),
          reinterpret_cast<char*>(&other->_impl_.acquisition_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BeamUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[0]);
}
// ===================================================================

class RadioConfig_Channel::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioConfig_Channel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioConfig_Channel, _impl_._has_bits_);
  static void set_has_center_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_width_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RadioConfig_Channel::RadioConfig_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.RadioConfig.Channel)
}
RadioConfig_Channel::RadioConfig_Channel(const RadioConfig_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.RadioConfig.Channel)
}

inline void RadioConfig_Channel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_frequency_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.channel_width_hz_) { ::uint64_t{0u} }

  };
}

RadioConfig_Channel::~RadioConfig_Channel() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.RadioConfig.Channel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioConfig_Channel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadioConfig_Channel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioConfig_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.RadioConfig.Channel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.center_frequency_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_width_hz_) -
        reinterpret_cast<char*>(&_impl_.center_frequency_hz_)) + sizeof(_impl_.channel_width_hz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioConfig_Channel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_center_frequency_hz(&has_bits);
          _impl_.center_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_width_hz(&has_bits);
          _impl_.channel_width_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioConfig_Channel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.RadioConfig.Channel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_center_frequency_hz(), target);
  }

  // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_channel_width_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.RadioConfig.Channel)
  return target;
}

::size_t RadioConfig_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.RadioConfig.Channel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_center_frequency_hz());
    }

    // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_channel_width_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioConfig_Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioConfig_Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioConfig_Channel::GetClassData() const { return &_class_data_; }


void RadioConfig_Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioConfig_Channel*>(&to_msg);
  auto& from = static_cast<const RadioConfig_Channel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.RadioConfig.Channel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_width_hz_ = from._impl_.channel_width_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioConfig_Channel::CopyFrom(const RadioConfig_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.RadioConfig.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioConfig_Channel::IsInitialized() const {
  return true;
}

void RadioConfig_Channel::InternalSwap(RadioConfig_Channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioConfig_Channel, _impl_.channel_width_hz_)
      + sizeof(RadioConfig_Channel::_impl_.channel_width_hz_)
      - PROTOBUF_FIELD_OFFSET(RadioConfig_Channel, _impl_.center_frequency_hz_)>(
          reinterpret_cast<char*>(&_impl_.center_frequency_hz_),
          reinterpret_cast<char*>(&other->_impl_.center_frequency_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioConfig_Channel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[1]);
}
// ===================================================================

class RadioConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioConfig, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::RadioConfig_Channel& tx_channel(const RadioConfig* msg);
  static void set_has_tx_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::RadioConfig_Channel& rx_channel(const RadioConfig* msg);
  static void set_has_rx_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modem_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::RadioConfig_Channel&
RadioConfig::_Internal::tx_channel(const RadioConfig* msg) {
  return *msg->_impl_.tx_channel_;
}
const ::aalyria::spacetime::api::common::RadioConfig_Channel&
RadioConfig::_Internal::rx_channel(const RadioConfig* msg) {
  return *msg->_impl_.rx_channel_;
}
RadioConfig::RadioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.RadioConfig)
}
RadioConfig::RadioConfig(const RadioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modem_config_id_) {}

    , decltype(_impl_.tx_channel_){nullptr}
    , decltype(_impl_.rx_channel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modem_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modem_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.modem_config_id_.Set(from._internal_modem_config_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.tx_channel_ = new ::aalyria::spacetime::api::common::RadioConfig_Channel(*from._impl_.tx_channel_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.rx_channel_ = new ::aalyria::spacetime::api::common::RadioConfig_Channel(*from._impl_.rx_channel_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.RadioConfig)
}

inline void RadioConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modem_config_id_) {}

    , decltype(_impl_.tx_channel_){nullptr}
    , decltype(_impl_.rx_channel_){nullptr}
  };
  _impl_.modem_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modem_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadioConfig::~RadioConfig() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.RadioConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modem_config_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_channel_;
  if (this != internal_default_instance()) delete _impl_.rx_channel_;
}

void RadioConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.RadioConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.modem_config_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tx_channel_ != nullptr);
      _impl_.tx_channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rx_channel_ != nullptr);
      _impl_.rx_channel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.RadioConfig.Channel tx_channel = 1 [json_name = "txChannel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.RadioConfig.Channel rx_channel = 2 [json_name = "rxChannel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string modem_config_id = 3 [json_name = "modemConfigId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_modem_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.RadioConfig.modem_config_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.RadioConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.RadioConfig.Channel tx_channel = 1 [json_name = "txChannel"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx_channel(this),
        _Internal::tx_channel(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.RadioConfig.Channel rx_channel = 2 [json_name = "rxChannel"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rx_channel(this),
        _Internal::rx_channel(this).GetCachedSize(), target, stream);
  }

  // optional string modem_config_id = 3 [json_name = "modemConfigId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_modem_config_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.RadioConfig.modem_config_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.RadioConfig)
  return target;
}

::size_t RadioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.RadioConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string modem_config_id = 3 [json_name = "modemConfigId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_modem_config_id());
    }

    // optional .aalyria.spacetime.api.common.RadioConfig.Channel tx_channel = 1 [json_name = "txChannel"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_channel_);
    }

    // optional .aalyria.spacetime.api.common.RadioConfig.Channel rx_channel = 2 [json_name = "rxChannel"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rx_channel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioConfig::GetClassData() const { return &_class_data_; }


void RadioConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioConfig*>(&to_msg);
  auto& from = static_cast<const RadioConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.RadioConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_modem_config_id(from._internal_modem_config_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tx_channel()->::aalyria::spacetime::api::common::RadioConfig_Channel::MergeFrom(
          from._internal_tx_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rx_channel()->::aalyria::spacetime::api::common::RadioConfig_Channel::MergeFrom(
          from._internal_rx_channel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioConfig::CopyFrom(const RadioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.RadioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioConfig::IsInitialized() const {
  return true;
}

void RadioConfig::InternalSwap(RadioConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modem_config_id_, lhs_arena,
                                       &other->_impl_.modem_config_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioConfig, _impl_.rx_channel_)
      + sizeof(RadioConfig::_impl_.rx_channel_)
      - PROTOBUF_FIELD_OFFSET(RadioConfig, _impl_.tx_channel_)>(
          reinterpret_cast<char*>(&_impl_.tx_channel_),
          reinterpret_cast<char*>(&other->_impl_.tx_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[2]);
}
// ===================================================================

class SignalAcquisitionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalAcquisitionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignalAcquisitionInfo, _impl_._has_bits_);
  static void set_has_modeled_power_at_receiver_output_dbw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SignalAcquisitionInfo::SignalAcquisitionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.SignalAcquisitionInfo)
}
SignalAcquisitionInfo::SignalAcquisitionInfo(const SignalAcquisitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.SignalAcquisitionInfo)
}

inline void SignalAcquisitionInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modeled_power_at_receiver_output_dbw_) { 0 }

  };
}

SignalAcquisitionInfo::~SignalAcquisitionInfo() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalAcquisitionInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalAcquisitionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalAcquisitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modeled_power_at_receiver_output_dbw_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalAcquisitionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double modeled_power_at_receiver_output_dbw = 1 [json_name = "modeledPowerAtReceiverOutputDbw"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_modeled_power_at_receiver_output_dbw(&has_bits);
          _impl_.modeled_power_at_receiver_output_dbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignalAcquisitionInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double modeled_power_at_receiver_output_dbw = 1 [json_name = "modeledPowerAtReceiverOutputDbw"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_modeled_power_at_receiver_output_dbw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  return target;
}

::size_t SignalAcquisitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double modeled_power_at_receiver_output_dbw = 1 [json_name = "modeledPowerAtReceiverOutputDbw"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalAcquisitionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalAcquisitionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalAcquisitionInfo::GetClassData() const { return &_class_data_; }


void SignalAcquisitionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalAcquisitionInfo*>(&to_msg);
  auto& from = static_cast<const SignalAcquisitionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_modeled_power_at_receiver_output_dbw(from._internal_modeled_power_at_receiver_output_dbw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalAcquisitionInfo::CopyFrom(const SignalAcquisitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.SignalAcquisitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalAcquisitionInfo::IsInitialized() const {
  return true;
}

void SignalAcquisitionInfo::InternalSwap(SignalAcquisitionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.modeled_power_at_receiver_output_dbw_, other->_impl_.modeled_power_at_receiver_output_dbw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalAcquisitionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[3]);
}
// ===================================================================

class TargetAcquisitionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetAcquisitionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TargetAcquisitionInfo, _impl_._has_bits_);
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aalyria::spacetime::api::common::Motion& coordinates(const TargetAcquisitionInfo* msg);
  static void set_has_coordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::AdsbTransponder& adsb_transponder(const TargetAcquisitionInfo* msg);
  static void set_has_adsb_transponder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_physical_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::Motion&
TargetAcquisitionInfo::_Internal::coordinates(const TargetAcquisitionInfo* msg) {
  return *msg->_impl_.coordinates_;
}
const ::aalyria::spacetime::api::common::AdsbTransponder&
TargetAcquisitionInfo::_Internal::adsb_transponder(const TargetAcquisitionInfo* msg) {
  return *msg->_impl_.adsb_transponder_;
}
void TargetAcquisitionInfo::clear_coordinates() {
  if (_impl_.coordinates_ != nullptr) _impl_.coordinates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TargetAcquisitionInfo::clear_adsb_transponder() {
  if (_impl_.adsb_transponder_ != nullptr) _impl_.adsb_transponder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TargetAcquisitionInfo::TargetAcquisitionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TargetAcquisitionInfo)
}
TargetAcquisitionInfo::TargetAcquisitionInfo(const TargetAcquisitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetAcquisitionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.physical_address_) {}

    , decltype(_impl_.adsb_transponder_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.longitude_) {}

    , decltype(_impl_.latitude_) {}

    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.physical_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.physical_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.physical_address_.Set(from._internal_physical_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.adsb_transponder_ = new ::aalyria::spacetime::api::common::AdsbTransponder(*from._impl_.adsb_transponder_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.coordinates_ = new ::aalyria::spacetime::api::common::Motion(*from._impl_.coordinates_);
  }
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TargetAcquisitionInfo)
}

inline void TargetAcquisitionInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.physical_address_) {}

    , decltype(_impl_.adsb_transponder_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.longitude_) { 0 }

    , decltype(_impl_.latitude_) { 0 }

    , decltype(_impl_.height_) { 0 }

  };
  _impl_.physical_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.physical_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TargetAcquisitionInfo::~TargetAcquisitionInfo() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetAcquisitionInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.physical_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.adsb_transponder_;
  if (this != internal_default_instance()) delete _impl_.coordinates_;
}

void TargetAcquisitionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetAcquisitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.physical_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.adsb_transponder_ != nullptr);
      _impl_.adsb_transponder_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.coordinates_ != nullptr);
      _impl_.coordinates_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.longitude_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetAcquisitionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double longitude = 3 [json_name = "longitude", deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double latitude = 4 [json_name = "latitude", deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double height = 5 [json_name = "height", deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 9 [json_name = "adsbTransponder"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_adsb_transponder(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes physical_address = 10 [json_name = "physicalAddress"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_physical_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Motion coordinates = 12 [json_name = "coordinates"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TargetAcquisitionInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double longitude = 3 [json_name = "longitude", deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_longitude(), target);
  }

  // optional double latitude = 4 [json_name = "latitude", deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_latitude(), target);
  }

  // optional double height = 5 [json_name = "height", deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_height(), target);
  }

  // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 9 [json_name = "adsbTransponder"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::adsb_transponder(this),
        _Internal::adsb_transponder(this).GetCachedSize(), target, stream);
  }

  // optional bytes physical_address = 10 [json_name = "physicalAddress"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_physical_address();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // optional .aalyria.spacetime.api.common.Motion coordinates = 12 [json_name = "coordinates"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  return target;
}

::size_t TargetAcquisitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes physical_address = 10 [json_name = "physicalAddress"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_physical_address());
    }

    // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 9 [json_name = "adsbTransponder"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adsb_transponder_);
    }

    // optional .aalyria.spacetime.api.common.Motion coordinates = 12 [json_name = "coordinates"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coordinates_);
    }

    // optional double longitude = 3 [json_name = "longitude", deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double latitude = 4 [json_name = "latitude", deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double height = 5 [json_name = "height", deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetAcquisitionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetAcquisitionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetAcquisitionInfo::GetClassData() const { return &_class_data_; }


void TargetAcquisitionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetAcquisitionInfo*>(&to_msg);
  auto& from = static_cast<const TargetAcquisitionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_physical_address(from._internal_physical_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_adsb_transponder()->::aalyria::spacetime::api::common::AdsbTransponder::MergeFrom(
          from._internal_adsb_transponder());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_coordinates()->::aalyria::spacetime::api::common::Motion::MergeFrom(
          from._internal_coordinates());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.longitude_ = from._impl_.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetAcquisitionInfo::CopyFrom(const TargetAcquisitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TargetAcquisitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetAcquisitionInfo::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.coordinates_->IsInitialized()) return false;
  }
  return true;
}

void TargetAcquisitionInfo::InternalSwap(TargetAcquisitionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.physical_address_, lhs_arena,
                                       &other->_impl_.physical_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetAcquisitionInfo, _impl_.height_)
      + sizeof(TargetAcquisitionInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(TargetAcquisitionInfo, _impl_.adsb_transponder_)>(
          reinterpret_cast<char*>(&_impl_.adsb_transponder_),
          reinterpret_cast<char*>(&other->_impl_.adsb_transponder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetAcquisitionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[4]);
}
// ===================================================================

class BeamTask::_Internal {
 public:
  using HasBits = decltype(std::declval<BeamTask>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BeamTask, _impl_._has_bits_);
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& target_id(const BeamTask* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
BeamTask::_Internal::target_id(const BeamTask* msg) {
  return *msg->_impl_.target_id_;
}
void BeamTask::clear_target_id() {
  if (_impl_.target_id_ != nullptr) _impl_.target_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BeamTask::BeamTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.BeamTask)
}
BeamTask::BeamTask(const BeamTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeamTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.target_interface_id_) {}

    , decltype(_impl_.target_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.target_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.target_interface_id_.Set(from._internal_target_interface_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.target_id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.target_id_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.BeamTask)
}

inline void BeamTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.target_interface_id_) {}

    , decltype(_impl_.target_id_){nullptr}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BeamTask::~BeamTask() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.BeamTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeamTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
  _impl_.target_interface_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_id_;
}

void BeamTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeamTask::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.BeamTask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_id_ != nullptr);
      _impl_.target_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeamTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_id = 1 [json_name = "interfaceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamTask.interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamTask.target_interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 3 [json_name = "targetId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BeamTask::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.BeamTask)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string interface_id = 1 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamTask.interface_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_target_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamTask.target_interface_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 3 [json_name = "targetId"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target_id(this),
        _Internal::target_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.BeamTask)
  return target;
}

::size_t BeamTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.BeamTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string interface_id = 1 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_interface_id());
    }

    // optional string target_interface_id = 2 [json_name = "targetInterfaceId", deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_target_interface_id());
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId target_id = 3 [json_name = "targetId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeamTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeamTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeamTask::GetClassData() const { return &_class_data_; }


void BeamTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeamTask*>(&to_msg);
  auto& from = static_cast<const BeamTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.BeamTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface_id(from._internal_interface_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_target_interface_id(from._internal_target_interface_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_target_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeamTask::CopyFrom(const BeamTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.BeamTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamTask::IsInitialized() const {
  return true;
}

void BeamTask::InternalSwap(BeamTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_id_, lhs_arena,
                                       &other->_impl_.interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_interface_id_, lhs_arena,
                                       &other->_impl_.target_interface_id_, rhs_arena);
  swap(_impl_.target_id_, other->_impl_.target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeamTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[5]);
}
// ===================================================================

class BeamStates::_Internal {
 public:
  using HasBits = decltype(std::declval<BeamStates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BeamStates, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const BeamStates* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
BeamStates::_Internal::timestamp(const BeamStates* msg) {
  return *msg->_impl_.timestamp_;
}
void BeamStates::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BeamStates::BeamStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.BeamStates)
}
BeamStates::BeamStates(const BeamStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeamStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.beam_task_ids_){from._impl_.beam_task_ids_}
    , decltype(_impl_.timestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.BeamStates)
}

inline void BeamStates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.beam_task_ids_){arena}
    , decltype(_impl_.timestamp_){nullptr}
  };
}

BeamStates::~BeamStates() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.BeamStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeamStates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_beam_task_ids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void BeamStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeamStates::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.BeamStates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_beam_task_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeamStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string beam_task_ids = 4 [json_name = "beamTaskIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_beam_task_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.BeamStates.beam_task_ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BeamStates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.BeamStates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated string beam_task_ids = 4 [json_name = "beamTaskIds"];
  for (int i = 0, n = this->_internal_beam_task_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_beam_task_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.BeamStates.beam_task_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.BeamStates)
  return target;
}

::size_t BeamStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.BeamStates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string beam_task_ids = 4 [json_name = "beamTaskIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_beam_task_ids().size());
  for (int i = 0, n = _internal_beam_task_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_beam_task_ids().Get(i));
  }

  // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeamStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeamStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeamStates::GetClassData() const { return &_class_data_; }


void BeamStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeamStates*>(&to_msg);
  auto& from = static_cast<const BeamStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.BeamStates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beam_task_ids()->MergeFrom(from._internal_beam_task_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeamStates::CopyFrom(const BeamStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.BeamStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamStates::IsInitialized() const {
  return true;
}

void BeamStates::InternalSwap(BeamStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_beam_task_ids()->InternalSwap(
      other->_internal_mutable_beam_task_ids());
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeamStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fbeam_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fbeam_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::BeamUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::BeamUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::BeamUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioConfig_Channel*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioConfig_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioConfig_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioConfig*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::SignalAcquisitionInfo*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::SignalAcquisitionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::SignalAcquisitionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TargetAcquisitionInfo*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TargetAcquisitionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TargetAcquisitionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::BeamTask*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::BeamTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::BeamTask >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::BeamStates*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::BeamStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::BeamStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

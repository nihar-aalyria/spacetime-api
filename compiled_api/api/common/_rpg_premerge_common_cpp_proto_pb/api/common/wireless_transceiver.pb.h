// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_transceiver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransceiver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransceiver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/common/platform_antenna.pb.h"
#include "api/common/wireless_receiver.pb.h"
#include "api/common/wireless_transmitter.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fwireless_5ftransceiver_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class CenterFrequencySpacing;
struct CenterFrequencySpacingDefaultTypeInternal;
extern CenterFrequencySpacingDefaultTypeInternal _CenterFrequencySpacing_default_instance_;
class TransceiverModel;
struct TransceiverModelDefaultTypeInternal;
extern TransceiverModelDefaultTypeInternal _TransceiverModel_default_instance_;
class TransceiverModelId;
struct TransceiverModelIdDefaultTypeInternal;
extern TransceiverModelIdDefaultTypeInternal _TransceiverModelId_default_instance_;
class TransceiverModel_Impairment;
struct TransceiverModel_ImpairmentDefaultTypeInternal;
extern TransceiverModel_ImpairmentDefaultTypeInternal _TransceiverModel_Impairment_default_instance_;
class WirelessMac;
struct WirelessMacDefaultTypeInternal;
extern WirelessMacDefaultTypeInternal _WirelessMac_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::CenterFrequencySpacing* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::CenterFrequencySpacing>(Arena*);
template <>
::aalyria::spacetime::api::common::TransceiverModel* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModel>(Arena*);
template <>
::aalyria::spacetime::api::common::TransceiverModelId* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModelId>(Arena*);
template <>
::aalyria::spacetime::api::common::TransceiverModel_Impairment* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModel_Impairment>(Arena*);
template <>
::aalyria::spacetime::api::common::WirelessMac* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::WirelessMac>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class TransceiverModel_Impairment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TransceiverModel.Impairment) */ {
 public:
  inline TransceiverModel_Impairment() : TransceiverModel_Impairment(nullptr) {}
  ~TransceiverModel_Impairment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransceiverModel_Impairment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransceiverModel_Impairment(const TransceiverModel_Impairment& from);
  TransceiverModel_Impairment(TransceiverModel_Impairment&& from) noexcept
    : TransceiverModel_Impairment() {
    *this = ::std::move(from);
  }

  inline TransceiverModel_Impairment& operator=(const TransceiverModel_Impairment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiverModel_Impairment& operator=(TransceiverModel_Impairment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransceiverModel_Impairment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransceiverModel_Impairment* internal_default_instance() {
    return reinterpret_cast<const TransceiverModel_Impairment*>(
               &_TransceiverModel_Impairment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransceiverModel_Impairment& a, TransceiverModel_Impairment& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiverModel_Impairment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransceiverModel_Impairment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransceiverModel_Impairment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransceiverModel_Impairment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransceiverModel_Impairment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransceiverModel_Impairment& from) {
    TransceiverModel_Impairment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiverModel_Impairment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TransceiverModel.Impairment";
  }
  protected:
  explicit TransceiverModel_Impairment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReasonFieldNumber = 4,
    kTimestampUsecFieldNumber = 3,
  };
  // optional string id = 1 [json_name = "id"];
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // optional string reason = 4 [json_name = "reason"];
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* ptr);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
  bool has_timestamp_usec() const;
  void clear_timestamp_usec() ;
  ::int64_t timestamp_usec() const;
  void set_timestamp_usec(::int64_t value);

  private:
  ::int64_t _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TransceiverModel.Impairment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::int64_t timestamp_usec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto;
};// -------------------------------------------------------------------

class TransceiverModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TransceiverModel) */ {
 public:
  inline TransceiverModel() : TransceiverModel(nullptr) {}
  ~TransceiverModel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransceiverModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransceiverModel(const TransceiverModel& from);
  TransceiverModel(TransceiverModel&& from) noexcept
    : TransceiverModel() {
    *this = ::std::move(from);
  }

  inline TransceiverModel& operator=(const TransceiverModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiverModel& operator=(TransceiverModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransceiverModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransceiverModel* internal_default_instance() {
    return reinterpret_cast<const TransceiverModel*>(
               &_TransceiverModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransceiverModel& a, TransceiverModel& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiverModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransceiverModel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransceiverModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransceiverModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransceiverModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransceiverModel& from) {
    TransceiverModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiverModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TransceiverModel";
  }
  protected:
  explicit TransceiverModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransceiverModel_Impairment Impairment;

  // accessors -------------------------------------------------------

  enum : int {
    kMacsFieldNumber = 6,
    kOperationalImpairmentsFieldNumber = 7,
    kIdFieldNumber = 1,
    kTransmitterFieldNumber = 2,
    kReceiverFieldNumber = 3,
    kTxRxChannelSpacingFieldNumber = 4,
    kAntennaFieldNumber = 5,
  };
  // repeated .aalyria.spacetime.api.common.WirelessMac macs = 6 [json_name = "macs"];
  int macs_size() const;
  private:
  int _internal_macs_size() const;

  public:
  void clear_macs() ;
  ::aalyria::spacetime::api::common::WirelessMac* mutable_macs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WirelessMac >*
      mutable_macs();
  private:
  const ::aalyria::spacetime::api::common::WirelessMac& _internal_macs(int index) const;
  ::aalyria::spacetime::api::common::WirelessMac* _internal_add_macs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WirelessMac>& _internal_macs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WirelessMac>* _internal_mutable_macs();
  public:
  const ::aalyria::spacetime::api::common::WirelessMac& macs(int index) const;
  ::aalyria::spacetime::api::common::WirelessMac* add_macs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WirelessMac >&
      macs() const;
  // repeated .aalyria.spacetime.api.common.TransceiverModel.Impairment operational_impairments = 7 [json_name = "operationalImpairments"];
  int operational_impairments_size() const;
  private:
  int _internal_operational_impairments_size() const;

  public:
  void clear_operational_impairments() ;
  ::aalyria::spacetime::api::common::TransceiverModel_Impairment* mutable_operational_impairments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >*
      mutable_operational_impairments();
  private:
  const ::aalyria::spacetime::api::common::TransceiverModel_Impairment& _internal_operational_impairments(int index) const;
  ::aalyria::spacetime::api::common::TransceiverModel_Impairment* _internal_add_operational_impairments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel_Impairment>& _internal_operational_impairments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel_Impairment>* _internal_mutable_operational_impairments();
  public:
  const ::aalyria::spacetime::api::common::TransceiverModel_Impairment& operational_impairments(int index) const;
  ::aalyria::spacetime::api::common::TransceiverModel_Impairment* add_operational_impairments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >&
      operational_impairments() const;
  // optional string id = 1 [json_name = "id"];
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // optional .aalyria.spacetime.api.common.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
  bool has_transmitter() const;
  void clear_transmitter() ;
  const ::aalyria::spacetime::api::common::TransmitterDefinition& transmitter() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TransmitterDefinition* release_transmitter();
  ::aalyria::spacetime::api::common::TransmitterDefinition* mutable_transmitter();
  void set_allocated_transmitter(::aalyria::spacetime::api::common::TransmitterDefinition* transmitter);
  private:
  const ::aalyria::spacetime::api::common::TransmitterDefinition& _internal_transmitter() const;
  ::aalyria::spacetime::api::common::TransmitterDefinition* _internal_mutable_transmitter();
  public:
  void unsafe_arena_set_allocated_transmitter(
      ::aalyria::spacetime::api::common::TransmitterDefinition* transmitter);
  ::aalyria::spacetime::api::common::TransmitterDefinition* unsafe_arena_release_transmitter();
  // optional .aalyria.spacetime.api.common.ReceiverDefinition receiver = 3 [json_name = "receiver"];
  bool has_receiver() const;
  void clear_receiver() ;
  const ::aalyria::spacetime::api::common::ReceiverDefinition& receiver() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::ReceiverDefinition* release_receiver();
  ::aalyria::spacetime::api::common::ReceiverDefinition* mutable_receiver();
  void set_allocated_receiver(::aalyria::spacetime::api::common::ReceiverDefinition* receiver);
  private:
  const ::aalyria::spacetime::api::common::ReceiverDefinition& _internal_receiver() const;
  ::aalyria::spacetime::api::common::ReceiverDefinition* _internal_mutable_receiver();
  public:
  void unsafe_arena_set_allocated_receiver(
      ::aalyria::spacetime::api::common::ReceiverDefinition* receiver);
  ::aalyria::spacetime::api::common::ReceiverDefinition* unsafe_arena_release_receiver();
  // optional .aalyria.spacetime.api.common.CenterFrequencySpacing tx_rx_channel_spacing = 4 [json_name = "txRxChannelSpacing"];
  bool has_tx_rx_channel_spacing() const;
  void clear_tx_rx_channel_spacing() ;
  const ::aalyria::spacetime::api::common::CenterFrequencySpacing& tx_rx_channel_spacing() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::CenterFrequencySpacing* release_tx_rx_channel_spacing();
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* mutable_tx_rx_channel_spacing();
  void set_allocated_tx_rx_channel_spacing(::aalyria::spacetime::api::common::CenterFrequencySpacing* tx_rx_channel_spacing);
  private:
  const ::aalyria::spacetime::api::common::CenterFrequencySpacing& _internal_tx_rx_channel_spacing() const;
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* _internal_mutable_tx_rx_channel_spacing();
  public:
  void unsafe_arena_set_allocated_tx_rx_channel_spacing(
      ::aalyria::spacetime::api::common::CenterFrequencySpacing* tx_rx_channel_spacing);
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* unsafe_arena_release_tx_rx_channel_spacing();
  // optional .aalyria.spacetime.api.common.AntennaDefinition antenna = 5 [json_name = "antenna"];
  bool has_antenna() const;
  void clear_antenna() ;
  const ::aalyria::spacetime::api::common::AntennaDefinition& antenna() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AntennaDefinition* release_antenna();
  ::aalyria::spacetime::api::common::AntennaDefinition* mutable_antenna();
  void set_allocated_antenna(::aalyria::spacetime::api::common::AntennaDefinition* antenna);
  private:
  const ::aalyria::spacetime::api::common::AntennaDefinition& _internal_antenna() const;
  ::aalyria::spacetime::api::common::AntennaDefinition* _internal_mutable_antenna();
  public:
  void unsafe_arena_set_allocated_antenna(
      ::aalyria::spacetime::api::common::AntennaDefinition* antenna);
  ::aalyria::spacetime::api::common::AntennaDefinition* unsafe_arena_release_antenna();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TransceiverModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WirelessMac > macs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel_Impairment > operational_impairments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::aalyria::spacetime::api::common::TransmitterDefinition* transmitter_;
    ::aalyria::spacetime::api::common::ReceiverDefinition* receiver_;
    ::aalyria::spacetime::api::common::CenterFrequencySpacing* tx_rx_channel_spacing_;
    ::aalyria::spacetime::api::common::AntennaDefinition* antenna_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto;
};// -------------------------------------------------------------------

class TransceiverModelId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.TransceiverModelId) */ {
 public:
  inline TransceiverModelId() : TransceiverModelId(nullptr) {}
  ~TransceiverModelId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransceiverModelId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransceiverModelId(const TransceiverModelId& from);
  TransceiverModelId(TransceiverModelId&& from) noexcept
    : TransceiverModelId() {
    *this = ::std::move(from);
  }

  inline TransceiverModelId& operator=(const TransceiverModelId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiverModelId& operator=(TransceiverModelId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransceiverModelId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransceiverModelId* internal_default_instance() {
    return reinterpret_cast<const TransceiverModelId*>(
               &_TransceiverModelId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransceiverModelId& a, TransceiverModelId& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiverModelId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransceiverModelId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransceiverModelId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransceiverModelId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransceiverModelId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransceiverModelId& from) {
    TransceiverModelId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiverModelId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.TransceiverModelId";
  }
  protected:
  explicit TransceiverModelId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformIdFieldNumber = 1,
    kTransceiverModelIdFieldNumber = 2,
  };
  // optional string platform_id = 1 [json_name = "platformId"];
  bool has_platform_id() const;
  void clear_platform_id() ;
  const std::string& platform_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform_id(Arg_&& arg, Args_... args);
  std::string* mutable_platform_id();
  PROTOBUF_NODISCARD std::string* release_platform_id();
  void set_allocated_platform_id(std::string* ptr);

  private:
  const std::string& _internal_platform_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform_id(
      const std::string& value);
  std::string* _internal_mutable_platform_id();

  public:
  // optional string transceiver_model_id = 2 [json_name = "transceiverModelId"];
  bool has_transceiver_model_id() const;
  void clear_transceiver_model_id() ;
  const std::string& transceiver_model_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transceiver_model_id(Arg_&& arg, Args_... args);
  std::string* mutable_transceiver_model_id();
  PROTOBUF_NODISCARD std::string* release_transceiver_model_id();
  void set_allocated_transceiver_model_id(std::string* ptr);

  private:
  const std::string& _internal_transceiver_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transceiver_model_id(
      const std::string& value);
  std::string* _internal_mutable_transceiver_model_id();

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.TransceiverModelId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transceiver_model_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto;
};// -------------------------------------------------------------------

class CenterFrequencySpacing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.CenterFrequencySpacing) */ {
 public:
  inline CenterFrequencySpacing() : CenterFrequencySpacing(nullptr) {}
  ~CenterFrequencySpacing() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CenterFrequencySpacing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CenterFrequencySpacing(const CenterFrequencySpacing& from);
  CenterFrequencySpacing(CenterFrequencySpacing&& from) noexcept
    : CenterFrequencySpacing() {
    *this = ::std::move(from);
  }

  inline CenterFrequencySpacing& operator=(const CenterFrequencySpacing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CenterFrequencySpacing& operator=(CenterFrequencySpacing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CenterFrequencySpacing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CenterFrequencySpacing* internal_default_instance() {
    return reinterpret_cast<const CenterFrequencySpacing*>(
               &_CenterFrequencySpacing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CenterFrequencySpacing& a, CenterFrequencySpacing& b) {
    a.Swap(&b);
  }
  inline void Swap(CenterFrequencySpacing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CenterFrequencySpacing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CenterFrequencySpacing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CenterFrequencySpacing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CenterFrequencySpacing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CenterFrequencySpacing& from) {
    CenterFrequencySpacing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CenterFrequencySpacing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.CenterFrequencySpacing";
  }
  protected:
  explicit CenterFrequencySpacing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinCenterFrequencySpacingHzFieldNumber = 1,
    kMaxCenterFrequencySpacingHzFieldNumber = 2,
  };
  // optional uint64 min_center_frequency_spacing_hz = 1 [json_name = "minCenterFrequencySpacingHz"];
  bool has_min_center_frequency_spacing_hz() const;
  void clear_min_center_frequency_spacing_hz() ;
  ::uint64_t min_center_frequency_spacing_hz() const;
  void set_min_center_frequency_spacing_hz(::uint64_t value);

  private:
  ::uint64_t _internal_min_center_frequency_spacing_hz() const;
  void _internal_set_min_center_frequency_spacing_hz(::uint64_t value);

  public:
  // optional uint64 max_center_frequency_spacing_hz = 2 [json_name = "maxCenterFrequencySpacingHz"];
  bool has_max_center_frequency_spacing_hz() const;
  void clear_max_center_frequency_spacing_hz() ;
  ::uint64_t max_center_frequency_spacing_hz() const;
  void set_max_center_frequency_spacing_hz(::uint64_t value);

  private:
  ::uint64_t _internal_max_center_frequency_spacing_hz() const;
  void _internal_set_max_center_frequency_spacing_hz(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.CenterFrequencySpacing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t min_center_frequency_spacing_hz_;
    ::uint64_t max_center_frequency_spacing_hz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto;
};// -------------------------------------------------------------------

class WirelessMac final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.WirelessMac) */ {
 public:
  inline WirelessMac() : WirelessMac(nullptr) {}
  ~WirelessMac() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WirelessMac(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WirelessMac(const WirelessMac& from);
  WirelessMac(WirelessMac&& from) noexcept
    : WirelessMac() {
    *this = ::std::move(from);
  }

  inline WirelessMac& operator=(const WirelessMac& from) {
    CopyFrom(from);
    return *this;
  }
  inline WirelessMac& operator=(WirelessMac&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WirelessMac& default_instance() {
    return *internal_default_instance();
  }
  static inline const WirelessMac* internal_default_instance() {
    return reinterpret_cast<const WirelessMac*>(
               &_WirelessMac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WirelessMac& a, WirelessMac& b) {
    a.Swap(&b);
  }
  inline void Swap(WirelessMac* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WirelessMac* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WirelessMac* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WirelessMac>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WirelessMac& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WirelessMac& from) {
    WirelessMac::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WirelessMac* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.WirelessMac";
  }
  protected:
  explicit WirelessMac(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRoleFieldNumber = 2,
    kMaxConnectionsFieldNumber = 3,
  };
  // optional string type = 1 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string role = 2 [json_name = "role"];
  bool has_role() const;
  void clear_role() ;
  const std::string& role() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* ptr);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // optional int32 max_connections = 3 [json_name = "maxConnections"];
  bool has_max_connections() const;
  void clear_max_connections() ;
  ::int32_t max_connections() const;
  void set_max_connections(::int32_t value);

  private:
  ::int32_t _internal_max_connections() const;
  void _internal_set_max_connections(::int32_t value);

  public:
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<WirelessMac, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.WirelessMac)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::int32_t max_connections_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_5ftransceiver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransceiverModel_Impairment

// optional string id = 1 [json_name = "id"];
inline bool TransceiverModel_Impairment::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransceiverModel_Impairment::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransceiverModel_Impairment::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.Impairment.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransceiverModel_Impairment::set_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModel.Impairment.id)
}
inline std::string* TransceiverModel_Impairment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.Impairment.id)
  return _s;
}
inline const std::string& TransceiverModel_Impairment::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TransceiverModel_Impairment::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransceiverModel_Impairment::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* TransceiverModel_Impairment::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.Impairment.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransceiverModel_Impairment::set_allocated_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.Impairment.id)
}

// optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
inline bool TransceiverModel_Impairment::has_timestamp_usec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TransceiverModel_Impairment::clear_timestamp_usec() {
  _impl_.timestamp_usec_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TransceiverModel_Impairment::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.Impairment.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void TransceiverModel_Impairment::set_timestamp_usec(::int64_t value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModel.Impairment.timestamp_usec)
}
inline ::int64_t TransceiverModel_Impairment::_internal_timestamp_usec() const {
  return _impl_.timestamp_usec_;
}
inline void TransceiverModel_Impairment::_internal_set_timestamp_usec(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_usec_ = value;
}

// optional string reason = 4 [json_name = "reason"];
inline bool TransceiverModel_Impairment::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TransceiverModel_Impairment::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransceiverModel_Impairment::reason() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.Impairment.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransceiverModel_Impairment::set_reason(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModel.Impairment.reason)
}
inline std::string* TransceiverModel_Impairment::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.Impairment.reason)
  return _s;
}
inline const std::string& TransceiverModel_Impairment::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void TransceiverModel_Impairment::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* TransceiverModel_Impairment::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reason_.Mutable( GetArenaForAllocation());
}
inline std::string* TransceiverModel_Impairment::release_reason() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.Impairment.reason)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransceiverModel_Impairment::set_allocated_reason(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.Impairment.reason)
}

// -------------------------------------------------------------------

// TransceiverModel

// optional string id = 1 [json_name = "id"];
inline bool TransceiverModel::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransceiverModel::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransceiverModel::id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransceiverModel::set_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModel.id)
}
inline std::string* TransceiverModel::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.id)
  return _s;
}
inline const std::string& TransceiverModel::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TransceiverModel::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransceiverModel::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* TransceiverModel::release_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransceiverModel::set_allocated_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.id)
}

// optional .aalyria.spacetime.api.common.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
inline bool TransceiverModel::has_transmitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transmitter_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TransmitterDefinition& TransceiverModel::_internal_transmitter() const {
  const ::aalyria::spacetime::api::common::TransmitterDefinition* p = _impl_.transmitter_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TransmitterDefinition&>(
      ::aalyria::spacetime::api::common::_TransmitterDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TransmitterDefinition& TransceiverModel::transmitter() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.transmitter)
  return _internal_transmitter();
}
inline void TransceiverModel::unsafe_arena_set_allocated_transmitter(
    ::aalyria::spacetime::api::common::TransmitterDefinition* transmitter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmitter_);
  }
  _impl_.transmitter_ = transmitter;
  if (transmitter) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransceiverModel.transmitter)
}
inline ::aalyria::spacetime::api::common::TransmitterDefinition* TransceiverModel::release_transmitter() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TransmitterDefinition* temp = _impl_.transmitter_;
  _impl_.transmitter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TransmitterDefinition* TransceiverModel::unsafe_arena_release_transmitter() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.transmitter)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TransmitterDefinition* temp = _impl_.transmitter_;
  _impl_.transmitter_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TransmitterDefinition* TransceiverModel::_internal_mutable_transmitter() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transmitter_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TransmitterDefinition>(GetArenaForAllocation());
    _impl_.transmitter_ = p;
  }
  return _impl_.transmitter_;
}
inline ::aalyria::spacetime::api::common::TransmitterDefinition* TransceiverModel::mutable_transmitter() {
  ::aalyria::spacetime::api::common::TransmitterDefinition* _msg = _internal_mutable_transmitter();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.transmitter)
  return _msg;
}
inline void TransceiverModel::set_allocated_transmitter(::aalyria::spacetime::api::common::TransmitterDefinition* transmitter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmitter_);
  }
  if (transmitter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmitter));
    if (message_arena != submessage_arena) {
      transmitter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmitter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transmitter_ = transmitter;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.transmitter)
}

// optional .aalyria.spacetime.api.common.ReceiverDefinition receiver = 3 [json_name = "receiver"];
inline bool TransceiverModel::has_receiver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.receiver_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::ReceiverDefinition& TransceiverModel::_internal_receiver() const {
  const ::aalyria::spacetime::api::common::ReceiverDefinition* p = _impl_.receiver_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::ReceiverDefinition&>(
      ::aalyria::spacetime::api::common::_ReceiverDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::ReceiverDefinition& TransceiverModel::receiver() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.receiver)
  return _internal_receiver();
}
inline void TransceiverModel::unsafe_arena_set_allocated_receiver(
    ::aalyria::spacetime::api::common::ReceiverDefinition* receiver) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiver_);
  }
  _impl_.receiver_ = receiver;
  if (receiver) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransceiverModel.receiver)
}
inline ::aalyria::spacetime::api::common::ReceiverDefinition* TransceiverModel::release_receiver() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::ReceiverDefinition* temp = _impl_.receiver_;
  _impl_.receiver_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::ReceiverDefinition* TransceiverModel::unsafe_arena_release_receiver() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.receiver)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::ReceiverDefinition* temp = _impl_.receiver_;
  _impl_.receiver_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::ReceiverDefinition* TransceiverModel::_internal_mutable_receiver() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.receiver_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::ReceiverDefinition>(GetArenaForAllocation());
    _impl_.receiver_ = p;
  }
  return _impl_.receiver_;
}
inline ::aalyria::spacetime::api::common::ReceiverDefinition* TransceiverModel::mutable_receiver() {
  ::aalyria::spacetime::api::common::ReceiverDefinition* _msg = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.receiver)
  return _msg;
}
inline void TransceiverModel::set_allocated_receiver(::aalyria::spacetime::api::common::ReceiverDefinition* receiver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiver_);
  }
  if (receiver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver));
    if (message_arena != submessage_arena) {
      receiver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.receiver_ = receiver;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.receiver)
}

// optional .aalyria.spacetime.api.common.CenterFrequencySpacing tx_rx_channel_spacing = 4 [json_name = "txRxChannelSpacing"];
inline bool TransceiverModel::has_tx_rx_channel_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_rx_channel_spacing_ != nullptr);
  return value;
}
inline void TransceiverModel::clear_tx_rx_channel_spacing() {
  if (_impl_.tx_rx_channel_spacing_ != nullptr) _impl_.tx_rx_channel_spacing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::aalyria::spacetime::api::common::CenterFrequencySpacing& TransceiverModel::_internal_tx_rx_channel_spacing() const {
  const ::aalyria::spacetime::api::common::CenterFrequencySpacing* p = _impl_.tx_rx_channel_spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::CenterFrequencySpacing&>(
      ::aalyria::spacetime::api::common::_CenterFrequencySpacing_default_instance_);
}
inline const ::aalyria::spacetime::api::common::CenterFrequencySpacing& TransceiverModel::tx_rx_channel_spacing() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.tx_rx_channel_spacing)
  return _internal_tx_rx_channel_spacing();
}
inline void TransceiverModel::unsafe_arena_set_allocated_tx_rx_channel_spacing(
    ::aalyria::spacetime::api::common::CenterFrequencySpacing* tx_rx_channel_spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_rx_channel_spacing_);
  }
  _impl_.tx_rx_channel_spacing_ = tx_rx_channel_spacing;
  if (tx_rx_channel_spacing) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransceiverModel.tx_rx_channel_spacing)
}
inline ::aalyria::spacetime::api::common::CenterFrequencySpacing* TransceiverModel::release_tx_rx_channel_spacing() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* temp = _impl_.tx_rx_channel_spacing_;
  _impl_.tx_rx_channel_spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::CenterFrequencySpacing* TransceiverModel::unsafe_arena_release_tx_rx_channel_spacing() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.tx_rx_channel_spacing)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* temp = _impl_.tx_rx_channel_spacing_;
  _impl_.tx_rx_channel_spacing_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::CenterFrequencySpacing* TransceiverModel::_internal_mutable_tx_rx_channel_spacing() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tx_rx_channel_spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::CenterFrequencySpacing>(GetArenaForAllocation());
    _impl_.tx_rx_channel_spacing_ = p;
  }
  return _impl_.tx_rx_channel_spacing_;
}
inline ::aalyria::spacetime::api::common::CenterFrequencySpacing* TransceiverModel::mutable_tx_rx_channel_spacing() {
  ::aalyria::spacetime::api::common::CenterFrequencySpacing* _msg = _internal_mutable_tx_rx_channel_spacing();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.tx_rx_channel_spacing)
  return _msg;
}
inline void TransceiverModel::set_allocated_tx_rx_channel_spacing(::aalyria::spacetime::api::common::CenterFrequencySpacing* tx_rx_channel_spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tx_rx_channel_spacing_;
  }
  if (tx_rx_channel_spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tx_rx_channel_spacing);
    if (message_arena != submessage_arena) {
      tx_rx_channel_spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_rx_channel_spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tx_rx_channel_spacing_ = tx_rx_channel_spacing;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.tx_rx_channel_spacing)
}

// optional .aalyria.spacetime.api.common.AntennaDefinition antenna = 5 [json_name = "antenna"];
inline bool TransceiverModel::has_antenna() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.antenna_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::AntennaDefinition& TransceiverModel::_internal_antenna() const {
  const ::aalyria::spacetime::api::common::AntennaDefinition* p = _impl_.antenna_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::AntennaDefinition&>(
      ::aalyria::spacetime::api::common::_AntennaDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AntennaDefinition& TransceiverModel::antenna() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.antenna)
  return _internal_antenna();
}
inline void TransceiverModel::unsafe_arena_set_allocated_antenna(
    ::aalyria::spacetime::api::common::AntennaDefinition* antenna) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antenna_);
  }
  _impl_.antenna_ = antenna;
  if (antenna) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.TransceiverModel.antenna)
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* TransceiverModel::release_antenna() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::common::AntennaDefinition* temp = _impl_.antenna_;
  _impl_.antenna_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* TransceiverModel::unsafe_arena_release_antenna() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModel.antenna)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::common::AntennaDefinition* temp = _impl_.antenna_;
  _impl_.antenna_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* TransceiverModel::_internal_mutable_antenna() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.antenna_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::AntennaDefinition>(GetArenaForAllocation());
    _impl_.antenna_ = p;
  }
  return _impl_.antenna_;
}
inline ::aalyria::spacetime::api::common::AntennaDefinition* TransceiverModel::mutable_antenna() {
  ::aalyria::spacetime::api::common::AntennaDefinition* _msg = _internal_mutable_antenna();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.antenna)
  return _msg;
}
inline void TransceiverModel::set_allocated_antenna(::aalyria::spacetime::api::common::AntennaDefinition* antenna) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antenna_);
  }
  if (antenna) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antenna));
    if (message_arena != submessage_arena) {
      antenna = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antenna, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.antenna_ = antenna;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModel.antenna)
}

// repeated .aalyria.spacetime.api.common.WirelessMac macs = 6 [json_name = "macs"];
inline int TransceiverModel::_internal_macs_size() const {
  return _impl_.macs_.size();
}
inline int TransceiverModel::macs_size() const {
  return _internal_macs_size();
}
inline void TransceiverModel::clear_macs() {
  _internal_mutable_macs()->Clear();
}
inline ::aalyria::spacetime::api::common::WirelessMac* TransceiverModel::mutable_macs(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.macs)
  return _internal_mutable_macs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WirelessMac >*
TransceiverModel::mutable_macs() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.TransceiverModel.macs)
  return _internal_mutable_macs();
}
inline const ::aalyria::spacetime::api::common::WirelessMac& TransceiverModel::_internal_macs(int index) const {
  return _internal_macs().Get(index);
}
inline const ::aalyria::spacetime::api::common::WirelessMac& TransceiverModel::macs(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.macs)
  return _internal_macs(index);
}
inline ::aalyria::spacetime::api::common::WirelessMac* TransceiverModel::_internal_add_macs() {
  return _internal_mutable_macs()->Add();
}
inline ::aalyria::spacetime::api::common::WirelessMac* TransceiverModel::add_macs() {
  ::aalyria::spacetime::api::common::WirelessMac* _add = _internal_add_macs();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.TransceiverModel.macs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::WirelessMac >&
TransceiverModel::macs() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.TransceiverModel.macs)
  return _internal_macs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WirelessMac>&
TransceiverModel::_internal_macs() const {
  return _impl_.macs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::WirelessMac>*
TransceiverModel::_internal_mutable_macs() {
  return &_impl_.macs_;
}

// repeated .aalyria.spacetime.api.common.TransceiverModel.Impairment operational_impairments = 7 [json_name = "operationalImpairments"];
inline int TransceiverModel::_internal_operational_impairments_size() const {
  return _impl_.operational_impairments_.size();
}
inline int TransceiverModel::operational_impairments_size() const {
  return _internal_operational_impairments_size();
}
inline void TransceiverModel::clear_operational_impairments() {
  _internal_mutable_operational_impairments()->Clear();
}
inline ::aalyria::spacetime::api::common::TransceiverModel_Impairment* TransceiverModel::mutable_operational_impairments(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModel.operational_impairments)
  return _internal_mutable_operational_impairments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >*
TransceiverModel::mutable_operational_impairments() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.TransceiverModel.operational_impairments)
  return _internal_mutable_operational_impairments();
}
inline const ::aalyria::spacetime::api::common::TransceiverModel_Impairment& TransceiverModel::_internal_operational_impairments(int index) const {
  return _internal_operational_impairments().Get(index);
}
inline const ::aalyria::spacetime::api::common::TransceiverModel_Impairment& TransceiverModel::operational_impairments(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModel.operational_impairments)
  return _internal_operational_impairments(index);
}
inline ::aalyria::spacetime::api::common::TransceiverModel_Impairment* TransceiverModel::_internal_add_operational_impairments() {
  return _internal_mutable_operational_impairments()->Add();
}
inline ::aalyria::spacetime::api::common::TransceiverModel_Impairment* TransceiverModel::add_operational_impairments() {
  ::aalyria::spacetime::api::common::TransceiverModel_Impairment* _add = _internal_add_operational_impairments();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.TransceiverModel.operational_impairments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel_Impairment >&
TransceiverModel::operational_impairments() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.TransceiverModel.operational_impairments)
  return _internal_operational_impairments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel_Impairment>&
TransceiverModel::_internal_operational_impairments() const {
  return _impl_.operational_impairments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel_Impairment>*
TransceiverModel::_internal_mutable_operational_impairments() {
  return &_impl_.operational_impairments_;
}

// -------------------------------------------------------------------

// TransceiverModelId

// optional string platform_id = 1 [json_name = "platformId"];
inline bool TransceiverModelId::has_platform_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransceiverModelId::clear_platform_id() {
  _impl_.platform_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransceiverModelId::platform_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModelId.platform_id)
  return _internal_platform_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransceiverModelId::set_platform_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModelId.platform_id)
}
inline std::string* TransceiverModelId::mutable_platform_id() {
  std::string* _s = _internal_mutable_platform_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModelId.platform_id)
  return _s;
}
inline const std::string& TransceiverModelId::_internal_platform_id() const {
  return _impl_.platform_id_.Get();
}
inline void TransceiverModelId::_internal_set_platform_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.platform_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransceiverModelId::_internal_mutable_platform_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.platform_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TransceiverModelId::release_platform_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModelId.platform_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.platform_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransceiverModelId::set_allocated_platform_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.platform_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.platform_id_.IsDefault()) {
          _impl_.platform_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModelId.platform_id)
}

// optional string transceiver_model_id = 2 [json_name = "transceiverModelId"];
inline bool TransceiverModelId::has_transceiver_model_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TransceiverModelId::clear_transceiver_model_id() {
  _impl_.transceiver_model_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransceiverModelId::transceiver_model_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id)
  return _internal_transceiver_model_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransceiverModelId::set_transceiver_model_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.transceiver_model_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id)
}
inline std::string* TransceiverModelId::mutable_transceiver_model_id() {
  std::string* _s = _internal_mutable_transceiver_model_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id)
  return _s;
}
inline const std::string& TransceiverModelId::_internal_transceiver_model_id() const {
  return _impl_.transceiver_model_id_.Get();
}
inline void TransceiverModelId::_internal_set_transceiver_model_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.transceiver_model_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransceiverModelId::_internal_mutable_transceiver_model_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.transceiver_model_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TransceiverModelId::release_transceiver_model_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.transceiver_model_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransceiverModelId::set_allocated_transceiver_model_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transceiver_model_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transceiver_model_id_.IsDefault()) {
          _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransceiverModelId.transceiver_model_id)
}

// -------------------------------------------------------------------

// CenterFrequencySpacing

// optional uint64 min_center_frequency_spacing_hz = 1 [json_name = "minCenterFrequencySpacingHz"];
inline bool CenterFrequencySpacing::has_min_center_frequency_spacing_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CenterFrequencySpacing::clear_min_center_frequency_spacing_hz() {
  _impl_.min_center_frequency_spacing_hz_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CenterFrequencySpacing::min_center_frequency_spacing_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.CenterFrequencySpacing.min_center_frequency_spacing_hz)
  return _internal_min_center_frequency_spacing_hz();
}
inline void CenterFrequencySpacing::set_min_center_frequency_spacing_hz(::uint64_t value) {
  _internal_set_min_center_frequency_spacing_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.CenterFrequencySpacing.min_center_frequency_spacing_hz)
}
inline ::uint64_t CenterFrequencySpacing::_internal_min_center_frequency_spacing_hz() const {
  return _impl_.min_center_frequency_spacing_hz_;
}
inline void CenterFrequencySpacing::_internal_set_min_center_frequency_spacing_hz(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_center_frequency_spacing_hz_ = value;
}

// optional uint64 max_center_frequency_spacing_hz = 2 [json_name = "maxCenterFrequencySpacingHz"];
inline bool CenterFrequencySpacing::has_max_center_frequency_spacing_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CenterFrequencySpacing::clear_max_center_frequency_spacing_hz() {
  _impl_.max_center_frequency_spacing_hz_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t CenterFrequencySpacing::max_center_frequency_spacing_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.CenterFrequencySpacing.max_center_frequency_spacing_hz)
  return _internal_max_center_frequency_spacing_hz();
}
inline void CenterFrequencySpacing::set_max_center_frequency_spacing_hz(::uint64_t value) {
  _internal_set_max_center_frequency_spacing_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.CenterFrequencySpacing.max_center_frequency_spacing_hz)
}
inline ::uint64_t CenterFrequencySpacing::_internal_max_center_frequency_spacing_hz() const {
  return _impl_.max_center_frequency_spacing_hz_;
}
inline void CenterFrequencySpacing::_internal_set_max_center_frequency_spacing_hz(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_center_frequency_spacing_hz_ = value;
}

// -------------------------------------------------------------------

// WirelessMac

// optional string type = 1 [json_name = "type"];
inline bool WirelessMac::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WirelessMac::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WirelessMac::type() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WirelessMac.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WirelessMac::set_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WirelessMac.type)
}
inline std::string* WirelessMac::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.WirelessMac.type)
  return _s;
}
inline const std::string& WirelessMac::_internal_type() const {
  return _impl_.type_.Get();
}
inline void WirelessMac::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* WirelessMac::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* WirelessMac::release_type() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.WirelessMac.type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WirelessMac::set_allocated_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.WirelessMac.type)
}

// optional string role = 2 [json_name = "role"];
inline bool WirelessMac::has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WirelessMac::clear_role() {
  _impl_.role_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WirelessMac::role() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WirelessMac.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WirelessMac::set_role(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WirelessMac.role)
}
inline std::string* WirelessMac::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.WirelessMac.role)
  return _s;
}
inline const std::string& WirelessMac::_internal_role() const {
  return _impl_.role_.Get();
}
inline void WirelessMac::_internal_set_role(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* WirelessMac::_internal_mutable_role() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.role_.Mutable( GetArenaForAllocation());
}
inline std::string* WirelessMac::release_role() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.WirelessMac.role)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.role_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WirelessMac::set_allocated_role(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.role_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.role_.IsDefault()) {
          _impl_.role_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.WirelessMac.role)
}

// optional int32 max_connections = 3 [json_name = "maxConnections"];
inline bool WirelessMac::has_max_connections() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WirelessMac::clear_max_connections() {
  _impl_.max_connections_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t WirelessMac::max_connections() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.WirelessMac.max_connections)
  return _internal_max_connections();
}
inline void WirelessMac::set_max_connections(::int32_t value) {
  _internal_set_max_connections(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.WirelessMac.max_connections)
}
inline ::int32_t WirelessMac::_internal_max_connections() const {
  return _impl_.max_connections_;
}
inline void WirelessMac::_internal_set_max_connections(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_connections_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_5ftransceiver_2eproto_2epb_2eh

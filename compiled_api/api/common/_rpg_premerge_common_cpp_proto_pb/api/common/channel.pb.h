// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fchannel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fchannel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/wireless_modcod.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fchannel_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fchannel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fchannel_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class BandProfile;
struct BandProfileDefaultTypeInternal;
extern BandProfileDefaultTypeInternal _BandProfile_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::BandProfile* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::BandProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
enum ChannelSelectionMethod : int {
  CHANNEL_SELECTION_METHOD_UNKNOWN = 0,
  AUTONOMOUS_CHANNEL_SELECTION = 1,
  CHANNEL_SELECTION_BY_CONTROLLER = 2,
};

bool ChannelSelectionMethod_IsValid(int value);
constexpr ChannelSelectionMethod ChannelSelectionMethod_MIN = static_cast<ChannelSelectionMethod>(0);
constexpr ChannelSelectionMethod ChannelSelectionMethod_MAX = static_cast<ChannelSelectionMethod>(2);
constexpr int ChannelSelectionMethod_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChannelSelectionMethod_descriptor();
template <typename T>
const std::string& ChannelSelectionMethod_Name(T value) {
  static_assert(std::is_same<T, ChannelSelectionMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChannelSelectionMethod_Name().");
  return ChannelSelectionMethod_Name(static_cast<ChannelSelectionMethod>(value));
}
template <>
inline const std::string& ChannelSelectionMethod_Name(ChannelSelectionMethod value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChannelSelectionMethod_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ChannelSelectionMethod_Parse(absl::string_view name, ChannelSelectionMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelSelectionMethod>(
      ChannelSelectionMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BandProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.BandProfile) */ {
 public:
  inline BandProfile() : BandProfile(nullptr) {}
  ~BandProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BandProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BandProfile(const BandProfile& from);
  BandProfile(BandProfile&& from) noexcept
    : BandProfile() {
    *this = ::std::move(from);
  }

  inline BandProfile& operator=(const BandProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BandProfile& operator=(BandProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BandProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BandProfile* internal_default_instance() {
    return reinterpret_cast<const BandProfile*>(
               &_BandProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BandProfile& a, BandProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BandProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BandProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BandProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BandProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BandProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BandProfile& from) {
    BandProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BandProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.BandProfile";
  }
  protected:
  explicit BandProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateTableFieldNumber = 3,
    kChannelWidthHzFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.common.AdaptiveDataRateTable rate_table = 3 [json_name = "rateTable"];
  bool has_rate_table() const;
  void clear_rate_table() ;
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable& rate_table() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AdaptiveDataRateTable* release_rate_table();
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* mutable_rate_table();
  void set_allocated_rate_table(::aalyria::spacetime::api::common::AdaptiveDataRateTable* rate_table);
  private:
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable& _internal_rate_table() const;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* _internal_mutable_rate_table();
  public:
  void unsafe_arena_set_allocated_rate_table(
      ::aalyria::spacetime::api::common::AdaptiveDataRateTable* rate_table);
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* unsafe_arena_release_rate_table();
  // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
  bool has_channel_width_hz() const;
  void clear_channel_width_hz() ;
  ::uint64_t channel_width_hz() const;
  void set_channel_width_hz(::uint64_t value);

  private:
  ::uint64_t _internal_channel_width_hz() const;
  void _internal_set_channel_width_hz(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.BandProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::AdaptiveDataRateTable* rate_table_;
    ::uint64_t channel_width_hz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fchannel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BandProfile

// optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
inline bool BandProfile::has_channel_width_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BandProfile::clear_channel_width_hz() {
  _impl_.channel_width_hz_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t BandProfile::channel_width_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BandProfile.channel_width_hz)
  return _internal_channel_width_hz();
}
inline void BandProfile::set_channel_width_hz(::uint64_t value) {
  _internal_set_channel_width_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.BandProfile.channel_width_hz)
}
inline ::uint64_t BandProfile::_internal_channel_width_hz() const {
  return _impl_.channel_width_hz_;
}
inline void BandProfile::_internal_set_channel_width_hz(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_width_hz_ = value;
}

// optional .aalyria.spacetime.api.common.AdaptiveDataRateTable rate_table = 3 [json_name = "rateTable"];
inline bool BandProfile::has_rate_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rate_table_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable& BandProfile::_internal_rate_table() const {
  const ::aalyria::spacetime::api::common::AdaptiveDataRateTable* p = _impl_.rate_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::AdaptiveDataRateTable&>(
      ::aalyria::spacetime::api::common::_AdaptiveDataRateTable_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AdaptiveDataRateTable& BandProfile::rate_table() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.BandProfile.rate_table)
  return _internal_rate_table();
}
inline void BandProfile::unsafe_arena_set_allocated_rate_table(
    ::aalyria::spacetime::api::common::AdaptiveDataRateTable* rate_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rate_table_);
  }
  _impl_.rate_table_ = rate_table;
  if (rate_table) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.BandProfile.rate_table)
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable* BandProfile::release_rate_table() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* temp = _impl_.rate_table_;
  _impl_.rate_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable* BandProfile::unsafe_arena_release_rate_table() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.BandProfile.rate_table)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* temp = _impl_.rate_table_;
  _impl_.rate_table_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable* BandProfile::_internal_mutable_rate_table() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rate_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::AdaptiveDataRateTable>(GetArenaForAllocation());
    _impl_.rate_table_ = p;
  }
  return _impl_.rate_table_;
}
inline ::aalyria::spacetime::api::common::AdaptiveDataRateTable* BandProfile::mutable_rate_table() {
  ::aalyria::spacetime::api::common::AdaptiveDataRateTable* _msg = _internal_mutable_rate_table();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.BandProfile.rate_table)
  return _msg;
}
inline void BandProfile::set_allocated_rate_table(::aalyria::spacetime::api::common::AdaptiveDataRateTable* rate_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rate_table_);
  }
  if (rate_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_table));
    if (message_arena != submessage_arena) {
      rate_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate_table, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rate_table_ = rate_table;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.BandProfile.rate_table)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::common::ChannelSelectionMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::ChannelSelectionMethod>() {
  return ::aalyria::spacetime::api::common::ChannelSelectionMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fchannel_2eproto_2epb_2eh

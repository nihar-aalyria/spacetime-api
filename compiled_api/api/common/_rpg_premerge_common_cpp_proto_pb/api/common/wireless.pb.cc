// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless.proto

#include "api/common/wireless.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR AmplifierDefinition_ConstantGainAmplifierDefinition::AmplifierDefinition_ConstantGainAmplifierDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gain_db_)*/ 0

  , /*decltype(_impl_.noise_factor_)*/ 0

  , /*decltype(_impl_.reference_temperature_k_)*/ 0
} {}
struct AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal() {}
  union {
    AmplifierDefinition_ConstantGainAmplifierDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_ConstantGainAmplifierDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AmplifierDefinition_LowNoiseAmplifierDefinition::AmplifierDefinition_LowNoiseAmplifierDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pre_lna_gain_db_)*/ 0

  , /*decltype(_impl_.lna_gain_db_)*/ 0

  , /*decltype(_impl_.post_lna_gain_db_)*/ 0

  , /*decltype(_impl_.noise_factor_)*/ 0

  , /*decltype(_impl_.reference_temperature_k_)*/ 0
} {}
struct AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal() {}
  union {
    AmplifierDefinition_LowNoiseAmplifierDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_LowNoiseAmplifierDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AmplifierDefinition::AmplifierDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amplifier_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AmplifierDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmplifierDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmplifierDefinitionDefaultTypeInternal() {}
  union {
    AmplifierDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MiscGainOrLoss::MiscGainOrLoss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gain_or_loss_db_)*/ 0
} {}
struct MiscGainOrLossDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiscGainOrLossDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiscGainOrLossDefaultTypeInternal() {}
  union {
    MiscGainOrLoss _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiscGainOrLossDefaultTypeInternal _MiscGainOrLoss_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Signal::Signal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polarization_)*/nullptr
  , /*decltype(_impl_.center_frequency_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bandwidth_hz_)*/ ::uint64_t{0u}
} {}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fwireless_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fwireless_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fwireless_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fwireless_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_.gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_.noise_factor_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_.reference_temperature_k_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.pre_lna_gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.lna_gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.post_lna_gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.noise_factor_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.reference_temperature_k_),
    0,
    1,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition, _impl_.amplifier_type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::MiscGainOrLoss, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::MiscGainOrLoss, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::MiscGainOrLoss, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::MiscGainOrLoss, _impl_.gain_or_loss_db_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Signal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Signal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Signal, _impl_.center_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Signal, _impl_.bandwidth_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::Signal, _impl_.polarization_),
    1,
    2,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition)},
        { 14, 27, -1, sizeof(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition)},
        { 32, -1, -1, sizeof(::aalyria::spacetime::api::common::AmplifierDefinition)},
        { 43, 53, -1, sizeof(::aalyria::spacetime::api::common::MiscGainOrLoss)},
        { 55, 66, -1, sizeof(::aalyria::spacetime::api::common::Signal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_AmplifierDefinition_ConstantGainAmplifierDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::common::_AmplifierDefinition_LowNoiseAmplifierDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::common::_AmplifierDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::common::_MiscGainOrLoss_default_instance_._instance,
    &::aalyria::spacetime::api::common::_Signal_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fwireless_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031api/common/wireless.proto\022\034aalyria.spa"
    "cetime.api.common\032!api/common/platform_a"
    "ntenna.proto\"\222\005\n\023AmplifierDefinition\022x\n\r"
    "constant_gain\030\001 \001(\0132Q.aalyria.spacetime."
    "api.common.AmplifierDefinition.ConstantG"
    "ainAmplifierDefinitionH\000R\014constantGain\022l"
    "\n\tlow_noise\030\002 \001(\0132M.aalyria.spacetime.ap"
    "i.common.AmplifierDefinition.LowNoiseAmp"
    "lifierDefinitionH\000R\010lowNoise\032\225\001\n\037Constan"
    "tGainAmplifierDefinition\022\027\n\007gain_db\030\001 \001("
    "\001R\006gainDb\022!\n\014noise_factor\030\002 \001(\001R\013noiseFa"
    "ctor\0226\n\027reference_temperature_k\030\003 \001(\001R\025r"
    "eferenceTemperatureK\032\350\001\n\033LowNoiseAmplifi"
    "erDefinition\022%\n\017pre_lna_gain_db\030\001 \001(\001R\014p"
    "reLnaGainDb\022\036\n\013lna_gain_db\030\002 \001(\001R\tlnaGai"
    "nDb\022\'\n\020post_lna_gain_db\030\003 \001(\001R\rpostLnaGa"
    "inDb\022!\n\014noise_factor\030\004 \001(\001R\013noiseFactor\022"
    "6\n\027reference_temperature_k\030\005 \001(\001R\025refere"
    "nceTemperatureKB\020\n\016amplifier_type\"K\n\016Mis"
    "cGainOrLoss\022\022\n\004name\030\001 \001(\tR\004name\022%\n\017gain_"
    "or_loss_db\030\002 \001(\001R\014gainOrLossDb\"\253\001\n\006Signa"
    "l\022.\n\023center_frequency_hz\030\001 \001(\004R\021centerFr"
    "equencyHz\022!\n\014bandwidth_hz\030\002 \001(\004R\013bandwid"
    "thHz\022N\n\014polarization\030\003 \001(\0132*.aalyria.spa"
    "cetime.api.common.PolarizationR\014polariza"
    "tionBD\n com.aalyria.spacetime.api.common"
    "Z aalyria.com/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fwireless_2eproto_deps[1] =
    {
        &::descriptor_table_api_2fcommon_2fplatform_5fantenna_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fwireless_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fwireless_2eproto = {
    false,
    false,
    1074,
    descriptor_table_protodef_api_2fcommon_2fwireless_2eproto,
    "api/common/wireless.proto",
    &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
    descriptor_table_api_2fcommon_2fwireless_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fwireless_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fwireless_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fwireless_2eproto,
    file_level_service_descriptors_api_2fcommon_2fwireless_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fwireless_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fwireless_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fwireless_2eproto(&descriptor_table_api_2fcommon_2fwireless_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class AmplifierDefinition_ConstantGainAmplifierDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<AmplifierDefinition_ConstantGainAmplifierDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_._has_bits_);
  static void set_has_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_noise_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_temperature_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AmplifierDefinition_ConstantGainAmplifierDefinition::AmplifierDefinition_ConstantGainAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
}
AmplifierDefinition_ConstantGainAmplifierDefinition::AmplifierDefinition_ConstantGainAmplifierDefinition(const AmplifierDefinition_ConstantGainAmplifierDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
}

inline void AmplifierDefinition_ConstantGainAmplifierDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gain_db_) { 0 }

    , decltype(_impl_.noise_factor_) { 0 }

    , decltype(_impl_.reference_temperature_k_) { 0 }

  };
}

AmplifierDefinition_ConstantGainAmplifierDefinition::~AmplifierDefinition_ConstantGainAmplifierDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AmplifierDefinition_ConstantGainAmplifierDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AmplifierDefinition_ConstantGainAmplifierDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AmplifierDefinition_ConstantGainAmplifierDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gain_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reference_temperature_k_) -
        reinterpret_cast<char*>(&_impl_.gain_db_)) + sizeof(_impl_.reference_temperature_k_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmplifierDefinition_ConstantGainAmplifierDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gain_db = 1 [json_name = "gainDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_gain_db(&has_bits);
          _impl_.gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double noise_factor = 2 [json_name = "noiseFactor"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_noise_factor(&has_bits);
          _impl_.noise_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double reference_temperature_k = 3 [json_name = "referenceTemperatureK"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_reference_temperature_k(&has_bits);
          _impl_.reference_temperature_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AmplifierDefinition_ConstantGainAmplifierDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double gain_db = 1 [json_name = "gainDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_gain_db(), target);
  }

  // optional double noise_factor = 2 [json_name = "noiseFactor"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_noise_factor(), target);
  }

  // optional double reference_temperature_k = 3 [json_name = "referenceTemperatureK"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_reference_temperature_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  return target;
}

::size_t AmplifierDefinition_ConstantGainAmplifierDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double gain_db = 1 [json_name = "gainDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double noise_factor = 2 [json_name = "noiseFactor"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double reference_temperature_k = 3 [json_name = "referenceTemperatureK"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmplifierDefinition_ConstantGainAmplifierDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AmplifierDefinition_ConstantGainAmplifierDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmplifierDefinition_ConstantGainAmplifierDefinition::GetClassData() const { return &_class_data_; }


void AmplifierDefinition_ConstantGainAmplifierDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AmplifierDefinition_ConstantGainAmplifierDefinition*>(&to_msg);
  auto& from = static_cast<const AmplifierDefinition_ConstantGainAmplifierDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gain_db_ = from._impl_.gain_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.noise_factor_ = from._impl_.noise_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_temperature_k_ = from._impl_.reference_temperature_k_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmplifierDefinition_ConstantGainAmplifierDefinition::CopyFrom(const AmplifierDefinition_ConstantGainAmplifierDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmplifierDefinition_ConstantGainAmplifierDefinition::IsInitialized() const {
  return true;
}

void AmplifierDefinition_ConstantGainAmplifierDefinition::InternalSwap(AmplifierDefinition_ConstantGainAmplifierDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_.reference_temperature_k_)
      + sizeof(AmplifierDefinition_ConstantGainAmplifierDefinition::_impl_.reference_temperature_k_)
      - PROTOBUF_FIELD_OFFSET(AmplifierDefinition_ConstantGainAmplifierDefinition, _impl_.gain_db_)>(
          reinterpret_cast<char*>(&_impl_.gain_db_),
          reinterpret_cast<char*>(&other->_impl_.gain_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AmplifierDefinition_ConstantGainAmplifierDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_2eproto[0]);
}
// ===================================================================

class AmplifierDefinition_LowNoiseAmplifierDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<AmplifierDefinition_LowNoiseAmplifierDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_._has_bits_);
  static void set_has_pre_lna_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lna_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_post_lna_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_noise_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference_temperature_k(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AmplifierDefinition_LowNoiseAmplifierDefinition::AmplifierDefinition_LowNoiseAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
}
AmplifierDefinition_LowNoiseAmplifierDefinition::AmplifierDefinition_LowNoiseAmplifierDefinition(const AmplifierDefinition_LowNoiseAmplifierDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
}

inline void AmplifierDefinition_LowNoiseAmplifierDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pre_lna_gain_db_) { 0 }

    , decltype(_impl_.lna_gain_db_) { 0 }

    , decltype(_impl_.post_lna_gain_db_) { 0 }

    , decltype(_impl_.noise_factor_) { 0 }

    , decltype(_impl_.reference_temperature_k_) { 0 }

  };
}

AmplifierDefinition_LowNoiseAmplifierDefinition::~AmplifierDefinition_LowNoiseAmplifierDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AmplifierDefinition_LowNoiseAmplifierDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AmplifierDefinition_LowNoiseAmplifierDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AmplifierDefinition_LowNoiseAmplifierDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.pre_lna_gain_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reference_temperature_k_) -
        reinterpret_cast<char*>(&_impl_.pre_lna_gain_db_)) + sizeof(_impl_.reference_temperature_k_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmplifierDefinition_LowNoiseAmplifierDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pre_lna_gain_db = 1 [json_name = "preLnaGainDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_pre_lna_gain_db(&has_bits);
          _impl_.pre_lna_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double lna_gain_db = 2 [json_name = "lnaGainDb"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_lna_gain_db(&has_bits);
          _impl_.lna_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double post_lna_gain_db = 3 [json_name = "postLnaGainDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_post_lna_gain_db(&has_bits);
          _impl_.post_lna_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double noise_factor = 4 [json_name = "noiseFactor"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_noise_factor(&has_bits);
          _impl_.noise_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double reference_temperature_k = 5 [json_name = "referenceTemperatureK"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_reference_temperature_k(&has_bits);
          _impl_.reference_temperature_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AmplifierDefinition_LowNoiseAmplifierDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double pre_lna_gain_db = 1 [json_name = "preLnaGainDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_pre_lna_gain_db(), target);
  }

  // optional double lna_gain_db = 2 [json_name = "lnaGainDb"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_lna_gain_db(), target);
  }

  // optional double post_lna_gain_db = 3 [json_name = "postLnaGainDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_post_lna_gain_db(), target);
  }

  // optional double noise_factor = 4 [json_name = "noiseFactor"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_noise_factor(), target);
  }

  // optional double reference_temperature_k = 5 [json_name = "referenceTemperatureK"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_reference_temperature_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  return target;
}

::size_t AmplifierDefinition_LowNoiseAmplifierDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double pre_lna_gain_db = 1 [json_name = "preLnaGainDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double lna_gain_db = 2 [json_name = "lnaGainDb"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double post_lna_gain_db = 3 [json_name = "postLnaGainDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double noise_factor = 4 [json_name = "noiseFactor"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double reference_temperature_k = 5 [json_name = "referenceTemperatureK"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmplifierDefinition_LowNoiseAmplifierDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AmplifierDefinition_LowNoiseAmplifierDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmplifierDefinition_LowNoiseAmplifierDefinition::GetClassData() const { return &_class_data_; }


void AmplifierDefinition_LowNoiseAmplifierDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AmplifierDefinition_LowNoiseAmplifierDefinition*>(&to_msg);
  auto& from = static_cast<const AmplifierDefinition_LowNoiseAmplifierDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pre_lna_gain_db_ = from._impl_.pre_lna_gain_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lna_gain_db_ = from._impl_.lna_gain_db_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.post_lna_gain_db_ = from._impl_.post_lna_gain_db_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.noise_factor_ = from._impl_.noise_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reference_temperature_k_ = from._impl_.reference_temperature_k_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmplifierDefinition_LowNoiseAmplifierDefinition::CopyFrom(const AmplifierDefinition_LowNoiseAmplifierDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmplifierDefinition_LowNoiseAmplifierDefinition::IsInitialized() const {
  return true;
}

void AmplifierDefinition_LowNoiseAmplifierDefinition::InternalSwap(AmplifierDefinition_LowNoiseAmplifierDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.reference_temperature_k_)
      + sizeof(AmplifierDefinition_LowNoiseAmplifierDefinition::_impl_.reference_temperature_k_)
      - PROTOBUF_FIELD_OFFSET(AmplifierDefinition_LowNoiseAmplifierDefinition, _impl_.pre_lna_gain_db_)>(
          reinterpret_cast<char*>(&_impl_.pre_lna_gain_db_),
          reinterpret_cast<char*>(&other->_impl_.pre_lna_gain_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AmplifierDefinition_LowNoiseAmplifierDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_2eproto[1]);
}
// ===================================================================

class AmplifierDefinition::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AmplifierDefinition, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition& constant_gain(const AmplifierDefinition* msg);
  static const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition& low_noise(const AmplifierDefinition* msg);
};

const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition&
AmplifierDefinition::_Internal::constant_gain(const AmplifierDefinition* msg) {
  return *msg->_impl_.amplifier_type_.constant_gain_;
}
const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition&
AmplifierDefinition::_Internal::low_noise(const AmplifierDefinition* msg) {
  return *msg->_impl_.amplifier_type_.low_noise_;
}
void AmplifierDefinition::set_allocated_constant_gain(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* constant_gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_amplifier_type();
  if (constant_gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constant_gain);
    if (message_arena != submessage_arena) {
      constant_gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant_gain, submessage_arena);
    }
    set_has_constant_gain();
    _impl_.amplifier_type_.constant_gain_ = constant_gain;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
}
void AmplifierDefinition::set_allocated_low_noise(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* low_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_amplifier_type();
  if (low_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(low_noise);
    if (message_arena != submessage_arena) {
      low_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_noise, submessage_arena);
    }
    set_has_low_noise();
    _impl_.amplifier_type_.low_noise_ = low_noise;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
}
AmplifierDefinition::AmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AmplifierDefinition)
}
AmplifierDefinition::AmplifierDefinition(const AmplifierDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AmplifierDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amplifier_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_amplifier_type();
  switch (from.amplifier_type_case()) {
    case kConstantGain: {
      _this->_internal_mutable_constant_gain()->::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition::MergeFrom(
          from._internal_constant_gain());
      break;
    }
    case kLowNoise: {
      _this->_internal_mutable_low_noise()->::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition::MergeFrom(
          from._internal_low_noise());
      break;
    }
    case AMPLIFIER_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AmplifierDefinition)
}

inline void AmplifierDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amplifier_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_amplifier_type();
}

AmplifierDefinition::~AmplifierDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AmplifierDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AmplifierDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_amplifier_type()) {
    clear_amplifier_type();
  }
}

void AmplifierDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AmplifierDefinition::clear_amplifier_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.AmplifierDefinition)
  switch (amplifier_type_case()) {
    case kConstantGain: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.amplifier_type_.constant_gain_;
      }
      break;
    }
    case kLowNoise: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.amplifier_type_.low_noise_;
      }
      break;
    }
    case AMPLIFIER_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = AMPLIFIER_TYPE_NOT_SET;
}


void AmplifierDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_amplifier_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmplifierDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition constant_gain = 1 [json_name = "constantGain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constant_gain(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition low_noise = 2 [json_name = "lowNoise"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_noise(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AmplifierDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AmplifierDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (amplifier_type_case()) {
    case kConstantGain: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::constant_gain(this),
          _Internal::constant_gain(this).GetCachedSize(), target, stream);
      break;
    }
    case kLowNoise: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::low_noise(this),
          _Internal::low_noise(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AmplifierDefinition)
  return target;
}

::size_t AmplifierDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AmplifierDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (amplifier_type_case()) {
    // .aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition constant_gain = 1 [json_name = "constantGain"];
    case kConstantGain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.amplifier_type_.constant_gain_);
      break;
    }
    // .aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition low_noise = 2 [json_name = "lowNoise"];
    case kLowNoise: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.amplifier_type_.low_noise_);
      break;
    }
    case AMPLIFIER_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmplifierDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AmplifierDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmplifierDefinition::GetClassData() const { return &_class_data_; }


void AmplifierDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AmplifierDefinition*>(&to_msg);
  auto& from = static_cast<const AmplifierDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AmplifierDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.amplifier_type_case()) {
    case kConstantGain: {
      _this->_internal_mutable_constant_gain()->::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition::MergeFrom(
          from._internal_constant_gain());
      break;
    }
    case kLowNoise: {
      _this->_internal_mutable_low_noise()->::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition::MergeFrom(
          from._internal_low_noise());
      break;
    }
    case AMPLIFIER_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmplifierDefinition::CopyFrom(const AmplifierDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AmplifierDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmplifierDefinition::IsInitialized() const {
  return true;
}

void AmplifierDefinition::InternalSwap(AmplifierDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.amplifier_type_, other->_impl_.amplifier_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmplifierDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_2eproto[2]);
}
// ===================================================================

class MiscGainOrLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<MiscGainOrLoss>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MiscGainOrLoss, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gain_or_loss_db(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MiscGainOrLoss::MiscGainOrLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.MiscGainOrLoss)
}
MiscGainOrLoss::MiscGainOrLoss(const MiscGainOrLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MiscGainOrLoss* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.gain_or_loss_db_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.gain_or_loss_db_ = from._impl_.gain_or_loss_db_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.MiscGainOrLoss)
}

inline void MiscGainOrLoss::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.gain_or_loss_db_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MiscGainOrLoss::~MiscGainOrLoss() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.MiscGainOrLoss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MiscGainOrLoss::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MiscGainOrLoss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MiscGainOrLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.MiscGainOrLoss)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.gain_or_loss_db_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiscGainOrLoss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.MiscGainOrLoss.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double gain_or_loss_db = 2 [json_name = "gainOrLossDb"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_gain_or_loss_db(&has_bits);
          _impl_.gain_or_loss_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MiscGainOrLoss::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.MiscGainOrLoss)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.MiscGainOrLoss.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional double gain_or_loss_db = 2 [json_name = "gainOrLossDb"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_gain_or_loss_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.MiscGainOrLoss)
  return target;
}

::size_t MiscGainOrLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.MiscGainOrLoss)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional double gain_or_loss_db = 2 [json_name = "gainOrLossDb"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MiscGainOrLoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MiscGainOrLoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MiscGainOrLoss::GetClassData() const { return &_class_data_; }


void MiscGainOrLoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MiscGainOrLoss*>(&to_msg);
  auto& from = static_cast<const MiscGainOrLoss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.MiscGainOrLoss)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gain_or_loss_db_ = from._impl_.gain_or_loss_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MiscGainOrLoss::CopyFrom(const MiscGainOrLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.MiscGainOrLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiscGainOrLoss::IsInitialized() const {
  return true;
}

void MiscGainOrLoss::InternalSwap(MiscGainOrLoss* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.gain_or_loss_db_, other->_impl_.gain_or_loss_db_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MiscGainOrLoss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_2eproto[3]);
}
// ===================================================================

class Signal::_Internal {
 public:
  using HasBits = decltype(std::declval<Signal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Signal, _impl_._has_bits_);
  static void set_has_center_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bandwidth_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::Polarization& polarization(const Signal* msg);
  static void set_has_polarization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::Polarization&
Signal::_Internal::polarization(const Signal* msg) {
  return *msg->_impl_.polarization_;
}
void Signal::clear_polarization() {
  if (_impl_.polarization_ != nullptr) _impl_.polarization_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Signal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polarization_){nullptr}
    , decltype(_impl_.center_frequency_hz_) {}

    , decltype(_impl_.bandwidth_hz_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.polarization_ = new ::aalyria::spacetime::api::common::Polarization(*from._impl_.polarization_);
  }
  ::memcpy(&_impl_.center_frequency_hz_, &from._impl_.center_frequency_hz_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bandwidth_hz_) -
    reinterpret_cast<char*>(&_impl_.center_frequency_hz_)) + sizeof(_impl_.bandwidth_hz_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.Signal)
}

inline void Signal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polarization_){nullptr}
    , decltype(_impl_.center_frequency_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.bandwidth_hz_) { ::uint64_t{0u} }

  };
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.Signal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.polarization_;
}

void Signal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.Signal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.polarization_ != nullptr);
    _impl_.polarization_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.center_frequency_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bandwidth_hz_) -
        reinterpret_cast<char*>(&_impl_.center_frequency_hz_)) + sizeof(_impl_.bandwidth_hz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_center_frequency_hz(&has_bits);
          _impl_.center_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bandwidth_hz = 2 [json_name = "bandwidthHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bandwidth_hz(&has_bits);
          _impl_.bandwidth_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Polarization polarization = 3 [json_name = "polarization"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_polarization(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Signal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.Signal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_center_frequency_hz(), target);
  }

  // optional uint64 bandwidth_hz = 2 [json_name = "bandwidthHz"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_bandwidth_hz(), target);
  }

  // optional .aalyria.spacetime.api.common.Polarization polarization = 3 [json_name = "polarization"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::polarization(this),
        _Internal::polarization(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.Signal)
  return target;
}

::size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.Signal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.common.Polarization polarization = 3 [json_name = "polarization"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.polarization_);
    }

    // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_center_frequency_hz());
    }

    // optional uint64 bandwidth_hz = 2 [json_name = "bandwidthHz"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bandwidth_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Signal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signal::GetClassData() const { return &_class_data_; }


void Signal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Signal*>(&to_msg);
  auto& from = static_cast<const Signal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.Signal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_polarization()->::aalyria::spacetime::api::common::Polarization::MergeFrom(
          from._internal_polarization());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bandwidth_hz_ = from._impl_.bandwidth_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal, _impl_.bandwidth_hz_)
      + sizeof(Signal::_impl_.bandwidth_hz_)
      - PROTOBUF_FIELD_OFFSET(Signal, _impl_.polarization_)>(
          reinterpret_cast<char*>(&_impl_.polarization_),
          reinterpret_cast<char*>(&other->_impl_.polarization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AmplifierDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AmplifierDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::MiscGainOrLoss*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::MiscGainOrLoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::MiscGainOrLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::Signal*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

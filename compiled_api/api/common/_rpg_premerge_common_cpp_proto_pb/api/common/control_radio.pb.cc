// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/control_radio.proto

#include "api/common/control_radio.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR TransmitterState::TransmitterState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transmit_power_watts_)*/ 0

  , /*decltype(_impl_.center_frequency_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.channel_width_hz_)*/ ::uint64_t{0u}
} {}
struct TransmitterStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmitterStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmitterStateDefaultTypeInternal() {}
  union {
    TransmitterState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmitterStateDefaultTypeInternal _TransmitterState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ReceiverState::ReceiverState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.center_frequency_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.channel_width_hz_)*/ ::uint64_t{0u}
} {}
struct ReceiverStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiverStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiverStateDefaultTypeInternal() {}
  union {
    ReceiverState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiverStateDefaultTypeInternal _ReceiverState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlot_TxSlot::TdmaSchedule_TdmaSlot_TxSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remote_receiver_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct TdmaSchedule_TdmaSlot_TxSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlot_TxSlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TdmaSchedule_TdmaSlot_TxSlotDefaultTypeInternal() {}
  union {
    TdmaSchedule_TdmaSlot_TxSlot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TdmaSchedule_TdmaSlot_TxSlotDefaultTypeInternal _TdmaSchedule_TdmaSlot_TxSlot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlot_RxSlot::TdmaSchedule_TdmaSlot_RxSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remote_transmitter_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct TdmaSchedule_TdmaSlot_RxSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlot_RxSlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TdmaSchedule_TdmaSlot_RxSlotDefaultTypeInternal() {}
  union {
    TdmaSchedule_TdmaSlot_RxSlot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TdmaSchedule_TdmaSlot_RxSlotDefaultTypeInternal _TdmaSchedule_TdmaSlot_RxSlot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlot::TdmaSchedule_TdmaSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.slot_type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TdmaSchedule_TdmaSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TdmaSchedule_TdmaSlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TdmaSchedule_TdmaSlotDefaultTypeInternal() {}
  union {
    TdmaSchedule_TdmaSlot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TdmaSchedule_TdmaSlotDefaultTypeInternal _TdmaSchedule_TdmaSlot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TdmaSchedule::TdmaSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schedule_)*/{}
  , /*decltype(_impl_.schedule_duration_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0
} {}
struct TdmaScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TdmaScheduleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TdmaScheduleDefaultTypeInternal() {}
  union {
    TdmaSchedule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TdmaScheduleDefaultTypeInternal _TdmaSchedule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioUpdate::RadioUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.radio_config_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.modem_config_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_state_)*/nullptr
  , /*decltype(_impl_.rx_state_)*/nullptr
  , /*decltype(_impl_.tdma_schedule_)*/nullptr
  , /*decltype(_impl_.per_interface_sequence_number_)*/ ::int64_t{0}
} {}
struct RadioUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioUpdateDefaultTypeInternal() {}
  union {
    RadioUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioUpdateDefaultTypeInternal _RadioUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioStates_RadioState::RadioStates_RadioState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radio_config_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_state_)*/nullptr
  , /*decltype(_impl_.rx_state_)*/nullptr
  , /*decltype(_impl_.tdma_schedule_)*/nullptr} {}
struct RadioStates_RadioStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioStates_RadioStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioStates_RadioStateDefaultTypeInternal() {}
  union {
    RadioStates_RadioState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioStates_RadioStateDefaultTypeInternal _RadioStates_RadioState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUseDefaultTypeInternal _RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioStates::RadioStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radio_config_id_by_interface_id_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr} {}
struct RadioStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioStatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioStatesDefaultTypeInternal() {}
  union {
    RadioStates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioStatesDefaultTypeInternal _RadioStates_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fcontrol_5fradio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterState, _impl_.center_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterState, _impl_.channel_width_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterState, _impl_.transmit_power_watts_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ReceiverState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ReceiverState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ReceiverState, _impl_.center_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::ReceiverState, _impl_.channel_width_hz_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot, _impl_.remote_receiver_id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot, _impl_.remote_transmitter_id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _impl_.duration_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _impl_.slot_type_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule, _impl_.schedule_duration_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule, _impl_.schedule_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.radio_config_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.tx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.rx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.tdma_schedule_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.modem_config_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioUpdate, _impl_.per_interface_sequence_number_),
    1,
    0,
    3,
    4,
    5,
    2,
    6,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _impl_.radio_config_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _impl_.tx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _impl_.rx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioState, _impl_.tdma_schedule_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::RadioStates, _impl_.radio_config_id_by_interface_id_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::aalyria::spacetime::api::common::TransmitterState)},
        { 14, 24, -1, sizeof(::aalyria::spacetime::api::common::ReceiverState)},
        { 26, 36, -1, sizeof(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot)},
        { 38, 48, -1, sizeof(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot)},
        { 50, 62, -1, sizeof(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot)},
        { 65, 76, -1, sizeof(::aalyria::spacetime::api::common::TdmaSchedule)},
        { 79, 94, -1, sizeof(::aalyria::spacetime::api::common::RadioUpdate)},
        { 101, 113, -1, sizeof(::aalyria::spacetime::api::common::RadioStates_RadioState)},
        { 117, 127, -1, sizeof(::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse)},
        { 129, 139, -1, sizeof(::aalyria::spacetime::api::common::RadioStates)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_TransmitterState_default_instance_._instance,
    &::aalyria::spacetime::api::common::_ReceiverState_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TdmaSchedule_TdmaSlot_TxSlot_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TdmaSchedule_TdmaSlot_RxSlot_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TdmaSchedule_TdmaSlot_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TdmaSchedule_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioStates_RadioState_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_RadioStates_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fcontrol_5fradio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036api/common/control_radio.proto\022\034aalyri"
    "a.spacetime.api.common\032\025api/common/time."
    "proto\"\260\001\n\020TransmitterState\022.\n\023center_fre"
    "quency_hz\030\005 \001(\004R\021centerFrequencyHz\022(\n\020ch"
    "annel_width_hz\030\006 \001(\004R\016channelWidthHz\0220\n\024"
    "transmit_power_watts\030\003 \001(\001R\022transmitPowe"
    "rWattsJ\004\010\001\020\002J\004\010\002\020\003J\004\010\004\020\005\"{\n\rReceiverStat"
    "e\022.\n\023center_frequency_hz\030\004 \001(\004R\021centerFr"
    "equencyHz\022(\n\020channel_width_hz\030\005 \001(\004R\016cha"
    "nnelWidthHzJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004\"\210\010\n\014TdmaSc"
    "hedule\022K\n\004type\030\001 \001(\01627.aalyria.spacetime"
    ".api.common.TdmaSchedule.ScheduleTypeR\004t"
    "ype\022S\n\021schedule_duration\030\002 \001(\0132&.aalyria"
    ".spacetime.api.common.DurationR\020schedule"
    "Duration\022O\n\010schedule\030\003 \003(\01323.aalyria.spa"
    "cetime.api.common.TdmaSchedule.TdmaSlotR"
    "\010schedule\032\302\005\n\010TdmaSlot\022B\n\010duration\030\001 \001(\013"
    "2&.aalyria.spacetime.api.common.Duration"
    "R\010duration\022X\n\010transmit\030\002 \001(\0132:.aalyria.s"
    "pacetime.api.common.TdmaSchedule.TdmaSlo"
    "t.TxSlotH\000R\010transmit\022V\n\007receive\030\003 \001(\0132:."
    "aalyria.spacetime.api.common.TdmaSchedul"
    "e.TdmaSlot.RxSlotH\000R\007receive\032\341\001\n\006TxSlot\022"
    "Y\n\004type\030\001 \001(\0162E.aalyria.spacetime.api.co"
    "mmon.TdmaSchedule.TdmaSlot.TxSlot.TxSlot"
    "TypeR\004type\022,\n\022remote_receiver_id\030\002 \001(\tR\020"
    "remoteReceiverId\"N\n\nTxSlotType\022\013\n\007UNKNOW"
    "N\020\000\022\013\n\007UNICAST\020\001\022\n\n\006BEACON\020\002\022\n\n\006POLLED\020\003"
    "\022\016\n\nCONTENTION\020\004\032\316\001\n\006RxSlot\022Y\n\004type\030\001 \001("
    "\0162E.aalyria.spacetime.api.common.TdmaSch"
    "edule.TdmaSlot.RxSlot.RxSlotTypeR\004type\0222"
    "\n\025remote_transmitter_id\030\002 \001(\tR\023remoteTra"
    "nsmitterId\"5\n\nRxSlotType\022\013\n\007UNKNOWN\020\000\022\013\n"
    "\007UNICAST\020\001\022\r\n\tBROADCAST\020\002B\013\n\tslot_type\"@"
    "\n\014ScheduleType\022\013\n\007UNKNOWN\020\000\022\013\n\007TX_ONLY\020\001"
    "\022\013\n\007RX_ONLY\020\002\022\t\n\005TX_RX\020\003\"\255\003\n\013RadioUpdate"
    "\022&\n\017radio_config_id\030\006 \001(\tR\rradioConfigId"
    "\022!\n\014interface_id\030\004 \001(\tR\013interfaceId\022I\n\010t"
    "x_state\030\001 \001(\0132..aalyria.spacetime.api.co"
    "mmon.TransmitterStateR\007txState\022F\n\010rx_sta"
    "te\030\002 \001(\0132+.aalyria.spacetime.api.common."
    "ReceiverStateR\007rxState\022O\n\rtdma_schedule\030"
    "\003 \001(\0132*.aalyria.spacetime.api.common.Tdm"
    "aScheduleR\014tdmaSchedule\022&\n\017modem_config_"
    "id\030\010 \001(\tR\rmodemConfigId\022A\n\035per_interface"
    "_sequence_number\030\005 \001(\003R\032perInterfaceSequ"
    "enceNumberJ\004\010\007\020\010\"\344\004\n\013RadioStates\022D\n\ttime"
    "stamp\030\003 \001(\0132&.aalyria.spacetime.api.comm"
    "on.DateTimeR\ttimestamp\022\216\001\n\037radio_config_"
    "id_by_interface_id\030\004 \003(\0132I.aalyria.space"
    "time.api.common.RadioStates.RadioConfigI"
    "dByInterfaceIdEntryR\032radioConfigIdByInte"
    "rfaceId\032\230\002\n\nRadioState\022&\n\017radio_config_i"
    "d\030\004 \001(\tR\rradioConfigId\022I\n\010tx_state\030\001 \001(\013"
    "2..aalyria.spacetime.api.common.Transmit"
    "terStateR\007txState\022F\n\010rx_state\030\002 \001(\0132+.aa"
    "lyria.spacetime.api.common.ReceiverState"
    "R\007rxState\022O\n\rtdma_schedule\030\003 \001(\0132*.aalyr"
    "ia.spacetime.api.common.TdmaScheduleR\014td"
    "maSchedule\032M\n\037RadioConfigIdByInterfaceId"
    "Entry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005"
    "value:\0028\001J\004\010\001\020\002J\004\010\002\020\003J\010\010\005\020\200\200\200\200\002BD\n com.a"
    "alyria.spacetime.api.commonZ aalyria.com"
    "/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_deps[1] =
    {
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto = {
    false,
    false,
    2541,
    descriptor_table_protodef_api_2fcommon_2fcontrol_5fradio_2eproto,
    "api/common/control_radio.proto",
    &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
    descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fcontrol_5fradio_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto,
    file_level_service_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fcontrol_5fradio_2eproto(&descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TdmaSchedule_TdmaSlot_TxSlot_TxSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto[0];
}
bool TdmaSchedule_TdmaSlot_TxSlot_TxSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::UNKNOWN;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::UNICAST;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::BEACON;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::POLLED;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::CONTENTION;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::TxSlotType_MIN;
constexpr TdmaSchedule_TdmaSlot_TxSlot_TxSlotType TdmaSchedule_TdmaSlot_TxSlot::TxSlotType_MAX;
constexpr int TdmaSchedule_TdmaSlot_TxSlot::TxSlotType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TdmaSchedule_TdmaSlot_RxSlot_RxSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto[1];
}
bool TdmaSchedule_TdmaSlot_RxSlot_RxSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TdmaSchedule_TdmaSlot_RxSlot_RxSlotType TdmaSchedule_TdmaSlot_RxSlot::UNKNOWN;
constexpr TdmaSchedule_TdmaSlot_RxSlot_RxSlotType TdmaSchedule_TdmaSlot_RxSlot::UNICAST;
constexpr TdmaSchedule_TdmaSlot_RxSlot_RxSlotType TdmaSchedule_TdmaSlot_RxSlot::BROADCAST;
constexpr TdmaSchedule_TdmaSlot_RxSlot_RxSlotType TdmaSchedule_TdmaSlot_RxSlot::RxSlotType_MIN;
constexpr TdmaSchedule_TdmaSlot_RxSlot_RxSlotType TdmaSchedule_TdmaSlot_RxSlot::RxSlotType_MAX;
constexpr int TdmaSchedule_TdmaSlot_RxSlot::RxSlotType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TdmaSchedule_ScheduleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fcontrol_5fradio_2eproto[2];
}
bool TdmaSchedule_ScheduleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TdmaSchedule_ScheduleType TdmaSchedule::UNKNOWN;
constexpr TdmaSchedule_ScheduleType TdmaSchedule::TX_ONLY;
constexpr TdmaSchedule_ScheduleType TdmaSchedule::RX_ONLY;
constexpr TdmaSchedule_ScheduleType TdmaSchedule::TX_RX;
constexpr TdmaSchedule_ScheduleType TdmaSchedule::ScheduleType_MIN;
constexpr TdmaSchedule_ScheduleType TdmaSchedule::ScheduleType_MAX;
constexpr int TdmaSchedule::ScheduleType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TransmitterState::_Internal {
 public:
  using HasBits = decltype(std::declval<TransmitterState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransmitterState, _impl_._has_bits_);
  static void set_has_center_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_width_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transmit_power_watts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransmitterState::TransmitterState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransmitterState)
}
TransmitterState::TransmitterState(const TransmitterState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransmitterState)
}

inline void TransmitterState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transmit_power_watts_) { 0 }

    , decltype(_impl_.center_frequency_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.channel_width_hz_) { ::uint64_t{0u} }

  };
}

TransmitterState::~TransmitterState() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransmitterState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransmitterState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransmitterState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransmitterState::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransmitterState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.transmit_power_watts_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_width_hz_) -
        reinterpret_cast<char*>(&_impl_.transmit_power_watts_)) + sizeof(_impl_.channel_width_hz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmitterState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double transmit_power_watts = 3 [json_name = "transmitPowerWatts"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_transmit_power_watts(&has_bits);
          _impl_.transmit_power_watts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 center_frequency_hz = 5 [json_name = "centerFrequencyHz"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_center_frequency_hz(&has_bits);
          _impl_.center_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 channel_width_hz = 6 [json_name = "channelWidthHz"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_channel_width_hz(&has_bits);
          _impl_.channel_width_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransmitterState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransmitterState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double transmit_power_watts = 3 [json_name = "transmitPowerWatts"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_transmit_power_watts(), target);
  }

  // optional uint64 center_frequency_hz = 5 [json_name = "centerFrequencyHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_center_frequency_hz(), target);
  }

  // optional uint64 channel_width_hz = 6 [json_name = "channelWidthHz"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_channel_width_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransmitterState)
  return target;
}

::size_t TransmitterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransmitterState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double transmit_power_watts = 3 [json_name = "transmitPowerWatts"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional uint64 center_frequency_hz = 5 [json_name = "centerFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_center_frequency_hz());
    }

    // optional uint64 channel_width_hz = 6 [json_name = "channelWidthHz"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_channel_width_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransmitterState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransmitterState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransmitterState::GetClassData() const { return &_class_data_; }


void TransmitterState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransmitterState*>(&to_msg);
  auto& from = static_cast<const TransmitterState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransmitterState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.transmit_power_watts_ = from._impl_.transmit_power_watts_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_width_hz_ = from._impl_.channel_width_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransmitterState::CopyFrom(const TransmitterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransmitterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterState::IsInitialized() const {
  return true;
}

void TransmitterState::InternalSwap(TransmitterState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransmitterState, _impl_.channel_width_hz_)
      + sizeof(TransmitterState::_impl_.channel_width_hz_)
      - PROTOBUF_FIELD_OFFSET(TransmitterState, _impl_.transmit_power_watts_)>(
          reinterpret_cast<char*>(&_impl_.transmit_power_watts_),
          reinterpret_cast<char*>(&other->_impl_.transmit_power_watts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmitterState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[0]);
}
// ===================================================================

class ReceiverState::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceiverState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReceiverState, _impl_._has_bits_);
  static void set_has_center_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_width_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReceiverState::ReceiverState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.ReceiverState)
}
ReceiverState::ReceiverState(const ReceiverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.ReceiverState)
}

inline void ReceiverState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_frequency_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.channel_width_hz_) { ::uint64_t{0u} }

  };
}

ReceiverState::~ReceiverState() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.ReceiverState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceiverState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReceiverState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceiverState::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.ReceiverState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.center_frequency_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_width_hz_) -
        reinterpret_cast<char*>(&_impl_.center_frequency_hz_)) + sizeof(_impl_.channel_width_hz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiverState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 center_frequency_hz = 4 [json_name = "centerFrequencyHz"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_center_frequency_hz(&has_bits);
          _impl_.center_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 channel_width_hz = 5 [json_name = "channelWidthHz"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_width_hz(&has_bits);
          _impl_.channel_width_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReceiverState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.ReceiverState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 center_frequency_hz = 4 [json_name = "centerFrequencyHz"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_center_frequency_hz(), target);
  }

  // optional uint64 channel_width_hz = 5 [json_name = "channelWidthHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_channel_width_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.ReceiverState)
  return target;
}

::size_t ReceiverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.ReceiverState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 center_frequency_hz = 4 [json_name = "centerFrequencyHz"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_center_frequency_hz());
    }

    // optional uint64 channel_width_hz = 5 [json_name = "channelWidthHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_channel_width_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiverState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceiverState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiverState::GetClassData() const { return &_class_data_; }


void ReceiverState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceiverState*>(&to_msg);
  auto& from = static_cast<const ReceiverState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.ReceiverState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_width_hz_ = from._impl_.channel_width_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiverState::CopyFrom(const ReceiverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.ReceiverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverState::IsInitialized() const {
  return true;
}

void ReceiverState::InternalSwap(ReceiverState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceiverState, _impl_.channel_width_hz_)
      + sizeof(ReceiverState::_impl_.channel_width_hz_)
      - PROTOBUF_FIELD_OFFSET(ReceiverState, _impl_.center_frequency_hz_)>(
          reinterpret_cast<char*>(&_impl_.center_frequency_hz_),
          reinterpret_cast<char*>(&other->_impl_.center_frequency_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiverState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[1]);
}
// ===================================================================

class TdmaSchedule_TdmaSlot_TxSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<TdmaSchedule_TdmaSlot_TxSlot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TdmaSchedule_TdmaSlot_TxSlot, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TdmaSchedule_TdmaSlot_TxSlot::TdmaSchedule_TdmaSlot_TxSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
}
TdmaSchedule_TdmaSlot_TxSlot::TdmaSchedule_TdmaSlot_TxSlot(const TdmaSchedule_TdmaSlot_TxSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TdmaSchedule_TdmaSlot_TxSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_receiver_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_receiver_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.remote_receiver_id_.Set(from._internal_remote_receiver_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
}

inline void TdmaSchedule_TdmaSlot_TxSlot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_receiver_id_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.remote_receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_receiver_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TdmaSchedule_TdmaSlot_TxSlot::~TdmaSchedule_TdmaSlot_TxSlot() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TdmaSchedule_TdmaSlot_TxSlot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_receiver_id_.Destroy();
}

void TdmaSchedule_TdmaSlot_TxSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TdmaSchedule_TdmaSlot_TxSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.remote_receiver_id_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TdmaSchedule_TdmaSlot_TxSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.TxSlotType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot_TxSlotType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot_TxSlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string remote_receiver_id = 2 [json_name = "remoteReceiverId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_remote_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.remote_receiver_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TdmaSchedule_TdmaSlot_TxSlot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.TxSlotType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string remote_receiver_id = 2 [json_name = "remoteReceiverId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_remote_receiver_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.remote_receiver_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  return target;
}

::size_t TdmaSchedule_TdmaSlot_TxSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string remote_receiver_id = 2 [json_name = "remoteReceiverId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_remote_receiver_id());
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot.TxSlotType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TdmaSchedule_TdmaSlot_TxSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TdmaSchedule_TdmaSlot_TxSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TdmaSchedule_TdmaSlot_TxSlot::GetClassData() const { return &_class_data_; }


void TdmaSchedule_TdmaSlot_TxSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TdmaSchedule_TdmaSlot_TxSlot*>(&to_msg);
  auto& from = static_cast<const TdmaSchedule_TdmaSlot_TxSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_remote_receiver_id(from._internal_remote_receiver_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TdmaSchedule_TdmaSlot_TxSlot::CopyFrom(const TdmaSchedule_TdmaSlot_TxSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TdmaSchedule_TdmaSlot_TxSlot::IsInitialized() const {
  return true;
}

void TdmaSchedule_TdmaSlot_TxSlot::InternalSwap(TdmaSchedule_TdmaSlot_TxSlot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.remote_receiver_id_, lhs_arena,
                                       &other->_impl_.remote_receiver_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TdmaSchedule_TdmaSlot_TxSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[2]);
}
// ===================================================================

class TdmaSchedule_TdmaSlot_RxSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<TdmaSchedule_TdmaSlot_RxSlot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TdmaSchedule_TdmaSlot_RxSlot, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_transmitter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TdmaSchedule_TdmaSlot_RxSlot::TdmaSchedule_TdmaSlot_RxSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
}
TdmaSchedule_TdmaSlot_RxSlot::TdmaSchedule_TdmaSlot_RxSlot(const TdmaSchedule_TdmaSlot_RxSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TdmaSchedule_TdmaSlot_RxSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_transmitter_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_transmitter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_transmitter_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.remote_transmitter_id_.Set(from._internal_remote_transmitter_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
}

inline void TdmaSchedule_TdmaSlot_RxSlot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_transmitter_id_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.remote_transmitter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_transmitter_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TdmaSchedule_TdmaSlot_RxSlot::~TdmaSchedule_TdmaSlot_RxSlot() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TdmaSchedule_TdmaSlot_RxSlot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_transmitter_id_.Destroy();
}

void TdmaSchedule_TdmaSlot_RxSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TdmaSchedule_TdmaSlot_RxSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.remote_transmitter_id_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TdmaSchedule_TdmaSlot_RxSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.RxSlotType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot_RxSlotType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot_RxSlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string remote_transmitter_id = 2 [json_name = "remoteTransmitterId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_remote_transmitter_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.remote_transmitter_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TdmaSchedule_TdmaSlot_RxSlot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.RxSlotType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string remote_transmitter_id = 2 [json_name = "remoteTransmitterId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_remote_transmitter_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.remote_transmitter_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  return target;
}

::size_t TdmaSchedule_TdmaSlot_RxSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string remote_transmitter_id = 2 [json_name = "remoteTransmitterId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_remote_transmitter_id());
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot.RxSlotType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TdmaSchedule_TdmaSlot_RxSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TdmaSchedule_TdmaSlot_RxSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TdmaSchedule_TdmaSlot_RxSlot::GetClassData() const { return &_class_data_; }


void TdmaSchedule_TdmaSlot_RxSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TdmaSchedule_TdmaSlot_RxSlot*>(&to_msg);
  auto& from = static_cast<const TdmaSchedule_TdmaSlot_RxSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_remote_transmitter_id(from._internal_remote_transmitter_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TdmaSchedule_TdmaSlot_RxSlot::CopyFrom(const TdmaSchedule_TdmaSlot_RxSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TdmaSchedule_TdmaSlot_RxSlot::IsInitialized() const {
  return true;
}

void TdmaSchedule_TdmaSlot_RxSlot::InternalSwap(TdmaSchedule_TdmaSlot_RxSlot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.remote_transmitter_id_, lhs_arena,
                                       &other->_impl_.remote_transmitter_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TdmaSchedule_TdmaSlot_RxSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[3]);
}
// ===================================================================

class TdmaSchedule_TdmaSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<TdmaSchedule_TdmaSlot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TdmaSchedule_TdmaSlot, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::Duration& duration(const TdmaSchedule_TdmaSlot* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot& transmit(const TdmaSchedule_TdmaSlot* msg);
  static const ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot& receive(const TdmaSchedule_TdmaSlot* msg);
};

const ::aalyria::spacetime::api::common::Duration&
TdmaSchedule_TdmaSlot::_Internal::duration(const TdmaSchedule_TdmaSlot* msg) {
  return *msg->_impl_.duration_;
}
const ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot&
TdmaSchedule_TdmaSlot::_Internal::transmit(const TdmaSchedule_TdmaSlot* msg) {
  return *msg->_impl_.slot_type_.transmit_;
}
const ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot&
TdmaSchedule_TdmaSlot::_Internal::receive(const TdmaSchedule_TdmaSlot* msg) {
  return *msg->_impl_.slot_type_.receive_;
}
void TdmaSchedule_TdmaSlot::clear_duration() {
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TdmaSchedule_TdmaSlot::set_allocated_transmit(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot* transmit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_slot_type();
  if (transmit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transmit);
    if (message_arena != submessage_arena) {
      transmit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmit, submessage_arena);
    }
    set_has_transmit();
    _impl_.slot_type_.transmit_ = transmit;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.transmit)
}
void TdmaSchedule_TdmaSlot::set_allocated_receive(::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot* receive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_slot_type();
  if (receive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(receive);
    if (message_arena != submessage_arena) {
      receive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive, submessage_arena);
    }
    set_has_receive();
    _impl_.slot_type_.receive_ = receive;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.receive)
}
TdmaSchedule_TdmaSlot::TdmaSchedule_TdmaSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
}
TdmaSchedule_TdmaSlot::TdmaSchedule_TdmaSlot(const TdmaSchedule_TdmaSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TdmaSchedule_TdmaSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.slot_type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.duration_ = new ::aalyria::spacetime::api::common::Duration(*from._impl_.duration_);
  }
  clear_has_slot_type();
  switch (from.slot_type_case()) {
    case kTransmit: {
      _this->_internal_mutable_transmit()->::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot::MergeFrom(
          from._internal_transmit());
      break;
    }
    case kReceive: {
      _this->_internal_mutable_receive()->::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot::MergeFrom(
          from._internal_receive());
      break;
    }
    case SLOT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
}

inline void TdmaSchedule_TdmaSlot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.slot_type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_slot_type();
}

TdmaSchedule_TdmaSlot::~TdmaSchedule_TdmaSlot() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TdmaSchedule_TdmaSlot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
  if (has_slot_type()) {
    clear_slot_type();
  }
}

void TdmaSchedule_TdmaSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TdmaSchedule_TdmaSlot::clear_slot_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  switch (slot_type_case()) {
    case kTransmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.slot_type_.transmit_;
      }
      break;
    }
    case kReceive: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.slot_type_.receive_;
      }
      break;
    }
    case SLOT_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SLOT_TYPE_NOT_SET;
}


void TdmaSchedule_TdmaSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.duration_ != nullptr);
    _impl_.duration_->Clear();
  }
  clear_slot_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TdmaSchedule_TdmaSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.Duration duration = 1 [json_name = "duration"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot transmit = 2 [json_name = "transmit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot receive = 3 [json_name = "receive"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TdmaSchedule_TdmaSlot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.Duration duration = 1 [json_name = "duration"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  switch (slot_type_case()) {
    case kTransmit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::transmit(this),
          _Internal::transmit(this).GetCachedSize(), target, stream);
      break;
    }
    case kReceive: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::receive(this),
          _Internal::receive(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  return target;
}

::size_t TdmaSchedule_TdmaSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.common.Duration duration = 1 [json_name = "duration"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  switch (slot_type_case()) {
    // .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.TxSlot transmit = 2 [json_name = "transmit"];
    case kTransmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slot_type_.transmit_);
      break;
    }
    // .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot.RxSlot receive = 3 [json_name = "receive"];
    case kReceive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slot_type_.receive_);
      break;
    }
    case SLOT_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TdmaSchedule_TdmaSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TdmaSchedule_TdmaSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TdmaSchedule_TdmaSlot::GetClassData() const { return &_class_data_; }


void TdmaSchedule_TdmaSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TdmaSchedule_TdmaSlot*>(&to_msg);
  auto& from = static_cast<const TdmaSchedule_TdmaSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_duration()->::aalyria::spacetime::api::common::Duration::MergeFrom(
        from._internal_duration());
  }
  switch (from.slot_type_case()) {
    case kTransmit: {
      _this->_internal_mutable_transmit()->::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot::MergeFrom(
          from._internal_transmit());
      break;
    }
    case kReceive: {
      _this->_internal_mutable_receive()->::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot::MergeFrom(
          from._internal_receive());
      break;
    }
    case SLOT_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TdmaSchedule_TdmaSlot::CopyFrom(const TdmaSchedule_TdmaSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TdmaSchedule_TdmaSlot::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.duration_->IsInitialized()) return false;
  }
  return true;
}

void TdmaSchedule_TdmaSlot::InternalSwap(TdmaSchedule_TdmaSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.duration_, other->_impl_.duration_);
  swap(_impl_.slot_type_, other->_impl_.slot_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TdmaSchedule_TdmaSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[4]);
}
// ===================================================================

class TdmaSchedule::_Internal {
 public:
  using HasBits = decltype(std::declval<TdmaSchedule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TdmaSchedule, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::Duration& schedule_duration(const TdmaSchedule* msg);
  static void set_has_schedule_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::Duration&
TdmaSchedule::_Internal::schedule_duration(const TdmaSchedule* msg) {
  return *msg->_impl_.schedule_duration_;
}
void TdmaSchedule::clear_schedule_duration() {
  if (_impl_.schedule_duration_ != nullptr) _impl_.schedule_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TdmaSchedule::TdmaSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TdmaSchedule)
}
TdmaSchedule::TdmaSchedule(const TdmaSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TdmaSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){from._impl_.schedule_}
    , decltype(_impl_.schedule_duration_){nullptr}
    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.schedule_duration_ = new ::aalyria::spacetime::api::common::Duration(*from._impl_.schedule_duration_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TdmaSchedule)
}

inline void TdmaSchedule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){arena}
    , decltype(_impl_.schedule_duration_){nullptr}
    , decltype(_impl_.type_) { 0 }

  };
}

TdmaSchedule::~TdmaSchedule() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TdmaSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TdmaSchedule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_schedule()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.schedule_duration_;
}

void TdmaSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TdmaSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TdmaSchedule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_schedule()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.schedule_duration_ != nullptr);
    _impl_.schedule_duration_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TdmaSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TdmaSchedule.ScheduleType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::TdmaSchedule_ScheduleType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::common::TdmaSchedule_ScheduleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Duration schedule_duration = 2 [json_name = "scheduleDuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot schedule = 3 [json_name = "schedule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TdmaSchedule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TdmaSchedule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TdmaSchedule.ScheduleType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .aalyria.spacetime.api.common.Duration schedule_duration = 2 [json_name = "scheduleDuration"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schedule_duration(this),
        _Internal::schedule_duration(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot schedule = 3 [json_name = "schedule"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schedule_size()); i < n; i++) {
    const auto& repfield = this->_internal_schedule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TdmaSchedule)
  return target;
}

::size_t TdmaSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TdmaSchedule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.TdmaSchedule.TdmaSlot schedule = 3 [json_name = "schedule"];
  total_size += 1UL * this->_internal_schedule_size();
  for (const auto& msg : this->_internal_schedule()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.Duration schedule_duration = 2 [json_name = "scheduleDuration"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schedule_duration_);
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule.ScheduleType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TdmaSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TdmaSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TdmaSchedule::GetClassData() const { return &_class_data_; }


void TdmaSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TdmaSchedule*>(&to_msg);
  auto& from = static_cast<const TdmaSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TdmaSchedule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_schedule()->MergeFrom(from._internal_schedule());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_schedule_duration()->::aalyria::spacetime::api::common::Duration::MergeFrom(
          from._internal_schedule_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TdmaSchedule::CopyFrom(const TdmaSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TdmaSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TdmaSchedule::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_schedule()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.schedule_duration_->IsInitialized()) return false;
  }
  return true;
}

void TdmaSchedule::InternalSwap(TdmaSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_schedule()->InternalSwap(other->_internal_mutable_schedule());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TdmaSchedule, _impl_.type_)
      + sizeof(TdmaSchedule::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TdmaSchedule, _impl_.schedule_duration_)>(
          reinterpret_cast<char*>(&_impl_.schedule_duration_),
          reinterpret_cast<char*>(&other->_impl_.schedule_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TdmaSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[5]);
}
// ===================================================================

class RadioUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioUpdate, _impl_._has_bits_);
  static void set_has_radio_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TransmitterState& tx_state(const RadioUpdate* msg);
  static void set_has_tx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::ReceiverState& rx_state(const RadioUpdate* msg);
  static void set_has_rx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aalyria::spacetime::api::common::TdmaSchedule& tdma_schedule(const RadioUpdate* msg);
  static void set_has_tdma_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_modem_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_per_interface_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::aalyria::spacetime::api::common::TransmitterState&
RadioUpdate::_Internal::tx_state(const RadioUpdate* msg) {
  return *msg->_impl_.tx_state_;
}
const ::aalyria::spacetime::api::common::ReceiverState&
RadioUpdate::_Internal::rx_state(const RadioUpdate* msg) {
  return *msg->_impl_.rx_state_;
}
const ::aalyria::spacetime::api::common::TdmaSchedule&
RadioUpdate::_Internal::tdma_schedule(const RadioUpdate* msg) {
  return *msg->_impl_.tdma_schedule_;
}
RadioUpdate::RadioUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.RadioUpdate)
}
RadioUpdate::RadioUpdate(const RadioUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.radio_config_id_) {}

    , decltype(_impl_.modem_config_id_) {}

    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}
    , decltype(_impl_.per_interface_sequence_number_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.radio_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.radio_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.radio_config_id_.Set(from._internal_radio_config_id(), _this->GetArenaForAllocation());
  }
  _impl_.modem_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modem_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.modem_config_id_.Set(from._internal_modem_config_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.tx_state_ = new ::aalyria::spacetime::api::common::TransmitterState(*from._impl_.tx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.rx_state_ = new ::aalyria::spacetime::api::common::ReceiverState(*from._impl_.rx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.tdma_schedule_ = new ::aalyria::spacetime::api::common::TdmaSchedule(*from._impl_.tdma_schedule_);
  }
  _this->_impl_.per_interface_sequence_number_ = from._impl_.per_interface_sequence_number_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.RadioUpdate)
}

inline void RadioUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.radio_config_id_) {}

    , decltype(_impl_.modem_config_id_) {}

    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}
    , decltype(_impl_.per_interface_sequence_number_) { ::int64_t{0} }

  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.radio_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.radio_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.modem_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modem_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadioUpdate::~RadioUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.RadioUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
  _impl_.radio_config_id_.Destroy();
  _impl_.modem_config_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_state_;
  if (this != internal_default_instance()) delete _impl_.rx_state_;
  if (this != internal_default_instance()) delete _impl_.tdma_schedule_;
}

void RadioUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.RadioUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.radio_config_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.modem_config_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.tx_state_ != nullptr);
      _impl_.tx_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.rx_state_ != nullptr);
      _impl_.rx_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.tdma_schedule_ != nullptr);
      _impl_.tdma_schedule_->Clear();
    }
  }
  _impl_.per_interface_sequence_number_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdma_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string interface_id = 4 [json_name = "interfaceId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.RadioUpdate.interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 per_interface_sequence_number = 5 [json_name = "perInterfaceSequenceNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_per_interface_sequence_number(&has_bits);
          _impl_.per_interface_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string radio_config_id = 6 [json_name = "radioConfigId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_radio_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.RadioUpdate.radio_config_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string modem_config_id = 8 [json_name = "modemConfigId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_modem_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.RadioUpdate.modem_config_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.RadioUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx_state(this),
        _Internal::tx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rx_state(this),
        _Internal::rx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tdma_schedule(this),
        _Internal::tdma_schedule(this).GetCachedSize(), target, stream);
  }

  // optional string interface_id = 4 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.RadioUpdate.interface_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int64 per_interface_sequence_number = 5 [json_name = "perInterfaceSequenceNumber"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_per_interface_sequence_number(), target);
  }

  // optional string radio_config_id = 6 [json_name = "radioConfigId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_radio_config_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.RadioUpdate.radio_config_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string modem_config_id = 8 [json_name = "modemConfigId"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_modem_config_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.RadioUpdate.modem_config_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.RadioUpdate)
  return target;
}

::size_t RadioUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.RadioUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string interface_id = 4 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_interface_id());
    }

    // optional string radio_config_id = 6 [json_name = "radioConfigId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_radio_config_id());
    }

    // optional string modem_config_id = 8 [json_name = "modemConfigId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_modem_config_id());
    }

    // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_state_);
    }

    // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rx_state_);
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tdma_schedule_);
    }

    // optional int64 per_interface_sequence_number = 5 [json_name = "perInterfaceSequenceNumber"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_per_interface_sequence_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioUpdate::GetClassData() const { return &_class_data_; }


void RadioUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioUpdate*>(&to_msg);
  auto& from = static_cast<const RadioUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.RadioUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface_id(from._internal_interface_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_radio_config_id(from._internal_radio_config_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_modem_config_id(from._internal_modem_config_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tx_state()->::aalyria::spacetime::api::common::TransmitterState::MergeFrom(
          from._internal_tx_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_rx_state()->::aalyria::spacetime::api::common::ReceiverState::MergeFrom(
          from._internal_rx_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tdma_schedule()->::aalyria::spacetime::api::common::TdmaSchedule::MergeFrom(
          from._internal_tdma_schedule());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.per_interface_sequence_number_ = from._impl_.per_interface_sequence_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioUpdate::CopyFrom(const RadioUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.RadioUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioUpdate::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (!_impl_.tdma_schedule_->IsInitialized()) return false;
  }
  return true;
}

void RadioUpdate::InternalSwap(RadioUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_id_, lhs_arena,
                                       &other->_impl_.interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.radio_config_id_, lhs_arena,
                                       &other->_impl_.radio_config_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modem_config_id_, lhs_arena,
                                       &other->_impl_.modem_config_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioUpdate, _impl_.per_interface_sequence_number_)
      + sizeof(RadioUpdate::_impl_.per_interface_sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RadioUpdate, _impl_.tx_state_)>(
          reinterpret_cast<char*>(&_impl_.tx_state_),
          reinterpret_cast<char*>(&other->_impl_.tx_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[6]);
}
// ===================================================================

class RadioStates_RadioState::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioStates_RadioState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioStates_RadioState, _impl_._has_bits_);
  static void set_has_radio_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TransmitterState& tx_state(const RadioStates_RadioState* msg);
  static void set_has_tx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::ReceiverState& rx_state(const RadioStates_RadioState* msg);
  static void set_has_rx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::TdmaSchedule& tdma_schedule(const RadioStates_RadioState* msg);
  static void set_has_tdma_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::common::TransmitterState&
RadioStates_RadioState::_Internal::tx_state(const RadioStates_RadioState* msg) {
  return *msg->_impl_.tx_state_;
}
const ::aalyria::spacetime::api::common::ReceiverState&
RadioStates_RadioState::_Internal::rx_state(const RadioStates_RadioState* msg) {
  return *msg->_impl_.rx_state_;
}
const ::aalyria::spacetime::api::common::TdmaSchedule&
RadioStates_RadioState::_Internal::tdma_schedule(const RadioStates_RadioState* msg) {
  return *msg->_impl_.tdma_schedule_;
}
RadioStates_RadioState::RadioStates_RadioState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.RadioStates.RadioState)
}
RadioStates_RadioState::RadioStates_RadioState(const RadioStates_RadioState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioStates_RadioState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radio_config_id_) {}

    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.radio_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.radio_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.radio_config_id_.Set(from._internal_radio_config_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.tx_state_ = new ::aalyria::spacetime::api::common::TransmitterState(*from._impl_.tx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.rx_state_ = new ::aalyria::spacetime::api::common::ReceiverState(*from._impl_.rx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.tdma_schedule_ = new ::aalyria::spacetime::api::common::TdmaSchedule(*from._impl_.tdma_schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.RadioStates.RadioState)
}

inline void RadioStates_RadioState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radio_config_id_) {}

    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}
  };
  _impl_.radio_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.radio_config_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadioStates_RadioState::~RadioStates_RadioState() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.RadioStates.RadioState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioStates_RadioState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radio_config_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_state_;
  if (this != internal_default_instance()) delete _impl_.rx_state_;
  if (this != internal_default_instance()) delete _impl_.tdma_schedule_;
}

void RadioStates_RadioState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioStates_RadioState::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.RadioStates.RadioState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.radio_config_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tx_state_ != nullptr);
      _impl_.tx_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rx_state_ != nullptr);
      _impl_.rx_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.tdma_schedule_ != nullptr);
      _impl_.tdma_schedule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioStates_RadioState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdma_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string radio_config_id = 4 [json_name = "radioConfigId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_radio_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.RadioStates.RadioState.radio_config_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioStates_RadioState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.RadioStates.RadioState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx_state(this),
        _Internal::tx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rx_state(this),
        _Internal::rx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tdma_schedule(this),
        _Internal::tdma_schedule(this).GetCachedSize(), target, stream);
  }

  // optional string radio_config_id = 4 [json_name = "radioConfigId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_radio_config_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.RadioStates.RadioState.radio_config_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.RadioStates.RadioState)
  return target;
}

::size_t RadioStates_RadioState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.RadioStates.RadioState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string radio_config_id = 4 [json_name = "radioConfigId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_radio_config_id());
    }

    // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 1 [json_name = "txState"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_state_);
    }

    // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 2 [json_name = "rxState"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rx_state_);
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 3 [json_name = "tdmaSchedule"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tdma_schedule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioStates_RadioState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioStates_RadioState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioStates_RadioState::GetClassData() const { return &_class_data_; }


void RadioStates_RadioState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioStates_RadioState*>(&to_msg);
  auto& from = static_cast<const RadioStates_RadioState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.RadioStates.RadioState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_radio_config_id(from._internal_radio_config_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tx_state()->::aalyria::spacetime::api::common::TransmitterState::MergeFrom(
          from._internal_tx_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rx_state()->::aalyria::spacetime::api::common::ReceiverState::MergeFrom(
          from._internal_rx_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tdma_schedule()->::aalyria::spacetime::api::common::TdmaSchedule::MergeFrom(
          from._internal_tdma_schedule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioStates_RadioState::CopyFrom(const RadioStates_RadioState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.RadioStates.RadioState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioStates_RadioState::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.tdma_schedule_->IsInitialized()) return false;
  }
  return true;
}

void RadioStates_RadioState::InternalSwap(RadioStates_RadioState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.radio_config_id_, lhs_arena,
                                       &other->_impl_.radio_config_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioStates_RadioState, _impl_.tdma_schedule_)
      + sizeof(RadioStates_RadioState::_impl_.tdma_schedule_)
      - PROTOBUF_FIELD_OFFSET(RadioStates_RadioState, _impl_.tx_state_)>(
          reinterpret_cast<char*>(&_impl_.tx_state_),
          reinterpret_cast<char*>(&other->_impl_.tx_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioStates_RadioState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[7]);
}
// ===================================================================

RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse() {}
RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::MergeFrom(const RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[8]);
}
// ===================================================================

class RadioStates::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioStates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioStates, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const RadioStates* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
RadioStates::_Internal::timestamp(const RadioStates* msg) {
  return *msg->_impl_.timestamp_;
}
void RadioStates::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RadioStates::RadioStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.RadioStates)
}
RadioStates::RadioStates(const RadioStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.radio_config_id_by_interface_id_)*/{}
    , decltype(_impl_.timestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.radio_config_id_by_interface_id_.MergeFrom(from._impl_.radio_config_id_by_interface_id_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.RadioStates)
}

inline void RadioStates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.radio_config_id_by_interface_id_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.timestamp_){nullptr}
  };
}

RadioStates::~RadioStates() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.RadioStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioStates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radio_config_id_by_interface_id_.~MapField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void RadioStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioStates::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.RadioStates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.radio_config_id_by_interface_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> radio_config_id_by_interface_id = 4 [json_name = "radioConfigIdByInterfaceId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.radio_config_id_by_interface_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioStates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.RadioStates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // map<string, string> radio_config_id_by_interface_id = 4 [json_name = "radioConfigIdByInterfaceId"];
  if (!this->_internal_radio_config_id_by_interface_id().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_radio_config_id_by_interface_id();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.RadioStates.radio_config_id_by_interface_id");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.RadioStates.radio_config_id_by_interface_id");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.RadioStates)
  return target;
}

::size_t RadioStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.RadioStates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> radio_config_id_by_interface_id = 4 [json_name = "radioConfigIdByInterfaceId"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_radio_config_id_by_interface_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_radio_config_id_by_interface_id().begin();
      it != this->_internal_radio_config_id_by_interface_id().end(); ++it) {
    total_size += RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .aalyria.spacetime.api.common.DateTime timestamp = 3 [json_name = "timestamp"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioStates::GetClassData() const { return &_class_data_; }


void RadioStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioStates*>(&to_msg);
  auto& from = static_cast<const RadioStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.RadioStates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.radio_config_id_by_interface_id_.MergeFrom(from._impl_.radio_config_id_by_interface_id_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioStates::CopyFrom(const RadioStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.RadioStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioStates::IsInitialized() const {
  return true;
}

void RadioStates::InternalSwap(RadioStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.radio_config_id_by_interface_id_.InternalSwap(&other->_impl_.radio_config_id_by_interface_id_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_getter, &descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto_once,
      file_level_metadata_api_2fcommon_2fcontrol_5fradio_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransmitterState*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransmitterState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransmitterState >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::ReceiverState*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::ReceiverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::ReceiverState >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_TxSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot_RxSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TdmaSchedule_TdmaSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TdmaSchedule*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TdmaSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TdmaSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioStates_RadioState*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioStates_RadioState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioStates_RadioState >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioStates_RadioConfigIdByInterfaceIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::RadioStates*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::RadioStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::RadioStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

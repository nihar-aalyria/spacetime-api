// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/common/platform_antenna.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fwireless_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fwireless_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fwireless_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class AmplifierDefinition;
struct AmplifierDefinitionDefaultTypeInternal;
extern AmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_default_instance_;
class AmplifierDefinition_ConstantGainAmplifierDefinition;
struct AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal;
extern AmplifierDefinition_ConstantGainAmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_ConstantGainAmplifierDefinition_default_instance_;
class AmplifierDefinition_LowNoiseAmplifierDefinition;
struct AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal;
extern AmplifierDefinition_LowNoiseAmplifierDefinitionDefaultTypeInternal _AmplifierDefinition_LowNoiseAmplifierDefinition_default_instance_;
class MiscGainOrLoss;
struct MiscGainOrLossDefaultTypeInternal;
extern MiscGainOrLossDefaultTypeInternal _MiscGainOrLoss_default_instance_;
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::AmplifierDefinition* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AmplifierDefinition>(Arena*);
template <>
::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition>(Arena*);
template <>
::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition>(Arena*);
template <>
::aalyria::spacetime::api::common::MiscGainOrLoss* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::MiscGainOrLoss>(Arena*);
template <>
::aalyria::spacetime::api::common::Signal* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::Signal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {

// ===================================================================


// -------------------------------------------------------------------

class AmplifierDefinition_ConstantGainAmplifierDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition) */ {
 public:
  inline AmplifierDefinition_ConstantGainAmplifierDefinition() : AmplifierDefinition_ConstantGainAmplifierDefinition(nullptr) {}
  ~AmplifierDefinition_ConstantGainAmplifierDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AmplifierDefinition_ConstantGainAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmplifierDefinition_ConstantGainAmplifierDefinition(const AmplifierDefinition_ConstantGainAmplifierDefinition& from);
  AmplifierDefinition_ConstantGainAmplifierDefinition(AmplifierDefinition_ConstantGainAmplifierDefinition&& from) noexcept
    : AmplifierDefinition_ConstantGainAmplifierDefinition() {
    *this = ::std::move(from);
  }

  inline AmplifierDefinition_ConstantGainAmplifierDefinition& operator=(const AmplifierDefinition_ConstantGainAmplifierDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmplifierDefinition_ConstantGainAmplifierDefinition& operator=(AmplifierDefinition_ConstantGainAmplifierDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmplifierDefinition_ConstantGainAmplifierDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AmplifierDefinition_ConstantGainAmplifierDefinition* internal_default_instance() {
    return reinterpret_cast<const AmplifierDefinition_ConstantGainAmplifierDefinition*>(
               &_AmplifierDefinition_ConstantGainAmplifierDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AmplifierDefinition_ConstantGainAmplifierDefinition& a, AmplifierDefinition_ConstantGainAmplifierDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(AmplifierDefinition_ConstantGainAmplifierDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmplifierDefinition_ConstantGainAmplifierDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmplifierDefinition_ConstantGainAmplifierDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmplifierDefinition_ConstantGainAmplifierDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmplifierDefinition_ConstantGainAmplifierDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AmplifierDefinition_ConstantGainAmplifierDefinition& from) {
    AmplifierDefinition_ConstantGainAmplifierDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmplifierDefinition_ConstantGainAmplifierDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition";
  }
  protected:
  explicit AmplifierDefinition_ConstantGainAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainDbFieldNumber = 1,
    kNoiseFactorFieldNumber = 2,
    kReferenceTemperatureKFieldNumber = 3,
  };
  // optional double gain_db = 1 [json_name = "gainDb"];
  bool has_gain_db() const;
  void clear_gain_db() ;
  double gain_db() const;
  void set_gain_db(double value);

  private:
  double _internal_gain_db() const;
  void _internal_set_gain_db(double value);

  public:
  // optional double noise_factor = 2 [json_name = "noiseFactor"];
  bool has_noise_factor() const;
  void clear_noise_factor() ;
  double noise_factor() const;
  void set_noise_factor(double value);

  private:
  double _internal_noise_factor() const;
  void _internal_set_noise_factor(double value);

  public:
  // optional double reference_temperature_k = 3 [json_name = "referenceTemperatureK"];
  bool has_reference_temperature_k() const;
  void clear_reference_temperature_k() ;
  double reference_temperature_k() const;
  void set_reference_temperature_k(double value);

  private:
  double _internal_reference_temperature_k() const;
  void _internal_set_reference_temperature_k(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double gain_db_;
    double noise_factor_;
    double reference_temperature_k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_2eproto;
};// -------------------------------------------------------------------

class AmplifierDefinition_LowNoiseAmplifierDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition) */ {
 public:
  inline AmplifierDefinition_LowNoiseAmplifierDefinition() : AmplifierDefinition_LowNoiseAmplifierDefinition(nullptr) {}
  ~AmplifierDefinition_LowNoiseAmplifierDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AmplifierDefinition_LowNoiseAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmplifierDefinition_LowNoiseAmplifierDefinition(const AmplifierDefinition_LowNoiseAmplifierDefinition& from);
  AmplifierDefinition_LowNoiseAmplifierDefinition(AmplifierDefinition_LowNoiseAmplifierDefinition&& from) noexcept
    : AmplifierDefinition_LowNoiseAmplifierDefinition() {
    *this = ::std::move(from);
  }

  inline AmplifierDefinition_LowNoiseAmplifierDefinition& operator=(const AmplifierDefinition_LowNoiseAmplifierDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmplifierDefinition_LowNoiseAmplifierDefinition& operator=(AmplifierDefinition_LowNoiseAmplifierDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmplifierDefinition_LowNoiseAmplifierDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AmplifierDefinition_LowNoiseAmplifierDefinition* internal_default_instance() {
    return reinterpret_cast<const AmplifierDefinition_LowNoiseAmplifierDefinition*>(
               &_AmplifierDefinition_LowNoiseAmplifierDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AmplifierDefinition_LowNoiseAmplifierDefinition& a, AmplifierDefinition_LowNoiseAmplifierDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(AmplifierDefinition_LowNoiseAmplifierDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmplifierDefinition_LowNoiseAmplifierDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmplifierDefinition_LowNoiseAmplifierDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmplifierDefinition_LowNoiseAmplifierDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmplifierDefinition_LowNoiseAmplifierDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AmplifierDefinition_LowNoiseAmplifierDefinition& from) {
    AmplifierDefinition_LowNoiseAmplifierDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmplifierDefinition_LowNoiseAmplifierDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition";
  }
  protected:
  explicit AmplifierDefinition_LowNoiseAmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreLnaGainDbFieldNumber = 1,
    kLnaGainDbFieldNumber = 2,
    kPostLnaGainDbFieldNumber = 3,
    kNoiseFactorFieldNumber = 4,
    kReferenceTemperatureKFieldNumber = 5,
  };
  // optional double pre_lna_gain_db = 1 [json_name = "preLnaGainDb"];
  bool has_pre_lna_gain_db() const;
  void clear_pre_lna_gain_db() ;
  double pre_lna_gain_db() const;
  void set_pre_lna_gain_db(double value);

  private:
  double _internal_pre_lna_gain_db() const;
  void _internal_set_pre_lna_gain_db(double value);

  public:
  // optional double lna_gain_db = 2 [json_name = "lnaGainDb"];
  bool has_lna_gain_db() const;
  void clear_lna_gain_db() ;
  double lna_gain_db() const;
  void set_lna_gain_db(double value);

  private:
  double _internal_lna_gain_db() const;
  void _internal_set_lna_gain_db(double value);

  public:
  // optional double post_lna_gain_db = 3 [json_name = "postLnaGainDb"];
  bool has_post_lna_gain_db() const;
  void clear_post_lna_gain_db() ;
  double post_lna_gain_db() const;
  void set_post_lna_gain_db(double value);

  private:
  double _internal_post_lna_gain_db() const;
  void _internal_set_post_lna_gain_db(double value);

  public:
  // optional double noise_factor = 4 [json_name = "noiseFactor"];
  bool has_noise_factor() const;
  void clear_noise_factor() ;
  double noise_factor() const;
  void set_noise_factor(double value);

  private:
  double _internal_noise_factor() const;
  void _internal_set_noise_factor(double value);

  public:
  // optional double reference_temperature_k = 5 [json_name = "referenceTemperatureK"];
  bool has_reference_temperature_k() const;
  void clear_reference_temperature_k() ;
  double reference_temperature_k() const;
  void set_reference_temperature_k(double value);

  private:
  double _internal_reference_temperature_k() const;
  void _internal_set_reference_temperature_k(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double pre_lna_gain_db_;
    double lna_gain_db_;
    double post_lna_gain_db_;
    double noise_factor_;
    double reference_temperature_k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_2eproto;
};// -------------------------------------------------------------------

class AmplifierDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AmplifierDefinition) */ {
 public:
  inline AmplifierDefinition() : AmplifierDefinition(nullptr) {}
  ~AmplifierDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AmplifierDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmplifierDefinition(const AmplifierDefinition& from);
  AmplifierDefinition(AmplifierDefinition&& from) noexcept
    : AmplifierDefinition() {
    *this = ::std::move(from);
  }

  inline AmplifierDefinition& operator=(const AmplifierDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmplifierDefinition& operator=(AmplifierDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmplifierDefinition& default_instance() {
    return *internal_default_instance();
  }
  enum AmplifierTypeCase {
    kConstantGain = 1,
    kLowNoise = 2,
    AMPLIFIER_TYPE_NOT_SET = 0,
  };

  static inline const AmplifierDefinition* internal_default_instance() {
    return reinterpret_cast<const AmplifierDefinition*>(
               &_AmplifierDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AmplifierDefinition& a, AmplifierDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(AmplifierDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmplifierDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmplifierDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmplifierDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmplifierDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AmplifierDefinition& from) {
    AmplifierDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmplifierDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AmplifierDefinition";
  }
  protected:
  explicit AmplifierDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AmplifierDefinition_ConstantGainAmplifierDefinition ConstantGainAmplifierDefinition;
  typedef AmplifierDefinition_LowNoiseAmplifierDefinition LowNoiseAmplifierDefinition;

  // accessors -------------------------------------------------------

  enum : int {
    kConstantGainFieldNumber = 1,
    kLowNoiseFieldNumber = 2,
  };
  // .aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition constant_gain = 1 [json_name = "constantGain"];
  bool has_constant_gain() const;
  private:
  bool _internal_has_constant_gain() const;

  public:
  void clear_constant_gain() ;
  const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition& constant_gain() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* release_constant_gain();
  ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* mutable_constant_gain();
  void set_allocated_constant_gain(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* constant_gain);
  private:
  const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition& _internal_constant_gain() const;
  ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* _internal_mutable_constant_gain();
  public:
  void unsafe_arena_set_allocated_constant_gain(
      ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* constant_gain);
  ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* unsafe_arena_release_constant_gain();
  // .aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition low_noise = 2 [json_name = "lowNoise"];
  bool has_low_noise() const;
  private:
  bool _internal_has_low_noise() const;

  public:
  void clear_low_noise() ;
  const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition& low_noise() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* release_low_noise();
  ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* mutable_low_noise();
  void set_allocated_low_noise(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* low_noise);
  private:
  const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition& _internal_low_noise() const;
  ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* _internal_mutable_low_noise();
  public:
  void unsafe_arena_set_allocated_low_noise(
      ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* low_noise);
  ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* unsafe_arena_release_low_noise();
  void clear_amplifier_type();
  AmplifierTypeCase amplifier_type_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AmplifierDefinition)
 private:
  class _Internal;
  void set_has_constant_gain();
  void set_has_low_noise();

  inline bool has_amplifier_type() const;
  inline void clear_has_amplifier_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AmplifierTypeUnion {
      constexpr AmplifierTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* constant_gain_;
      ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* low_noise_;
    } amplifier_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_2eproto;
};// -------------------------------------------------------------------

class MiscGainOrLoss final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.MiscGainOrLoss) */ {
 public:
  inline MiscGainOrLoss() : MiscGainOrLoss(nullptr) {}
  ~MiscGainOrLoss() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiscGainOrLoss(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MiscGainOrLoss(const MiscGainOrLoss& from);
  MiscGainOrLoss(MiscGainOrLoss&& from) noexcept
    : MiscGainOrLoss() {
    *this = ::std::move(from);
  }

  inline MiscGainOrLoss& operator=(const MiscGainOrLoss& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiscGainOrLoss& operator=(MiscGainOrLoss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiscGainOrLoss& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiscGainOrLoss* internal_default_instance() {
    return reinterpret_cast<const MiscGainOrLoss*>(
               &_MiscGainOrLoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MiscGainOrLoss& a, MiscGainOrLoss& b) {
    a.Swap(&b);
  }
  inline void Swap(MiscGainOrLoss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiscGainOrLoss* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiscGainOrLoss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiscGainOrLoss>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MiscGainOrLoss& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MiscGainOrLoss& from) {
    MiscGainOrLoss::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiscGainOrLoss* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.MiscGainOrLoss";
  }
  protected:
  explicit MiscGainOrLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGainOrLossDbFieldNumber = 2,
  };
  // optional string name = 1 [json_name = "name"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional double gain_or_loss_db = 2 [json_name = "gainOrLossDb"];
  bool has_gain_or_loss_db() const;
  void clear_gain_or_loss_db() ;
  double gain_or_loss_db() const;
  void set_gain_or_loss_db(double value);

  private:
  double _internal_gain_or_loss_db() const;
  void _internal_set_gain_or_loss_db(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.MiscGainOrLoss)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double gain_or_loss_db_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_2eproto;
};// -------------------------------------------------------------------

class Signal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  ~Signal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Signal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signal& from) {
    Signal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolarizationFieldNumber = 3,
    kCenterFrequencyHzFieldNumber = 1,
    kBandwidthHzFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.common.Polarization polarization = 3 [json_name = "polarization"];
  bool has_polarization() const;
  void clear_polarization() ;
  const ::aalyria::spacetime::api::common::Polarization& polarization() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::Polarization* release_polarization();
  ::aalyria::spacetime::api::common::Polarization* mutable_polarization();
  void set_allocated_polarization(::aalyria::spacetime::api::common::Polarization* polarization);
  private:
  const ::aalyria::spacetime::api::common::Polarization& _internal_polarization() const;
  ::aalyria::spacetime::api::common::Polarization* _internal_mutable_polarization();
  public:
  void unsafe_arena_set_allocated_polarization(
      ::aalyria::spacetime::api::common::Polarization* polarization);
  ::aalyria::spacetime::api::common::Polarization* unsafe_arena_release_polarization();
  // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
  bool has_center_frequency_hz() const;
  void clear_center_frequency_hz() ;
  ::uint64_t center_frequency_hz() const;
  void set_center_frequency_hz(::uint64_t value);

  private:
  ::uint64_t _internal_center_frequency_hz() const;
  void _internal_set_center_frequency_hz(::uint64_t value);

  public:
  // optional uint64 bandwidth_hz = 2 [json_name = "bandwidthHz"];
  bool has_bandwidth_hz() const;
  void clear_bandwidth_hz() ;
  ::uint64_t bandwidth_hz() const;
  void set_bandwidth_hz(::uint64_t value);

  private:
  ::uint64_t _internal_bandwidth_hz() const;
  void _internal_set_bandwidth_hz(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.Signal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::Polarization* polarization_;
    ::uint64_t center_frequency_hz_;
    ::uint64_t bandwidth_hz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fwireless_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AmplifierDefinition_ConstantGainAmplifierDefinition

// optional double gain_db = 1 [json_name = "gainDb"];
inline bool AmplifierDefinition_ConstantGainAmplifierDefinition::has_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::clear_gain_db() {
  _impl_.gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.gain_db)
  return _internal_gain_db();
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::set_gain_db(double value) {
  _internal_set_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.gain_db)
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_gain_db() const {
  return _impl_.gain_db_;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_set_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gain_db_ = value;
}

// optional double noise_factor = 2 [json_name = "noiseFactor"];
inline bool AmplifierDefinition_ConstantGainAmplifierDefinition::has_noise_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::clear_noise_factor() {
  _impl_.noise_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::noise_factor() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.noise_factor)
  return _internal_noise_factor();
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::set_noise_factor(double value) {
  _internal_set_noise_factor(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.noise_factor)
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_noise_factor() const {
  return _impl_.noise_factor_;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_set_noise_factor(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.noise_factor_ = value;
}

// optional double reference_temperature_k = 3 [json_name = "referenceTemperatureK"];
inline bool AmplifierDefinition_ConstantGainAmplifierDefinition::has_reference_temperature_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::clear_reference_temperature_k() {
  _impl_.reference_temperature_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::reference_temperature_k() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.reference_temperature_k)
  return _internal_reference_temperature_k();
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::set_reference_temperature_k(double value) {
  _internal_set_reference_temperature_k(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition.reference_temperature_k)
}
inline double AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_reference_temperature_k() const {
  return _impl_.reference_temperature_k_;
}
inline void AmplifierDefinition_ConstantGainAmplifierDefinition::_internal_set_reference_temperature_k(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reference_temperature_k_ = value;
}

// -------------------------------------------------------------------

// AmplifierDefinition_LowNoiseAmplifierDefinition

// optional double pre_lna_gain_db = 1 [json_name = "preLnaGainDb"];
inline bool AmplifierDefinition_LowNoiseAmplifierDefinition::has_pre_lna_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::clear_pre_lna_gain_db() {
  _impl_.pre_lna_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::pre_lna_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.pre_lna_gain_db)
  return _internal_pre_lna_gain_db();
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::set_pre_lna_gain_db(double value) {
  _internal_set_pre_lna_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.pre_lna_gain_db)
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_pre_lna_gain_db() const {
  return _impl_.pre_lna_gain_db_;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_set_pre_lna_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pre_lna_gain_db_ = value;
}

// optional double lna_gain_db = 2 [json_name = "lnaGainDb"];
inline bool AmplifierDefinition_LowNoiseAmplifierDefinition::has_lna_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::clear_lna_gain_db() {
  _impl_.lna_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::lna_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.lna_gain_db)
  return _internal_lna_gain_db();
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::set_lna_gain_db(double value) {
  _internal_set_lna_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.lna_gain_db)
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_lna_gain_db() const {
  return _impl_.lna_gain_db_;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_set_lna_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lna_gain_db_ = value;
}

// optional double post_lna_gain_db = 3 [json_name = "postLnaGainDb"];
inline bool AmplifierDefinition_LowNoiseAmplifierDefinition::has_post_lna_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::clear_post_lna_gain_db() {
  _impl_.post_lna_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::post_lna_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.post_lna_gain_db)
  return _internal_post_lna_gain_db();
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::set_post_lna_gain_db(double value) {
  _internal_set_post_lna_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.post_lna_gain_db)
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_post_lna_gain_db() const {
  return _impl_.post_lna_gain_db_;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_set_post_lna_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.post_lna_gain_db_ = value;
}

// optional double noise_factor = 4 [json_name = "noiseFactor"];
inline bool AmplifierDefinition_LowNoiseAmplifierDefinition::has_noise_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::clear_noise_factor() {
  _impl_.noise_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::noise_factor() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.noise_factor)
  return _internal_noise_factor();
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::set_noise_factor(double value) {
  _internal_set_noise_factor(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.noise_factor)
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_noise_factor() const {
  return _impl_.noise_factor_;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_set_noise_factor(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.noise_factor_ = value;
}

// optional double reference_temperature_k = 5 [json_name = "referenceTemperatureK"];
inline bool AmplifierDefinition_LowNoiseAmplifierDefinition::has_reference_temperature_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::clear_reference_temperature_k() {
  _impl_.reference_temperature_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::reference_temperature_k() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.reference_temperature_k)
  return _internal_reference_temperature_k();
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::set_reference_temperature_k(double value) {
  _internal_set_reference_temperature_k(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition.reference_temperature_k)
}
inline double AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_reference_temperature_k() const {
  return _impl_.reference_temperature_k_;
}
inline void AmplifierDefinition_LowNoiseAmplifierDefinition::_internal_set_reference_temperature_k(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reference_temperature_k_ = value;
}

// -------------------------------------------------------------------

// AmplifierDefinition

// .aalyria.spacetime.api.common.AmplifierDefinition.ConstantGainAmplifierDefinition constant_gain = 1 [json_name = "constantGain"];
inline bool AmplifierDefinition::has_constant_gain() const {
  return amplifier_type_case() == kConstantGain;
}
inline bool AmplifierDefinition::_internal_has_constant_gain() const {
  return amplifier_type_case() == kConstantGain;
}
inline void AmplifierDefinition::set_has_constant_gain() {
  _impl_._oneof_case_[0] = kConstantGain;
}
inline void AmplifierDefinition::clear_constant_gain() {
  if (amplifier_type_case() == kConstantGain) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.amplifier_type_.constant_gain_;
    }
    clear_has_amplifier_type();
  }
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* AmplifierDefinition::release_constant_gain() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
  if (amplifier_type_case() == kConstantGain) {
    clear_has_amplifier_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* temp = _impl_.amplifier_type_.constant_gain_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.amplifier_type_.constant_gain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition& AmplifierDefinition::_internal_constant_gain() const {
  return amplifier_type_case() == kConstantGain
      ? *_impl_.amplifier_type_.constant_gain_
      : reinterpret_cast<::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition&>(::aalyria::spacetime::api::common::_AmplifierDefinition_ConstantGainAmplifierDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition& AmplifierDefinition::constant_gain() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
  return _internal_constant_gain();
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* AmplifierDefinition::unsafe_arena_release_constant_gain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
  if (amplifier_type_case() == kConstantGain) {
    clear_has_amplifier_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* temp = _impl_.amplifier_type_.constant_gain_;
    _impl_.amplifier_type_.constant_gain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AmplifierDefinition::unsafe_arena_set_allocated_constant_gain(::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* constant_gain) {
  clear_amplifier_type();
  if (constant_gain) {
    set_has_constant_gain();
    _impl_.amplifier_type_.constant_gain_ = constant_gain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* AmplifierDefinition::_internal_mutable_constant_gain() {
  if (amplifier_type_case() != kConstantGain) {
    clear_amplifier_type();
    set_has_constant_gain();
    _impl_.amplifier_type_.constant_gain_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition >(GetArenaForAllocation());
  }
  return _impl_.amplifier_type_.constant_gain_;
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* AmplifierDefinition::mutable_constant_gain() {
  ::aalyria::spacetime::api::common::AmplifierDefinition_ConstantGainAmplifierDefinition* _msg = _internal_mutable_constant_gain();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AmplifierDefinition.constant_gain)
  return _msg;
}

// .aalyria.spacetime.api.common.AmplifierDefinition.LowNoiseAmplifierDefinition low_noise = 2 [json_name = "lowNoise"];
inline bool AmplifierDefinition::has_low_noise() const {
  return amplifier_type_case() == kLowNoise;
}
inline bool AmplifierDefinition::_internal_has_low_noise() const {
  return amplifier_type_case() == kLowNoise;
}
inline void AmplifierDefinition::set_has_low_noise() {
  _impl_._oneof_case_[0] = kLowNoise;
}
inline void AmplifierDefinition::clear_low_noise() {
  if (amplifier_type_case() == kLowNoise) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.amplifier_type_.low_noise_;
    }
    clear_has_amplifier_type();
  }
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* AmplifierDefinition::release_low_noise() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
  if (amplifier_type_case() == kLowNoise) {
    clear_has_amplifier_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* temp = _impl_.amplifier_type_.low_noise_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.amplifier_type_.low_noise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition& AmplifierDefinition::_internal_low_noise() const {
  return amplifier_type_case() == kLowNoise
      ? *_impl_.amplifier_type_.low_noise_
      : reinterpret_cast<::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition&>(::aalyria::spacetime::api::common::_AmplifierDefinition_LowNoiseAmplifierDefinition_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition& AmplifierDefinition::low_noise() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
  return _internal_low_noise();
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* AmplifierDefinition::unsafe_arena_release_low_noise() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
  if (amplifier_type_case() == kLowNoise) {
    clear_has_amplifier_type();
    ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* temp = _impl_.amplifier_type_.low_noise_;
    _impl_.amplifier_type_.low_noise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AmplifierDefinition::unsafe_arena_set_allocated_low_noise(::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* low_noise) {
  clear_amplifier_type();
  if (low_noise) {
    set_has_low_noise();
    _impl_.amplifier_type_.low_noise_ = low_noise;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* AmplifierDefinition::_internal_mutable_low_noise() {
  if (amplifier_type_case() != kLowNoise) {
    clear_amplifier_type();
    set_has_low_noise();
    _impl_.amplifier_type_.low_noise_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition >(GetArenaForAllocation());
  }
  return _impl_.amplifier_type_.low_noise_;
}
inline ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* AmplifierDefinition::mutable_low_noise() {
  ::aalyria::spacetime::api::common::AmplifierDefinition_LowNoiseAmplifierDefinition* _msg = _internal_mutable_low_noise();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AmplifierDefinition.low_noise)
  return _msg;
}

inline bool AmplifierDefinition::has_amplifier_type() const {
  return amplifier_type_case() != AMPLIFIER_TYPE_NOT_SET;
}
inline void AmplifierDefinition::clear_has_amplifier_type() {
  _impl_._oneof_case_[0] = AMPLIFIER_TYPE_NOT_SET;
}
inline AmplifierDefinition::AmplifierTypeCase AmplifierDefinition::amplifier_type_case() const {
  return AmplifierDefinition::AmplifierTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MiscGainOrLoss

// optional string name = 1 [json_name = "name"];
inline bool MiscGainOrLoss::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MiscGainOrLoss::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiscGainOrLoss::name() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.MiscGainOrLoss.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscGainOrLoss::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.MiscGainOrLoss.name)
}
inline std::string* MiscGainOrLoss::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.MiscGainOrLoss.name)
  return _s;
}
inline const std::string& MiscGainOrLoss::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MiscGainOrLoss::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MiscGainOrLoss::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* MiscGainOrLoss::release_name() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.MiscGainOrLoss.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MiscGainOrLoss::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.MiscGainOrLoss.name)
}

// optional double gain_or_loss_db = 2 [json_name = "gainOrLossDb"];
inline bool MiscGainOrLoss::has_gain_or_loss_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MiscGainOrLoss::clear_gain_or_loss_db() {
  _impl_.gain_or_loss_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double MiscGainOrLoss::gain_or_loss_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.MiscGainOrLoss.gain_or_loss_db)
  return _internal_gain_or_loss_db();
}
inline void MiscGainOrLoss::set_gain_or_loss_db(double value) {
  _internal_set_gain_or_loss_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.MiscGainOrLoss.gain_or_loss_db)
}
inline double MiscGainOrLoss::_internal_gain_or_loss_db() const {
  return _impl_.gain_or_loss_db_;
}
inline void MiscGainOrLoss::_internal_set_gain_or_loss_db(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gain_or_loss_db_ = value;
}

// -------------------------------------------------------------------

// Signal

// optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
inline bool Signal::has_center_frequency_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Signal::clear_center_frequency_hz() {
  _impl_.center_frequency_hz_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Signal::center_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.Signal.center_frequency_hz)
  return _internal_center_frequency_hz();
}
inline void Signal::set_center_frequency_hz(::uint64_t value) {
  _internal_set_center_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.Signal.center_frequency_hz)
}
inline ::uint64_t Signal::_internal_center_frequency_hz() const {
  return _impl_.center_frequency_hz_;
}
inline void Signal::_internal_set_center_frequency_hz(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.center_frequency_hz_ = value;
}

// optional uint64 bandwidth_hz = 2 [json_name = "bandwidthHz"];
inline bool Signal::has_bandwidth_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Signal::clear_bandwidth_hz() {
  _impl_.bandwidth_hz_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Signal::bandwidth_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.Signal.bandwidth_hz)
  return _internal_bandwidth_hz();
}
inline void Signal::set_bandwidth_hz(::uint64_t value) {
  _internal_set_bandwidth_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.Signal.bandwidth_hz)
}
inline ::uint64_t Signal::_internal_bandwidth_hz() const {
  return _impl_.bandwidth_hz_;
}
inline void Signal::_internal_set_bandwidth_hz(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bandwidth_hz_ = value;
}

// optional .aalyria.spacetime.api.common.Polarization polarization = 3 [json_name = "polarization"];
inline bool Signal::has_polarization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.polarization_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::Polarization& Signal::_internal_polarization() const {
  const ::aalyria::spacetime::api::common::Polarization* p = _impl_.polarization_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::Polarization&>(
      ::aalyria::spacetime::api::common::_Polarization_default_instance_);
}
inline const ::aalyria::spacetime::api::common::Polarization& Signal::polarization() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.Signal.polarization)
  return _internal_polarization();
}
inline void Signal::unsafe_arena_set_allocated_polarization(
    ::aalyria::spacetime::api::common::Polarization* polarization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.polarization_);
  }
  _impl_.polarization_ = polarization;
  if (polarization) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.Signal.polarization)
}
inline ::aalyria::spacetime::api::common::Polarization* Signal::release_polarization() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::Polarization* temp = _impl_.polarization_;
  _impl_.polarization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::Polarization* Signal::unsafe_arena_release_polarization() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.Signal.polarization)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::Polarization* temp = _impl_.polarization_;
  _impl_.polarization_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::Polarization* Signal::_internal_mutable_polarization() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.polarization_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::Polarization>(GetArenaForAllocation());
    _impl_.polarization_ = p;
  }
  return _impl_.polarization_;
}
inline ::aalyria::spacetime::api::common::Polarization* Signal::mutable_polarization() {
  ::aalyria::spacetime::api::common::Polarization* _msg = _internal_mutable_polarization();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.Signal.polarization)
  return _msg;
}
inline void Signal::set_allocated_polarization(::aalyria::spacetime::api::common::Polarization* polarization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.polarization_);
  }
  if (polarization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polarization));
    if (message_arena != submessage_arena) {
      polarization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polarization, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.polarization_ = polarization;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.Signal.polarization)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fwireless_2eproto_2epb_2eh

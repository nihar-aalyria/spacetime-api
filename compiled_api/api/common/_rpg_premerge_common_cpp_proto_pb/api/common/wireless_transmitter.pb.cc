// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_transmitter.proto

#include "api/common/wireless_transmitter.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR TxChannels_TxChannelParams::TxChannels_TxChannelParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_power_watts_)*/ 0
} {}
struct TxChannels_TxChannelParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxChannels_TxChannelParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxChannels_TxChannelParamsDefaultTypeInternal() {}
  union {
    TxChannels_TxChannelParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxChannels_TxChannelParamsDefaultTypeInternal _TxChannels_TxChannelParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxChannels_ChannelEntry_DoNotUse::TxChannels_ChannelEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxChannels_ChannelEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxChannels_ChannelEntry_DoNotUseDefaultTypeInternal _TxChannels_ChannelEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxChannels::TxChannels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxChannelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxChannelsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxChannelsDefaultTypeInternal() {}
  union {
    TxChannels _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxChannelsDefaultTypeInternal _TxChannels_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransmitterDefinition_ChannelSetEntry_DoNotUse::TransmitterDefinition_ChannelSetEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransmitterDefinition_ChannelSetEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmitterDefinition_ChannelSetEntry_DoNotUseDefaultTypeInternal _TransmitterDefinition_ChannelSetEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransmitterDefinition::TransmitterDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_set_)*/{}
  , /*decltype(_impl_.signal_processing_step_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.coverage_heatmap_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_selection_method_)*/ 0
} {}
struct TransmitterDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmitterDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmitterDefinitionDefaultTypeInternal() {}
  union {
    TransmitterDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmitterDefinitionDefaultTypeInternal _TransmitterDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransmitSignalProcessor::TransmitSignalProcessor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TransmitSignalProcessorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmitSignalProcessorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmitSignalProcessorDefaultTypeInternal() {}
  union {
    TransmitSignalProcessor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmitSignalProcessorDefaultTypeInternal _TransmitSignalProcessor_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fwireless_5ftransmitter_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fwireless_5ftransmitter_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_TxChannelParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_TxChannelParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_TxChannelParams, _impl_.max_power_watts_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TxChannels, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_.channel_set_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_.channel_selection_method_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_.signal_processing_step_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitterDefinition, _impl_.coverage_heatmap_id_),
    0,
    ~0u,
    2,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitSignalProcessor, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitSignalProcessor, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitSignalProcessor, _impl_.type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::aalyria::spacetime::api::common::TxChannels_TxChannelParams)},
        { 10, 20, -1, sizeof(::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse)},
        { 22, -1, -1, sizeof(::aalyria::spacetime::api::common::TxChannels)},
        { 31, 41, -1, sizeof(::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse)},
        { 43, 56, -1, sizeof(::aalyria::spacetime::api::common::TransmitterDefinition)},
        { 61, -1, -1, sizeof(::aalyria::spacetime::api::common::TransmitSignalProcessor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_TxChannels_TxChannelParams_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TxChannels_ChannelEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TxChannels_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TransmitterDefinition_ChannelSetEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TransmitterDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::common::_TransmitSignalProcessor_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fwireless_5ftransmitter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%api/common/wireless_transmitter.proto\022"
    "\034aalyria.spacetime.api.common\032\030api/commo"
    "n/channel.proto\032\031api/common/wireless.pro"
    "to\"\216\002\n\nTxChannels\022O\n\007channel\030\001 \003(\01325.aal"
    "yria.spacetime.api.common.TxChannels.Cha"
    "nnelEntryR\007channel\0329\n\017TxChannelParams\022&\n"
    "\017max_power_watts\030\001 \001(\001R\rmaxPowerWatts\032t\n"
    "\014ChannelEntry\022\020\n\003key\030\001 \001(\004R\003key\022N\n\005value"
    "\030\002 \001(\01328.aalyria.spacetime.api.common.Tx"
    "Channels.TxChannelParamsR\005value:\0028\001\"\243\004\n\025"
    "TransmitterDefinition\022\022\n\004name\030\002 \001(\tR\004nam"
    "e\022d\n\013channel_set\030\016 \003(\0132C.aalyria.spaceti"
    "me.api.common.TransmitterDefinition.Chan"
    "nelSetEntryR\nchannelSet\022n\n\030channel_selec"
    "tion_method\030\r \001(\01624.aalyria.spacetime.ap"
    "i.common.ChannelSelectionMethodR\026channel"
    "SelectionMethod\022k\n\026signal_processing_ste"
    "p\030\017 \003(\01325.aalyria.spacetime.api.common.T"
    "ransmitSignalProcessorR\024signalProcessing"
    "Step\022.\n\023coverage_heatmap_id\030\021 \001(\tR\021cover"
    "ageHeatmapId\032g\n\017ChannelSetEntry\022\020\n\003key\030\001"
    " \001(\tR\003key\022>\n\005value\030\002 \001(\0132(.aalyria.space"
    "time.api.common.TxChannelsR\005value:\0028\001J\004\010"
    "\001\020\002J\004\010\003\020\rJ\004\010\020\020\021J\010\010\022\020\200\200\200\200\002\"\306\001\n\027TransmitSi"
    "gnalProcessor\022Q\n\tamplifier\030\001 \001(\01321.aalyr"
    "ia.spacetime.api.common.AmplifierDefinit"
    "ionH\000R\tamplifier\022P\n\014gain_or_loss\030\002 \001(\0132,"
    ".aalyria.spacetime.api.common.MiscGainOr"
    "LossH\000R\ngainOrLossB\006\n\004typeBD\n com.aalyri"
    "a.spacetime.api.commonZ aalyria.com/spac"
    "etime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_deps[2] =
    {
        &::descriptor_table_api_2fcommon_2fchannel_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto = {
    false,
    false,
    1216,
    descriptor_table_protodef_api_2fcommon_2fwireless_5ftransmitter_2eproto,
    "api/common/wireless_transmitter.proto",
    &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
    descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_deps,
    2,
    6,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fwireless_5ftransmitter_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fwireless_5ftransmitter_2eproto,
    file_level_service_descriptors_api_2fcommon_2fwireless_5ftransmitter_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fwireless_5ftransmitter_2eproto(&descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class TxChannels_TxChannelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TxChannels_TxChannelParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TxChannels_TxChannelParams, _impl_._has_bits_);
  static void set_has_max_power_watts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TxChannels_TxChannelParams::TxChannels_TxChannelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
}
TxChannels_TxChannelParams::TxChannels_TxChannelParams(const TxChannels_TxChannelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
}

inline void TxChannels_TxChannelParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_power_watts_) { 0 }

  };
}

TxChannels_TxChannelParams::~TxChannels_TxChannelParams() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxChannels_TxChannelParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxChannels_TxChannelParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxChannels_TxChannelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_power_watts_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxChannels_TxChannelParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_power_watts = 1 [json_name = "maxPowerWatts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_max_power_watts(&has_bits);
          _impl_.max_power_watts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxChannels_TxChannelParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_power_watts = 1 [json_name = "maxPowerWatts"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_max_power_watts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  return target;
}

::size_t TxChannels_TxChannelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double max_power_watts = 1 [json_name = "maxPowerWatts"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxChannels_TxChannelParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxChannels_TxChannelParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxChannels_TxChannelParams::GetClassData() const { return &_class_data_; }


void TxChannels_TxChannelParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxChannels_TxChannelParams*>(&to_msg);
  auto& from = static_cast<const TxChannels_TxChannelParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_max_power_watts(from._internal_max_power_watts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxChannels_TxChannelParams::CopyFrom(const TxChannels_TxChannelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TxChannels.TxChannelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxChannels_TxChannelParams::IsInitialized() const {
  return true;
}

void TxChannels_TxChannelParams::InternalSwap(TxChannels_TxChannelParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.max_power_watts_, other->_impl_.max_power_watts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxChannels_TxChannelParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[0]);
}
// ===================================================================

TxChannels_ChannelEntry_DoNotUse::TxChannels_ChannelEntry_DoNotUse() {}
TxChannels_ChannelEntry_DoNotUse::TxChannels_ChannelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxChannels_ChannelEntry_DoNotUse::MergeFrom(const TxChannels_ChannelEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxChannels_ChannelEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[1]);
}
// ===================================================================

class TxChannels::_Internal {
 public:
};

TxChannels::TxChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TxChannels)
}
TxChannels::TxChannels(const TxChannels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxChannels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.channel_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_.MergeFrom(from._impl_.channel_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TxChannels)
}

inline void TxChannels::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.channel_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxChannels::~TxChannels() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TxChannels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxChannels::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_.~MapField();
}

void TxChannels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxChannels::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TxChannels)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxChannels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .aalyria.spacetime.api.common.TxChannels.TxChannelParams> channel = 1 [json_name = "channel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.channel_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxChannels::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TxChannels)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .aalyria.spacetime.api.common.TxChannels.TxChannelParams> channel = 1 [json_name = "channel"];
  if (!this->_internal_channel().empty()) {
    using MapType = ::_pb::Map<::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams>;
    using WireHelper = TxChannels_ChannelEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_channel();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TxChannels)
  return target;
}

::size_t TxChannels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TxChannels)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .aalyria.spacetime.api.common.TxChannels.TxChannelParams> channel = 1 [json_name = "channel"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >::const_iterator
      it = this->_internal_channel().begin();
      it != this->_internal_channel().end(); ++it) {
    total_size += TxChannels_ChannelEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxChannels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxChannels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxChannels::GetClassData() const { return &_class_data_; }


void TxChannels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxChannels*>(&to_msg);
  auto& from = static_cast<const TxChannels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TxChannels)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_.MergeFrom(from._impl_.channel_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxChannels::CopyFrom(const TxChannels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TxChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxChannels::IsInitialized() const {
  return true;
}

void TxChannels::InternalSwap(TxChannels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_.InternalSwap(&other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxChannels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[2]);
}
// ===================================================================

TransmitterDefinition_ChannelSetEntry_DoNotUse::TransmitterDefinition_ChannelSetEntry_DoNotUse() {}
TransmitterDefinition_ChannelSetEntry_DoNotUse::TransmitterDefinition_ChannelSetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransmitterDefinition_ChannelSetEntry_DoNotUse::MergeFrom(const TransmitterDefinition_ChannelSetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransmitterDefinition_ChannelSetEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[3]);
}
// ===================================================================

class TransmitterDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<TransmitterDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransmitterDefinition, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_selection_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coverage_heatmap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TransmitterDefinition::TransmitterDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransmitterDefinition)
}
TransmitterDefinition::TransmitterDefinition(const TransmitterDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransmitterDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.channel_set_)*/{}
    , decltype(_impl_.signal_processing_step_){from._impl_.signal_processing_step_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.coverage_heatmap_id_) {}

    , decltype(_impl_.channel_selection_method_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_set_.MergeFrom(from._impl_.channel_set_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.coverage_heatmap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coverage_heatmap_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.coverage_heatmap_id_.Set(from._internal_coverage_heatmap_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransmitterDefinition)
}

inline void TransmitterDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.channel_set_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.signal_processing_step_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.coverage_heatmap_id_) {}

    , decltype(_impl_.channel_selection_method_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coverage_heatmap_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coverage_heatmap_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransmitterDefinition::~TransmitterDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransmitterDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransmitterDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_set_.~MapField();
  _internal_mutable_signal_processing_step()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.coverage_heatmap_id_.Destroy();
}

void TransmitterDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransmitterDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransmitterDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_set_.Clear();
  _internal_mutable_signal_processing_step()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.coverage_heatmap_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.channel_selection_method_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmitterDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransmitterDefinition.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 13 [json_name = "channelSelectionMethod"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::ChannelSelectionMethod_IsValid(static_cast<int>(val)))) {
            _internal_set_channel_selection_method(static_cast<::aalyria::spacetime::api::common::ChannelSelectionMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .aalyria.spacetime.api.common.TxChannels> channel_set = 14 [json_name = "channelSet"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.channel_set_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 15 [json_name = "signalProcessingStep"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_processing_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string coverage_heatmap_id = 17 [json_name = "coverageHeatmapId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_coverage_heatmap_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransmitterDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransmitterDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 2 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransmitterDefinition.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 13 [json_name = "channelSelectionMethod"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_channel_selection_method(), target);
  }

  // map<string, .aalyria.spacetime.api.common.TxChannels> channel_set = 14 [json_name = "channelSet"];
  if (!this->_internal_channel_set().empty()) {
    using MapType = ::_pb::Map<std::string, ::aalyria::spacetime::api::common::TxChannels>;
    using WireHelper = TransmitterDefinition_ChannelSetEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_channel_set();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.common.TransmitterDefinition.channel_set");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 15 [json_name = "signalProcessingStep"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_processing_step_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal_processing_step(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string coverage_heatmap_id = 17 [json_name = "coverageHeatmapId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_coverage_heatmap_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.TransmitterDefinition.coverage_heatmap_id");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransmitterDefinition)
  return target;
}

::size_t TransmitterDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransmitterDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .aalyria.spacetime.api.common.TxChannels> channel_set = 14 [json_name = "channelSet"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_set_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::aalyria::spacetime::api::common::TxChannels >::const_iterator
      it = this->_internal_channel_set().begin();
      it != this->_internal_channel_set().end(); ++it) {
    total_size += TransmitterDefinition_ChannelSetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 15 [json_name = "signalProcessingStep"];
  total_size += 1UL * this->_internal_signal_processing_step_size();
  for (const auto& msg : this->_internal_signal_processing_step()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string coverage_heatmap_id = 17 [json_name = "coverageHeatmapId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_coverage_heatmap_id());
    }

    // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 13 [json_name = "channelSelectionMethod"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_selection_method());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransmitterDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransmitterDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransmitterDefinition::GetClassData() const { return &_class_data_; }


void TransmitterDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransmitterDefinition*>(&to_msg);
  auto& from = static_cast<const TransmitterDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransmitterDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_set_.MergeFrom(from._impl_.channel_set_);
  _this->_internal_mutable_signal_processing_step()->MergeFrom(from._internal_signal_processing_step());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_coverage_heatmap_id(from._internal_coverage_heatmap_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransmitterDefinition::CopyFrom(const TransmitterDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransmitterDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterDefinition::IsInitialized() const {
  return true;
}

void TransmitterDefinition::InternalSwap(TransmitterDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.channel_set_.InternalSwap(&other->_impl_.channel_set_);
  _internal_mutable_signal_processing_step()->InternalSwap(other->_internal_mutable_signal_processing_step());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coverage_heatmap_id_, lhs_arena,
                                       &other->_impl_.coverage_heatmap_id_, rhs_arena);
  swap(_impl_.channel_selection_method_, other->_impl_.channel_selection_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmitterDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[4]);
}
// ===================================================================

class TransmitSignalProcessor::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::TransmitSignalProcessor, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::AmplifierDefinition& amplifier(const TransmitSignalProcessor* msg);
  static const ::aalyria::spacetime::api::common::MiscGainOrLoss& gain_or_loss(const TransmitSignalProcessor* msg);
};

const ::aalyria::spacetime::api::common::AmplifierDefinition&
TransmitSignalProcessor::_Internal::amplifier(const TransmitSignalProcessor* msg) {
  return *msg->_impl_.type_.amplifier_;
}
const ::aalyria::spacetime::api::common::MiscGainOrLoss&
TransmitSignalProcessor::_Internal::gain_or_loss(const TransmitSignalProcessor* msg) {
  return *msg->_impl_.type_.gain_or_loss_;
}
void TransmitSignalProcessor::set_allocated_amplifier(::aalyria::spacetime::api::common::AmplifierDefinition* amplifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (amplifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amplifier));
    if (message_arena != submessage_arena) {
      amplifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amplifier, submessage_arena);
    }
    set_has_amplifier();
    _impl_.type_.amplifier_ = amplifier;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransmitSignalProcessor.amplifier)
}
void TransmitSignalProcessor::clear_amplifier() {
  if (type_case() == kAmplifier) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.amplifier_;
    }
    clear_has_type();
  }
}
void TransmitSignalProcessor::set_allocated_gain_or_loss(::aalyria::spacetime::api::common::MiscGainOrLoss* gain_or_loss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (gain_or_loss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_or_loss));
    if (message_arena != submessage_arena) {
      gain_or_loss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_or_loss, submessage_arena);
    }
    set_has_gain_or_loss();
    _impl_.type_.gain_or_loss_ = gain_or_loss;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.TransmitSignalProcessor.gain_or_loss)
}
void TransmitSignalProcessor::clear_gain_or_loss() {
  if (type_case() == kGainOrLoss) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.gain_or_loss_;
    }
    clear_has_type();
  }
}
TransmitSignalProcessor::TransmitSignalProcessor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.TransmitSignalProcessor)
}
TransmitSignalProcessor::TransmitSignalProcessor(const TransmitSignalProcessor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransmitSignalProcessor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kAmplifier: {
      _this->_internal_mutable_amplifier()->::aalyria::spacetime::api::common::AmplifierDefinition::MergeFrom(
          from._internal_amplifier());
      break;
    }
    case kGainOrLoss: {
      _this->_internal_mutable_gain_or_loss()->::aalyria::spacetime::api::common::MiscGainOrLoss::MergeFrom(
          from._internal_gain_or_loss());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.TransmitSignalProcessor)
}

inline void TransmitSignalProcessor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

TransmitSignalProcessor::~TransmitSignalProcessor() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.TransmitSignalProcessor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransmitSignalProcessor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void TransmitSignalProcessor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransmitSignalProcessor::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  switch (type_case()) {
    case kAmplifier: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.amplifier_;
      }
      break;
    }
    case kGainOrLoss: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.gain_or_loss_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void TransmitSignalProcessor::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmitSignalProcessor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.AmplifierDefinition amplifier = 1 [json_name = "amplifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.MiscGainOrLoss gain_or_loss = 2 [json_name = "gainOrLoss"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_or_loss(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransmitSignalProcessor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kAmplifier: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::amplifier(this),
          _Internal::amplifier(this).GetCachedSize(), target, stream);
      break;
    }
    case kGainOrLoss: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::gain_or_loss(this),
          _Internal::gain_or_loss(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.TransmitSignalProcessor)
  return target;
}

::size_t TransmitSignalProcessor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .aalyria.spacetime.api.common.AmplifierDefinition amplifier = 1 [json_name = "amplifier"];
    case kAmplifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.amplifier_);
      break;
    }
    // .aalyria.spacetime.api.common.MiscGainOrLoss gain_or_loss = 2 [json_name = "gainOrLoss"];
    case kGainOrLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.gain_or_loss_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransmitSignalProcessor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransmitSignalProcessor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransmitSignalProcessor::GetClassData() const { return &_class_data_; }


void TransmitSignalProcessor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransmitSignalProcessor*>(&to_msg);
  auto& from = static_cast<const TransmitSignalProcessor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kAmplifier: {
      _this->_internal_mutable_amplifier()->::aalyria::spacetime::api::common::AmplifierDefinition::MergeFrom(
          from._internal_amplifier());
      break;
    }
    case kGainOrLoss: {
      _this->_internal_mutable_gain_or_loss()->::aalyria::spacetime::api::common::MiscGainOrLoss::MergeFrom(
          from._internal_gain_or_loss());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransmitSignalProcessor::CopyFrom(const TransmitSignalProcessor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.TransmitSignalProcessor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitSignalProcessor::IsInitialized() const {
  return true;
}

void TransmitSignalProcessor::InternalSwap(TransmitSignalProcessor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmitSignalProcessor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5ftransmitter_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TxChannels_TxChannelParams*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TxChannels_TxChannelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TxChannels_ChannelEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TxChannels*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TxChannels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TxChannels >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransmitterDefinition_ChannelSetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransmitterDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransmitterDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransmitterDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::TransmitSignalProcessor*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::TransmitSignalProcessor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::TransmitSignalProcessor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_propagation.proto

#include "api/common/wireless_propagation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR PropagationWeather::PropagationWeather(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.forecasts_)*/{}
  , /*decltype(_impl_.tables_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.s2_cell_id_)*/ ::uint64_t{0u}
} {}
struct PropagationWeatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropagationWeatherDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropagationWeatherDefaultTypeInternal() {}
  union {
    PropagationWeather _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropagationWeatherDefaultTypeInternal _PropagationWeather_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WeatherTable::WeatherTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/ {}

  , /*decltype(_impl_.times_s_)*/ {}

  , /*decltype(_impl_.heights_wgs84_m_)*/ {}

  , /*decltype(_impl_.values_)*/ {}

  , /*decltype(_impl_.provenance_)*/ 0
} {}
struct WeatherTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeatherTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeatherTableDefaultTypeInternal() {}
  union {
    WeatherTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeatherTableDefaultTypeInternal _WeatherTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SparseWeatherSamples_Sample::SparseWeatherSamples_Sample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_.timestamp_s_)*/ ::int64_t{0}

  , /*decltype(_impl_.height_wgs84_m_)*/ 0
} {}
struct SparseWeatherSamples_SampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseWeatherSamples_SampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseWeatherSamples_SampleDefaultTypeInternal() {}
  union {
    SparseWeatherSamples_Sample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseWeatherSamples_SampleDefaultTypeInternal _SparseWeatherSamples_Sample_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SparseWeatherSamples::SparseWeatherSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.time_domain_radius_)*/nullptr
  , /*decltype(_impl_.provenance_)*/ 0

  , /*decltype(_impl_.param_)*/ 0

  , /*decltype(_impl_.altitude_domain_radius_m_)*/ 0
} {}
struct SparseWeatherSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseWeatherSamplesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseWeatherSamplesDefaultTypeInternal() {}
  union {
    SparseWeatherSamples _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseWeatherSamplesDefaultTypeInternal _SparseWeatherSamples_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WeatherDataForecast::WeatherDataForecast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.atmospheric_pressure_pa_)*/ 0

  , /*decltype(_impl_.temperature_k_)*/ 0

  , /*decltype(_impl_.water_vapor_pressure_pa_)*/ 0

  , /*decltype(_impl_.rain_height_wgs84_m_)*/ 0

  , /*decltype(_impl_.rain_rate_m_per_second_)*/ 0

  , /*decltype(_impl_.cloud_ceiling_wgs84_m_)*/ 0

  , /*decltype(_impl_.cloud_layer_thickness_m_)*/ 0

  , /*decltype(_impl_.cloud_liquid_water_density_g_per_m3_)*/ 0

  , /*decltype(_impl_.cloud_temperature_k_)*/ 0

  , /*decltype(_impl_.provenance_)*/ 0
} {}
struct WeatherDataForecastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeatherDataForecastDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeatherDataForecastDefaultTypeInternal() {}
  union {
    WeatherDataForecast _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeatherDataForecastDefaultTypeInternal _WeatherDataForecast_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GaussianProcessPrediction::GaussianProcessPrediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mean_)*/ 0

  , /*decltype(_impl_.variance_)*/ 0
} {}
struct GaussianProcessPredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaussianProcessPredictionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaussianProcessPredictionDefaultTypeInternal() {}
  union {
    GaussianProcessPrediction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaussianProcessPredictionDefaultTypeInternal _GaussianProcessPrediction_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_.s2_cell_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_.forecasts_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_.tables_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::PropagationWeather, _impl_.samples_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_.provenance_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_.times_s_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_.heights_wgs84_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherTable, _impl_.values_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample, _impl_.timestamp_s_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample, _impl_.height_wgs84_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample, _impl_.value_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_.provenance_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_.param_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_.time_domain_radius_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_.altitude_domain_radius_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::SparseWeatherSamples, _impl_.samples_),
    1,
    2,
    0,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.provenance_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.atmospheric_pressure_pa_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.temperature_k_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.water_vapor_pressure_pa_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.rain_height_wgs84_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.rain_rate_m_per_second_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.cloud_ceiling_wgs84_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.cloud_layer_thickness_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.cloud_liquid_water_density_g_per_m3_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::WeatherDataForecast, _impl_.cloud_temperature_k_),
    10,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GaussianProcessPrediction, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GaussianProcessPrediction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GaussianProcessPrediction, _impl_.mean_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::GaussianProcessPrediction, _impl_.variance_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::aalyria::spacetime::api::common::PropagationWeather)},
        { 18, 31, -1, sizeof(::aalyria::spacetime::api::common::WeatherTable)},
        { 36, 47, -1, sizeof(::aalyria::spacetime::api::common::SparseWeatherSamples_Sample)},
        { 50, 63, -1, sizeof(::aalyria::spacetime::api::common::SparseWeatherSamples)},
        { 68, 87, -1, sizeof(::aalyria::spacetime::api::common::WeatherDataForecast)},
        { 98, 108, -1, sizeof(::aalyria::spacetime::api::common::GaussianProcessPrediction)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_PropagationWeather_default_instance_._instance,
    &::aalyria::spacetime::api::common::_WeatherTable_default_instance_._instance,
    &::aalyria::spacetime::api::common::_SparseWeatherSamples_Sample_default_instance_._instance,
    &::aalyria::spacetime::api::common::_SparseWeatherSamples_default_instance_._instance,
    &::aalyria::spacetime::api::common::_WeatherDataForecast_default_instance_._instance,
    &::aalyria::spacetime::api::common::_GaussianProcessPrediction_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fwireless_5fpropagation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%api/common/wireless_propagation.proto\022"
    "\034aalyria.spacetime.api.common\032\025api/commo"
    "n/time.proto\032\036google/protobuf/duration.p"
    "roto\"\355\002\n\022PropagationWeather\022F\n\010interval\030"
    "\001 \001(\0132*.aalyria.spacetime.api.common.Tim"
    "eIntervalR\010interval\022\034\n\ns2_cell_id\030\002 \001(\004R"
    "\010s2CellId\022O\n\tforecasts\030\006 \003(\01321.aalyria.s"
    "pacetime.api.common.WeatherDataForecastR"
    "\tforecasts\022B\n\006tables\030\007 \003(\0132*.aalyria.spa"
    "cetime.api.common.WeatherTableR\006tables\022L"
    "\n\007samples\030\010 \003(\01322.aalyria.spacetime.api."
    "common.SparseWeatherSamplesR\007samplesJ\004\010\003"
    "\020\006J\010\010\t\020\200\200\200\200\002\"\377\001\n\014WeatherTable\022U\n\nprovena"
    "nce\030\001 \001(\0162(.aalyria.spacetime.api.common"
    ".Provenance:\013UNSPECIFIEDR\nprovenance\022\?\n\006"
    "params\030\002 \003(\0162\'.aalyria.spacetime.api.com"
    "mon.ParameterR\006params\022\027\n\007times_s\030\003 \003(\003R\006"
    "timesS\022&\n\017heights_wgs84_m\030\004 \003(\005R\rheights"
    "Wgs84M\022\026\n\006values\030\005 \003(\001R\006values\"\343\003\n\024Spars"
    "eWeatherSamples\022H\n\nprovenance\030\001 \001(\0162(.aa"
    "lyria.spacetime.api.common.ProvenanceR\np"
    "rovenance\022=\n\005param\030\002 \001(\0162\'.aalyria.space"
    "time.api.common.ParameterR\005param\022G\n\022time"
    "_domain_radius\030\003 \001(\0132\031.google.protobuf.D"
    "urationR\020timeDomainRadius\0227\n\030altitude_do"
    "main_radius_m\030\004 \001(\005R\025altitudeDomainRadiu"
    "sM\022S\n\007samples\030\005 \003(\01329.aalyria.spacetime."
    "api.common.SparseWeatherSamples.SampleR\007"
    "samples\032k\n\006Sample\022\037\n\013timestamp_s\030\004 \001(\003R\n"
    "timestampS\022$\n\016height_wgs84_m\030\002 \001(\005R\014heig"
    "htWgs84M\022\024\n\005value\030\003 \001(\001R\005valueJ\004\010\001\020\002\"\274\006\n"
    "\023WeatherDataForecast\022i\n\nprovenance\030\n \001(\016"
    "2<.aalyria.spacetime.api.common.WeatherD"
    "ataForecast.Provenance:\013UNSPECIFIEDR\npro"
    "venance\022F\n\010interval\030\013 \001(\0132*.aalyria.spac"
    "etime.api.common.TimeIntervalR\010interval\022"
    "6\n\027atmospheric_pressure_pa\030\001 \001(\001R\025atmosp"
    "hericPressurePa\022#\n\rtemperature_k\030\002 \001(\001R\014"
    "temperatureK\0225\n\027water_vapor_pressure_pa\030"
    "\003 \001(\001R\024waterVaporPressurePa\022-\n\023rain_heig"
    "ht_wgs84_m\030\004 \001(\001R\020rainHeightWgs84M\0222\n\026ra"
    "in_rate_m_per_second\030\005 \001(\001R\022rainRateMPer"
    "Second\0221\n\025cloud_ceiling_wgs84_m\030\006 \001(\001R\022c"
    "loudCeilingWgs84M\0225\n\027cloud_layer_thickne"
    "ss_m\030\007 \001(\001R\024cloudLayerThicknessM\022J\n#clou"
    "d_liquid_water_density_g_per_m3\030\010 \001(\001R\035c"
    "loudLiquidWaterDensityGPerM3\022.\n\023cloud_te"
    "mperature_k\030\t \001(\001R\021cloudTemperatureK\"\212\001\n"
    "\nProvenance\022\017\n\013UNSPECIFIED\020\000\022\022\n\016ADMINIST"
    "RATIVE\020\001\022\n\n\006SENSOR\020\002\022\t\n\005ECMWF\020\003\022\014\n\010NOAA_"
    "GFS\020\004\022\r\n\tLOON_WIND\020\005\022\035\n\031SEASONAL_REGIONA"
    "L_AVERAGE\020\007\"\004\010\006\020\006J\010\010\014\020\200\200\200\200\002\"K\n\031GaussianP"
    "rocessPrediction\022\022\n\004mean\030\001 \001(\001R\004mean\022\032\n\010"
    "variance\030\002 \001(\001R\010variance*\242\002\n\tParameter\022\031"
    "\n\025UNSPECIFIED_PARAMETER\020\000\022\033\n\027ATMOSPHERIC"
    "_PRESSURE_PA\020\001\022\021\n\rTEMPERATURE_K\020\002\022\033\n\027WAT"
    "ER_VAPOR_PRESSURE_PA\020\003\022\027\n\023RAIN_HEIGHT_WG"
    "S84_M\020\004\022\032\n\026RAIN_RATE_M_PER_SECOND\020\005\022\031\n\025C"
    "LOUD_CEILING_WGS84_M\020\006\022\033\n\027CLOUD_LAYER_TH"
    "ICKNESS_M\020\007\022\'\n#CLOUD_LIQUID_WATER_DENSIT"
    "Y_G_PER_M3\020\010\022\027\n\023CLOUD_TEMPERATURE_K\020\t*\240\001"
    "\n\nProvenance\022\017\n\013UNSPECIFIED\020\000\022\022\n\016ADMINIS"
    "TRATIVE\020\001\022\n\n\006SENSOR\020\002\022\t\n\005ECMWF\020\003\022\014\n\010NOAA"
    "_GFS\020\004\022\r\n\tLOON_WIND\020\005\022\035\n\031SEASONAL_REGION"
    "AL_AVERAGE\020\007\022\024\n\020DEFAULT_FALLBACK\020\010\"\004\010\006\020\006"
    "BD\n com.aalyria.spacetime.api.commonZ aa"
    "lyria.com/spacetime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_deps[2] =
    {
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto = {
    false,
    false,
    2670,
    descriptor_table_protodef_api_2fcommon_2fwireless_5fpropagation_2eproto,
    "api/common/wireless_propagation.proto",
    &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
    descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_deps,
    2,
    6,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fwireless_5fpropagation_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto,
    file_level_service_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fwireless_5fpropagation_2eproto(&descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherDataForecast_Provenance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto[0];
}
bool WeatherDataForecast_Provenance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr WeatherDataForecast_Provenance WeatherDataForecast::UNSPECIFIED;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::ADMINISTRATIVE;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::SENSOR;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::ECMWF;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::NOAA_GFS;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::LOON_WIND;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::SEASONAL_REGIONAL_AVERAGE;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::Provenance_MIN;
constexpr WeatherDataForecast_Provenance WeatherDataForecast::Provenance_MAX;
constexpr int WeatherDataForecast::Provenance_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parameter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto[1];
}
bool Parameter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Provenance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fwireless_5fpropagation_2eproto[2];
}
bool Provenance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class PropagationWeather::_Internal {
 public:
  using HasBits = decltype(std::declval<PropagationWeather>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PropagationWeather, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const PropagationWeather* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
PropagationWeather::_Internal::interval(const PropagationWeather* msg) {
  return *msg->_impl_.interval_;
}
void PropagationWeather::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PropagationWeather::PropagationWeather(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.PropagationWeather)
}
PropagationWeather::PropagationWeather(const PropagationWeather& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropagationWeather* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forecasts_){from._impl_.forecasts_}
    , decltype(_impl_.tables_){from._impl_.tables_}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.s2_cell_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  _this->_impl_.s2_cell_id_ = from._impl_.s2_cell_id_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.PropagationWeather)
}

inline void PropagationWeather::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forecasts_){arena}
    , decltype(_impl_.tables_){arena}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.s2_cell_id_) { ::uint64_t{0u} }

  };
}

PropagationWeather::~PropagationWeather() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.PropagationWeather)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropagationWeather::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_forecasts()->~RepeatedPtrField();
  _internal_mutable_tables()->~RepeatedPtrField();
  _internal_mutable_samples()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void PropagationWeather::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropagationWeather::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.PropagationWeather)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_forecasts()->Clear();
  _internal_mutable_tables()->Clear();
  _internal_mutable_samples()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  _impl_.s2_cell_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagationWeather::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 s2_cell_id = 2 [json_name = "s2CellId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_s2_cell_id(&has_bits);
          _impl_.s2_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.WeatherDataForecast forecasts = 6 [json_name = "forecasts"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forecasts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.WeatherTable tables = 7 [json_name = "tables"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.SparseWeatherSamples samples = 8 [json_name = "samples"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PropagationWeather::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.PropagationWeather)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional uint64 s2_cell_id = 2 [json_name = "s2CellId"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_s2_cell_id(), target);
  }

  // repeated .aalyria.spacetime.api.common.WeatherDataForecast forecasts = 6 [json_name = "forecasts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forecasts_size()); i < n; i++) {
    const auto& repfield = this->_internal_forecasts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.WeatherTable tables = 7 [json_name = "tables"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples samples = 8 [json_name = "samples"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.PropagationWeather)
  return target;
}

::size_t PropagationWeather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.PropagationWeather)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.WeatherDataForecast forecasts = 6 [json_name = "forecasts"];
  total_size += 1UL * this->_internal_forecasts_size();
  for (const auto& msg : this->_internal_forecasts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.WeatherTable tables = 7 [json_name = "tables"];
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->_internal_tables()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples samples = 8 [json_name = "samples"];
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_internal_samples()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional uint64 s2_cell_id = 2 [json_name = "s2CellId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_s2_cell_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropagationWeather::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropagationWeather::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropagationWeather::GetClassData() const { return &_class_data_; }


void PropagationWeather::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropagationWeather*>(&to_msg);
  auto& from = static_cast<const PropagationWeather&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.PropagationWeather)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_forecasts()->MergeFrom(from._internal_forecasts());
  _this->_internal_mutable_tables()->MergeFrom(from._internal_tables());
  _this->_internal_mutable_samples()->MergeFrom(from._internal_samples());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.s2_cell_id_ = from._impl_.s2_cell_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropagationWeather::CopyFrom(const PropagationWeather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.PropagationWeather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagationWeather::IsInitialized() const {
  return true;
}

void PropagationWeather::InternalSwap(PropagationWeather* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_forecasts()->InternalSwap(other->_internal_mutable_forecasts());
  _internal_mutable_tables()->InternalSwap(other->_internal_mutable_tables());
  _internal_mutable_samples()->InternalSwap(other->_internal_mutable_samples());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropagationWeather, _impl_.s2_cell_id_)
      + sizeof(PropagationWeather::_impl_.s2_cell_id_)
      - PROTOBUF_FIELD_OFFSET(PropagationWeather, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagationWeather::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[0]);
}
// ===================================================================

class WeatherTable::_Internal {
 public:
  using HasBits = decltype(std::declval<WeatherTable>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WeatherTable, _impl_._has_bits_);
  static void set_has_provenance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WeatherTable::WeatherTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.WeatherTable)
}
WeatherTable::WeatherTable(const WeatherTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeatherTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_) { from._internal_params() }

    , decltype(_impl_.times_s_) { from._impl_.times_s_ }

    , decltype(_impl_.heights_wgs84_m_) { from._impl_.heights_wgs84_m_ }

    , decltype(_impl_.values_) { from._impl_.values_ }

    , decltype(_impl_.provenance_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.provenance_ = from._impl_.provenance_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.WeatherTable)
}

inline void WeatherTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_) { arena }

    , decltype(_impl_.times_s_) { arena }

    , decltype(_impl_.heights_wgs84_m_) { arena }

    , decltype(_impl_.values_) { arena }

    , decltype(_impl_.provenance_) { 0 }

  };
}

WeatherTable::~WeatherTable() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.WeatherTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeatherTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_params()->~RepeatedField();
  _impl_.times_s_.~RepeatedField();
  _impl_.heights_wgs84_m_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void WeatherTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeatherTable::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.WeatherTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_params()->Clear();
  _internal_mutable_times_s()->Clear();
  _internal_mutable_heights_wgs84_m()->Clear();
  _internal_mutable_values()->Clear();
  _impl_.provenance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeatherTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [default = UNSPECIFIED, json_name = "provenance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::Provenance_IsValid(static_cast<int>(val)))) {
            _internal_set_provenance(static_cast<::aalyria::spacetime::api::common::Provenance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.Parameter params = 2 [json_name = "params"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::Parameter_IsValid(static_cast<int>(val)))) {
              _internal_add_params(static_cast<::aalyria::spacetime::api::common::Parameter>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_params(), ptr, ctx, ::aalyria::spacetime::api::common::Parameter_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 times_s = 3 [json_name = "timesS"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_times_s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_times_s(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 heights_wgs84_m = 4 [json_name = "heightsWgs84M"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heights_wgs84_m(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_heights_wgs84_m(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated double values = 5 [json_name = "values"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WeatherTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.WeatherTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [default = UNSPECIFIED, json_name = "provenance"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_provenance(), target);
  }

  // repeated .aalyria.spacetime.api.common.Parameter params = 2 [json_name = "params"];
  for (int i = 0, n = this->_internal_params_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_params(i), target);
  }

  // repeated int64 times_s = 3 [json_name = "timesS"];
  for (int i = 0, n = this->_internal_times_s_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_times_s(i), target);
  }

  // repeated int32 heights_wgs84_m = 4 [json_name = "heightsWgs84M"];
  for (int i = 0, n = this->_internal_heights_wgs84_m_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_heights_wgs84_m(i), target);
  }

  // repeated double values = 5 [json_name = "values"];
  for (int i = 0, n = this->_internal_values_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.WeatherTable)
  return target;
}

::size_t WeatherTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.WeatherTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.Parameter params = 2 [json_name = "params"];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_params_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_params(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated int64 times_s = 3 [json_name = "timesS"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_times_s())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_times_s_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 heights_wgs84_m = 4 [json_name = "heightsWgs84M"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_heights_wgs84_m())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_heights_wgs84_m_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated double values = 5 [json_name = "values"];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_values_size());
    ;
    total_size += tag_size + data_size;
  }

  // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [default = UNSPECIFIED, json_name = "provenance"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_provenance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeatherTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeatherTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeatherTable::GetClassData() const { return &_class_data_; }


void WeatherTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeatherTable*>(&to_msg);
  auto& from = static_cast<const WeatherTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.WeatherTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_params()->MergeFrom(from._internal_params());
  _this->_impl_.times_s_.MergeFrom(from._impl_.times_s_);
  _this->_impl_.heights_wgs84_m_.MergeFrom(from._impl_.heights_wgs84_m_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_provenance(from._internal_provenance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeatherTable::CopyFrom(const WeatherTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.WeatherTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherTable::IsInitialized() const {
  return true;
}

void WeatherTable::InternalSwap(WeatherTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_params()->InternalSwap(
      other->_internal_mutable_params());
  _impl_.times_s_.InternalSwap(&other->_impl_.times_s_);
  _impl_.heights_wgs84_m_.InternalSwap(&other->_impl_.heights_wgs84_m_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.provenance_, other->_impl_.provenance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeatherTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[1]);
}
// ===================================================================

class SparseWeatherSamples_Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseWeatherSamples_Sample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SparseWeatherSamples_Sample, _impl_._has_bits_);
  static void set_has_timestamp_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height_wgs84_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseWeatherSamples_Sample::SparseWeatherSamples_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
}
SparseWeatherSamples_Sample::SparseWeatherSamples_Sample(const SparseWeatherSamples_Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
}

inline void SparseWeatherSamples_Sample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) { 0 }

    , decltype(_impl_.timestamp_s_) { ::int64_t{0} }

    , decltype(_impl_.height_wgs84_m_) { 0 }

  };
}

SparseWeatherSamples_Sample::~SparseWeatherSamples_Sample() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseWeatherSamples_Sample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparseWeatherSamples_Sample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseWeatherSamples_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_wgs84_m_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.height_wgs84_m_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseWeatherSamples_Sample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 height_wgs84_m = 2 [json_name = "heightWgs84M"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_height_wgs84_m(&has_bits);
          _impl_.height_wgs84_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp_s = 4 [json_name = "timestampS"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp_s(&has_bits);
          _impl_.timestamp_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SparseWeatherSamples_Sample::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 height_wgs84_m = 2 [json_name = "heightWgs84M"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_height_wgs84_m(), target);
  }

  // optional double value = 3 [json_name = "value"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_value(), target);
  }

  // optional int64 timestamp_s = 4 [json_name = "timestampS"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_timestamp_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  return target;
}

::size_t SparseWeatherSamples_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double value = 3 [json_name = "value"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional int64 timestamp_s = 4 [json_name = "timestampS"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_s());
    }

    // optional int32 height_wgs84_m = 2 [json_name = "heightWgs84M"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_height_wgs84_m());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseWeatherSamples_Sample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseWeatherSamples_Sample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseWeatherSamples_Sample::GetClassData() const { return &_class_data_; }


void SparseWeatherSamples_Sample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseWeatherSamples_Sample*>(&to_msg);
  auto& from = static_cast<const SparseWeatherSamples_Sample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_s_ = from._impl_.timestamp_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.height_wgs84_m_ = from._impl_.height_wgs84_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseWeatherSamples_Sample::CopyFrom(const SparseWeatherSamples_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.SparseWeatherSamples.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseWeatherSamples_Sample::IsInitialized() const {
  return true;
}

void SparseWeatherSamples_Sample::InternalSwap(SparseWeatherSamples_Sample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseWeatherSamples_Sample, _impl_.height_wgs84_m_)
      + sizeof(SparseWeatherSamples_Sample::_impl_.height_wgs84_m_)
      - PROTOBUF_FIELD_OFFSET(SparseWeatherSamples_Sample, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseWeatherSamples_Sample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[2]);
}
// ===================================================================

class SparseWeatherSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseWeatherSamples>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SparseWeatherSamples, _impl_._has_bits_);
  static void set_has_provenance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_domain_radius(const SparseWeatherSamples* msg);
  static void set_has_time_domain_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_altitude_domain_radius_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SparseWeatherSamples::_Internal::time_domain_radius(const SparseWeatherSamples* msg) {
  return *msg->_impl_.time_domain_radius_;
}
void SparseWeatherSamples::clear_time_domain_radius() {
  if (_impl_.time_domain_radius_ != nullptr) _impl_.time_domain_radius_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SparseWeatherSamples::SparseWeatherSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.SparseWeatherSamples)
}
SparseWeatherSamples::SparseWeatherSamples(const SparseWeatherSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseWeatherSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.time_domain_radius_){nullptr}
    , decltype(_impl_.provenance_) {}

    , decltype(_impl_.param_) {}

    , decltype(_impl_.altitude_domain_radius_m_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_domain_radius_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_domain_radius_);
  }
  ::memcpy(&_impl_.provenance_, &from._impl_.provenance_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.altitude_domain_radius_m_) -
    reinterpret_cast<char*>(&_impl_.provenance_)) + sizeof(_impl_.altitude_domain_radius_m_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.SparseWeatherSamples)
}

inline void SparseWeatherSamples::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.time_domain_radius_){nullptr}
    , decltype(_impl_.provenance_) { 0 }

    , decltype(_impl_.param_) { 0 }

    , decltype(_impl_.altitude_domain_radius_m_) { 0 }

  };
}

SparseWeatherSamples::~SparseWeatherSamples() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.SparseWeatherSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseWeatherSamples::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_samples()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_domain_radius_;
}

void SparseWeatherSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseWeatherSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.SparseWeatherSamples)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_samples()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_domain_radius_ != nullptr);
    _impl_.time_domain_radius_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.provenance_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.altitude_domain_radius_m_) -
        reinterpret_cast<char*>(&_impl_.provenance_)) + sizeof(_impl_.altitude_domain_radius_m_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseWeatherSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [json_name = "provenance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::Provenance_IsValid(static_cast<int>(val)))) {
            _internal_set_provenance(static_cast<::aalyria::spacetime::api::common::Provenance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Parameter param = 2 [json_name = "param"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::Parameter_IsValid(static_cast<int>(val)))) {
            _internal_set_param(static_cast<::aalyria::spacetime::api::common::Parameter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Duration time_domain_radius = 3 [json_name = "timeDomainRadius"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_domain_radius(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 altitude_domain_radius_m = 4 [json_name = "altitudeDomainRadiusM"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_altitude_domain_radius_m(&has_bits);
          _impl_.altitude_domain_radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.SparseWeatherSamples.Sample samples = 5 [json_name = "samples"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SparseWeatherSamples::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.SparseWeatherSamples)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [json_name = "provenance"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_provenance(), target);
  }

  // optional .aalyria.spacetime.api.common.Parameter param = 2 [json_name = "param"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_param(), target);
  }

  // optional .google.protobuf.Duration time_domain_radius = 3 [json_name = "timeDomainRadius"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_domain_radius(this),
        _Internal::time_domain_radius(this).GetCachedSize(), target, stream);
  }

  // optional int32 altitude_domain_radius_m = 4 [json_name = "altitudeDomainRadiusM"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_altitude_domain_radius_m(), target);
  }

  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples.Sample samples = 5 [json_name = "samples"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.SparseWeatherSamples)
  return target;
}

::size_t SparseWeatherSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.SparseWeatherSamples)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.SparseWeatherSamples.Sample samples = 5 [json_name = "samples"];
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_internal_samples()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Duration time_domain_radius = 3 [json_name = "timeDomainRadius"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_domain_radius_);
    }

    // optional .aalyria.spacetime.api.common.Provenance provenance = 1 [json_name = "provenance"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_provenance());
    }

    // optional .aalyria.spacetime.api.common.Parameter param = 2 [json_name = "param"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_param());
    }

    // optional int32 altitude_domain_radius_m = 4 [json_name = "altitudeDomainRadiusM"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_altitude_domain_radius_m());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseWeatherSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseWeatherSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseWeatherSamples::GetClassData() const { return &_class_data_; }


void SparseWeatherSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseWeatherSamples*>(&to_msg);
  auto& from = static_cast<const SparseWeatherSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.SparseWeatherSamples)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_samples()->MergeFrom(from._internal_samples());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time_domain_radius()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_time_domain_radius());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.provenance_ = from._impl_.provenance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.param_ = from._impl_.param_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.altitude_domain_radius_m_ = from._impl_.altitude_domain_radius_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseWeatherSamples::CopyFrom(const SparseWeatherSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.SparseWeatherSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseWeatherSamples::IsInitialized() const {
  return true;
}

void SparseWeatherSamples::InternalSwap(SparseWeatherSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_samples()->InternalSwap(other->_internal_mutable_samples());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseWeatherSamples, _impl_.altitude_domain_radius_m_)
      + sizeof(SparseWeatherSamples::_impl_.altitude_domain_radius_m_)
      - PROTOBUF_FIELD_OFFSET(SparseWeatherSamples, _impl_.time_domain_radius_)>(
          reinterpret_cast<char*>(&_impl_.time_domain_radius_),
          reinterpret_cast<char*>(&other->_impl_.time_domain_radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseWeatherSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[3]);
}
// ===================================================================

class WeatherDataForecast::_Internal {
 public:
  using HasBits = decltype(std::declval<WeatherDataForecast>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WeatherDataForecast, _impl_._has_bits_);
  static void set_has_provenance(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const WeatherDataForecast* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atmospheric_pressure_pa(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_temperature_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_water_vapor_pressure_pa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rain_height_wgs84_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rain_rate_m_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cloud_ceiling_wgs84_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cloud_layer_thickness_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cloud_liquid_water_density_g_per_m3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cloud_temperature_k(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
WeatherDataForecast::_Internal::interval(const WeatherDataForecast* msg) {
  return *msg->_impl_.interval_;
}
void WeatherDataForecast::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WeatherDataForecast::WeatherDataForecast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.WeatherDataForecast)
}
WeatherDataForecast::WeatherDataForecast(const WeatherDataForecast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeatherDataForecast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.atmospheric_pressure_pa_) {}

    , decltype(_impl_.temperature_k_) {}

    , decltype(_impl_.water_vapor_pressure_pa_) {}

    , decltype(_impl_.rain_height_wgs84_m_) {}

    , decltype(_impl_.rain_rate_m_per_second_) {}

    , decltype(_impl_.cloud_ceiling_wgs84_m_) {}

    , decltype(_impl_.cloud_layer_thickness_m_) {}

    , decltype(_impl_.cloud_liquid_water_density_g_per_m3_) {}

    , decltype(_impl_.cloud_temperature_k_) {}

    , decltype(_impl_.provenance_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  ::memcpy(&_impl_.atmospheric_pressure_pa_, &from._impl_.atmospheric_pressure_pa_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.provenance_) -
    reinterpret_cast<char*>(&_impl_.atmospheric_pressure_pa_)) + sizeof(_impl_.provenance_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.WeatherDataForecast)
}

inline void WeatherDataForecast::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.atmospheric_pressure_pa_) { 0 }

    , decltype(_impl_.temperature_k_) { 0 }

    , decltype(_impl_.water_vapor_pressure_pa_) { 0 }

    , decltype(_impl_.rain_height_wgs84_m_) { 0 }

    , decltype(_impl_.rain_rate_m_per_second_) { 0 }

    , decltype(_impl_.cloud_ceiling_wgs84_m_) { 0 }

    , decltype(_impl_.cloud_layer_thickness_m_) { 0 }

    , decltype(_impl_.cloud_liquid_water_density_g_per_m3_) { 0 }

    , decltype(_impl_.cloud_temperature_k_) { 0 }

    , decltype(_impl_.provenance_) { 0 }

  };
}

WeatherDataForecast::~WeatherDataForecast() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.WeatherDataForecast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeatherDataForecast::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void WeatherDataForecast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeatherDataForecast::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.WeatherDataForecast)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.atmospheric_pressure_pa_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cloud_layer_thickness_m_) -
        reinterpret_cast<char*>(&_impl_.atmospheric_pressure_pa_)) + sizeof(_impl_.cloud_layer_thickness_m_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.cloud_liquid_water_density_g_per_m3_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.provenance_) -
        reinterpret_cast<char*>(&_impl_.cloud_liquid_water_density_g_per_m3_)) + sizeof(_impl_.provenance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeatherDataForecast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double atmospheric_pressure_pa = 1 [json_name = "atmosphericPressurePa"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_atmospheric_pressure_pa(&has_bits);
          _impl_.atmospheric_pressure_pa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double temperature_k = 2 [json_name = "temperatureK"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_temperature_k(&has_bits);
          _impl_.temperature_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double water_vapor_pressure_pa = 3 [json_name = "waterVaporPressurePa"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_water_vapor_pressure_pa(&has_bits);
          _impl_.water_vapor_pressure_pa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double rain_height_wgs84_m = 4 [json_name = "rainHeightWgs84M"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_rain_height_wgs84_m(&has_bits);
          _impl_.rain_height_wgs84_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double rain_rate_m_per_second = 5 [json_name = "rainRateMPerSecond"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_rain_rate_m_per_second(&has_bits);
          _impl_.rain_rate_m_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double cloud_ceiling_wgs84_m = 6 [json_name = "cloudCeilingWgs84M"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_cloud_ceiling_wgs84_m(&has_bits);
          _impl_.cloud_ceiling_wgs84_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double cloud_layer_thickness_m = 7 [json_name = "cloudLayerThicknessM"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_cloud_layer_thickness_m(&has_bits);
          _impl_.cloud_layer_thickness_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double cloud_liquid_water_density_g_per_m3 = 8 [json_name = "cloudLiquidWaterDensityGPerM3"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _Internal::set_has_cloud_liquid_water_density_g_per_m3(&has_bits);
          _impl_.cloud_liquid_water_density_g_per_m3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double cloud_temperature_k = 9 [json_name = "cloudTemperatureK"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 73)) {
          _Internal::set_has_cloud_temperature_k(&has_bits);
          _impl_.cloud_temperature_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.WeatherDataForecast.Provenance provenance = 10 [default = UNSPECIFIED, json_name = "provenance"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::WeatherDataForecast_Provenance_IsValid(static_cast<int>(val)))) {
            _internal_set_provenance(static_cast<::aalyria::spacetime::api::common::WeatherDataForecast_Provenance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 11 [json_name = "interval"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WeatherDataForecast::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.WeatherDataForecast)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double atmospheric_pressure_pa = 1 [json_name = "atmosphericPressurePa"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_atmospheric_pressure_pa(), target);
  }

  // optional double temperature_k = 2 [json_name = "temperatureK"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_temperature_k(), target);
  }

  // optional double water_vapor_pressure_pa = 3 [json_name = "waterVaporPressurePa"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_water_vapor_pressure_pa(), target);
  }

  // optional double rain_height_wgs84_m = 4 [json_name = "rainHeightWgs84M"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_rain_height_wgs84_m(), target);
  }

  // optional double rain_rate_m_per_second = 5 [json_name = "rainRateMPerSecond"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_rain_rate_m_per_second(), target);
  }

  // optional double cloud_ceiling_wgs84_m = 6 [json_name = "cloudCeilingWgs84M"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_cloud_ceiling_wgs84_m(), target);
  }

  // optional double cloud_layer_thickness_m = 7 [json_name = "cloudLayerThicknessM"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_cloud_layer_thickness_m(), target);
  }

  // optional double cloud_liquid_water_density_g_per_m3 = 8 [json_name = "cloudLiquidWaterDensityGPerM3"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_cloud_liquid_water_density_g_per_m3(), target);
  }

  // optional double cloud_temperature_k = 9 [json_name = "cloudTemperatureK"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_cloud_temperature_k(), target);
  }

  // optional .aalyria.spacetime.api.common.WeatherDataForecast.Provenance provenance = 10 [default = UNSPECIFIED, json_name = "provenance"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_provenance(), target);
  }

  // optional .aalyria.spacetime.api.common.TimeInterval interval = 11 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.WeatherDataForecast)
  return target;
}

::size_t WeatherDataForecast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.WeatherDataForecast)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 11 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional double atmospheric_pressure_pa = 1 [json_name = "atmosphericPressurePa"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double temperature_k = 2 [json_name = "temperatureK"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double water_vapor_pressure_pa = 3 [json_name = "waterVaporPressurePa"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double rain_height_wgs84_m = 4 [json_name = "rainHeightWgs84M"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double rain_rate_m_per_second = 5 [json_name = "rainRateMPerSecond"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional double cloud_ceiling_wgs84_m = 6 [json_name = "cloudCeilingWgs84M"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional double cloud_layer_thickness_m = 7 [json_name = "cloudLayerThicknessM"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double cloud_liquid_water_density_g_per_m3 = 8 [json_name = "cloudLiquidWaterDensityGPerM3"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional double cloud_temperature_k = 9 [json_name = "cloudTemperatureK"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }

    // optional .aalyria.spacetime.api.common.WeatherDataForecast.Provenance provenance = 10 [default = UNSPECIFIED, json_name = "provenance"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_provenance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeatherDataForecast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeatherDataForecast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeatherDataForecast::GetClassData() const { return &_class_data_; }


void WeatherDataForecast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeatherDataForecast*>(&to_msg);
  auto& from = static_cast<const WeatherDataForecast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.WeatherDataForecast)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.atmospheric_pressure_pa_ = from._impl_.atmospheric_pressure_pa_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.temperature_k_ = from._impl_.temperature_k_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.water_vapor_pressure_pa_ = from._impl_.water_vapor_pressure_pa_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rain_height_wgs84_m_ = from._impl_.rain_height_wgs84_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rain_rate_m_per_second_ = from._impl_.rain_rate_m_per_second_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cloud_ceiling_wgs84_m_ = from._impl_.cloud_ceiling_wgs84_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cloud_layer_thickness_m_ = from._impl_.cloud_layer_thickness_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cloud_liquid_water_density_g_per_m3_ = from._impl_.cloud_liquid_water_density_g_per_m3_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cloud_temperature_k_ = from._impl_.cloud_temperature_k_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.provenance_ = from._impl_.provenance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeatherDataForecast::CopyFrom(const WeatherDataForecast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.WeatherDataForecast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherDataForecast::IsInitialized() const {
  return true;
}

void WeatherDataForecast::InternalSwap(WeatherDataForecast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeatherDataForecast, _impl_.provenance_)
      + sizeof(WeatherDataForecast::_impl_.provenance_)
      - PROTOBUF_FIELD_OFFSET(WeatherDataForecast, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeatherDataForecast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[4]);
}
// ===================================================================

class GaussianProcessPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<GaussianProcessPrediction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GaussianProcessPrediction, _impl_._has_bits_);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GaussianProcessPrediction::GaussianProcessPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.GaussianProcessPrediction)
}
GaussianProcessPrediction::GaussianProcessPrediction(const GaussianProcessPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.GaussianProcessPrediction)
}

inline void GaussianProcessPrediction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_) { 0 }

    , decltype(_impl_.variance_) { 0 }

  };
}

GaussianProcessPrediction::~GaussianProcessPrediction() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.GaussianProcessPrediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GaussianProcessPrediction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GaussianProcessPrediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GaussianProcessPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.GaussianProcessPrediction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mean_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.variance_) -
        reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.variance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaussianProcessPrediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double mean = 1 [json_name = "mean"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_mean(&has_bits);
          _impl_.mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double variance = 2 [json_name = "variance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_variance(&has_bits);
          _impl_.variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GaussianProcessPrediction::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.GaussianProcessPrediction)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double mean = 1 [json_name = "mean"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_mean(), target);
  }

  // optional double variance = 2 [json_name = "variance"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.GaussianProcessPrediction)
  return target;
}

::size_t GaussianProcessPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.GaussianProcessPrediction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double mean = 1 [json_name = "mean"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double variance = 2 [json_name = "variance"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GaussianProcessPrediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GaussianProcessPrediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GaussianProcessPrediction::GetClassData() const { return &_class_data_; }


void GaussianProcessPrediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GaussianProcessPrediction*>(&to_msg);
  auto& from = static_cast<const GaussianProcessPrediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.GaussianProcessPrediction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mean_ = from._impl_.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.variance_ = from._impl_.variance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GaussianProcessPrediction::CopyFrom(const GaussianProcessPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.GaussianProcessPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianProcessPrediction::IsInitialized() const {
  return true;
}

void GaussianProcessPrediction::InternalSwap(GaussianProcessPrediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaussianProcessPrediction, _impl_.variance_)
      + sizeof(GaussianProcessPrediction::_impl_.variance_)
      - PROTOBUF_FIELD_OFFSET(GaussianProcessPrediction, _impl_.mean_)>(
          reinterpret_cast<char*>(&_impl_.mean_),
          reinterpret_cast<char*>(&other->_impl_.mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GaussianProcessPrediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fpropagation_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::PropagationWeather*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::PropagationWeather >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::PropagationWeather >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::WeatherTable*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::WeatherTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::WeatherTable >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::SparseWeatherSamples_Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::SparseWeatherSamples*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::SparseWeatherSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::SparseWeatherSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::WeatherDataForecast*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::WeatherDataForecast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::WeatherDataForecast >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::GaussianProcessPrediction*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::GaussianProcessPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::GaussianProcessPrediction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/platform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fplatform_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fplatform_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/bent_pipe.pb.h"
#include "api/common/coordinates.pb.h"
#include "api/common/wireless_transceiver.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fcommon_2fplatform_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fcommon_2fplatform_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fcommon_2fplatform_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
class AdsbTransponder;
struct AdsbTransponderDefaultTypeInternal;
extern AdsbTransponderDefaultTypeInternal _AdsbTransponder_default_instance_;
class PlatformDefinition;
struct PlatformDefinitionDefaultTypeInternal;
extern PlatformDefinitionDefaultTypeInternal _PlatformDefinition_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::common::AdsbTransponder* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::AdsbTransponder>(Arena*);
template <>
::aalyria::spacetime::api::common::PlatformDefinition* Arena::CreateMaybeMessage<::aalyria::spacetime::api::common::PlatformDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
enum PlatformDefinition_MotionSource : int {
  PlatformDefinition_MotionSource_UNKNOWN_SOURCE = 0,
  PlatformDefinition_MotionSource_SPACETRACK_ORG = 1,
  PlatformDefinition_MotionSource_FLIGHTRADAR_24 = 2,
};

bool PlatformDefinition_MotionSource_IsValid(int value);
constexpr PlatformDefinition_MotionSource PlatformDefinition_MotionSource_MotionSource_MIN = static_cast<PlatformDefinition_MotionSource>(0);
constexpr PlatformDefinition_MotionSource PlatformDefinition_MotionSource_MotionSource_MAX = static_cast<PlatformDefinition_MotionSource>(2);
constexpr int PlatformDefinition_MotionSource_MotionSource_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PlatformDefinition_MotionSource_descriptor();
template <typename T>
const std::string& PlatformDefinition_MotionSource_Name(T value) {
  static_assert(std::is_same<T, PlatformDefinition_MotionSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MotionSource_Name().");
  return PlatformDefinition_MotionSource_Name(static_cast<PlatformDefinition_MotionSource>(value));
}
template <>
inline const std::string& PlatformDefinition_MotionSource_Name(PlatformDefinition_MotionSource value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PlatformDefinition_MotionSource_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PlatformDefinition_MotionSource_Parse(absl::string_view name, PlatformDefinition_MotionSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlatformDefinition_MotionSource>(
      PlatformDefinition_MotionSource_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PlatformDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.PlatformDefinition) */ {
 public:
  inline PlatformDefinition() : PlatformDefinition(nullptr) {}
  ~PlatformDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlatformDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatformDefinition(const PlatformDefinition& from);
  PlatformDefinition(PlatformDefinition&& from) noexcept
    : PlatformDefinition() {
    *this = ::std::move(from);
  }

  inline PlatformDefinition& operator=(const PlatformDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformDefinition& operator=(PlatformDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatformDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatformDefinition* internal_default_instance() {
    return reinterpret_cast<const PlatformDefinition*>(
               &_PlatformDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlatformDefinition& a, PlatformDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatformDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlatformDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlatformDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatformDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlatformDefinition& from) {
    PlatformDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatformDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.PlatformDefinition";
  }
  protected:
  explicit PlatformDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MotionSource = PlatformDefinition_MotionSource;
  static constexpr MotionSource UNKNOWN_SOURCE = PlatformDefinition_MotionSource_UNKNOWN_SOURCE;
  static constexpr MotionSource SPACETRACK_ORG = PlatformDefinition_MotionSource_SPACETRACK_ORG;
  static constexpr MotionSource FLIGHTRADAR_24 = PlatformDefinition_MotionSource_FLIGHTRADAR_24;
  static inline bool MotionSource_IsValid(int value) {
    return PlatformDefinition_MotionSource_IsValid(value);
  }
  static constexpr MotionSource MotionSource_MIN = PlatformDefinition_MotionSource_MotionSource_MIN;
  static constexpr MotionSource MotionSource_MAX = PlatformDefinition_MotionSource_MotionSource_MAX;
  static constexpr int MotionSource_ARRAYSIZE = PlatformDefinition_MotionSource_MotionSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionSource_descriptor() {
    return PlatformDefinition_MotionSource_descriptor();
  }
  template <typename T>
  static inline const std::string& MotionSource_Name(T value) {
    return PlatformDefinition_MotionSource_Name(value);
  }
  static inline bool MotionSource_Parse(absl::string_view name, MotionSource* value) {
    return PlatformDefinition_MotionSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransceiverModelFieldNumber = 15,
    kBentPipePayloadsFieldNumber = 18,
    kNameFieldNumber = 2,
    kMotionRefIdFieldNumber = 4,
    kTypeFieldNumber = 12,
    kAdsbTransponderFieldNumber = 13,
    kCoordinatesFieldNumber = 14,
    kMotionSourceFieldNumber = 16,
    kNoradIdFieldNumber = 17,
  };
  // repeated .aalyria.spacetime.api.common.TransceiverModel transceiver_model = 15 [json_name = "transceiverModel"];
  int transceiver_model_size() const;
  private:
  int _internal_transceiver_model_size() const;

  public:
  void clear_transceiver_model() ;
  ::aalyria::spacetime::api::common::TransceiverModel* mutable_transceiver_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel >*
      mutable_transceiver_model();
  private:
  const ::aalyria::spacetime::api::common::TransceiverModel& _internal_transceiver_model(int index) const;
  ::aalyria::spacetime::api::common::TransceiverModel* _internal_add_transceiver_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel>& _internal_transceiver_model() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel>* _internal_mutable_transceiver_model();
  public:
  const ::aalyria::spacetime::api::common::TransceiverModel& transceiver_model(int index) const;
  ::aalyria::spacetime::api::common::TransceiverModel* add_transceiver_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel >&
      transceiver_model() const;
  // repeated .aalyria.spacetime.api.common.BentPipePayload bent_pipe_payloads = 18 [json_name = "bentPipePayloads"];
  int bent_pipe_payloads_size() const;
  private:
  int _internal_bent_pipe_payloads_size() const;

  public:
  void clear_bent_pipe_payloads() ;
  ::aalyria::spacetime::api::common::BentPipePayload* mutable_bent_pipe_payloads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload >*
      mutable_bent_pipe_payloads();
  private:
  const ::aalyria::spacetime::api::common::BentPipePayload& _internal_bent_pipe_payloads(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload* _internal_add_bent_pipe_payloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload>& _internal_bent_pipe_payloads() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload>* _internal_mutable_bent_pipe_payloads();
  public:
  const ::aalyria::spacetime::api::common::BentPipePayload& bent_pipe_payloads(int index) const;
  ::aalyria::spacetime::api::common::BentPipePayload* add_bent_pipe_payloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload >&
      bent_pipe_payloads() const;
  // optional string name = 2 [json_name = "name"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string motion_ref_id = 4 [json_name = "motionRefId"];
  bool has_motion_ref_id() const;
  void clear_motion_ref_id() ;
  const std::string& motion_ref_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_motion_ref_id(Arg_&& arg, Args_... args);
  std::string* mutable_motion_ref_id();
  PROTOBUF_NODISCARD std::string* release_motion_ref_id();
  void set_allocated_motion_ref_id(std::string* ptr);

  private:
  const std::string& _internal_motion_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motion_ref_id(
      const std::string& value);
  std::string* _internal_mutable_motion_ref_id();

  public:
  // optional string type = 12 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 13 [json_name = "adsbTransponder"];
  bool has_adsb_transponder() const;
  void clear_adsb_transponder() ;
  const ::aalyria::spacetime::api::common::AdsbTransponder& adsb_transponder() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::AdsbTransponder* release_adsb_transponder();
  ::aalyria::spacetime::api::common::AdsbTransponder* mutable_adsb_transponder();
  void set_allocated_adsb_transponder(::aalyria::spacetime::api::common::AdsbTransponder* adsb_transponder);
  private:
  const ::aalyria::spacetime::api::common::AdsbTransponder& _internal_adsb_transponder() const;
  ::aalyria::spacetime::api::common::AdsbTransponder* _internal_mutable_adsb_transponder();
  public:
  void unsafe_arena_set_allocated_adsb_transponder(
      ::aalyria::spacetime::api::common::AdsbTransponder* adsb_transponder);
  ::aalyria::spacetime::api::common::AdsbTransponder* unsafe_arena_release_adsb_transponder();
  // optional .aalyria.spacetime.api.common.Motion coordinates = 14 [json_name = "coordinates"];
  bool has_coordinates() const;
  void clear_coordinates() ;
  const ::aalyria::spacetime::api::common::Motion& coordinates() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::Motion* release_coordinates();
  ::aalyria::spacetime::api::common::Motion* mutable_coordinates();
  void set_allocated_coordinates(::aalyria::spacetime::api::common::Motion* coordinates);
  private:
  const ::aalyria::spacetime::api::common::Motion& _internal_coordinates() const;
  ::aalyria::spacetime::api::common::Motion* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::aalyria::spacetime::api::common::Motion* coordinates);
  ::aalyria::spacetime::api::common::Motion* unsafe_arena_release_coordinates();
  // optional .aalyria.spacetime.api.common.PlatformDefinition.MotionSource motion_source = 16 [json_name = "motionSource"];
  bool has_motion_source() const;
  void clear_motion_source() ;
  ::aalyria::spacetime::api::common::PlatformDefinition_MotionSource motion_source() const;
  void set_motion_source(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource value);

  private:
  ::aalyria::spacetime::api::common::PlatformDefinition_MotionSource _internal_motion_source() const;
  void _internal_set_motion_source(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource value);

  public:
  // optional uint32 norad_id = 17 [json_name = "noradId"];
  bool has_norad_id() const;
  void clear_norad_id() ;
  ::uint32_t norad_id() const;
  void set_norad_id(::uint32_t value);

  private:
  ::uint32_t _internal_norad_id() const;
  void _internal_set_norad_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.PlatformDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel > transceiver_model_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload > bent_pipe_payloads_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motion_ref_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::aalyria::spacetime::api::common::AdsbTransponder* adsb_transponder_;
    ::aalyria::spacetime::api::common::Motion* coordinates_;
    int motion_source_;
    ::uint32_t norad_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fplatform_2eproto;
};// -------------------------------------------------------------------

class AdsbTransponder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.common.AdsbTransponder) */ {
 public:
  inline AdsbTransponder() : AdsbTransponder(nullptr) {}
  ~AdsbTransponder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AdsbTransponder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdsbTransponder(const AdsbTransponder& from);
  AdsbTransponder(AdsbTransponder&& from) noexcept
    : AdsbTransponder() {
    *this = ::std::move(from);
  }

  inline AdsbTransponder& operator=(const AdsbTransponder& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdsbTransponder& operator=(AdsbTransponder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdsbTransponder& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdsbTransponder* internal_default_instance() {
    return reinterpret_cast<const AdsbTransponder*>(
               &_AdsbTransponder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdsbTransponder& a, AdsbTransponder& b) {
    a.Swap(&b);
  }
  inline void Swap(AdsbTransponder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdsbTransponder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdsbTransponder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdsbTransponder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdsbTransponder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdsbTransponder& from) {
    AdsbTransponder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdsbTransponder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.common.AdsbTransponder";
  }
  protected:
  explicit AdsbTransponder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAircraftIdentificationFieldNumber = 2,
    kIcaoAircraftAddressFieldNumber = 1,
  };
  // optional string aircraft_identification = 2 [json_name = "aircraftIdentification"];
  bool has_aircraft_identification() const;
  void clear_aircraft_identification() ;
  const std::string& aircraft_identification() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_aircraft_identification(Arg_&& arg, Args_... args);
  std::string* mutable_aircraft_identification();
  PROTOBUF_NODISCARD std::string* release_aircraft_identification();
  void set_allocated_aircraft_identification(std::string* ptr);

  private:
  const std::string& _internal_aircraft_identification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aircraft_identification(
      const std::string& value);
  std::string* _internal_mutable_aircraft_identification();

  public:
  // optional uint32 icao_aircraft_address = 1 [json_name = "icaoAircraftAddress"];
  bool has_icao_aircraft_address() const;
  void clear_icao_aircraft_address() ;
  ::uint32_t icao_aircraft_address() const;
  void set_icao_aircraft_address(::uint32_t value);

  private:
  ::uint32_t _internal_icao_aircraft_address() const;
  void _internal_set_icao_aircraft_address(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.common.AdsbTransponder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aircraft_identification_;
    ::uint32_t icao_aircraft_address_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fcommon_2fplatform_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlatformDefinition

// optional string name = 2 [json_name = "name"];
inline bool PlatformDefinition::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PlatformDefinition::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlatformDefinition::name() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlatformDefinition::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PlatformDefinition.name)
}
inline std::string* PlatformDefinition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.name)
  return _s;
}
inline const std::string& PlatformDefinition::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlatformDefinition::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlatformDefinition::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* PlatformDefinition::release_name() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PlatformDefinition.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PlatformDefinition::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.name)
}

// optional string type = 12 [json_name = "type"];
inline bool PlatformDefinition::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PlatformDefinition::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PlatformDefinition::type() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlatformDefinition::set_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PlatformDefinition.type)
}
inline std::string* PlatformDefinition::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.type)
  return _s;
}
inline const std::string& PlatformDefinition::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PlatformDefinition::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PlatformDefinition::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* PlatformDefinition::release_type() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PlatformDefinition.type)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PlatformDefinition::set_allocated_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.type)
}

// optional .aalyria.spacetime.api.common.Motion coordinates = 14 [json_name = "coordinates"];
inline bool PlatformDefinition::has_coordinates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coordinates_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::Motion& PlatformDefinition::_internal_coordinates() const {
  const ::aalyria::spacetime::api::common::Motion* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::Motion&>(
      ::aalyria::spacetime::api::common::_Motion_default_instance_);
}
inline const ::aalyria::spacetime::api::common::Motion& PlatformDefinition::coordinates() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.coordinates)
  return _internal_coordinates();
}
inline void PlatformDefinition::unsafe_arena_set_allocated_coordinates(
    ::aalyria::spacetime::api::common::Motion* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.coordinates)
}
inline ::aalyria::spacetime::api::common::Motion* PlatformDefinition::release_coordinates() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::common::Motion* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::Motion* PlatformDefinition::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PlatformDefinition.coordinates)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::common::Motion* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::Motion* PlatformDefinition::_internal_mutable_coordinates() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::Motion>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::aalyria::spacetime::api::common::Motion* PlatformDefinition::mutable_coordinates() {
  ::aalyria::spacetime::api::common::Motion* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.coordinates)
  return _msg;
}
inline void PlatformDefinition::set_allocated_coordinates(::aalyria::spacetime::api::common::Motion* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates));
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.coordinates)
}

// optional .aalyria.spacetime.api.common.PlatformDefinition.MotionSource motion_source = 16 [json_name = "motionSource"];
inline bool PlatformDefinition::has_motion_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PlatformDefinition::clear_motion_source() {
  _impl_.motion_source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::aalyria::spacetime::api::common::PlatformDefinition_MotionSource PlatformDefinition::motion_source() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.motion_source)
  return _internal_motion_source();
}
inline void PlatformDefinition::set_motion_source(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource value) {
   _internal_set_motion_source(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PlatformDefinition.motion_source)
}
inline ::aalyria::spacetime::api::common::PlatformDefinition_MotionSource PlatformDefinition::_internal_motion_source() const {
  return static_cast<::aalyria::spacetime::api::common::PlatformDefinition_MotionSource>(_impl_.motion_source_);
}
inline void PlatformDefinition::_internal_set_motion_source(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource value) {
  assert(::aalyria::spacetime::api::common::PlatformDefinition_MotionSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.motion_source_ = value;
}

// optional string motion_ref_id = 4 [json_name = "motionRefId"];
inline bool PlatformDefinition::has_motion_ref_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PlatformDefinition::clear_motion_ref_id() {
  _impl_.motion_ref_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlatformDefinition::motion_ref_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id)
  return _internal_motion_ref_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlatformDefinition::set_motion_ref_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.motion_ref_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id)
}
inline std::string* PlatformDefinition::mutable_motion_ref_id() {
  std::string* _s = _internal_mutable_motion_ref_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id)
  return _s;
}
inline const std::string& PlatformDefinition::_internal_motion_ref_id() const {
  return _impl_.motion_ref_id_.Get();
}
inline void PlatformDefinition::_internal_set_motion_ref_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.motion_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlatformDefinition::_internal_mutable_motion_ref_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.motion_ref_id_.Mutable( GetArenaForAllocation());
}
inline std::string* PlatformDefinition::release_motion_ref_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.motion_ref_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PlatformDefinition::set_allocated_motion_ref_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.motion_ref_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.motion_ref_id_.IsDefault()) {
          _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.motion_ref_id)
}

// repeated .aalyria.spacetime.api.common.TransceiverModel transceiver_model = 15 [json_name = "transceiverModel"];
inline int PlatformDefinition::_internal_transceiver_model_size() const {
  return _impl_.transceiver_model_.size();
}
inline int PlatformDefinition::transceiver_model_size() const {
  return _internal_transceiver_model_size();
}
inline ::aalyria::spacetime::api::common::TransceiverModel* PlatformDefinition::mutable_transceiver_model(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.transceiver_model)
  return _internal_mutable_transceiver_model()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel >*
PlatformDefinition::mutable_transceiver_model() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.PlatformDefinition.transceiver_model)
  return _internal_mutable_transceiver_model();
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& PlatformDefinition::_internal_transceiver_model(int index) const {
  return _internal_transceiver_model().Get(index);
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& PlatformDefinition::transceiver_model(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.transceiver_model)
  return _internal_transceiver_model(index);
}
inline ::aalyria::spacetime::api::common::TransceiverModel* PlatformDefinition::_internal_add_transceiver_model() {
  return _internal_mutable_transceiver_model()->Add();
}
inline ::aalyria::spacetime::api::common::TransceiverModel* PlatformDefinition::add_transceiver_model() {
  ::aalyria::spacetime::api::common::TransceiverModel* _add = _internal_add_transceiver_model();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.PlatformDefinition.transceiver_model)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::TransceiverModel >&
PlatformDefinition::transceiver_model() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.PlatformDefinition.transceiver_model)
  return _internal_transceiver_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel>&
PlatformDefinition::_internal_transceiver_model() const {
  return _impl_.transceiver_model_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::TransceiverModel>*
PlatformDefinition::_internal_mutable_transceiver_model() {
  return &_impl_.transceiver_model_;
}

// repeated .aalyria.spacetime.api.common.BentPipePayload bent_pipe_payloads = 18 [json_name = "bentPipePayloads"];
inline int PlatformDefinition::_internal_bent_pipe_payloads_size() const {
  return _impl_.bent_pipe_payloads_.size();
}
inline int PlatformDefinition::bent_pipe_payloads_size() const {
  return _internal_bent_pipe_payloads_size();
}
inline ::aalyria::spacetime::api::common::BentPipePayload* PlatformDefinition::mutable_bent_pipe_payloads(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.bent_pipe_payloads)
  return _internal_mutable_bent_pipe_payloads()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload >*
PlatformDefinition::mutable_bent_pipe_payloads() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.common.PlatformDefinition.bent_pipe_payloads)
  return _internal_mutable_bent_pipe_payloads();
}
inline const ::aalyria::spacetime::api::common::BentPipePayload& PlatformDefinition::_internal_bent_pipe_payloads(int index) const {
  return _internal_bent_pipe_payloads().Get(index);
}
inline const ::aalyria::spacetime::api::common::BentPipePayload& PlatformDefinition::bent_pipe_payloads(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.bent_pipe_payloads)
  return _internal_bent_pipe_payloads(index);
}
inline ::aalyria::spacetime::api::common::BentPipePayload* PlatformDefinition::_internal_add_bent_pipe_payloads() {
  return _internal_mutable_bent_pipe_payloads()->Add();
}
inline ::aalyria::spacetime::api::common::BentPipePayload* PlatformDefinition::add_bent_pipe_payloads() {
  ::aalyria::spacetime::api::common::BentPipePayload* _add = _internal_add_bent_pipe_payloads();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.common.PlatformDefinition.bent_pipe_payloads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::BentPipePayload >&
PlatformDefinition::bent_pipe_payloads() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.common.PlatformDefinition.bent_pipe_payloads)
  return _internal_bent_pipe_payloads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload>&
PlatformDefinition::_internal_bent_pipe_payloads() const {
  return _impl_.bent_pipe_payloads_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::BentPipePayload>*
PlatformDefinition::_internal_mutable_bent_pipe_payloads() {
  return &_impl_.bent_pipe_payloads_;
}

// optional .aalyria.spacetime.api.common.AdsbTransponder adsb_transponder = 13 [json_name = "adsbTransponder"];
inline bool PlatformDefinition::has_adsb_transponder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adsb_transponder_ != nullptr);
  return value;
}
inline void PlatformDefinition::clear_adsb_transponder() {
  if (_impl_.adsb_transponder_ != nullptr) _impl_.adsb_transponder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::aalyria::spacetime::api::common::AdsbTransponder& PlatformDefinition::_internal_adsb_transponder() const {
  const ::aalyria::spacetime::api::common::AdsbTransponder* p = _impl_.adsb_transponder_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::AdsbTransponder&>(
      ::aalyria::spacetime::api::common::_AdsbTransponder_default_instance_);
}
inline const ::aalyria::spacetime::api::common::AdsbTransponder& PlatformDefinition::adsb_transponder() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.adsb_transponder)
  return _internal_adsb_transponder();
}
inline void PlatformDefinition::unsafe_arena_set_allocated_adsb_transponder(
    ::aalyria::spacetime::api::common::AdsbTransponder* adsb_transponder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adsb_transponder_);
  }
  _impl_.adsb_transponder_ = adsb_transponder;
  if (adsb_transponder) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.adsb_transponder)
}
inline ::aalyria::spacetime::api::common::AdsbTransponder* PlatformDefinition::release_adsb_transponder() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::common::AdsbTransponder* temp = _impl_.adsb_transponder_;
  _impl_.adsb_transponder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::AdsbTransponder* PlatformDefinition::unsafe_arena_release_adsb_transponder() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.PlatformDefinition.adsb_transponder)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::common::AdsbTransponder* temp = _impl_.adsb_transponder_;
  _impl_.adsb_transponder_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::AdsbTransponder* PlatformDefinition::_internal_mutable_adsb_transponder() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.adsb_transponder_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::AdsbTransponder>(GetArenaForAllocation());
    _impl_.adsb_transponder_ = p;
  }
  return _impl_.adsb_transponder_;
}
inline ::aalyria::spacetime::api::common::AdsbTransponder* PlatformDefinition::mutable_adsb_transponder() {
  ::aalyria::spacetime::api::common::AdsbTransponder* _msg = _internal_mutable_adsb_transponder();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.PlatformDefinition.adsb_transponder)
  return _msg;
}
inline void PlatformDefinition::set_allocated_adsb_transponder(::aalyria::spacetime::api::common::AdsbTransponder* adsb_transponder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.adsb_transponder_;
  }
  if (adsb_transponder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(adsb_transponder);
    if (message_arena != submessage_arena) {
      adsb_transponder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adsb_transponder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.adsb_transponder_ = adsb_transponder;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.PlatformDefinition.adsb_transponder)
}

// optional uint32 norad_id = 17 [json_name = "noradId"];
inline bool PlatformDefinition::has_norad_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PlatformDefinition::clear_norad_id() {
  _impl_.norad_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t PlatformDefinition::norad_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.PlatformDefinition.norad_id)
  return _internal_norad_id();
}
inline void PlatformDefinition::set_norad_id(::uint32_t value) {
  _internal_set_norad_id(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.PlatformDefinition.norad_id)
}
inline ::uint32_t PlatformDefinition::_internal_norad_id() const {
  return _impl_.norad_id_;
}
inline void PlatformDefinition::_internal_set_norad_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.norad_id_ = value;
}

// -------------------------------------------------------------------

// AdsbTransponder

// optional uint32 icao_aircraft_address = 1 [json_name = "icaoAircraftAddress"];
inline bool AdsbTransponder::has_icao_aircraft_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AdsbTransponder::clear_icao_aircraft_address() {
  _impl_.icao_aircraft_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t AdsbTransponder::icao_aircraft_address() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdsbTransponder.icao_aircraft_address)
  return _internal_icao_aircraft_address();
}
inline void AdsbTransponder::set_icao_aircraft_address(::uint32_t value) {
  _internal_set_icao_aircraft_address(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdsbTransponder.icao_aircraft_address)
}
inline ::uint32_t AdsbTransponder::_internal_icao_aircraft_address() const {
  return _impl_.icao_aircraft_address_;
}
inline void AdsbTransponder::_internal_set_icao_aircraft_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.icao_aircraft_address_ = value;
}

// optional string aircraft_identification = 2 [json_name = "aircraftIdentification"];
inline bool AdsbTransponder::has_aircraft_identification() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdsbTransponder::clear_aircraft_identification() {
  _impl_.aircraft_identification_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdsbTransponder::aircraft_identification() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification)
  return _internal_aircraft_identification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdsbTransponder::set_aircraft_identification(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.aircraft_identification_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification)
}
inline std::string* AdsbTransponder::mutable_aircraft_identification() {
  std::string* _s = _internal_mutable_aircraft_identification();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification)
  return _s;
}
inline const std::string& AdsbTransponder::_internal_aircraft_identification() const {
  return _impl_.aircraft_identification_.Get();
}
inline void AdsbTransponder::_internal_set_aircraft_identification(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.aircraft_identification_.Set(value, GetArenaForAllocation());
}
inline std::string* AdsbTransponder::_internal_mutable_aircraft_identification() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.aircraft_identification_.Mutable( GetArenaForAllocation());
}
inline std::string* AdsbTransponder::release_aircraft_identification() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.aircraft_identification_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aircraft_identification_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdsbTransponder::set_allocated_aircraft_identification(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.aircraft_identification_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.aircraft_identification_.IsDefault()) {
          _impl_.aircraft_identification_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.common.AdsbTransponder.aircraft_identification)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::common::PlatformDefinition_MotionSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::common::PlatformDefinition_MotionSource>() {
  return ::aalyria::spacetime::api::common::PlatformDefinition_MotionSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fcommon_2fplatform_2eproto_2epb_2eh

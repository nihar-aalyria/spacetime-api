// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/channel.proto

#include "api/common/channel.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR BandProfile::BandProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rate_table_)*/nullptr
  , /*decltype(_impl_.channel_width_hz_)*/ ::uint64_t{0u}
} {}
struct BandProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BandProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BandProfileDefaultTypeInternal() {}
  union {
    BandProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BandProfileDefaultTypeInternal _BandProfile_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fchannel_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fcommon_2fchannel_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fchannel_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BandProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BandProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BandProfile, _impl_.channel_width_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::BandProfile, _impl_.rate_table_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::common::BandProfile)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_BandProfile_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030api/common/channel.proto\022\034aalyria.spac"
    "etime.api.common\032 api/common/wireless_mo"
    "dcod.proto\"\233\001\n\013BandProfile\022(\n\020channel_wi"
    "dth_hz\030\002 \001(\004R\016channelWidthHz\022R\n\nrate_tab"
    "le\030\003 \001(\01323.aalyria.spacetime.api.common."
    "AdaptiveDataRateTableR\trateTableJ\004\010\001\020\002J\010"
    "\010\004\020\200\200\200\200\002*\205\001\n\026ChannelSelectionMethod\022$\n C"
    "HANNEL_SELECTION_METHOD_UNKNOWN\020\000\022 \n\034AUT"
    "ONOMOUS_CHANNEL_SELECTION\020\001\022#\n\037CHANNEL_S"
    "ELECTION_BY_CONTROLLER\020\002BD\n com.aalyria."
    "spacetime.api.commonZ aalyria.com/spacet"
    "ime/api/common"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcommon_2fchannel_2eproto_deps[1] =
    {
        &::descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fchannel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fchannel_2eproto = {
    false,
    false,
    454,
    descriptor_table_protodef_api_2fcommon_2fchannel_2eproto,
    "api/common/channel.proto",
    &descriptor_table_api_2fcommon_2fchannel_2eproto_once,
    descriptor_table_api_2fcommon_2fchannel_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fchannel_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fchannel_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fchannel_2eproto,
    file_level_service_descriptors_api_2fcommon_2fchannel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fchannel_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fchannel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fchannel_2eproto(&descriptor_table_api_2fcommon_2fchannel_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelSelectionMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fcommon_2fchannel_2eproto);
  return file_level_enum_descriptors_api_2fcommon_2fchannel_2eproto[0];
}
bool ChannelSelectionMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class BandProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BandProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BandProfile, _impl_._has_bits_);
  static void set_has_channel_width_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::AdaptiveDataRateTable& rate_table(const BandProfile* msg);
  static void set_has_rate_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::AdaptiveDataRateTable&
BandProfile::_Internal::rate_table(const BandProfile* msg) {
  return *msg->_impl_.rate_table_;
}
void BandProfile::clear_rate_table() {
  if (_impl_.rate_table_ != nullptr) _impl_.rate_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BandProfile::BandProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.BandProfile)
}
BandProfile::BandProfile(const BandProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BandProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_table_){nullptr}
    , decltype(_impl_.channel_width_hz_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rate_table_ = new ::aalyria::spacetime::api::common::AdaptiveDataRateTable(*from._impl_.rate_table_);
  }
  _this->_impl_.channel_width_hz_ = from._impl_.channel_width_hz_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.BandProfile)
}

inline void BandProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_table_){nullptr}
    , decltype(_impl_.channel_width_hz_) { ::uint64_t{0u} }

  };
}

BandProfile::~BandProfile() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.BandProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BandProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rate_table_;
}

void BandProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BandProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.BandProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.rate_table_ != nullptr);
    _impl_.rate_table_->Clear();
  }
  _impl_.channel_width_hz_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BandProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_width_hz(&has_bits);
          _impl_.channel_width_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.AdaptiveDataRateTable rate_table = 3 [json_name = "rateTable"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BandProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.BandProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_channel_width_hz(), target);
  }

  // optional .aalyria.spacetime.api.common.AdaptiveDataRateTable rate_table = 3 [json_name = "rateTable"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rate_table(this),
        _Internal::rate_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.BandProfile)
  return target;
}

::size_t BandProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.BandProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.AdaptiveDataRateTable rate_table = 3 [json_name = "rateTable"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rate_table_);
    }

    // optional uint64 channel_width_hz = 2 [json_name = "channelWidthHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_channel_width_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BandProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BandProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BandProfile::GetClassData() const { return &_class_data_; }


void BandProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BandProfile*>(&to_msg);
  auto& from = static_cast<const BandProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.BandProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rate_table()->::aalyria::spacetime::api::common::AdaptiveDataRateTable::MergeFrom(
          from._internal_rate_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_width_hz_ = from._impl_.channel_width_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BandProfile::CopyFrom(const BandProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.BandProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandProfile::IsInitialized() const {
  return true;
}

void BandProfile::InternalSwap(BandProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BandProfile, _impl_.channel_width_hz_)
      + sizeof(BandProfile::_impl_.channel_width_hz_)
      - PROTOBUF_FIELD_OFFSET(BandProfile, _impl_.rate_table_)>(
          reinterpret_cast<char*>(&_impl_.rate_table_),
          reinterpret_cast<char*>(&other->_impl_.rate_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BandProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fchannel_2eproto_getter, &descriptor_table_api_2fcommon_2fchannel_2eproto_once,
      file_level_metadata_api_2fcommon_2fchannel_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::BandProfile*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::BandProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::BandProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

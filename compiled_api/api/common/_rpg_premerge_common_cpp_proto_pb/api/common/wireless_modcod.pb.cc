// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/wireless_modcod.proto

#include "api/common/wireless_modcod.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
template <typename>
PROTOBUF_CONSTEXPR AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_carrier_to_noise_plus_interference_db_)*/ 0

  , /*decltype(_impl_.tx_data_rate_bps_)*/ 0
} {}
struct AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal() {}
  union {
    AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMappingDefaultTypeInternal _AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_received_signal_power_dbw_)*/ 0

  , /*decltype(_impl_.tx_data_rate_bps_)*/ 0
} {}
struct AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal() {}
  union {
    AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdaptiveDataRateTable_ReceivedSignalPowerDataRateMappingDefaultTypeInternal _AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AdaptiveDataRateTable::AdaptiveDataRateTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.received_signal_power_steps_)*/{}
  , /*decltype(_impl_.carrier_to_noise_plus_interference_steps_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct AdaptiveDataRateTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdaptiveDataRateTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdaptiveDataRateTableDefaultTypeInternal() {}
  union {
    AdaptiveDataRateTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdaptiveDataRateTableDefaultTypeInternal _AdaptiveDataRateTable_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcommon_2fwireless_5fmodcod_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcommon_2fwireless_5fmodcod_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcommon_2fwireless_5fmodcod_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_.min_carrier_to_noise_plus_interference_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_.tx_data_rate_bps_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_.min_received_signal_power_dbw_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_.tx_data_rate_bps_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable, _impl_.carrier_to_noise_plus_interference_steps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::common::AdaptiveDataRateTable, _impl_.received_signal_power_steps_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping)},
        { 12, 22, -1, sizeof(::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping)},
        { 24, 35, -1, sizeof(::aalyria::spacetime::api::common::AdaptiveDataRateTable)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::common::_AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping_default_instance_._instance,
    &::aalyria::spacetime::api::common::_AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping_default_instance_._instance,
    &::aalyria::spacetime::api::common::_AdaptiveDataRateTable_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcommon_2fwireless_5fmodcod_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n api/common/wireless_modcod.proto\022\034aaly"
    "ria.spacetime.api.common\"\277\005\n\025AdaptiveDat"
    "aRateTable\022\016\n\002id\030\003 \001(\tR\002id\022\270\001\n(carrier_t"
    "o_noise_plus_interference_steps\030\002 \003(\0132a."
    "aalyria.spacetime.api.common.AdaptiveDat"
    "aRateTable.CarrierToNoisePlusInterferenc"
    "eDataRateMappingR#carrierToNoisePlusInte"
    "rferenceSteps\022\225\001\n\033received_signal_power_"
    "steps\030\001 \003(\0132V.aalyria.spacetime.api.comm"
    "on.AdaptiveDataRateTable.ReceivedSignalP"
    "owerDataRateMappingR\030receivedSignalPower"
    "Steps\032\260\001\n-CarrierToNoisePlusInterference"
    "DataRateMapping\022V\n)min_carrier_to_noise_"
    "plus_interference_db\030\001 \001(\001R#minCarrierTo"
    "NoisePlusInterferenceDb\022\'\n\020tx_data_rate_"
    "bps\030\002 \001(\001R\rtxDataRateBps\032\217\001\n\"ReceivedSig"
    "nalPowerDataRateMapping\022@\n\035min_received_"
    "signal_power_dbw\030\001 \001(\001R\031minReceivedSigna"
    "lPowerDbw\022\'\n\020tx_data_rate_bps\030\002 \001(\001R\rtxD"
    "ataRateBpsBD\n com.aalyria.spacetime.api."
    "commonZ aalyria.com/spacetime/api/common"
};
static ::absl::once_flag descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto = {
    false,
    false,
    840,
    descriptor_table_protodef_api_2fcommon_2fwireless_5fmodcod_2eproto,
    "api/common/wireless_modcod.proto",
    &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_api_2fcommon_2fwireless_5fmodcod_2eproto::offsets,
    file_level_metadata_api_2fcommon_2fwireless_5fmodcod_2eproto,
    file_level_enum_descriptors_api_2fcommon_2fwireless_5fmodcod_2eproto,
    file_level_service_descriptors_api_2fcommon_2fwireless_5fmodcod_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_getter() {
  return &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcommon_2fwireless_5fmodcod_2eproto(&descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace common {
// ===================================================================

class AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_._has_bits_);
  static void set_has_min_carrier_to_noise_plus_interference_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
}
AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping(const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
}

inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_carrier_to_noise_plus_interference_db_) { 0 }

    , decltype(_impl_.tx_data_rate_bps_) { 0 }

  };
}

AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::~AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_carrier_to_noise_plus_interference_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tx_data_rate_bps_) -
        reinterpret_cast<char*>(&_impl_.min_carrier_to_noise_plus_interference_db_)) + sizeof(_impl_.tx_data_rate_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_carrier_to_noise_plus_interference_db = 1 [json_name = "minCarrierToNoisePlusInterferenceDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_min_carrier_to_noise_plus_interference_db(&has_bits);
          _impl_.min_carrier_to_noise_plus_interference_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_tx_data_rate_bps(&has_bits);
          _impl_.tx_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double min_carrier_to_noise_plus_interference_db = 1 [json_name = "minCarrierToNoisePlusInterferenceDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_min_carrier_to_noise_plus_interference_db(), target);
  }

  // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_tx_data_rate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  return target;
}

::size_t AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min_carrier_to_noise_plus_interference_db = 1 [json_name = "minCarrierToNoisePlusInterferenceDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::GetClassData() const { return &_class_data_; }


void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping*>(&to_msg);
  auto& from = static_cast<const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_carrier_to_noise_plus_interference_db_ = from._impl_.min_carrier_to_noise_plus_interference_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tx_data_rate_bps_ = from._impl_.tx_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::CopyFrom(const AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::IsInitialized() const {
  return true;
}

void AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::InternalSwap(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_.tx_data_rate_bps_)
      + sizeof(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::_impl_.tx_data_rate_bps_)
      - PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping, _impl_.min_carrier_to_noise_plus_interference_db_)>(
          reinterpret_cast<char*>(&_impl_.min_carrier_to_noise_plus_interference_db_),
          reinterpret_cast<char*>(&other->_impl_.min_carrier_to_noise_plus_interference_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fmodcod_2eproto[0]);
}
// ===================================================================

class AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_._has_bits_);
  static void set_has_min_received_signal_power_dbw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
}
AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping(const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
}

inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_received_signal_power_dbw_) { 0 }

    , decltype(_impl_.tx_data_rate_bps_) { 0 }

  };
}

AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::~AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_received_signal_power_dbw_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tx_data_rate_bps_) -
        reinterpret_cast<char*>(&_impl_.min_received_signal_power_dbw_)) + sizeof(_impl_.tx_data_rate_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_received_signal_power_dbw = 1 [json_name = "minReceivedSignalPowerDbw"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_min_received_signal_power_dbw(&has_bits);
          _impl_.min_received_signal_power_dbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_tx_data_rate_bps(&has_bits);
          _impl_.tx_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double min_received_signal_power_dbw = 1 [json_name = "minReceivedSignalPowerDbw"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_min_received_signal_power_dbw(), target);
  }

  // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_tx_data_rate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  return target;
}

::size_t AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min_received_signal_power_dbw = 1 [json_name = "minReceivedSignalPowerDbw"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double tx_data_rate_bps = 2 [json_name = "txDataRateBps"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::GetClassData() const { return &_class_data_; }


void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping*>(&to_msg);
  auto& from = static_cast<const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_received_signal_power_dbw_ = from._impl_.min_received_signal_power_dbw_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tx_data_rate_bps_ = from._impl_.tx_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::CopyFrom(const AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::IsInitialized() const {
  return true;
}

void AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::InternalSwap(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_.tx_data_rate_bps_)
      + sizeof(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::_impl_.tx_data_rate_bps_)
      - PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping, _impl_.min_received_signal_power_dbw_)>(
          reinterpret_cast<char*>(&_impl_.min_received_signal_power_dbw_),
          reinterpret_cast<char*>(&other->_impl_.min_received_signal_power_dbw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fmodcod_2eproto[1]);
}
// ===================================================================

class AdaptiveDataRateTable::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptiveDataRateTable>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AdaptiveDataRateTable, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdaptiveDataRateTable::AdaptiveDataRateTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable)
}
AdaptiveDataRateTable::AdaptiveDataRateTable(const AdaptiveDataRateTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdaptiveDataRateTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.received_signal_power_steps_){from._impl_.received_signal_power_steps_}
    , decltype(_impl_.carrier_to_noise_plus_interference_steps_){from._impl_.carrier_to_noise_plus_interference_steps_}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.common.AdaptiveDataRateTable)
}

inline void AdaptiveDataRateTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.received_signal_power_steps_){arena}
    , decltype(_impl_.carrier_to_noise_plus_interference_steps_){arena}
    , decltype(_impl_.id_) {}

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdaptiveDataRateTable::~AdaptiveDataRateTable() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdaptiveDataRateTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_received_signal_power_steps()->~RepeatedPtrField();
  _internal_mutable_carrier_to_noise_plus_interference_steps()->~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void AdaptiveDataRateTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdaptiveDataRateTable::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_received_signal_power_steps()->Clear();
  _internal_mutable_carrier_to_noise_plus_interference_steps()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveDataRateTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping received_signal_power_steps = 1 [json_name = "receivedSignalPowerSteps"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_signal_power_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping carrier_to_noise_plus_interference_steps = 2 [json_name = "carrierToNoisePlusInterferenceSteps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_carrier_to_noise_plus_interference_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.common.AdaptiveDataRateTable.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AdaptiveDataRateTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping received_signal_power_steps = 1 [json_name = "receivedSignalPowerSteps"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_received_signal_power_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_received_signal_power_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping carrier_to_noise_plus_interference_steps = 2 [json_name = "carrierToNoisePlusInterferenceSteps"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_carrier_to_noise_plus_interference_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_carrier_to_noise_plus_interference_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 3 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.common.AdaptiveDataRateTable.id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  return target;
}

::size_t AdaptiveDataRateTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.ReceivedSignalPowerDataRateMapping received_signal_power_steps = 1 [json_name = "receivedSignalPowerSteps"];
  total_size += 1UL * this->_internal_received_signal_power_steps_size();
  for (const auto& msg : this->_internal_received_signal_power_steps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.AdaptiveDataRateTable.CarrierToNoisePlusInterferenceDataRateMapping carrier_to_noise_plus_interference_steps = 2 [json_name = "carrierToNoisePlusInterferenceSteps"];
  total_size += 1UL * this->_internal_carrier_to_noise_plus_interference_steps_size();
  for (const auto& msg : this->_internal_carrier_to_noise_plus_interference_steps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 3 [json_name = "id"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdaptiveDataRateTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdaptiveDataRateTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdaptiveDataRateTable::GetClassData() const { return &_class_data_; }


void AdaptiveDataRateTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdaptiveDataRateTable*>(&to_msg);
  auto& from = static_cast<const AdaptiveDataRateTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_received_signal_power_steps()->MergeFrom(from._internal_received_signal_power_steps());
  _this->_internal_mutable_carrier_to_noise_plus_interference_steps()->MergeFrom(from._internal_carrier_to_noise_plus_interference_steps());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdaptiveDataRateTable::CopyFrom(const AdaptiveDataRateTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.common.AdaptiveDataRateTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveDataRateTable::IsInitialized() const {
  return true;
}

void AdaptiveDataRateTable::InternalSwap(AdaptiveDataRateTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_received_signal_power_steps()->InternalSwap(other->_internal_mutable_received_signal_power_steps());
  _internal_mutable_carrier_to_noise_plus_interference_steps()->InternalSwap(other->_internal_mutable_carrier_to_noise_plus_interference_steps());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveDataRateTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_getter, &descriptor_table_api_2fcommon_2fwireless_5fmodcod_2eproto_once,
      file_level_metadata_api_2fcommon_2fwireless_5fmodcod_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_CarrierToNoisePlusInterferenceDataRateMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AdaptiveDataRateTable_ReceivedSignalPowerDataRateMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::common::AdaptiveDataRateTable*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::common::AdaptiveDataRateTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::common::AdaptiveDataRateTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

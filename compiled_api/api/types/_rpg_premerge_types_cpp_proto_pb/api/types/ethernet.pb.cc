// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/types/ethernet.proto

#include "api/types/ethernet.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace types {
template <typename>
PROTOBUF_CONSTEXPR EtherType::EtherType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EtherTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtherTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtherTypeDefaultTypeInternal() {}
  union {
    EtherType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtherTypeDefaultTypeInternal _EtherType_default_instance_;
}  // namespace types
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2ftypes_2fethernet_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2ftypes_2fethernet_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2ftypes_2fethernet_2eproto = nullptr;
const ::uint32_t TableStruct_api_2ftypes_2fethernet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::types::EtherType, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::types::EtherType, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::types::EtherType, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::aalyria::spacetime::api::types::EtherType)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::types::_EtherType_default_instance_._instance,
};
const char descriptor_table_protodef_api_2ftypes_2fethernet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030api/types/ethernet.proto\022\033aalyria.spac"
    "etime.api.types\"\253\002\n\tEtherType\022K\n\nwell_kn"
    "own\030\001 \001(\0162*.aalyria.spacetime.api.types."
    "EtherType.EthH\000R\twellKnown\022\034\n\010explicit\030\002"
    " \001(\rH\000R\010explicit\"\251\001\n\003Eth\022\023\n\017ETH_UNSPECIF"
    "IED\020\000\022\r\n\010ETH_IPV4\020\200\020\022\014\n\007ETH_ARP\020\206\020\022\023\n\rET"
    "H_VLAN_CTAG\020\200\202\002\022\016\n\010ETH_IPV6\020\335\215\002\022\016\n\010ETH_M"
    "PLS\020\307\220\002\022\027\n\021ETH_MPLS_UPSTREAM\020\310\220\002\022\023\n\rETH_"
    "VLAN_STAG\020\250\221\002\022\r\n\007ETH_PBB\020\347\221\002B\007\n\005valueBB\n"
    "\037com.aalyria.spacetime.api.typesZ\037aalyri"
    "a.com/spacetime/api/types"
};
static ::absl::once_flag descriptor_table_api_2ftypes_2fethernet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2ftypes_2fethernet_2eproto = {
    false,
    false,
    425,
    descriptor_table_protodef_api_2ftypes_2fethernet_2eproto,
    "api/types/ethernet.proto",
    &descriptor_table_api_2ftypes_2fethernet_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_api_2ftypes_2fethernet_2eproto::offsets,
    file_level_metadata_api_2ftypes_2fethernet_2eproto,
    file_level_enum_descriptors_api_2ftypes_2fethernet_2eproto,
    file_level_service_descriptors_api_2ftypes_2fethernet_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2ftypes_2fethernet_2eproto_getter() {
  return &descriptor_table_api_2ftypes_2fethernet_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2ftypes_2fethernet_2eproto(&descriptor_table_api_2ftypes_2fethernet_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EtherType_Eth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2ftypes_2fethernet_2eproto);
  return file_level_enum_descriptors_api_2ftypes_2fethernet_2eproto[0];
}
bool EtherType_Eth_IsValid(int value) {
  switch (value) {
    case 0:
    case 2048:
    case 2054:
    case 33024:
    case 34525:
    case 34887:
    case 34888:
    case 34984:
    case 35047:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EtherType_Eth EtherType::ETH_UNSPECIFIED;
constexpr EtherType_Eth EtherType::ETH_IPV4;
constexpr EtherType_Eth EtherType::ETH_ARP;
constexpr EtherType_Eth EtherType::ETH_VLAN_CTAG;
constexpr EtherType_Eth EtherType::ETH_IPV6;
constexpr EtherType_Eth EtherType::ETH_MPLS;
constexpr EtherType_Eth EtherType::ETH_MPLS_UPSTREAM;
constexpr EtherType_Eth EtherType::ETH_VLAN_STAG;
constexpr EtherType_Eth EtherType::ETH_PBB;
constexpr EtherType_Eth EtherType::Eth_MIN;
constexpr EtherType_Eth EtherType::Eth_MAX;
constexpr int EtherType::Eth_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class EtherType::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::types::EtherType, _impl_._oneof_case_);
};

EtherType::EtherType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.types.EtherType)
}
EtherType::EtherType(const EtherType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EtherType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kWellKnown: {
      _this->_internal_set_well_known(from._internal_well_known());
      break;
    }
    case kExplicit: {
      _this->_internal_set_explicit_(from._internal_explicit_());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.types.EtherType)
}

inline void EtherType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

EtherType::~EtherType() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.types.EtherType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtherType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void EtherType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtherType::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.types.EtherType)
  switch (value_case()) {
    case kWellKnown: {
      // No need to clear
      break;
    }
    case kExplicit: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void EtherType::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.types.EtherType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtherType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.types.EtherType.Eth well_known = 1 [json_name = "wellKnown"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::types::EtherType_Eth_IsValid(static_cast<int>(val)))) {
            _internal_set_well_known(static_cast<::aalyria::spacetime::api::types::EtherType_Eth>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 explicit = 2 [json_name = "explicit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_explicit_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EtherType::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.types.EtherType)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kWellKnown: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this->_internal_well_known(), target);
      break;
    }
    case kExplicit: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this->_internal_explicit_(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.types.EtherType)
  return target;
}

::size_t EtherType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.types.EtherType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .aalyria.spacetime.api.types.EtherType.Eth well_known = 1 [json_name = "wellKnown"];
    case kWellKnown: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_well_known());
      break;
    }
    // uint32 explicit = 2 [json_name = "explicit"];
    case kExplicit: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_explicit_());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtherType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EtherType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtherType::GetClassData() const { return &_class_data_; }


void EtherType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EtherType*>(&to_msg);
  auto& from = static_cast<const EtherType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.types.EtherType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kWellKnown: {
      _this->_internal_set_well_known(from._internal_well_known());
      break;
    }
    case kExplicit: {
      _this->_internal_set_explicit_(from._internal_explicit_());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EtherType::CopyFrom(const EtherType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.types.EtherType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtherType::IsInitialized() const {
  return true;
}

void EtherType::InternalSwap(EtherType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtherType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2ftypes_2fethernet_2eproto_getter, &descriptor_table_api_2ftypes_2fethernet_2eproto_once,
      file_level_metadata_api_2ftypes_2fethernet_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::types::EtherType*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::types::EtherType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::types::EtherType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

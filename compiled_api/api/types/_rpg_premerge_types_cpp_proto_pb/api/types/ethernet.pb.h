// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/types/ethernet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2ftypes_2fethernet_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2ftypes_2fethernet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2ftypes_2fethernet_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2ftypes_2fethernet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2ftypes_2fethernet_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace types {
class EtherType;
struct EtherTypeDefaultTypeInternal;
extern EtherTypeDefaultTypeInternal _EtherType_default_instance_;
}  // namespace types
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::types::EtherType* Arena::CreateMaybeMessage<::aalyria::spacetime::api::types::EtherType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace types {
enum EtherType_Eth : int {
  EtherType_Eth_ETH_UNSPECIFIED = 0,
  EtherType_Eth_ETH_IPV4 = 2048,
  EtherType_Eth_ETH_ARP = 2054,
  EtherType_Eth_ETH_VLAN_CTAG = 33024,
  EtherType_Eth_ETH_IPV6 = 34525,
  EtherType_Eth_ETH_MPLS = 34887,
  EtherType_Eth_ETH_MPLS_UPSTREAM = 34888,
  EtherType_Eth_ETH_VLAN_STAG = 34984,
  EtherType_Eth_ETH_PBB = 35047,
};

bool EtherType_Eth_IsValid(int value);
constexpr EtherType_Eth EtherType_Eth_Eth_MIN = static_cast<EtherType_Eth>(0);
constexpr EtherType_Eth EtherType_Eth_Eth_MAX = static_cast<EtherType_Eth>(35047);
constexpr int EtherType_Eth_Eth_ARRAYSIZE = 35047 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
EtherType_Eth_descriptor();
template <typename T>
const std::string& EtherType_Eth_Name(T value) {
  static_assert(std::is_same<T, EtherType_Eth>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Eth_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(EtherType_Eth_descriptor(), value);
}
inline bool EtherType_Eth_Parse(absl::string_view name, EtherType_Eth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EtherType_Eth>(
      EtherType_Eth_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EtherType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.types.EtherType) */ {
 public:
  inline EtherType() : EtherType(nullptr) {}
  ~EtherType() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EtherType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EtherType(const EtherType& from);
  EtherType(EtherType&& from) noexcept
    : EtherType() {
    *this = ::std::move(from);
  }

  inline EtherType& operator=(const EtherType& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtherType& operator=(EtherType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EtherType& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kWellKnown = 1,
    kExplicit = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const EtherType* internal_default_instance() {
    return reinterpret_cast<const EtherType*>(
               &_EtherType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EtherType& a, EtherType& b) {
    a.Swap(&b);
  }
  inline void Swap(EtherType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtherType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EtherType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EtherType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EtherType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EtherType& from) {
    EtherType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtherType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.types.EtherType";
  }
  protected:
  explicit EtherType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Eth = EtherType_Eth;
  static constexpr Eth ETH_UNSPECIFIED = EtherType_Eth_ETH_UNSPECIFIED;
  static constexpr Eth ETH_IPV4 = EtherType_Eth_ETH_IPV4;
  static constexpr Eth ETH_ARP = EtherType_Eth_ETH_ARP;
  static constexpr Eth ETH_VLAN_CTAG = EtherType_Eth_ETH_VLAN_CTAG;
  static constexpr Eth ETH_IPV6 = EtherType_Eth_ETH_IPV6;
  static constexpr Eth ETH_MPLS = EtherType_Eth_ETH_MPLS;
  static constexpr Eth ETH_MPLS_UPSTREAM = EtherType_Eth_ETH_MPLS_UPSTREAM;
  static constexpr Eth ETH_VLAN_STAG = EtherType_Eth_ETH_VLAN_STAG;
  static constexpr Eth ETH_PBB = EtherType_Eth_ETH_PBB;
  static inline bool Eth_IsValid(int value) {
    return EtherType_Eth_IsValid(value);
  }
  static constexpr Eth Eth_MIN = EtherType_Eth_Eth_MIN;
  static constexpr Eth Eth_MAX = EtherType_Eth_Eth_MAX;
  static constexpr int Eth_ARRAYSIZE = EtherType_Eth_Eth_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Eth_descriptor() {
    return EtherType_Eth_descriptor();
  }
  template <typename T>
  static inline const std::string& Eth_Name(T value) {
    return EtherType_Eth_Name(value);
  }
  static inline bool Eth_Parse(absl::string_view name, Eth* value) {
    return EtherType_Eth_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWellKnownFieldNumber = 1,
    kExplicitFieldNumber = 2,
  };
  // .aalyria.spacetime.api.types.EtherType.Eth well_known = 1 [json_name = "wellKnown"];
  bool has_well_known() const;
  void clear_well_known() ;
  ::aalyria::spacetime::api::types::EtherType_Eth well_known() const;
  void set_well_known(::aalyria::spacetime::api::types::EtherType_Eth value);

  private:
  ::aalyria::spacetime::api::types::EtherType_Eth _internal_well_known() const;
  void _internal_set_well_known(::aalyria::spacetime::api::types::EtherType_Eth value);

  public:
  // uint32 explicit = 2 [json_name = "explicit"];
  bool has_explicit_() const;
  void clear_explicit_() ;
  ::uint32_t explicit_() const;
  void set_explicit_(::uint32_t value);

  private:
  ::uint32_t _internal_explicit_() const;
  void _internal_set_explicit_(::uint32_t value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.types.EtherType)
 private:
  class _Internal;
  void set_has_well_known();
  void set_has_explicit_();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int well_known_;
      ::uint32_t explicit__;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2ftypes_2fethernet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EtherType

// .aalyria.spacetime.api.types.EtherType.Eth well_known = 1 [json_name = "wellKnown"];
inline bool EtherType::has_well_known() const {
  return value_case() == kWellKnown;
}
inline void EtherType::set_has_well_known() {
  _impl_._oneof_case_[0] = kWellKnown;
}
inline void EtherType::clear_well_known() {
  if (value_case() == kWellKnown) {
    _impl_.value_.well_known_ = 0;
    clear_has_value();
  }
}
inline ::aalyria::spacetime::api::types::EtherType_Eth EtherType::well_known() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.types.EtherType.well_known)
  return _internal_well_known();
}
inline void EtherType::set_well_known(::aalyria::spacetime::api::types::EtherType_Eth value) {
   _internal_set_well_known(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.types.EtherType.well_known)
}
inline ::aalyria::spacetime::api::types::EtherType_Eth EtherType::_internal_well_known() const {
  if (value_case() == kWellKnown) {
    return static_cast<::aalyria::spacetime::api::types::EtherType_Eth>(_impl_.value_.well_known_);
  }
  return static_cast<::aalyria::spacetime::api::types::EtherType_Eth>(0);
}
inline void EtherType::_internal_set_well_known(::aalyria::spacetime::api::types::EtherType_Eth value) {
  assert(::aalyria::spacetime::api::types::EtherType_Eth_IsValid(value));
  if (value_case() != kWellKnown) {
    clear_value();
    set_has_well_known();
  }
  _impl_.value_.well_known_ = value;
}

// uint32 explicit = 2 [json_name = "explicit"];
inline bool EtherType::has_explicit_() const {
  return value_case() == kExplicit;
}
inline void EtherType::set_has_explicit_() {
  _impl_._oneof_case_[0] = kExplicit;
}
inline void EtherType::clear_explicit_() {
  if (value_case() == kExplicit) {
    _impl_.value_.explicit__ = 0u;
    clear_has_value();
  }
}
inline ::uint32_t EtherType::explicit_() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.types.EtherType.explicit)
  return _internal_explicit_();
}
inline void EtherType::set_explicit_(::uint32_t value) {
  _internal_set_explicit_(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.types.EtherType.explicit)
}
inline ::uint32_t EtherType::_internal_explicit_() const {
  if (value_case() == kExplicit) {
    return _impl_.value_.explicit__;
  }
  return 0u;
}
inline void EtherType::_internal_set_explicit_(::uint32_t value) {
  if (value_case() != kExplicit) {
    clear_value();
    set_has_explicit_();
  }
  _impl_.value_.explicit__ = value;
}

inline bool EtherType::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void EtherType::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline EtherType::ValueCase EtherType::value_case() const {
  return EtherType::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::types::EtherType_Eth> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::types::EtherType_Eth>() {
  return ::aalyria::spacetime::api::types::EtherType_Eth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2ftypes_2fethernet_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/nbi/v1alpha/signal_propagation.proto
#ifndef GRPC_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto__INCLUDED
#define GRPC_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto__INCLUDED

#include "api/nbi/v1alpha/signal_propagation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {

class SignalPropagation final {
 public:
  static constexpr char const* service_full_name() {
    return "aalyria.spacetime.api.nbi.v1alpha.SignalPropagation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>> AsyncEvaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>>(AsyncEvaluateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>> PrepareAsyncEvaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>>(PrepareAsyncEvaluateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* AsyncEvaluateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* PrepareAsyncEvaluateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>> AsyncEvaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>>(AsyncEvaluateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>> PrepareAsyncEvaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>>(PrepareAsyncEvaluateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response, std::function<void(::grpc::Status)>) override;
      void Evaluate(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* AsyncEvaluateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* PrepareAsyncEvaluateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Evaluate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Evaluate(::grpc::ServerContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Evaluate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvaluate(::grpc::ServerContext* context, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::grpc::ServerAsyncResponseWriter< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Evaluate<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Evaluate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* request, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* response) { return this->Evaluate(context, request, response); }));}
    void SetMessageAllocatorFor_Evaluate(
        ::grpc::MessageAllocator< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Evaluate(
      ::grpc::CallbackServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Evaluate<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Evaluate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Evaluate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvaluate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Evaluate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Evaluate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Evaluate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Evaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Evaluate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* streamer) {
                       return this->StreamedEvaluate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Evaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Evaluate(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* /*request*/, ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEvaluate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest,::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Evaluate<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Evaluate<Service > StreamedService;
};

}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


#endif  // GRPC_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto__INCLUDED

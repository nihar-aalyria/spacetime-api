// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/nbi.proto

#include "api/nbi/v1alpha/nbi.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
template <typename>
PROTOBUF_CONSTEXPR EntityGroup::EntityGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct EntityGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityGroupDefaultTypeInternal() {}
  union {
    EntityGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityGroupDefaultTypeInternal _EntityGroup_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResourceOrigin::ResourceOrigin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.provider_endpoint_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ResourceOriginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceOriginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceOriginDefaultTypeInternal() {}
  union {
    ResourceOrigin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceOriginDefaultTypeInternal _ResourceOrigin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Entity::Entity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_modified_by_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.group_)*/nullptr
  , /*decltype(_impl_.resource_origin_)*/nullptr
  , /*decltype(_impl_.commit_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.next_commit_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDefaultTypeInternal _Entity_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetEntityRequest::GetEntityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct GetEntityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEntityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEntityRequestDefaultTypeInternal() {}
  union {
    GetEntityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEntityRequestDefaultTypeInternal _GetEntityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateEntityRequest::CreateEntityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_)*/nullptr} {}
struct CreateEntityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateEntityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateEntityRequestDefaultTypeInternal() {}
  union {
    CreateEntityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateEntityRequestDefaultTypeInternal _CreateEntityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateEntityRequest::UpdateEntityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_)*/nullptr
  , /*decltype(_impl_.ignore_consistency_check_)*/ false
} {}
struct UpdateEntityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateEntityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateEntityRequestDefaultTypeInternal() {}
  union {
    UpdateEntityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateEntityRequestDefaultTypeInternal _UpdateEntityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListEntitiesRequest::ListEntitiesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.compute_cartesian_coordinates_)*/ false
} {}
struct ListEntitiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEntitiesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEntitiesRequestDefaultTypeInternal() {}
  union {
    ListEntitiesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEntitiesRequestDefaultTypeInternal _ListEntitiesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListEntitiesResponse::ListEntitiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEntitiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEntitiesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEntitiesResponseDefaultTypeInternal() {}
  union {
    ListEntitiesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEntitiesResponseDefaultTypeInternal _ListEntitiesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListEntitiesOverTimeRequest::ListEntitiesOverTimeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.compute_cartesian_coordinates_)*/ false

  , /*decltype(_impl_.diff_)*/ false
} {}
struct ListEntitiesOverTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEntitiesOverTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEntitiesOverTimeRequestDefaultTypeInternal() {}
  union {
    ListEntitiesOverTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEntitiesOverTimeRequestDefaultTypeInternal _ListEntitiesOverTimeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListEntitiesOverTimeResponse::ListEntitiesOverTimeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListEntitiesOverTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEntitiesOverTimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEntitiesOverTimeResponseDefaultTypeInternal() {}
  union {
    ListEntitiesOverTimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEntitiesOverTimeResponseDefaultTypeInternal _ListEntitiesOverTimeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EntityFilter::EntityFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.references_node_)*/{}
  , /*decltype(_impl_.references_service_request_)*/{}
  , /*decltype(_impl_.include_intent_states_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityFilterDefaultTypeInternal() {}
  union {
    EntityFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityFilterDefaultTypeInternal _EntityFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DeleteEntityRequest::DeleteEntityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.ignore_consistency_check_)*/ false

  , /*decltype(_impl_.last_commit_timestamp_)*/ ::int64_t{0}
} {}
struct DeleteEntityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteEntityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteEntityRequestDefaultTypeInternal() {}
  union {
    DeleteEntityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteEntityRequestDefaultTypeInternal _DeleteEntityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DeleteEntityResponse::DeleteEntityResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteEntityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteEntityResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteEntityResponseDefaultTypeInternal() {}
  union {
    DeleteEntityResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteEntityResponseDefaultTypeInternal _DeleteEntityResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadScenarioRequest::LoadScenarioRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scenario_settings_)*/nullptr} {}
struct LoadScenarioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadScenarioRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadScenarioRequestDefaultTypeInternal() {}
  union {
    LoadScenarioRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadScenarioRequestDefaultTypeInternal _LoadScenarioRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LoadScenarioResponse::LoadScenarioResponse(
    ::_pbi::ConstantInitialized) {}
struct LoadScenarioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadScenarioResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadScenarioResponseDefaultTypeInternal() {}
  union {
    LoadScenarioResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadScenarioResponseDefaultTypeInternal _LoadScenarioResponse_default_instance_;
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fnbi_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fnbi_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fnbi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityGroup, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityGroup, _impl_.app_id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin, _impl_.provider_endpoint_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.resource_origin_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.commit_timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.next_commit_timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.last_modified_by_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_.value_),
    2,
    0,
    3,
    4,
    5,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest, _impl_.id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest, _impl_.entity_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest, _impl_.entity_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest, _impl_.ignore_consistency_check_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _impl_.filter_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest, _impl_.compute_cartesian_coordinates_),
    2,
    0,
    1,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse, _impl_.entities_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.compute_cartesian_coordinates_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.filter_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.ids_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest, _impl_.diff_),
    2,
    0,
    3,
    1,
    ~0u,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse, _impl_.entities_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityFilter, _impl_.references_node_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityFilter, _impl_.references_service_request_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::EntityFilter, _impl_.include_intent_states_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _impl_.last_commit_timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest, _impl_.ignore_consistency_check_),
    1,
    0,
    3,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest, _impl_.scenario_settings_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::EntityGroup)},
        { 12, 21, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin)},
        { 22, 54, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::Entity)},
        { 77, 87, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest)},
        { 89, 98, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest)},
        { 99, 109, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest)},
        { 111, 123, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest)},
        { 127, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse)},
        { 136, 150, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest)},
        { 156, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse)},
        { 165, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::EntityFilter)},
        { 176, 188, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest)},
        { 192, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityResponse)},
        { 200, 209, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest)},
        { 210, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::_EntityGroup_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_ResourceOrigin_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_Entity_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_GetEntityRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_CreateEntityRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_UpdateEntityRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_ListEntitiesRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_ListEntitiesResponse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_ListEntitiesOverTimeRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_ListEntitiesOverTimeResponse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_EntityFilter_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_DeleteEntityRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_DeleteEntityResponse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_LoadScenarioRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_LoadScenarioResponse_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fnbi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031api/nbi/v1alpha/nbi.proto\022!aalyria.spa"
    "cetime.api.nbi.v1alpha\032\030api/common/chann"
    "el.proto\032\030api/common/control.proto\032\034api/"
    "common/coordinates.proto\032\031api/common/pla"
    "tform.proto\032\032api/common/telemetry.proto\032"
    "\025api/common/time.proto\032/api/nbi/v1alpha/"
    "resources/antenna_pattern.proto\032(api/nbi"
    "/v1alpha/resources/coverage.proto\0321api/n"
    "bi/v1alpha/resources/devices_in_region.p"
    "roto\032&api/nbi/v1alpha/resources/intent.p"
    "roto\0321api/nbi/v1alpha/resources/motion_e"
    "valuation.proto\032/api/nbi/v1alpha/resourc"
    "es/network_element.proto\032,api/nbi/v1alph"
    "a/resources/network_link.proto\0321api/nbi/"
    "v1alpha/resources/scenario_settings.prot"
    "o\032/api/nbi/v1alpha/resources/service_req"
    "uest.proto\0325api/nbi/v1alpha/resources/wi"
    "reless_interference.proto\032\032google/type/i"
    "nterval.proto\"g\n\013EntityGroup\022A\n\004type\030\001 \001"
    "(\0162-.aalyria.spacetime.api.nbi.v1alpha.E"
    "ntityTypeR\004type\022\025\n\006app_id\030\003 \001(\tR\005appId\"="
    "\n\016ResourceOrigin\022+\n\021provider_endpoint\030\001 "
    "\001(\tR\020providerEndpoint\"\214\020\n\006Entity\022D\n\005grou"
    "p\030\001 \001(\0132..aalyria.spacetime.api.nbi.v1al"
    "pha.EntityGroupR\005group\022\016\n\002id\030\002 \001(\tR\002id\022Z"
    "\n\017resource_origin\030\" \001(\01321.aalyria.spacet"
    "ime.api.nbi.v1alpha.ResourceOriginR\016reso"
    "urceOrigin\022)\n\020commit_timestamp\030\003 \001(\003R\017co"
    "mmitTimestamp\0222\n\025next_commit_timestamp\030!"
    " \001(\003R\023nextCommitTimestamp\022(\n\020last_modifi"
    "ed_by\030\026 \001(\tR\016lastModifiedBy\022f\n\017antenna_p"
    "attern\030\017 \001(\0132;.aalyria.spacetime.api.nbi"
    ".v1alpha.resources.AntennaPatternH\000R\016ant"
    "ennaPattern\022N\n\014band_profile\030\024 \001(\0132).aaly"
    "ria.spacetime.api.common.BandProfileH\000R\013"
    "bandProfile\022X\n\020cdpi_stream_info\030\027 \001(\0132,."
    "aalyria.spacetime.api.common.CdpiStreamI"
    "nfoH\000R\016cdpiStreamInfo\022f\n\017computed_motion"
    "\030\n \001(\0132;.aalyria.spacetime.api.nbi.v1alp"
    "ha.resources.ComputedMotionH\000R\016computedM"
    "otion\022j\n\021devices_in_region\030\036 \001(\0132<.aalyr"
    "ia.spacetime.api.nbi.v1alpha.resources.D"
    "evicesInRegionH\000R\017devicesInRegion\022Z\n\013sta"
    "tion_set\030\033 \001(\01327.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.StationSetH\000R\nstati"
    "onSet\022c\n\016surface_region\030\034 \001(\0132:.aalyria."
    "spacetime.api.nbi.v1alpha.resources.Surf"
    "aceRegionH\000R\rsurfaceRegion\022f\n\017drain_prov"
    "ision\030\032 \001(\0132;.aalyria.spacetime.api.nbi."
    "v1alpha.resources.DrainProvisionH\000R\016drai"
    "nProvision\022M\n\006intent\030\t \001(\01323.aalyria.spa"
    "cetime.api.nbi.v1alpha.resources.IntentH"
    "\000R\006intent\022v\n\025interface_link_report\030\010 \001(\013"
    "2@.aalyria.spacetime.api.nbi.v1alpha.res"
    "ources.InterfaceLinkReportH\000R\023interfaceL"
    "inkReport\022~\n\027interference_constraint\030\035 \001"
    "(\0132C.aalyria.spacetime.api.nbi.v1alpha.r"
    "esources.InterferenceConstraintH\000R\026inter"
    "ferenceConstraint\022]\n\021motion_definition\030\007"
    " \001(\0132..aalyria.spacetime.api.common.Moti"
    "onDefinitionH\000R\020motionDefinition\022]\n\014netw"
    "ork_node\030\006 \001(\01328.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.NetworkNodeH\000R\013netw"
    "orkNode\022d\n\024network_stats_report\030\013 \001(\01320."
    "aalyria.spacetime.api.common.NetworkStat"
    "sReportH\000R\022networkStatsReport\022N\n\010platfor"
    "m\030\004 \001(\01320.aalyria.spacetime.api.common.P"
    "latformDefinitionH\000R\010platform\022f\n\017service"
    "_request\030\005 \001(\0132;.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.ServiceRequestH\000R\016s"
    "erviceRequest\022|\n\027transceiver_link_report"
    "\030\031 \001(\0132B.aalyria.spacetime.api.nbi.v1alp"
    "ha.resources.TransceiverLinkReportH\000R\025tr"
    "ansceiverLinkReportB\007\n\005valueJ\004\010\022\020\023J\010\010#\020\200"
    "\200\200\200\002\"e\n\020GetEntityRequest\022A\n\004type\030\001 \001(\0162-"
    ".aalyria.spacetime.api.nbi.v1alpha.Entit"
    "yTypeR\004type\022\016\n\002id\030\002 \001(\tR\002id\"X\n\023CreateEnt"
    "ityRequest\022A\n\006entity\030\001 \001(\0132).aalyria.spa"
    "cetime.api.nbi.v1alpha.EntityR\006entity\"\222\001"
    "\n\023UpdateEntityRequest\022A\n\006entity\030\001 \001(\0132)."
    "aalyria.spacetime.api.nbi.v1alpha.Entity"
    "R\006entity\0228\n\030ignore_consistency_check\030\002 \001"
    "(\010R\026ignoreConsistencyCheck\"\250\002\n\023ListEntit"
    "iesRequest\022A\n\004type\030\001 \001(\0162-.aalyria.space"
    "time.api.nbi.v1alpha.EntityTypeR\004type\0221\n"
    "\010interval\030\003 \001(\0132\025.google.type.IntervalR\010"
    "interval\022G\n\006filter\030\005 \001(\0132/.aalyria.space"
    "time.api.nbi.v1alpha.EntityFilterR\006filte"
    "r\022B\n\035compute_cartesian_coordinates\030\006 \001(\010"
    "R\033computeCartesianCoordinatesJ\004\010\002\020\003J\010\010\007\020"
    "\200\200\200\200\002\"]\n\024ListEntitiesResponse\022E\n\010entitie"
    "s\030\001 \003(\0132).aalyria.spacetime.api.nbi.v1al"
    "pha.EntityR\010entities\"\333\002\n\033ListEntitiesOve"
    "rTimeRequest\022A\n\004type\030\001 \001(\0162-.aalyria.spa"
    "cetime.api.nbi.v1alpha.EntityTypeR\004type\022"
    "F\n\010interval\030\002 \001(\0132*.aalyria.spacetime.ap"
    "i.common.TimeIntervalR\010interval\022B\n\035compu"
    "te_cartesian_coordinates\030\003 \001(\010R\033computeC"
    "artesianCoordinates\022G\n\006filter\030\004 \001(\0132/.aa"
    "lyria.spacetime.api.nbi.v1alpha.EntityFi"
    "lterR\006filter\022\020\n\003ids\030\005 \003(\tR\003ids\022\022\n\004diff\030\006"
    " \001(\010R\004diff\"e\n\034ListEntitiesOverTimeRespon"
    "se\022E\n\010entities\030\001 \003(\0132).aalyria.spacetime"
    ".api.nbi.v1alpha.EntityR\010entities\"\343\001\n\014En"
    "tityFilter\022\'\n\017references_node\030\001 \003(\tR\016ref"
    "erencesNode\022<\n\032references_service_reques"
    "t\030\002 \003(\tR\030referencesServiceRequest\022l\n\025inc"
    "lude_intent_states\030\003 \003(\01628.aalyria.space"
    "time.api.nbi.v1alpha.resources.IntentSta"
    "teR\023includeIntentStates\"\326\001\n\023DeleteEntity"
    "Request\022A\n\004type\030\001 \001(\0162-.aalyria.spacetim"
    "e.api.nbi.v1alpha.EntityTypeR\004type\022\016\n\002id"
    "\030\002 \001(\tR\002id\0222\n\025last_commit_timestamp\030\003 \001("
    "\003R\023lastCommitTimestamp\0228\n\030ignore_consist"
    "ency_check\030\004 \001(\010R\026ignoreConsistencyCheck"
    "\"\026\n\024DeleteEntityResponse\"\201\001\n\023LoadScenari"
    "oRequest\022j\n\021scenario_settings\030\001 \001(\0132=.aa"
    "lyria.spacetime.api.nbi.v1alpha.resource"
    "s.ScenarioSettingsR\020scenarioSettings\"\026\n\024"
    "LoadScenarioResponse*\307\003\n\nEntityType\022\033\n\027E"
    "NTITY_TYPE_UNSPECIFIED\020\000\022\023\n\017ANTENNA_PATT"
    "ERN\020\014\022\020\n\014BAND_PROFILE\020\020\022\024\n\020CDPI_STREAM_I"
    "NFO\020\021\022\025\n\021DEVICES_IN_REGION\020\030\022\017\n\013STATION_"
    "SET\020\025\022\022\n\016SURFACE_REGION\020\026\022\023\n\017DRAIN_PROVI"
    "SION\020\024\022\n\n\006INTENT\020\006\022\031\n\025INTERFACE_LINK_REP"
    "ORT\020\005\022\033\n\027INTERFERENCE_CONSTRAINT\020\027\022\025\n\021MO"
    "TION_DEFINITION\020\004\022\020\n\014NETWORK_NODE\020\003\022\030\n\024N"
    "ETWORK_STATS_REPORT\020\010\022\027\n\023PLATFORM_DEFINI"
    "TION\020\001\022\027\n\023PROPAGATION_WEATHER\020\017\022\023\n\017SERVI"
    "CE_REQUEST\020\002\022\033\n\027TRANSCEIVER_LINK_REPORT\020"
    "\023\022\023\n\017COMPUTED_MOTION\020\007\"\004\010\016\020\016\"\010\010\031\020\377\377\377\377\0072\214"
    "\007\n\006NetOps\022m\n\tGetEntity\0223.aalyria.spaceti"
    "me.api.nbi.v1alpha.GetEntityRequest\032).aa"
    "lyria.spacetime.api.nbi.v1alpha.Entity\"\000"
    "\022s\n\014CreateEntity\0226.aalyria.spacetime.api"
    ".nbi.v1alpha.CreateEntityRequest\032).aalyr"
    "ia.spacetime.api.nbi.v1alpha.Entity\"\000\022s\n"
    "\014UpdateEntity\0226.aalyria.spacetime.api.nb"
    "i.v1alpha.UpdateEntityRequest\032).aalyria."
    "spacetime.api.nbi.v1alpha.Entity\"\000\022\201\001\n\014L"
    "istEntities\0226.aalyria.spacetime.api.nbi."
    "v1alpha.ListEntitiesRequest\0327.aalyria.sp"
    "acetime.api.nbi.v1alpha.ListEntitiesResp"
    "onse\"\000\022\231\001\n\024ListEntitiesOverTime\022>.aalyri"
    "a.spacetime.api.nbi.v1alpha.ListEntities"
    "OverTimeRequest\032\?.aalyria.spacetime.api."
    "nbi.v1alpha.ListEntitiesOverTimeResponse"
    "\"\000\022\201\001\n\014DeleteEntity\0226.aalyria.spacetime."
    "api.nbi.v1alpha.DeleteEntityRequest\0327.aa"
    "lyria.spacetime.api.nbi.v1alpha.DeleteEn"
    "tityResponse\"\000\022\204\001\n\014LoadScenario\0226.aalyri"
    "a.spacetime.api.nbi.v1alpha.LoadScenario"
    "Request\0327.aalyria.spacetime.api.nbi.v1al"
    "pha.LoadScenarioResponse\"\003\210\002\001BN\n%com.aal"
    "yria.spacetime.api.nbi.v1alphaZ%aalyria."
    "com/spacetime/api/nbi/v1alpha"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_deps[17] =
    {
        &::descriptor_table_api_2fcommon_2fchannel_2eproto,
        &::descriptor_table_api_2fcommon_2fcontrol_2eproto,
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2fplatform_2eproto,
        &::descriptor_table_api_2fcommon_2ftelemetry_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fcoverage_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fintent_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fservice_5frequest_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fwireless_5finterference_2eproto,
        &::descriptor_table_google_2ftype_2finterval_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto = {
    false,
    false,
    6229,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fnbi_2eproto,
    "api/nbi/v1alpha/nbi.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_deps,
    17,
    15,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fnbi_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fnbi_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fnbi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fnbi_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fnbi_2eproto[0];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class EntityGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EntityGroup, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EntityGroup::EntityGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
}
EntityGroup::EntityGroup(const EntityGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
}

inline void EntityGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EntityGroup::~EntityGroup() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
}

void EntityGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.app_id_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::EntityType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::EntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string app_id = 3 [json_name = "appId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.EntityGroup.app_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EntityGroup::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string app_id = 3 [json_name = "appId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_app_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.EntityGroup.app_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  return target;
}

::size_t EntityGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string app_id = 3 [json_name = "appId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_app_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityGroup::GetClassData() const { return &_class_data_; }


void EntityGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityGroup*>(&to_msg);
  auto& from = static_cast<const EntityGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_id(from._internal_app_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityGroup::CopyFrom(const EntityGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.EntityGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityGroup::IsInitialized() const {
  return true;
}

void EntityGroup::InternalSwap(EntityGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_id_, lhs_arena,
                                       &other->_impl_.app_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[0]);
}
// ===================================================================

class ResourceOrigin::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceOrigin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ResourceOrigin, _impl_._has_bits_);
  static void set_has_provider_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceOrigin::ResourceOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
}
ResourceOrigin::ResourceOrigin(const ResourceOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceOrigin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_endpoint_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_endpoint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.provider_endpoint_.Set(from._internal_provider_endpoint(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
}

inline void ResourceOrigin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_endpoint_) {}

  };
  _impl_.provider_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_endpoint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceOrigin::~ResourceOrigin() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceOrigin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_endpoint_.Destroy();
}

void ResourceOrigin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.provider_endpoint_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceOrigin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string provider_endpoint = 1 [json_name = "providerEndpoint"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_provider_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin.provider_endpoint");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResourceOrigin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string provider_endpoint = 1 [json_name = "providerEndpoint"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_provider_endpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin.provider_endpoint");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  return target;
}

::size_t ResourceOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string provider_endpoint = 1 [json_name = "providerEndpoint"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceOrigin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceOrigin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceOrigin::GetClassData() const { return &_class_data_; }


void ResourceOrigin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceOrigin*>(&to_msg);
  auto& from = static_cast<const ResourceOrigin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_provider_endpoint(from._internal_provider_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceOrigin::CopyFrom(const ResourceOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceOrigin::IsInitialized() const {
  return true;
}

void ResourceOrigin::InternalSwap(ResourceOrigin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_endpoint_, lhs_arena,
                                       &other->_impl_.provider_endpoint_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceOrigin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[1]);
}
// ===================================================================

class Entity::_Internal {
 public:
  using HasBits = decltype(std::declval<Entity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Entity, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::Entity, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup& group(const Entity* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin& resource_origin(const Entity* msg);
  static void set_has_resource_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_commit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_commit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_modified_by(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& antenna_pattern(const Entity* msg);
  static const ::aalyria::spacetime::api::common::BandProfile& band_profile(const Entity* msg);
  static const ::aalyria::spacetime::api::common::CdpiStreamInfo& cdpi_stream_info(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion& computed_motion(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion& devices_in_region(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::StationSet& station_set(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::SurfaceRegion& surface_region(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::DrainProvision& drain_provision(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::Intent& intent(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport& interface_link_report(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::InterferenceConstraint& interference_constraint(const Entity* msg);
  static const ::aalyria::spacetime::api::common::MotionDefinition& motion_definition(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode& network_node(const Entity* msg);
  static const ::aalyria::spacetime::api::common::NetworkStatsReport& network_stats_report(const Entity* msg);
  static const ::aalyria::spacetime::api::common::PlatformDefinition& platform(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ServiceRequest& service_request(const Entity* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport& transceiver_link_report(const Entity* msg);
};

const ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup&
Entity::_Internal::group(const Entity* msg) {
  return *msg->_impl_.group_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin&
Entity::_Internal::resource_origin(const Entity* msg) {
  return *msg->_impl_.resource_origin_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
Entity::_Internal::antenna_pattern(const Entity* msg) {
  return *msg->_impl_.value_.antenna_pattern_;
}
const ::aalyria::spacetime::api::common::BandProfile&
Entity::_Internal::band_profile(const Entity* msg) {
  return *msg->_impl_.value_.band_profile_;
}
const ::aalyria::spacetime::api::common::CdpiStreamInfo&
Entity::_Internal::cdpi_stream_info(const Entity* msg) {
  return *msg->_impl_.value_.cdpi_stream_info_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion&
Entity::_Internal::computed_motion(const Entity* msg) {
  return *msg->_impl_.value_.computed_motion_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion&
Entity::_Internal::devices_in_region(const Entity* msg) {
  return *msg->_impl_.value_.devices_in_region_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::StationSet&
Entity::_Internal::station_set(const Entity* msg) {
  return *msg->_impl_.value_.station_set_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::SurfaceRegion&
Entity::_Internal::surface_region(const Entity* msg) {
  return *msg->_impl_.value_.surface_region_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::DrainProvision&
Entity::_Internal::drain_provision(const Entity* msg) {
  return *msg->_impl_.value_.drain_provision_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::Intent&
Entity::_Internal::intent(const Entity* msg) {
  return *msg->_impl_.value_.intent_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport&
Entity::_Internal::interface_link_report(const Entity* msg) {
  return *msg->_impl_.value_.interface_link_report_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::InterferenceConstraint&
Entity::_Internal::interference_constraint(const Entity* msg) {
  return *msg->_impl_.value_.interference_constraint_;
}
const ::aalyria::spacetime::api::common::MotionDefinition&
Entity::_Internal::motion_definition(const Entity* msg) {
  return *msg->_impl_.value_.motion_definition_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode&
Entity::_Internal::network_node(const Entity* msg) {
  return *msg->_impl_.value_.network_node_;
}
const ::aalyria::spacetime::api::common::NetworkStatsReport&
Entity::_Internal::network_stats_report(const Entity* msg) {
  return *msg->_impl_.value_.network_stats_report_;
}
const ::aalyria::spacetime::api::common::PlatformDefinition&
Entity::_Internal::platform(const Entity* msg) {
  return *msg->_impl_.value_.platform_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::ServiceRequest&
Entity::_Internal::service_request(const Entity* msg) {
  return *msg->_impl_.value_.service_request_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport&
Entity::_Internal::transceiver_link_report(const Entity* msg) {
  return *msg->_impl_.value_.transceiver_link_report_;
}
void Entity::set_allocated_antenna_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* antenna_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (antenna_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antenna_pattern));
    if (message_arena != submessage_arena) {
      antenna_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antenna_pattern, submessage_arena);
    }
    set_has_antenna_pattern();
    _impl_.value_.antenna_pattern_ = antenna_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.antenna_pattern)
}
void Entity::clear_antenna_pattern() {
  if (value_case() == kAntennaPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.antenna_pattern_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_band_profile(::aalyria::spacetime::api::common::BandProfile* band_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (band_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_profile));
    if (message_arena != submessage_arena) {
      band_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band_profile, submessage_arena);
    }
    set_has_band_profile();
    _impl_.value_.band_profile_ = band_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.band_profile)
}
void Entity::clear_band_profile() {
  if (value_case() == kBandProfile) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.band_profile_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_cdpi_stream_info(::aalyria::spacetime::api::common::CdpiStreamInfo* cdpi_stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (cdpi_stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdpi_stream_info));
    if (message_arena != submessage_arena) {
      cdpi_stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdpi_stream_info, submessage_arena);
    }
    set_has_cdpi_stream_info();
    _impl_.value_.cdpi_stream_info_ = cdpi_stream_info;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.cdpi_stream_info)
}
void Entity::clear_cdpi_stream_info() {
  if (value_case() == kCdpiStreamInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.cdpi_stream_info_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_computed_motion(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion* computed_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (computed_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computed_motion));
    if (message_arena != submessage_arena) {
      computed_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computed_motion, submessage_arena);
    }
    set_has_computed_motion();
    _impl_.value_.computed_motion_ = computed_motion;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.computed_motion)
}
void Entity::clear_computed_motion() {
  if (value_case() == kComputedMotion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.computed_motion_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_devices_in_region(::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion* devices_in_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (devices_in_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devices_in_region));
    if (message_arena != submessage_arena) {
      devices_in_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devices_in_region, submessage_arena);
    }
    set_has_devices_in_region();
    _impl_.value_.devices_in_region_ = devices_in_region;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.devices_in_region)
}
void Entity::clear_devices_in_region() {
  if (value_case() == kDevicesInRegion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.devices_in_region_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_station_set(::aalyria::spacetime::api::nbi::v1alpha::resources::StationSet* station_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (station_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_set));
    if (message_arena != submessage_arena) {
      station_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, station_set, submessage_arena);
    }
    set_has_station_set();
    _impl_.value_.station_set_ = station_set;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.station_set)
}
void Entity::clear_station_set() {
  if (value_case() == kStationSet) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.station_set_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_surface_region(::aalyria::spacetime::api::nbi::v1alpha::resources::SurfaceRegion* surface_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (surface_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_region));
    if (message_arena != submessage_arena) {
      surface_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_region, submessage_arena);
    }
    set_has_surface_region();
    _impl_.value_.surface_region_ = surface_region;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.surface_region)
}
void Entity::clear_surface_region() {
  if (value_case() == kSurfaceRegion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.surface_region_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_drain_provision(::aalyria::spacetime::api::nbi::v1alpha::resources::DrainProvision* drain_provision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (drain_provision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drain_provision));
    if (message_arena != submessage_arena) {
      drain_provision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drain_provision, submessage_arena);
    }
    set_has_drain_provision();
    _impl_.value_.drain_provision_ = drain_provision;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.drain_provision)
}
void Entity::clear_drain_provision() {
  if (value_case() == kDrainProvision) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.drain_provision_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_intent(::aalyria::spacetime::api::nbi::v1alpha::resources::Intent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent));
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
    _impl_.value_.intent_ = intent;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.intent)
}
void Entity::clear_intent() {
  if (value_case() == kIntent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.intent_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_interface_link_report(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport* interface_link_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (interface_link_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_link_report));
    if (message_arena != submessage_arena) {
      interface_link_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface_link_report, submessage_arena);
    }
    set_has_interface_link_report();
    _impl_.value_.interface_link_report_ = interface_link_report;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.interface_link_report)
}
void Entity::clear_interface_link_report() {
  if (value_case() == kInterfaceLinkReport) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.interface_link_report_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_interference_constraint(::aalyria::spacetime::api::nbi::v1alpha::resources::InterferenceConstraint* interference_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (interference_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interference_constraint));
    if (message_arena != submessage_arena) {
      interference_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interference_constraint, submessage_arena);
    }
    set_has_interference_constraint();
    _impl_.value_.interference_constraint_ = interference_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.interference_constraint)
}
void Entity::clear_interference_constraint() {
  if (value_case() == kInterferenceConstraint) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.interference_constraint_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_motion_definition(::aalyria::spacetime::api::common::MotionDefinition* motion_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (motion_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_definition));
    if (message_arena != submessage_arena) {
      motion_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_definition, submessage_arena);
    }
    set_has_motion_definition();
    _impl_.value_.motion_definition_ = motion_definition;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.motion_definition)
}
void Entity::clear_motion_definition() {
  if (value_case() == kMotionDefinition) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.motion_definition_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_network_node(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode* network_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (network_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_node));
    if (message_arena != submessage_arena) {
      network_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_node, submessage_arena);
    }
    set_has_network_node();
    _impl_.value_.network_node_ = network_node;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.network_node)
}
void Entity::clear_network_node() {
  if (value_case() == kNetworkNode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.network_node_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_network_stats_report(::aalyria::spacetime::api::common::NetworkStatsReport* network_stats_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (network_stats_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_stats_report));
    if (message_arena != submessage_arena) {
      network_stats_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_stats_report, submessage_arena);
    }
    set_has_network_stats_report();
    _impl_.value_.network_stats_report_ = network_stats_report;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.network_stats_report)
}
void Entity::clear_network_stats_report() {
  if (value_case() == kNetworkStatsReport) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.network_stats_report_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_platform(::aalyria::spacetime::api::common::PlatformDefinition* platform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (platform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform));
    if (message_arena != submessage_arena) {
      platform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platform, submessage_arena);
    }
    set_has_platform();
    _impl_.value_.platform_ = platform;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.platform)
}
void Entity::clear_platform() {
  if (value_case() == kPlatform) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.platform_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_service_request(::aalyria::spacetime::api::nbi::v1alpha::resources::ServiceRequest* service_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (service_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_request));
    if (message_arena != submessage_arena) {
      service_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_request, submessage_arena);
    }
    set_has_service_request();
    _impl_.value_.service_request_ = service_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.service_request)
}
void Entity::clear_service_request() {
  if (value_case() == kServiceRequest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.service_request_;
    }
    clear_has_value();
  }
}
void Entity::set_allocated_transceiver_link_report(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport* transceiver_link_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (transceiver_link_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transceiver_link_report));
    if (message_arena != submessage_arena) {
      transceiver_link_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transceiver_link_report, submessage_arena);
    }
    set_has_transceiver_link_report();
    _impl_.value_.transceiver_link_report_ = transceiver_link_report;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.Entity.transceiver_link_report)
}
void Entity::clear_transceiver_link_report() {
  if (value_case() == kTransceiverLinkReport) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.transceiver_link_report_;
    }
    clear_has_value();
  }
}
Entity::Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.last_modified_by_) {}

    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.resource_origin_){nullptr}
    , decltype(_impl_.commit_timestamp_) {}

    , decltype(_impl_.next_commit_timestamp_) {}

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.last_modified_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_modified_by_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.last_modified_by_.Set(from._internal_last_modified_by(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.group_ = new ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup(*from._impl_.group_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.resource_origin_ = new ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin(*from._impl_.resource_origin_);
  }
  ::memcpy(&_impl_.commit_timestamp_, &from._impl_.commit_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.next_commit_timestamp_) -
    reinterpret_cast<char*>(&_impl_.commit_timestamp_)) + sizeof(_impl_.next_commit_timestamp_));
  clear_has_value();
  switch (from.value_case()) {
    case kAntennaPattern: {
      _this->_internal_mutable_antenna_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_antenna_pattern());
      break;
    }
    case kBandProfile: {
      _this->_internal_mutable_band_profile()->::aalyria::spacetime::api::common::BandProfile::MergeFrom(
          from._internal_band_profile());
      break;
    }
    case kCdpiStreamInfo: {
      _this->_internal_mutable_cdpi_stream_info()->::aalyria::spacetime::api::common::CdpiStreamInfo::MergeFrom(
          from._internal_cdpi_stream_info());
      break;
    }
    case kComputedMotion: {
      _this->_internal_mutable_computed_motion()->::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion::MergeFrom(
          from._internal_computed_motion());
      break;
    }
    case kDevicesInRegion: {
      _this->_internal_mutable_devices_in_region()->::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion::MergeFrom(
          from._internal_devices_in_region());
      break;
    }
    case kStationSet: {
      _this->_internal_mutable_station_set()->::aalyria::spacetime::api::nbi::v1alpha::resources::StationSet::MergeFrom(
          from._internal_station_set());
      break;
    }
    case kSurfaceRegion: {
      _this->_internal_mutable_surface_region()->::aalyria::spacetime::api::nbi::v1alpha::resources::SurfaceRegion::MergeFrom(
          from._internal_surface_region());
      break;
    }
    case kDrainProvision: {
      _this->_internal_mutable_drain_provision()->::aalyria::spacetime::api::nbi::v1alpha::resources::DrainProvision::MergeFrom(
          from._internal_drain_provision());
      break;
    }
    case kIntent: {
      _this->_internal_mutable_intent()->::aalyria::spacetime::api::nbi::v1alpha::resources::Intent::MergeFrom(
          from._internal_intent());
      break;
    }
    case kInterfaceLinkReport: {
      _this->_internal_mutable_interface_link_report()->::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport::MergeFrom(
          from._internal_interface_link_report());
      break;
    }
    case kInterferenceConstraint: {
      _this->_internal_mutable_interference_constraint()->::aalyria::spacetime::api::nbi::v1alpha::resources::InterferenceConstraint::MergeFrom(
          from._internal_interference_constraint());
      break;
    }
    case kMotionDefinition: {
      _this->_internal_mutable_motion_definition()->::aalyria::spacetime::api::common::MotionDefinition::MergeFrom(
          from._internal_motion_definition());
      break;
    }
    case kNetworkNode: {
      _this->_internal_mutable_network_node()->::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode::MergeFrom(
          from._internal_network_node());
      break;
    }
    case kNetworkStatsReport: {
      _this->_internal_mutable_network_stats_report()->::aalyria::spacetime::api::common::NetworkStatsReport::MergeFrom(
          from._internal_network_stats_report());
      break;
    }
    case kPlatform: {
      _this->_internal_mutable_platform()->::aalyria::spacetime::api::common::PlatformDefinition::MergeFrom(
          from._internal_platform());
      break;
    }
    case kServiceRequest: {
      _this->_internal_mutable_service_request()->::aalyria::spacetime::api::nbi::v1alpha::resources::ServiceRequest::MergeFrom(
          from._internal_service_request());
      break;
    }
    case kTransceiverLinkReport: {
      _this->_internal_mutable_transceiver_link_report()->::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport::MergeFrom(
          from._internal_transceiver_link_report());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.Entity)
}

inline void Entity::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.last_modified_by_) {}

    , decltype(_impl_.group_){nullptr}
    , decltype(_impl_.resource_origin_){nullptr}
    , decltype(_impl_.commit_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.next_commit_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_modified_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_modified_by_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.Entity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.last_modified_by_.Destroy();
  if (this != internal_default_instance()) delete _impl_.group_;
  if (this != internal_default_instance()) delete _impl_.resource_origin_;
  if (has_value()) {
    clear_value();
  }
}

void Entity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  switch (value_case()) {
    case kAntennaPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.antenna_pattern_;
      }
      break;
    }
    case kBandProfile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.band_profile_;
      }
      break;
    }
    case kCdpiStreamInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.cdpi_stream_info_;
      }
      break;
    }
    case kComputedMotion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.computed_motion_;
      }
      break;
    }
    case kDevicesInRegion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.devices_in_region_;
      }
      break;
    }
    case kStationSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.station_set_;
      }
      break;
    }
    case kSurfaceRegion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.surface_region_;
      }
      break;
    }
    case kDrainProvision: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.drain_provision_;
      }
      break;
    }
    case kIntent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.intent_;
      }
      break;
    }
    case kInterfaceLinkReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.interface_link_report_;
      }
      break;
    }
    case kInterferenceConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.interference_constraint_;
      }
      break;
    }
    case kMotionDefinition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.motion_definition_;
      }
      break;
    }
    case kNetworkNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.network_node_;
      }
      break;
    }
    case kNetworkStatsReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.network_stats_report_;
      }
      break;
    }
    case kPlatform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.platform_;
      }
      break;
    }
    case kServiceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.service_request_;
      }
      break;
    }
    case kTransceiverLinkReport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.transceiver_link_report_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.last_modified_by_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.group_ != nullptr);
      _impl_.group_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.resource_origin_ != nullptr);
      _impl_.resource_origin_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.commit_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.next_commit_timestamp_) -
        reinterpret_cast<char*>(&_impl_.commit_timestamp_)) + sizeof(_impl_.next_commit_timestamp_));
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityGroup group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.Entity.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 commit_timestamp = 3 [json_name = "commitTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_commit_timestamp(&has_bits);
          _impl_.commit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.PlatformDefinition platform = 4 [json_name = "platform"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_platform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.ServiceRequest service_request = 5 [json_name = "serviceRequest"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode network_node = 6 [json_name = "networkNode"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_node(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.MotionDefinition motion_definition = 7 [json_name = "motionDefinition"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_definition(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport interface_link_report = 8 [json_name = "interfaceLinkReport"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface_link_report(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.Intent intent = 9 [json_name = "intent"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion computed_motion = 10 [json_name = "computedMotion"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_computed_motion(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.NetworkStatsReport network_stats_report = 11 [json_name = "networkStatsReport"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_stats_report(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern antenna_pattern = 15 [json_name = "antennaPattern"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_antenna_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.BandProfile band_profile = 20 [json_name = "bandProfile"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_profile(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string last_modified_by = 22 [json_name = "lastModifiedBy"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_last_modified_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.Entity.last_modified_by");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.CdpiStreamInfo cdpi_stream_info = 23 [json_name = "cdpiStreamInfo"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdpi_stream_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport transceiver_link_report = 25 [json_name = "transceiverLinkReport"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_transceiver_link_report(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.DrainProvision drain_provision = 26 [json_name = "drainProvision"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_drain_provision(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.StationSet station_set = 27 [json_name = "stationSet"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_station_set(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.SurfaceRegion surface_region = 28 [json_name = "surfaceRegion"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface_region(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.InterferenceConstraint interference_constraint = 29 [json_name = "interferenceConstraint"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_interference_constraint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion devices_in_region = 30 [json_name = "devicesInRegion"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_devices_in_region(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 next_commit_timestamp = 33 [json_name = "nextCommitTimestamp"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_next_commit_timestamp(&has_bits);
          _impl_.next_commit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin resource_origin = 34 [json_name = "resourceOrigin"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_origin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Entity::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityGroup group = 1 [json_name = "group"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // optional string id = 2 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.Entity.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 commit_timestamp = 3 [json_name = "commitTimestamp"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_commit_timestamp(), target);
  }

  switch (value_case()) {
    case kPlatform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::platform(this),
          _Internal::platform(this).GetCachedSize(), target, stream);
      break;
    }
    case kServiceRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::service_request(this),
          _Internal::service_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kNetworkNode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::network_node(this),
          _Internal::network_node(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotionDefinition: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::motion_definition(this),
          _Internal::motion_definition(this).GetCachedSize(), target, stream);
      break;
    }
    case kInterfaceLinkReport: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::interface_link_report(this),
          _Internal::interface_link_report(this).GetCachedSize(), target, stream);
      break;
    }
    case kIntent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::intent(this),
          _Internal::intent(this).GetCachedSize(), target, stream);
      break;
    }
    case kComputedMotion: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::computed_motion(this),
          _Internal::computed_motion(this).GetCachedSize(), target, stream);
      break;
    }
    case kNetworkStatsReport: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::network_stats_report(this),
          _Internal::network_stats_report(this).GetCachedSize(), target, stream);
      break;
    }
    case kAntennaPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::antenna_pattern(this),
          _Internal::antenna_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kBandProfile: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::band_profile(this),
          _Internal::band_profile(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional string last_modified_by = 22 [json_name = "lastModifiedBy"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_last_modified_by();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.Entity.last_modified_by");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  switch (value_case()) {
    case kCdpiStreamInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::cdpi_stream_info(this),
          _Internal::cdpi_stream_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kTransceiverLinkReport: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::transceiver_link_report(this),
          _Internal::transceiver_link_report(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrainProvision: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::drain_provision(this),
          _Internal::drain_provision(this).GetCachedSize(), target, stream);
      break;
    }
    case kStationSet: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::station_set(this),
          _Internal::station_set(this).GetCachedSize(), target, stream);
      break;
    }
    case kSurfaceRegion: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::surface_region(this),
          _Internal::surface_region(this).GetCachedSize(), target, stream);
      break;
    }
    case kInterferenceConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::interference_constraint(this),
          _Internal::interference_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kDevicesInRegion: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::devices_in_region(this),
          _Internal::devices_in_region(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional int64 next_commit_timestamp = 33 [json_name = "nextCommitTimestamp"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        33, this->_internal_next_commit_timestamp(), target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin resource_origin = 34 [json_name = "resourceOrigin"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::resource_origin(this),
        _Internal::resource_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.Entity)
  return target;
}

::size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional string last_modified_by = 22 [json_name = "lastModifiedBy"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_last_modified_by());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityGroup group = 1 [json_name = "group"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.ResourceOrigin resource_origin = 34 [json_name = "resourceOrigin"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_origin_);
    }

    // optional int64 commit_timestamp = 3 [json_name = "commitTimestamp"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_commit_timestamp());
    }

    // optional int64 next_commit_timestamp = 33 [json_name = "nextCommitTimestamp"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_next_commit_timestamp());
    }

  }
  switch (value_case()) {
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern antenna_pattern = 15 [json_name = "antennaPattern"];
    case kAntennaPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.antenna_pattern_);
      break;
    }
    // .aalyria.spacetime.api.common.BandProfile band_profile = 20 [json_name = "bandProfile"];
    case kBandProfile: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.band_profile_);
      break;
    }
    // .aalyria.spacetime.api.common.CdpiStreamInfo cdpi_stream_info = 23 [json_name = "cdpiStreamInfo"];
    case kCdpiStreamInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.cdpi_stream_info_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion computed_motion = 10 [json_name = "computedMotion"];
    case kComputedMotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.computed_motion_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion devices_in_region = 30 [json_name = "devicesInRegion"];
    case kDevicesInRegion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.devices_in_region_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.StationSet station_set = 27 [json_name = "stationSet"];
    case kStationSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.station_set_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.SurfaceRegion surface_region = 28 [json_name = "surfaceRegion"];
    case kSurfaceRegion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.surface_region_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.DrainProvision drain_provision = 26 [json_name = "drainProvision"];
    case kDrainProvision: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.drain_provision_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.Intent intent = 9 [json_name = "intent"];
    case kIntent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.intent_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport interface_link_report = 8 [json_name = "interfaceLinkReport"];
    case kInterfaceLinkReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.interface_link_report_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.InterferenceConstraint interference_constraint = 29 [json_name = "interferenceConstraint"];
    case kInterferenceConstraint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.interference_constraint_);
      break;
    }
    // .aalyria.spacetime.api.common.MotionDefinition motion_definition = 7 [json_name = "motionDefinition"];
    case kMotionDefinition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.motion_definition_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode network_node = 6 [json_name = "networkNode"];
    case kNetworkNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.network_node_);
      break;
    }
    // .aalyria.spacetime.api.common.NetworkStatsReport network_stats_report = 11 [json_name = "networkStatsReport"];
    case kNetworkStatsReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.network_stats_report_);
      break;
    }
    // .aalyria.spacetime.api.common.PlatformDefinition platform = 4 [json_name = "platform"];
    case kPlatform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.platform_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.ServiceRequest service_request = 5 [json_name = "serviceRequest"];
    case kServiceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.service_request_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport transceiver_link_report = 25 [json_name = "transceiverLinkReport"];
    case kTransceiverLinkReport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.transceiver_link_report_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity::GetClassData() const { return &_class_data_; }


void Entity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity*>(&to_msg);
  auto& from = static_cast<const Entity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_last_modified_by(from._internal_last_modified_by());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_group()->::aalyria::spacetime::api::nbi::v1alpha::EntityGroup::MergeFrom(
          from._internal_group());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_resource_origin()->::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin::MergeFrom(
          from._internal_resource_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.commit_timestamp_ = from._impl_.commit_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.next_commit_timestamp_ = from._impl_.next_commit_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kAntennaPattern: {
      _this->_internal_mutable_antenna_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_antenna_pattern());
      break;
    }
    case kBandProfile: {
      _this->_internal_mutable_band_profile()->::aalyria::spacetime::api::common::BandProfile::MergeFrom(
          from._internal_band_profile());
      break;
    }
    case kCdpiStreamInfo: {
      _this->_internal_mutable_cdpi_stream_info()->::aalyria::spacetime::api::common::CdpiStreamInfo::MergeFrom(
          from._internal_cdpi_stream_info());
      break;
    }
    case kComputedMotion: {
      _this->_internal_mutable_computed_motion()->::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion::MergeFrom(
          from._internal_computed_motion());
      break;
    }
    case kDevicesInRegion: {
      _this->_internal_mutable_devices_in_region()->::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion::MergeFrom(
          from._internal_devices_in_region());
      break;
    }
    case kStationSet: {
      _this->_internal_mutable_station_set()->::aalyria::spacetime::api::nbi::v1alpha::resources::StationSet::MergeFrom(
          from._internal_station_set());
      break;
    }
    case kSurfaceRegion: {
      _this->_internal_mutable_surface_region()->::aalyria::spacetime::api::nbi::v1alpha::resources::SurfaceRegion::MergeFrom(
          from._internal_surface_region());
      break;
    }
    case kDrainProvision: {
      _this->_internal_mutable_drain_provision()->::aalyria::spacetime::api::nbi::v1alpha::resources::DrainProvision::MergeFrom(
          from._internal_drain_provision());
      break;
    }
    case kIntent: {
      _this->_internal_mutable_intent()->::aalyria::spacetime::api::nbi::v1alpha::resources::Intent::MergeFrom(
          from._internal_intent());
      break;
    }
    case kInterfaceLinkReport: {
      _this->_internal_mutable_interface_link_report()->::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport::MergeFrom(
          from._internal_interface_link_report());
      break;
    }
    case kInterferenceConstraint: {
      _this->_internal_mutable_interference_constraint()->::aalyria::spacetime::api::nbi::v1alpha::resources::InterferenceConstraint::MergeFrom(
          from._internal_interference_constraint());
      break;
    }
    case kMotionDefinition: {
      _this->_internal_mutable_motion_definition()->::aalyria::spacetime::api::common::MotionDefinition::MergeFrom(
          from._internal_motion_definition());
      break;
    }
    case kNetworkNode: {
      _this->_internal_mutable_network_node()->::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode::MergeFrom(
          from._internal_network_node());
      break;
    }
    case kNetworkStatsReport: {
      _this->_internal_mutable_network_stats_report()->::aalyria::spacetime::api::common::NetworkStatsReport::MergeFrom(
          from._internal_network_stats_report());
      break;
    }
    case kPlatform: {
      _this->_internal_mutable_platform()->::aalyria::spacetime::api::common::PlatformDefinition::MergeFrom(
          from._internal_platform());
      break;
    }
    case kServiceRequest: {
      _this->_internal_mutable_service_request()->::aalyria::spacetime::api::nbi::v1alpha::resources::ServiceRequest::MergeFrom(
          from._internal_service_request());
      break;
    }
    case kTransceiverLinkReport: {
      _this->_internal_mutable_transceiver_link_report()->::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport::MergeFrom(
          from._internal_transceiver_link_report());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  switch (value_case()) {
    case kAntennaPattern: {
      break;
    }
    case kBandProfile: {
      break;
    }
    case kCdpiStreamInfo: {
      break;
    }
    case kComputedMotion: {
      if (value_case() == kComputedMotion) {
        if (!_impl_.value_.computed_motion_->IsInitialized()) return false;
      }
      break;
    }
    case kDevicesInRegion: {
      if (value_case() == kDevicesInRegion) {
        if (!_impl_.value_.devices_in_region_->IsInitialized()) return false;
      }
      break;
    }
    case kStationSet: {
      break;
    }
    case kSurfaceRegion: {
      break;
    }
    case kDrainProvision: {
      break;
    }
    case kIntent: {
      if (value_case() == kIntent) {
        if (!_impl_.value_.intent_->IsInitialized()) return false;
      }
      break;
    }
    case kInterfaceLinkReport: {
      if (value_case() == kInterfaceLinkReport) {
        if (!_impl_.value_.interface_link_report_->IsInitialized()) return false;
      }
      break;
    }
    case kInterferenceConstraint: {
      if (value_case() == kInterferenceConstraint) {
        if (!_impl_.value_.interference_constraint_->IsInitialized()) return false;
      }
      break;
    }
    case kMotionDefinition: {
      if (value_case() == kMotionDefinition) {
        if (!_impl_.value_.motion_definition_->IsInitialized()) return false;
      }
      break;
    }
    case kNetworkNode: {
      break;
    }
    case kNetworkStatsReport: {
      if (value_case() == kNetworkStatsReport) {
        if (!_impl_.value_.network_stats_report_->IsInitialized()) return false;
      }
      break;
    }
    case kPlatform: {
      if (value_case() == kPlatform) {
        if (!_impl_.value_.platform_->IsInitialized()) return false;
      }
      break;
    }
    case kServiceRequest: {
      break;
    }
    case kTransceiverLinkReport: {
      if (value_case() == kTransceiverLinkReport) {
        if (!_impl_.value_.transceiver_link_report_->IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_modified_by_, lhs_arena,
                                       &other->_impl_.last_modified_by_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, _impl_.next_commit_timestamp_)
      + sizeof(Entity::_impl_.next_commit_timestamp_)
      - PROTOBUF_FIELD_OFFSET(Entity, _impl_.group_)>(
          reinterpret_cast<char*>(&_impl_.group_),
          reinterpret_cast<char*>(&other->_impl_.group_));
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[2]);
}
// ===================================================================

class GetEntityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEntityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEntityRequest, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetEntityRequest::GetEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
}
GetEntityRequest::GetEntityRequest(const GetEntityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEntityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
}

inline void GetEntityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEntityRequest::~GetEntityRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEntityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GetEntityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEntityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEntityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::EntityType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::EntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetEntityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string id = 2 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  return target;
}

::size_t GetEntityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 2 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEntityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEntityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEntityRequest::GetClassData() const { return &_class_data_; }


void GetEntityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEntityRequest*>(&to_msg);
  auto& from = static_cast<const GetEntityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEntityRequest::CopyFrom(const GetEntityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.GetEntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntityRequest::IsInitialized() const {
  return true;
}

void GetEntityRequest::InternalSwap(GetEntityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[3]);
}
// ===================================================================

class CreateEntityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateEntityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateEntityRequest, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::Entity& entity(const CreateEntityRequest* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::Entity&
CreateEntityRequest::_Internal::entity(const CreateEntityRequest* msg) {
  return *msg->_impl_.entity_;
}
CreateEntityRequest::CreateEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
}
CreateEntityRequest::CreateEntityRequest(const CreateEntityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateEntityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.entity_ = new ::aalyria::spacetime::api::nbi::v1alpha::Entity(*from._impl_.entity_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
}

inline void CreateEntityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){nullptr}
  };
}

CreateEntityRequest::~CreateEntityRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateEntityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entity_;
}

void CreateEntityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateEntityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.entity_ != nullptr);
    _impl_.entity_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEntityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateEntityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  return target;
}

::size_t CreateEntityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEntityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateEntityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEntityRequest::GetClassData() const { return &_class_data_; }


void CreateEntityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateEntityRequest*>(&to_msg);
  auto& from = static_cast<const CreateEntityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_entity()->::aalyria::spacetime::api::nbi::v1alpha::Entity::MergeFrom(
        from._internal_entity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEntityRequest::CopyFrom(const CreateEntityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.CreateEntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEntityRequest::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.entity_->IsInitialized()) return false;
  }
  return true;
}

void CreateEntityRequest::InternalSwap(CreateEntityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.entity_, other->_impl_.entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEntityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[4]);
}
// ===================================================================

class UpdateEntityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateEntityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateEntityRequest, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::Entity& entity(const UpdateEntityRequest* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_consistency_check(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::Entity&
UpdateEntityRequest::_Internal::entity(const UpdateEntityRequest* msg) {
  return *msg->_impl_.entity_;
}
UpdateEntityRequest::UpdateEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
}
UpdateEntityRequest::UpdateEntityRequest(const UpdateEntityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateEntityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.ignore_consistency_check_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.entity_ = new ::aalyria::spacetime::api::nbi::v1alpha::Entity(*from._impl_.entity_);
  }
  _this->_impl_.ignore_consistency_check_ = from._impl_.ignore_consistency_check_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
}

inline void UpdateEntityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.ignore_consistency_check_) { false }

  };
}

UpdateEntityRequest::~UpdateEntityRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateEntityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entity_;
}

void UpdateEntityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateEntityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.entity_ != nullptr);
    _impl_.entity_->Clear();
  }
  _impl_.ignore_consistency_check_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEntityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool ignore_consistency_check = 2 [json_name = "ignoreConsistencyCheck"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ignore_consistency_check(&has_bits);
          _impl_.ignore_consistency_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateEntityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // optional bool ignore_consistency_check = 2 [json_name = "ignoreConsistencyCheck"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_ignore_consistency_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  return target;
}

::size_t UpdateEntityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.Entity entity = 1 [json_name = "entity"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_);
    }

    // optional bool ignore_consistency_check = 2 [json_name = "ignoreConsistencyCheck"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateEntityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateEntityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateEntityRequest::GetClassData() const { return &_class_data_; }


void UpdateEntityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateEntityRequest*>(&to_msg);
  auto& from = static_cast<const UpdateEntityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_entity()->::aalyria::spacetime::api::nbi::v1alpha::Entity::MergeFrom(
          from._internal_entity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ignore_consistency_check_ = from._impl_.ignore_consistency_check_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateEntityRequest::CopyFrom(const UpdateEntityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.UpdateEntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntityRequest::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.entity_->IsInitialized()) return false;
  }
  return true;
}

void UpdateEntityRequest::InternalSwap(UpdateEntityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateEntityRequest, _impl_.ignore_consistency_check_)
      + sizeof(UpdateEntityRequest::_impl_.ignore_consistency_check_)
      - PROTOBUF_FIELD_OFFSET(UpdateEntityRequest, _impl_.entity_)>(
          reinterpret_cast<char*>(&_impl_.entity_),
          reinterpret_cast<char*>(&other->_impl_.entity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[5]);
}
// ===================================================================

class ListEntitiesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListEntitiesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ListEntitiesRequest, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::type::Interval& interval(const ListEntitiesRequest* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter& filter(const ListEntitiesRequest* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compute_cartesian_coordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::google::type::Interval&
ListEntitiesRequest::_Internal::interval(const ListEntitiesRequest* msg) {
  return *msg->_impl_.interval_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter&
ListEntitiesRequest::_Internal::filter(const ListEntitiesRequest* msg) {
  return *msg->_impl_.filter_;
}
void ListEntitiesRequest::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListEntitiesRequest::ListEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
}
ListEntitiesRequest::ListEntitiesRequest(const ListEntitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEntitiesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.compute_cartesian_coordinates_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::google::type::Interval(*from._impl_.interval_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filter_ = new ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter(*from._impl_.filter_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.compute_cartesian_coordinates_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.compute_cartesian_coordinates_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
}

inline void ListEntitiesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.compute_cartesian_coordinates_) { false }

  };
}

ListEntitiesRequest::~ListEntitiesRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEntitiesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void ListEntitiesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEntitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.interval_ != nullptr);
      _impl_.interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.filter_ != nullptr);
      _impl_.filter_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.compute_cartesian_coordinates_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.compute_cartesian_coordinates_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEntitiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::EntityType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::EntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.type.Interval interval = 3 [json_name = "interval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 5 [json_name = "filter"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool compute_cartesian_coordinates = 6 [json_name = "computeCartesianCoordinates"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_compute_cartesian_coordinates(&has_bits);
          _impl_.compute_cartesian_coordinates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListEntitiesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .google.type.Interval interval = 3 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 5 [json_name = "filter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // optional bool compute_cartesian_coordinates = 6 [json_name = "computeCartesianCoordinates"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_compute_cartesian_coordinates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  return target;
}

::size_t ListEntitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.type.Interval interval = 3 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 5 [json_name = "filter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool compute_cartesian_coordinates = 6 [json_name = "computeCartesianCoordinates"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEntitiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEntitiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEntitiesRequest::GetClassData() const { return &_class_data_; }


void ListEntitiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEntitiesRequest*>(&to_msg);
  auto& from = static_cast<const ListEntitiesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::google::type::Interval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filter()->::aalyria::spacetime::api::nbi::v1alpha::EntityFilter::MergeFrom(
          from._internal_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.compute_cartesian_coordinates_ = from._impl_.compute_cartesian_coordinates_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEntitiesRequest::CopyFrom(const ListEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEntitiesRequest::IsInitialized() const {
  return true;
}

void ListEntitiesRequest::InternalSwap(ListEntitiesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListEntitiesRequest, _impl_.compute_cartesian_coordinates_)
      + sizeof(ListEntitiesRequest::_impl_.compute_cartesian_coordinates_)
      - PROTOBUF_FIELD_OFFSET(ListEntitiesRequest, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEntitiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[6]);
}
// ===================================================================

class ListEntitiesResponse::_Internal {
 public:
};

ListEntitiesResponse::ListEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
}
ListEntitiesResponse::ListEntitiesResponse(const ListEntitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEntitiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){from._impl_.entities_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
}

inline void ListEntitiesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListEntitiesResponse::~ListEntitiesResponse() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEntitiesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entities()->~RepeatedPtrField();
}

void ListEntitiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEntitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entities()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEntitiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListEntitiesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  return target;
}

::size_t ListEntitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_internal_entities()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEntitiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEntitiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEntitiesResponse::GetClassData() const { return &_class_data_; }


void ListEntitiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEntitiesResponse*>(&to_msg);
  auto& from = static_cast<const ListEntitiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entities()->MergeFrom(from._internal_entities());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEntitiesResponse::CopyFrom(const ListEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEntitiesResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_entities()))
    return false;
  return true;
}

void ListEntitiesResponse::InternalSwap(ListEntitiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_entities()->InternalSwap(other->_internal_mutable_entities());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEntitiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[7]);
}
// ===================================================================

class ListEntitiesOverTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListEntitiesOverTimeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ListEntitiesOverTimeRequest, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const ListEntitiesOverTimeRequest* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compute_cartesian_coordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter& filter(const ListEntitiesOverTimeRequest* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
ListEntitiesOverTimeRequest::_Internal::interval(const ListEntitiesOverTimeRequest* msg) {
  return *msg->_impl_.interval_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter&
ListEntitiesOverTimeRequest::_Internal::filter(const ListEntitiesOverTimeRequest* msg) {
  return *msg->_impl_.filter_;
}
void ListEntitiesOverTimeRequest::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListEntitiesOverTimeRequest::ListEntitiesOverTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
}
ListEntitiesOverTimeRequest::ListEntitiesOverTimeRequest(const ListEntitiesOverTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEntitiesOverTimeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.compute_cartesian_coordinates_) {}

    , decltype(_impl_.diff_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filter_ = new ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter(*from._impl_.filter_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.diff_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.diff_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
}

inline void ListEntitiesOverTimeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_){arena}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.compute_cartesian_coordinates_) { false }

    , decltype(_impl_.diff_) { false }

  };
}

ListEntitiesOverTimeRequest::~ListEntitiesOverTimeRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEntitiesOverTimeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void ListEntitiesOverTimeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEntitiesOverTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.interval_ != nullptr);
      _impl_.interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.filter_ != nullptr);
      _impl_.filter_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.diff_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.diff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEntitiesOverTimeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::EntityType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::EntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 2 [json_name = "interval"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool compute_cartesian_coordinates = 3 [json_name = "computeCartesianCoordinates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_compute_cartesian_coordinates(&has_bits);
          _impl_.compute_cartesian_coordinates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 4 [json_name = "filter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ids = 5 [json_name = "ids"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest.ids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool diff = 6 [json_name = "diff"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_diff(&has_bits);
          _impl_.diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListEntitiesOverTimeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .aalyria.spacetime.api.common.TimeInterval interval = 2 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional bool compute_cartesian_coordinates = 3 [json_name = "computeCartesianCoordinates"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_compute_cartesian_coordinates(), target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 4 [json_name = "filter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 5 [json_name = "ids"];
  for (int i = 0, n = this->_internal_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest.ids");
    target = stream->WriteString(5, s, target);
  }

  // optional bool diff = 6 [json_name = "diff"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_diff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  return target;
}

::size_t ListEntitiesOverTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 5 [json_name = "ids"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ids().size());
  for (int i = 0, n = _internal_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ids().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 2 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityFilter filter = 4 [json_name = "filter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool compute_cartesian_coordinates = 3 [json_name = "computeCartesianCoordinates"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool diff = 6 [json_name = "diff"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEntitiesOverTimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEntitiesOverTimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEntitiesOverTimeRequest::GetClassData() const { return &_class_data_; }


void ListEntitiesOverTimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEntitiesOverTimeRequest*>(&to_msg);
  auto& from = static_cast<const ListEntitiesOverTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ids()->MergeFrom(from._internal_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filter()->::aalyria::spacetime::api::nbi::v1alpha::EntityFilter::MergeFrom(
          from._internal_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.compute_cartesian_coordinates_ = from._impl_.compute_cartesian_coordinates_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.diff_ = from._impl_.diff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEntitiesOverTimeRequest::CopyFrom(const ListEntitiesOverTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEntitiesOverTimeRequest::IsInitialized() const {
  return true;
}

void ListEntitiesOverTimeRequest::InternalSwap(ListEntitiesOverTimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_ids()->InternalSwap(
      other->_internal_mutable_ids());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListEntitiesOverTimeRequest, _impl_.diff_)
      + sizeof(ListEntitiesOverTimeRequest::_impl_.diff_)
      - PROTOBUF_FIELD_OFFSET(ListEntitiesOverTimeRequest, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEntitiesOverTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[8]);
}
// ===================================================================

class ListEntitiesOverTimeResponse::_Internal {
 public:
};

ListEntitiesOverTimeResponse::ListEntitiesOverTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
}
ListEntitiesOverTimeResponse::ListEntitiesOverTimeResponse(const ListEntitiesOverTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListEntitiesOverTimeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){from._impl_.entities_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
}

inline void ListEntitiesOverTimeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListEntitiesOverTimeResponse::~ListEntitiesOverTimeResponse() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListEntitiesOverTimeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entities()->~RepeatedPtrField();
}

void ListEntitiesOverTimeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListEntitiesOverTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entities()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEntitiesOverTimeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListEntitiesOverTimeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  return target;
}

::size_t ListEntitiesOverTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.Entity entities = 1 [json_name = "entities"];
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_internal_entities()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEntitiesOverTimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListEntitiesOverTimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEntitiesOverTimeResponse::GetClassData() const { return &_class_data_; }


void ListEntitiesOverTimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListEntitiesOverTimeResponse*>(&to_msg);
  auto& from = static_cast<const ListEntitiesOverTimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entities()->MergeFrom(from._internal_entities());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEntitiesOverTimeResponse::CopyFrom(const ListEntitiesOverTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.ListEntitiesOverTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEntitiesOverTimeResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_entities()))
    return false;
  return true;
}

void ListEntitiesOverTimeResponse::InternalSwap(ListEntitiesOverTimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_entities()->InternalSwap(other->_internal_mutable_entities());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEntitiesOverTimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[9]);
}
// ===================================================================

class EntityFilter::_Internal {
 public:
};

EntityFilter::EntityFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
}
EntityFilter::EntityFilter(const EntityFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.references_node_){from._impl_.references_node_}
    , decltype(_impl_.references_service_request_){from._impl_.references_service_request_}
    , decltype(_impl_.include_intent_states_) { from._internal_include_intent_states() }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
}

inline void EntityFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.references_node_){arena}
    , decltype(_impl_.references_service_request_){arena}
    , decltype(_impl_.include_intent_states_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityFilter::~EntityFilter() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_references_node()->~RepeatedPtrField();
  _internal_mutable_references_service_request()->~RepeatedPtrField();
  _internal_mutable_include_intent_states()->~RepeatedField();
}

void EntityFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_references_node()->Clear();
  _internal_mutable_references_service_request()->Clear();
  _internal_mutable_include_intent_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string references_node = 1 [json_name = "referencesNode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references_node();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.EntityFilter.references_node");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string references_service_request = 2 [json_name = "referencesServiceRequest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references_service_request();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.EntityFilter.references_service_request");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.IntentState include_intent_states = 3 [json_name = "includeIntentStates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::IntentState_IsValid(static_cast<int>(val)))) {
              _internal_add_include_intent_states(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::IntentState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_include_intent_states(), ptr, ctx, ::aalyria::spacetime::api::nbi::v1alpha::resources::IntentState_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EntityFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string references_node = 1 [json_name = "referencesNode"];
  for (int i = 0, n = this->_internal_references_node_size(); i < n; ++i) {
    const auto& s = this->_internal_references_node(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.EntityFilter.references_node");
    target = stream->WriteString(1, s, target);
  }

  // repeated string references_service_request = 2 [json_name = "referencesServiceRequest"];
  for (int i = 0, n = this->_internal_references_service_request_size(); i < n; ++i) {
    const auto& s = this->_internal_references_service_request(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.EntityFilter.references_service_request");
    target = stream->WriteString(2, s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.IntentState include_intent_states = 3 [json_name = "includeIntentStates"];
  for (int i = 0, n = this->_internal_include_intent_states_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_include_intent_states(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  return target;
}

::size_t EntityFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string references_node = 1 [json_name = "referencesNode"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_references_node().size());
  for (int i = 0, n = _internal_references_node().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_references_node().Get(i));
  }

  // repeated string references_service_request = 2 [json_name = "referencesServiceRequest"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_references_service_request().size());
  for (int i = 0, n = _internal_references_service_request().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_references_service_request().Get(i));
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.IntentState include_intent_states = 3 [json_name = "includeIntentStates"];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_include_intent_states_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_include_intent_states(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityFilter::GetClassData() const { return &_class_data_; }


void EntityFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityFilter*>(&to_msg);
  auto& from = static_cast<const EntityFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_references_node()->MergeFrom(from._internal_references_node());
  _this->_internal_mutable_references_service_request()->MergeFrom(from._internal_references_service_request());
  _this->_internal_mutable_include_intent_states()->MergeFrom(from._internal_include_intent_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityFilter::CopyFrom(const EntityFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.EntityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityFilter::IsInitialized() const {
  return true;
}

void EntityFilter::InternalSwap(EntityFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_references_node()->InternalSwap(
      other->_internal_mutable_references_node());
  _internal_mutable_references_service_request()->InternalSwap(
      other->_internal_mutable_references_service_request());
  _internal_mutable_include_intent_states()->InternalSwap(
      other->_internal_mutable_include_intent_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[10]);
}
// ===================================================================

class DeleteEntityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteEntityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteEntityRequest, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_commit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_consistency_check(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeleteEntityRequest::DeleteEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
}
DeleteEntityRequest::DeleteEntityRequest(const DeleteEntityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteEntityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.ignore_consistency_check_) {}

    , decltype(_impl_.last_commit_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.last_commit_timestamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.last_commit_timestamp_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
}

inline void DeleteEntityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.ignore_consistency_check_) { false }

    , decltype(_impl_.last_commit_timestamp_) { ::int64_t{0} }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteEntityRequest::~DeleteEntityRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteEntityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void DeleteEntityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteEntityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_commit_timestamp_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.last_commit_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEntityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::EntityType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::EntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 last_commit_timestamp = 3 [json_name = "lastCommitTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_last_commit_timestamp(&has_bits);
          _impl_.last_commit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool ignore_consistency_check = 4 [json_name = "ignoreConsistencyCheck"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ignore_consistency_check(&has_bits);
          _impl_.ignore_consistency_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeleteEntityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string id = 2 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 last_commit_timestamp = 3 [json_name = "lastCommitTimestamp"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_last_commit_timestamp(), target);
  }

  // optional bool ignore_consistency_check = 4 [json_name = "ignoreConsistencyCheck"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_ignore_consistency_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  return target;
}

::size_t DeleteEntityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 2 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.EntityType type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool ignore_consistency_check = 4 [json_name = "ignoreConsistencyCheck"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional int64 last_commit_timestamp = 3 [json_name = "lastCommitTimestamp"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_last_commit_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEntityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteEntityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEntityRequest::GetClassData() const { return &_class_data_; }


void DeleteEntityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteEntityRequest*>(&to_msg);
  auto& from = static_cast<const DeleteEntityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ignore_consistency_check_ = from._impl_.ignore_consistency_check_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_commit_timestamp_ = from._impl_.last_commit_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteEntityRequest::CopyFrom(const DeleteEntityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntityRequest::IsInitialized() const {
  return true;
}

void DeleteEntityRequest::InternalSwap(DeleteEntityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteEntityRequest, _impl_.last_commit_timestamp_)
      + sizeof(DeleteEntityRequest::_impl_.last_commit_timestamp_)
      - PROTOBUF_FIELD_OFFSET(DeleteEntityRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[11]);
}
// ===================================================================

class DeleteEntityResponse::_Internal {
 public:
};

DeleteEntityResponse::DeleteEntityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityResponse)
}
DeleteEntityResponse::DeleteEntityResponse(const DeleteEntityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteEntityResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.DeleteEntityResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEntityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEntityResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteEntityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[12]);
}
// ===================================================================

class LoadScenarioRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadScenarioRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LoadScenarioRequest, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings& scenario_settings(const LoadScenarioRequest* msg);
  static void set_has_scenario_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings&
LoadScenarioRequest::_Internal::scenario_settings(const LoadScenarioRequest* msg) {
  return *msg->_impl_.scenario_settings_;
}
void LoadScenarioRequest::clear_scenario_settings() {
  if (_impl_.scenario_settings_ != nullptr) _impl_.scenario_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LoadScenarioRequest::LoadScenarioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
}
LoadScenarioRequest::LoadScenarioRequest(const LoadScenarioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadScenarioRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scenario_settings_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.scenario_settings_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings(*from._impl_.scenario_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
}

inline void LoadScenarioRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scenario_settings_){nullptr}
  };
}

LoadScenarioRequest::~LoadScenarioRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadScenarioRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scenario_settings_;
}

void LoadScenarioRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadScenarioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.scenario_settings_ != nullptr);
    _impl_.scenario_settings_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadScenarioRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings scenario_settings = 1 [json_name = "scenarioSettings"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario_settings(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoadScenarioRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings scenario_settings = 1 [json_name = "scenarioSettings"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scenario_settings(this),
        _Internal::scenario_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  return target;
}

::size_t LoadScenarioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings scenario_settings = 1 [json_name = "scenarioSettings"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scenario_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadScenarioRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadScenarioRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadScenarioRequest::GetClassData() const { return &_class_data_; }


void LoadScenarioRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadScenarioRequest*>(&to_msg);
  auto& from = static_cast<const LoadScenarioRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_scenario_settings()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings::MergeFrom(
        from._internal_scenario_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadScenarioRequest::CopyFrom(const LoadScenarioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadScenarioRequest::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.scenario_settings_->IsInitialized()) return false;
  }
  return true;
}

void LoadScenarioRequest::InternalSwap(LoadScenarioRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.scenario_settings_, other->_impl_.scenario_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadScenarioRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[13]);
}
// ===================================================================

class LoadScenarioResponse::_Internal {
 public:
};

LoadScenarioResponse::LoadScenarioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioResponse)
}
LoadScenarioResponse::LoadScenarioResponse(const LoadScenarioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LoadScenarioResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.LoadScenarioResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadScenarioResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadScenarioResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LoadScenarioResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fnbi_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fnbi_2eproto[14]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::EntityGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::ResourceOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::Entity*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::GetEntityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::CreateEntityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::UpdateEntityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::ListEntitiesOverTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::EntityFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::DeleteEntityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::LoadScenarioResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/signal_propagation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/common/wireless_transceiver.pb.h"
#include "api/nbi/v1alpha/resources/coverage.pb.h"
#include "api/nbi/v1alpha/resources/wireless_evaluation.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/type/interval.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
class SignalPropagationRequest;
struct SignalPropagationRequestDefaultTypeInternal;
extern SignalPropagationRequestDefaultTypeInternal _SignalPropagationRequest_default_instance_;
class SignalPropagationResponse;
struct SignalPropagationResponseDefaultTypeInternal;
extern SignalPropagationResponseDefaultTypeInternal _SignalPropagationResponse_default_instance_;
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {

// ===================================================================


// -------------------------------------------------------------------

class SignalPropagationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest) */ {
 public:
  inline SignalPropagationRequest() : SignalPropagationRequest(nullptr) {}
  ~SignalPropagationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignalPropagationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalPropagationRequest(const SignalPropagationRequest& from);
  SignalPropagationRequest(SignalPropagationRequest&& from) noexcept
    : SignalPropagationRequest() {
    *this = ::std::move(from);
  }

  inline SignalPropagationRequest& operator=(const SignalPropagationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalPropagationRequest& operator=(SignalPropagationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalPropagationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum AnalysisTimeCase {
    kAnalysisInterval = 6,
    kAnalysisInstant = 10,
    ANALYSIS_TIME_NOT_SET = 0,
  };

  static inline const SignalPropagationRequest* internal_default_instance() {
    return reinterpret_cast<const SignalPropagationRequest*>(
               &_SignalPropagationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalPropagationRequest& a, SignalPropagationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalPropagationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalPropagationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalPropagationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalPropagationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalPropagationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignalPropagationRequest& from) {
    SignalPropagationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalPropagationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest";
  }
  protected:
  explicit SignalPropagationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandProfileIdFieldNumber = 2,
    kTransmitterModelFieldNumber = 1,
    kTargetFieldNumber = 3,
    kCoverageFieldNumber = 4,
    kStepSizeFieldNumber = 7,
    kSpatialPropagationStepSizeFieldNumber = 9,
    kReferenceDataTimeFieldNumber = 11,
    kExplainInaccessibilityFieldNumber = 8,
    kAnalysisIntervalFieldNumber = 6,
    kAnalysisInstantFieldNumber = 10,
  };
  // optional string band_profile_id = 2 [json_name = "bandProfileId"];
  bool has_band_profile_id() const;
  void clear_band_profile_id() ;
  const std::string& band_profile_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_band_profile_id(Arg_&& arg, Args_... args);
  std::string* mutable_band_profile_id();
  PROTOBUF_NODISCARD std::string* release_band_profile_id();
  void set_allocated_band_profile_id(std::string* ptr);

  private:
  const std::string& _internal_band_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_band_profile_id(
      const std::string& value);
  std::string* _internal_mutable_band_profile_id();

  public:
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider transmitter_model = 1 [json_name = "transmitterModel"];
  bool has_transmitter_model() const;
  void clear_transmitter_model() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& transmitter_model() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* release_transmitter_model();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* mutable_transmitter_model();
  void set_allocated_transmitter_model(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* transmitter_model);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& _internal_transmitter_model() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* _internal_mutable_transmitter_model();
  public:
  void unsafe_arena_set_allocated_transmitter_model(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* transmitter_model);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* unsafe_arena_release_transmitter_model();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider target = 3 [json_name = "target"];
  bool has_target() const;
  void clear_target() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& target() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* release_target();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* mutable_target();
  void set_allocated_target(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* target);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& _internal_target() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* target);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* unsafe_arena_release_target();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.CoordinateArray coverage = 4 [json_name = "coverage"];
  bool has_coverage() const;
  void clear_coverage() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray& coverage() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* release_coverage();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* mutable_coverage();
  void set_allocated_coverage(::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* coverage);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray& _internal_coverage() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* _internal_mutable_coverage();
  public:
  void unsafe_arena_set_allocated_coverage(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* coverage);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* unsafe_arena_release_coverage();
  // optional .google.protobuf.Duration step_size = 7 [json_name = "stepSize"];
  bool has_step_size() const;
  void clear_step_size() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& step_size() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_step_size();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_step_size();
  void set_allocated_step_size(::PROTOBUF_NAMESPACE_ID::Duration* step_size);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_step_size() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_step_size();
  public:
  void unsafe_arena_set_allocated_step_size(
      ::PROTOBUF_NAMESPACE_ID::Duration* step_size);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_step_size();
  // optional .google.protobuf.Duration spatial_propagation_step_size = 9 [json_name = "spatialPropagationStepSize"];
  bool has_spatial_propagation_step_size() const;
  void clear_spatial_propagation_step_size() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& spatial_propagation_step_size() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_spatial_propagation_step_size();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_spatial_propagation_step_size();
  void set_allocated_spatial_propagation_step_size(::PROTOBUF_NAMESPACE_ID::Duration* spatial_propagation_step_size);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_spatial_propagation_step_size() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_spatial_propagation_step_size();
  public:
  void unsafe_arena_set_allocated_spatial_propagation_step_size(
      ::PROTOBUF_NAMESPACE_ID::Duration* spatial_propagation_step_size);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_spatial_propagation_step_size();
  // optional .google.protobuf.Timestamp reference_data_time = 11 [json_name = "referenceDataTime"];
  bool has_reference_data_time() const;
  void clear_reference_data_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& reference_data_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_data_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_data_time();
  void set_allocated_reference_data_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reference_data_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_data_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_data_time();
  public:
  void unsafe_arena_set_allocated_reference_data_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_data_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_data_time();
  // optional bool explain_inaccessibility = 8 [json_name = "explainInaccessibility"];
  bool has_explain_inaccessibility() const;
  void clear_explain_inaccessibility() ;
  bool explain_inaccessibility() const;
  void set_explain_inaccessibility(bool value);

  private:
  bool _internal_explain_inaccessibility() const;
  void _internal_set_explain_inaccessibility(bool value);

  public:
  // .google.type.Interval analysis_interval = 6 [json_name = "analysisInterval"];
  bool has_analysis_interval() const;
  private:
  bool _internal_has_analysis_interval() const;

  public:
  void clear_analysis_interval() ;
  const ::google::type::Interval& analysis_interval() const;
  PROTOBUF_NODISCARD ::google::type::Interval* release_analysis_interval();
  ::google::type::Interval* mutable_analysis_interval();
  void set_allocated_analysis_interval(::google::type::Interval* analysis_interval);
  private:
  const ::google::type::Interval& _internal_analysis_interval() const;
  ::google::type::Interval* _internal_mutable_analysis_interval();
  public:
  void unsafe_arena_set_allocated_analysis_interval(
      ::google::type::Interval* analysis_interval);
  ::google::type::Interval* unsafe_arena_release_analysis_interval();
  // .google.protobuf.Timestamp analysis_instant = 10 [json_name = "analysisInstant"];
  bool has_analysis_instant() const;
  private:
  bool _internal_has_analysis_instant() const;

  public:
  void clear_analysis_instant() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& analysis_instant() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_analysis_instant();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_analysis_instant();
  void set_allocated_analysis_instant(::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_instant);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_analysis_instant() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_analysis_instant();
  public:
  void unsafe_arena_set_allocated_analysis_instant(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_instant);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_analysis_instant();
  void clear_analysis_time();
  AnalysisTimeCase analysis_time_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
 private:
  class _Internal;
  void set_has_analysis_interval();
  void set_has_analysis_instant();

  inline bool has_analysis_time() const;
  inline void clear_has_analysis_time();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr band_profile_id_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* transmitter_model_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* target_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* coverage_;
    ::PROTOBUF_NAMESPACE_ID::Duration* step_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* spatial_propagation_step_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_data_time_;
    bool explain_inaccessibility_;
    union AnalysisTimeUnion {
      constexpr AnalysisTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::type::Interval* analysis_interval_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_instant_;
    } analysis_time_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto;
};// -------------------------------------------------------------------

class SignalPropagationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse) */ {
 public:
  inline SignalPropagationResponse() : SignalPropagationResponse(nullptr) {}
  ~SignalPropagationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignalPropagationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalPropagationResponse(const SignalPropagationResponse& from);
  SignalPropagationResponse(SignalPropagationResponse&& from) noexcept
    : SignalPropagationResponse() {
    *this = ::std::move(from);
  }

  inline SignalPropagationResponse& operator=(const SignalPropagationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalPropagationResponse& operator=(SignalPropagationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalPropagationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalPropagationResponse* internal_default_instance() {
    return reinterpret_cast<const SignalPropagationResponse*>(
               &_SignalPropagationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalPropagationResponse& a, SignalPropagationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalPropagationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalPropagationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalPropagationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalPropagationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalPropagationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignalPropagationResponse& from) {
    SignalPropagationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalPropagationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse";
  }
  protected:
  explicit SignalPropagationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessIntervalFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval access_interval = 1 [json_name = "accessInterval"];
  int access_interval_size() const;
  private:
  int _internal_access_interval_size() const;

  public:
  void clear_access_interval() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* mutable_access_interval(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval >*
      mutable_access_interval();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval& _internal_access_interval(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* _internal_add_access_interval();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval>& _internal_access_interval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval>* _internal_mutable_access_interval();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval& access_interval(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* add_access_interval();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval >&
      access_interval() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval > access_interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignalPropagationRequest

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider transmitter_model = 1 [json_name = "transmitterModel"];
inline bool SignalPropagationRequest::has_transmitter_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transmitter_model_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& SignalPropagationRequest::_internal_transmitter_model() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* p = _impl_.transmitter_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_TransceiverProvider_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& SignalPropagationRequest::transmitter_model() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.transmitter_model)
  return _internal_transmitter_model();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_transmitter_model(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* transmitter_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmitter_model_);
  }
  _impl_.transmitter_model_ = transmitter_model;
  if (transmitter_model) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.transmitter_model)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::release_transmitter_model() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* temp = _impl_.transmitter_model_;
  _impl_.transmitter_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::unsafe_arena_release_transmitter_model() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.transmitter_model)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* temp = _impl_.transmitter_model_;
  _impl_.transmitter_model_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::_internal_mutable_transmitter_model() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transmitter_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider>(GetArenaForAllocation());
    _impl_.transmitter_model_ = p;
  }
  return _impl_.transmitter_model_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::mutable_transmitter_model() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* _msg = _internal_mutable_transmitter_model();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.transmitter_model)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_transmitter_model(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* transmitter_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmitter_model_);
  }
  if (transmitter_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmitter_model));
    if (message_arena != submessage_arena) {
      transmitter_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmitter_model, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transmitter_model_ = transmitter_model;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.transmitter_model)
}

// optional string band_profile_id = 2 [json_name = "bandProfileId"];
inline bool SignalPropagationRequest::has_band_profile_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SignalPropagationRequest::clear_band_profile_id() {
  _impl_.band_profile_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignalPropagationRequest::band_profile_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id)
  return _internal_band_profile_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignalPropagationRequest::set_band_profile_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.band_profile_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id)
}
inline std::string* SignalPropagationRequest::mutable_band_profile_id() {
  std::string* _s = _internal_mutable_band_profile_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id)
  return _s;
}
inline const std::string& SignalPropagationRequest::_internal_band_profile_id() const {
  return _impl_.band_profile_id_.Get();
}
inline void SignalPropagationRequest::_internal_set_band_profile_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.band_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignalPropagationRequest::_internal_mutable_band_profile_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.band_profile_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SignalPropagationRequest::release_band_profile_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.band_profile_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SignalPropagationRequest::set_allocated_band_profile_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.band_profile_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.band_profile_id_.IsDefault()) {
          _impl_.band_profile_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider target = 3 [json_name = "target"];
inline bool SignalPropagationRequest::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& SignalPropagationRequest::_internal_target() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_TransceiverProvider_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& SignalPropagationRequest::target() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.target)
  return _internal_target();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_target(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.target)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::release_target() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.target)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* SignalPropagationRequest::mutable_target() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.target)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_target(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.target)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.CoordinateArray coverage = 4 [json_name = "coverage"];
inline bool SignalPropagationRequest::has_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coverage_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray& SignalPropagationRequest::_internal_coverage() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* p = _impl_.coverage_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_CoordinateArray_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray& SignalPropagationRequest::coverage() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.coverage)
  return _internal_coverage();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_coverage(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* coverage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coverage_);
  }
  _impl_.coverage_ = coverage;
  if (coverage) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.coverage)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* SignalPropagationRequest::release_coverage() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* temp = _impl_.coverage_;
  _impl_.coverage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* SignalPropagationRequest::unsafe_arena_release_coverage() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.coverage)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* temp = _impl_.coverage_;
  _impl_.coverage_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* SignalPropagationRequest::_internal_mutable_coverage() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray>(GetArenaForAllocation());
    _impl_.coverage_ = p;
  }
  return _impl_.coverage_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* SignalPropagationRequest::mutable_coverage() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* _msg = _internal_mutable_coverage();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.coverage)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_coverage(::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray* coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coverage_);
  }
  if (coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coverage));
    if (message_arena != submessage_arena) {
      coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coverage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.coverage_ = coverage;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.coverage)
}

// .google.type.Interval analysis_interval = 6 [json_name = "analysisInterval"];
inline bool SignalPropagationRequest::has_analysis_interval() const {
  return analysis_time_case() == kAnalysisInterval;
}
inline bool SignalPropagationRequest::_internal_has_analysis_interval() const {
  return analysis_time_case() == kAnalysisInterval;
}
inline void SignalPropagationRequest::set_has_analysis_interval() {
  _impl_._oneof_case_[0] = kAnalysisInterval;
}
inline ::google::type::Interval* SignalPropagationRequest::release_analysis_interval() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
  if (analysis_time_case() == kAnalysisInterval) {
    clear_has_analysis_time();
    ::google::type::Interval* temp = _impl_.analysis_time_.analysis_interval_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.analysis_time_.analysis_interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::type::Interval& SignalPropagationRequest::_internal_analysis_interval() const {
  return analysis_time_case() == kAnalysisInterval
      ? *_impl_.analysis_time_.analysis_interval_
      : reinterpret_cast<::google::type::Interval&>(::google::type::_Interval_default_instance_);
}
inline const ::google::type::Interval& SignalPropagationRequest::analysis_interval() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
  return _internal_analysis_interval();
}
inline ::google::type::Interval* SignalPropagationRequest::unsafe_arena_release_analysis_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
  if (analysis_time_case() == kAnalysisInterval) {
    clear_has_analysis_time();
    ::google::type::Interval* temp = _impl_.analysis_time_.analysis_interval_;
    _impl_.analysis_time_.analysis_interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_analysis_interval(::google::type::Interval* analysis_interval) {
  clear_analysis_time();
  if (analysis_interval) {
    set_has_analysis_interval();
    _impl_.analysis_time_.analysis_interval_ = analysis_interval;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
}
inline ::google::type::Interval* SignalPropagationRequest::_internal_mutable_analysis_interval() {
  if (analysis_time_case() != kAnalysisInterval) {
    clear_analysis_time();
    set_has_analysis_interval();
    _impl_.analysis_time_.analysis_interval_ = CreateMaybeMessage< ::google::type::Interval >(GetArenaForAllocation());
  }
  return _impl_.analysis_time_.analysis_interval_;
}
inline ::google::type::Interval* SignalPropagationRequest::mutable_analysis_interval() {
  ::google::type::Interval* _msg = _internal_mutable_analysis_interval();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
  return _msg;
}

// .google.protobuf.Timestamp analysis_instant = 10 [json_name = "analysisInstant"];
inline bool SignalPropagationRequest::has_analysis_instant() const {
  return analysis_time_case() == kAnalysisInstant;
}
inline bool SignalPropagationRequest::_internal_has_analysis_instant() const {
  return analysis_time_case() == kAnalysisInstant;
}
inline void SignalPropagationRequest::set_has_analysis_instant() {
  _impl_._oneof_case_[0] = kAnalysisInstant;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::release_analysis_instant() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
  if (analysis_time_case() == kAnalysisInstant) {
    clear_has_analysis_time();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.analysis_time_.analysis_instant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.analysis_time_.analysis_instant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SignalPropagationRequest::_internal_analysis_instant() const {
  return analysis_time_case() == kAnalysisInstant
      ? *_impl_.analysis_time_.analysis_instant_
      : reinterpret_cast<::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SignalPropagationRequest::analysis_instant() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
  return _internal_analysis_instant();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::unsafe_arena_release_analysis_instant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
  if (analysis_time_case() == kAnalysisInstant) {
    clear_has_analysis_time();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.analysis_time_.analysis_instant_;
    _impl_.analysis_time_.analysis_instant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_analysis_instant(::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_instant) {
  clear_analysis_time();
  if (analysis_instant) {
    set_has_analysis_instant();
    _impl_.analysis_time_.analysis_instant_ = analysis_instant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::_internal_mutable_analysis_instant() {
  if (analysis_time_case() != kAnalysisInstant) {
    clear_analysis_time();
    set_has_analysis_instant();
    _impl_.analysis_time_.analysis_instant_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.analysis_time_.analysis_instant_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::mutable_analysis_instant() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_analysis_instant();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
  return _msg;
}

// optional .google.protobuf.Duration step_size = 7 [json_name = "stepSize"];
inline bool SignalPropagationRequest::has_step_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.step_size_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignalPropagationRequest::_internal_step_size() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.step_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignalPropagationRequest::step_size() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.step_size)
  return _internal_step_size();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_step_size(
    ::PROTOBUF_NAMESPACE_ID::Duration* step_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_size_);
  }
  _impl_.step_size_ = step_size;
  if (step_size) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.step_size)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::release_step_size() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.step_size_;
  _impl_.step_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::unsafe_arena_release_step_size() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.step_size)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.step_size_;
  _impl_.step_size_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::_internal_mutable_step_size() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.step_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.step_size_ = p;
  }
  return _impl_.step_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::mutable_step_size() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_step_size();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.step_size)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_step_size(::PROTOBUF_NAMESPACE_ID::Duration* step_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_size_);
  }
  if (step_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_size));
    if (message_arena != submessage_arena) {
      step_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.step_size_ = step_size;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.step_size)
}

// optional .google.protobuf.Duration spatial_propagation_step_size = 9 [json_name = "spatialPropagationStepSize"];
inline bool SignalPropagationRequest::has_spatial_propagation_step_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spatial_propagation_step_size_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignalPropagationRequest::_internal_spatial_propagation_step_size() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.spatial_propagation_step_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignalPropagationRequest::spatial_propagation_step_size() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.spatial_propagation_step_size)
  return _internal_spatial_propagation_step_size();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_spatial_propagation_step_size(
    ::PROTOBUF_NAMESPACE_ID::Duration* spatial_propagation_step_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spatial_propagation_step_size_);
  }
  _impl_.spatial_propagation_step_size_ = spatial_propagation_step_size;
  if (spatial_propagation_step_size) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.spatial_propagation_step_size)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::release_spatial_propagation_step_size() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.spatial_propagation_step_size_;
  _impl_.spatial_propagation_step_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::unsafe_arena_release_spatial_propagation_step_size() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.spatial_propagation_step_size)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.spatial_propagation_step_size_;
  _impl_.spatial_propagation_step_size_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::_internal_mutable_spatial_propagation_step_size() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.spatial_propagation_step_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.spatial_propagation_step_size_ = p;
  }
  return _impl_.spatial_propagation_step_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignalPropagationRequest::mutable_spatial_propagation_step_size() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_spatial_propagation_step_size();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.spatial_propagation_step_size)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_spatial_propagation_step_size(::PROTOBUF_NAMESPACE_ID::Duration* spatial_propagation_step_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spatial_propagation_step_size_);
  }
  if (spatial_propagation_step_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_propagation_step_size));
    if (message_arena != submessage_arena) {
      spatial_propagation_step_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_propagation_step_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spatial_propagation_step_size_ = spatial_propagation_step_size;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.spatial_propagation_step_size)
}

// optional bool explain_inaccessibility = 8 [json_name = "explainInaccessibility"];
inline bool SignalPropagationRequest::has_explain_inaccessibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SignalPropagationRequest::clear_explain_inaccessibility() {
  _impl_.explain_inaccessibility_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SignalPropagationRequest::explain_inaccessibility() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.explain_inaccessibility)
  return _internal_explain_inaccessibility();
}
inline void SignalPropagationRequest::set_explain_inaccessibility(bool value) {
  _internal_set_explain_inaccessibility(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.explain_inaccessibility)
}
inline bool SignalPropagationRequest::_internal_explain_inaccessibility() const {
  return _impl_.explain_inaccessibility_;
}
inline void SignalPropagationRequest::_internal_set_explain_inaccessibility(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.explain_inaccessibility_ = value;
}

// optional .google.protobuf.Timestamp reference_data_time = 11 [json_name = "referenceDataTime"];
inline bool SignalPropagationRequest::has_reference_data_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_data_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SignalPropagationRequest::_internal_reference_data_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.reference_data_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SignalPropagationRequest::reference_data_time() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.reference_data_time)
  return _internal_reference_data_time();
}
inline void SignalPropagationRequest::unsafe_arena_set_allocated_reference_data_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reference_data_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_data_time_);
  }
  _impl_.reference_data_time_ = reference_data_time;
  if (reference_data_time) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.reference_data_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::release_reference_data_time() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reference_data_time_;
  _impl_.reference_data_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::unsafe_arena_release_reference_data_time() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.reference_data_time)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reference_data_time_;
  _impl_.reference_data_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::_internal_mutable_reference_data_time() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.reference_data_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.reference_data_time_ = p;
  }
  return _impl_.reference_data_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SignalPropagationRequest::mutable_reference_data_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_reference_data_time();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.reference_data_time)
  return _msg;
}
inline void SignalPropagationRequest::set_allocated_reference_data_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reference_data_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_data_time_);
  }
  if (reference_data_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_data_time));
    if (message_arena != submessage_arena) {
      reference_data_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_data_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.reference_data_time_ = reference_data_time;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.reference_data_time)
}

inline bool SignalPropagationRequest::has_analysis_time() const {
  return analysis_time_case() != ANALYSIS_TIME_NOT_SET;
}
inline void SignalPropagationRequest::clear_has_analysis_time() {
  _impl_._oneof_case_[0] = ANALYSIS_TIME_NOT_SET;
}
inline SignalPropagationRequest::AnalysisTimeCase SignalPropagationRequest::analysis_time_case() const {
  return SignalPropagationRequest::AnalysisTimeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SignalPropagationResponse

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval access_interval = 1 [json_name = "accessInterval"];
inline int SignalPropagationResponse::_internal_access_interval_size() const {
  return _impl_.access_interval_.size();
}
inline int SignalPropagationResponse::access_interval_size() const {
  return _internal_access_interval_size();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* SignalPropagationResponse::mutable_access_interval(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse.access_interval)
  return _internal_mutable_access_interval()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval >*
SignalPropagationResponse::mutable_access_interval() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse.access_interval)
  return _internal_mutable_access_interval();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval& SignalPropagationResponse::_internal_access_interval(int index) const {
  return _internal_access_interval().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval& SignalPropagationResponse::access_interval(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse.access_interval)
  return _internal_access_interval(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* SignalPropagationResponse::_internal_add_access_interval() {
  return _internal_mutable_access_interval()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* SignalPropagationResponse::add_access_interval() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* _add = _internal_add_access_interval();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse.access_interval)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval >&
SignalPropagationResponse::access_interval() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse.access_interval)
  return _internal_access_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval>&
SignalPropagationResponse::_internal_access_interval() const {
  return _impl_.access_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval>*
SignalPropagationResponse::_internal_mutable_access_interval() {
  return &_impl_.access_interval_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_2epb_2eh

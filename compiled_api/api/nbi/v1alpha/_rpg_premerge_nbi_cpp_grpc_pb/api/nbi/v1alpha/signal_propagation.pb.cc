// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/signal_propagation.proto

#include "api/nbi/v1alpha/signal_propagation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
template <typename>
PROTOBUF_CONSTEXPR SignalPropagationRequest::SignalPropagationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.band_profile_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmitter_model_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.coverage_)*/nullptr
  , /*decltype(_impl_.step_size_)*/nullptr
  , /*decltype(_impl_.spatial_propagation_step_size_)*/nullptr
  , /*decltype(_impl_.reference_data_time_)*/nullptr
  , /*decltype(_impl_.explain_inaccessibility_)*/ false

  , /*decltype(_impl_.analysis_time_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SignalPropagationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalPropagationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalPropagationRequestDefaultTypeInternal() {}
  union {
    SignalPropagationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalPropagationRequestDefaultTypeInternal _SignalPropagationRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignalPropagationResponse::SignalPropagationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_interval_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalPropagationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalPropagationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalPropagationResponseDefaultTypeInternal() {}
  union {
    SignalPropagationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalPropagationResponseDefaultTypeInternal _SignalPropagationResponse_default_instance_;
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.transmitter_model_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.band_profile_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.coverage_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.step_size_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.spatial_propagation_step_size_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.explain_inaccessibility_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.reference_data_time_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_.analysis_time_),
    1,
    0,
    2,
    3,
    ~0u,
    ~0u,
    4,
    5,
    7,
    6,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse, _impl_.access_interval_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 19, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest)},
        { 29, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::_SignalPropagationRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::_SignalPropagationResponse_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(api/nbi/v1alpha/signal_propagation.pro"
    "to\022!aalyria.spacetime.api.nbi.v1alpha\032%a"
    "pi/common/wireless_transceiver.proto\032(ap"
    "i/nbi/v1alpha/resources/coverage.proto\0323"
    "api/nbi/v1alpha/resources/wireless_evalu"
    "ation.proto\032\036google/protobuf/duration.pr"
    "oto\032\037google/protobuf/timestamp.proto\032\032go"
    "ogle/type/interval.proto\"\240\006\n\030SignalPropa"
    "gationRequest\022m\n\021transmitter_model\030\001 \001(\013"
    "2@.aalyria.spacetime.api.nbi.v1alpha.res"
    "ources.TransceiverProviderR\020transmitterM"
    "odel\022&\n\017band_profile_id\030\002 \001(\tR\rbandProfi"
    "leId\022X\n\006target\030\003 \001(\0132@.aalyria.spacetime"
    ".api.nbi.v1alpha.resources.TransceiverPr"
    "oviderR\006target\022X\n\010coverage\030\004 \001(\0132<.aalyr"
    "ia.spacetime.api.nbi.v1alpha.resources.C"
    "oordinateArrayR\010coverage\022D\n\021analysis_int"
    "erval\030\006 \001(\0132\025.google.type.IntervalH\000R\020an"
    "alysisInterval\022G\n\020analysis_instant\030\n \001(\013"
    "2\032.google.protobuf.TimestampH\000R\017analysis"
    "Instant\0226\n\tstep_size\030\007 \001(\0132\031.google.prot"
    "obuf.DurationR\010stepSize\022\\\n\035spatial_propa"
    "gation_step_size\030\t \001(\0132\031.google.protobuf"
    ".DurationR\032spatialPropagationStepSize\0227\n"
    "\027explain_inaccessibility\030\010 \001(\010R\026explainI"
    "naccessibility\022J\n\023reference_data_time\030\013 "
    "\001(\0132\032.google.protobuf.TimestampR\021referen"
    "ceDataTimeB\017\n\ranalysis_time\"\201\001\n\031SignalPr"
    "opagationResponse\022d\n\017access_interval\030\001 \003"
    "(\0132;.aalyria.spacetime.api.nbi.v1alpha.r"
    "esources.AccessIntervalR\016accessInterval2"
    "\235\001\n\021SignalPropagation\022\207\001\n\010Evaluate\022;.aal"
    "yria.spacetime.api.nbi.v1alpha.SignalPro"
    "pagationRequest\032<.aalyria.spacetime.api."
    "nbi.v1alpha.SignalPropagationResponse\"\000B"
    "N\n%com.aalyria.spacetime.api.nbi.v1alpha"
    "Z%aalyria.com/spacetime/api/nbi/v1alpha"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_deps[6] =
    {
        &::descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fcoverage_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_google_2ftype_2finterval_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto = {
    false,
    false,
    1479,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto,
    "api/nbi/v1alpha/signal_propagation.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_deps,
    6,
    2,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
// ===================================================================

class SignalPropagationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalPropagationRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignalPropagationRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& transmitter_model(const SignalPropagationRequest* msg);
  static void set_has_transmitter_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_band_profile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider& target(const SignalPropagationRequest* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray& coverage(const SignalPropagationRequest* msg);
  static void set_has_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::type::Interval& analysis_interval(const SignalPropagationRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& analysis_instant(const SignalPropagationRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& step_size(const SignalPropagationRequest* msg);
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& spatial_propagation_step_size(const SignalPropagationRequest* msg);
  static void set_has_spatial_propagation_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_explain_inaccessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& reference_data_time(const SignalPropagationRequest* msg);
  static void set_has_reference_data_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider&
SignalPropagationRequest::_Internal::transmitter_model(const SignalPropagationRequest* msg) {
  return *msg->_impl_.transmitter_model_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider&
SignalPropagationRequest::_Internal::target(const SignalPropagationRequest* msg) {
  return *msg->_impl_.target_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray&
SignalPropagationRequest::_Internal::coverage(const SignalPropagationRequest* msg) {
  return *msg->_impl_.coverage_;
}
const ::google::type::Interval&
SignalPropagationRequest::_Internal::analysis_interval(const SignalPropagationRequest* msg) {
  return *msg->_impl_.analysis_time_.analysis_interval_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SignalPropagationRequest::_Internal::analysis_instant(const SignalPropagationRequest* msg) {
  return *msg->_impl_.analysis_time_.analysis_instant_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SignalPropagationRequest::_Internal::step_size(const SignalPropagationRequest* msg) {
  return *msg->_impl_.step_size_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SignalPropagationRequest::_Internal::spatial_propagation_step_size(const SignalPropagationRequest* msg) {
  return *msg->_impl_.spatial_propagation_step_size_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SignalPropagationRequest::_Internal::reference_data_time(const SignalPropagationRequest* msg) {
  return *msg->_impl_.reference_data_time_;
}
void SignalPropagationRequest::clear_transmitter_model() {
  if (_impl_.transmitter_model_ != nullptr) _impl_.transmitter_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SignalPropagationRequest::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SignalPropagationRequest::clear_coverage() {
  if (_impl_.coverage_ != nullptr) _impl_.coverage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SignalPropagationRequest::set_allocated_analysis_interval(::google::type::Interval* analysis_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_analysis_time();
  if (analysis_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_interval));
    if (message_arena != submessage_arena) {
      analysis_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_interval, submessage_arena);
    }
    set_has_analysis_interval();
    _impl_.analysis_time_.analysis_interval_ = analysis_interval;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_interval)
}
void SignalPropagationRequest::clear_analysis_interval() {
  if (analysis_time_case() == kAnalysisInterval) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.analysis_time_.analysis_interval_;
    }
    clear_has_analysis_time();
  }
}
void SignalPropagationRequest::set_allocated_analysis_instant(::PROTOBUF_NAMESPACE_ID::Timestamp* analysis_instant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_analysis_time();
  if (analysis_instant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_instant));
    if (message_arena != submessage_arena) {
      analysis_instant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_instant, submessage_arena);
    }
    set_has_analysis_instant();
    _impl_.analysis_time_.analysis_instant_ = analysis_instant;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.analysis_instant)
}
void SignalPropagationRequest::clear_analysis_instant() {
  if (analysis_time_case() == kAnalysisInstant) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.analysis_time_.analysis_instant_;
    }
    clear_has_analysis_time();
  }
}
void SignalPropagationRequest::clear_step_size() {
  if (_impl_.step_size_ != nullptr) _impl_.step_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SignalPropagationRequest::clear_spatial_propagation_step_size() {
  if (_impl_.spatial_propagation_step_size_ != nullptr) _impl_.spatial_propagation_step_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SignalPropagationRequest::clear_reference_data_time() {
  if (_impl_.reference_data_time_ != nullptr) _impl_.reference_data_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
SignalPropagationRequest::SignalPropagationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
}
SignalPropagationRequest::SignalPropagationRequest(const SignalPropagationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalPropagationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.transmitter_model_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.coverage_){nullptr}
    , decltype(_impl_.step_size_){nullptr}
    , decltype(_impl_.spatial_propagation_step_size_){nullptr}
    , decltype(_impl_.reference_data_time_){nullptr}
    , decltype(_impl_.explain_inaccessibility_) {}

    , decltype(_impl_.analysis_time_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.band_profile_id_.Set(from._internal_band_profile_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transmitter_model_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider(*from._impl_.transmitter_model_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.target_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.coverage_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray(*from._impl_.coverage_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.step_size_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.step_size_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.spatial_propagation_step_size_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.spatial_propagation_step_size_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.reference_data_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.reference_data_time_);
  }
  _this->_impl_.explain_inaccessibility_ = from._impl_.explain_inaccessibility_;
  clear_has_analysis_time();
  switch (from.analysis_time_case()) {
    case kAnalysisInterval: {
      _this->_internal_mutable_analysis_interval()->::google::type::Interval::MergeFrom(
          from._internal_analysis_interval());
      break;
    }
    case kAnalysisInstant: {
      _this->_internal_mutable_analysis_instant()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_analysis_instant());
      break;
    }
    case ANALYSIS_TIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
}

inline void SignalPropagationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.transmitter_model_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.coverage_){nullptr}
    , decltype(_impl_.step_size_){nullptr}
    , decltype(_impl_.spatial_propagation_step_size_){nullptr}
    , decltype(_impl_.reference_data_time_){nullptr}
    , decltype(_impl_.explain_inaccessibility_) { false }

    , decltype(_impl_.analysis_time_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_analysis_time();
}

SignalPropagationRequest::~SignalPropagationRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalPropagationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.band_profile_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transmitter_model_;
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.coverage_;
  if (this != internal_default_instance()) delete _impl_.step_size_;
  if (this != internal_default_instance()) delete _impl_.spatial_propagation_step_size_;
  if (this != internal_default_instance()) delete _impl_.reference_data_time_;
  if (has_analysis_time()) {
    clear_analysis_time();
  }
}

void SignalPropagationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalPropagationRequest::clear_analysis_time() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  switch (analysis_time_case()) {
    case kAnalysisInterval: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.analysis_time_.analysis_interval_;
      }
      break;
    }
    case kAnalysisInstant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.analysis_time_.analysis_instant_;
      }
      break;
    }
    case ANALYSIS_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ANALYSIS_TIME_NOT_SET;
}


void SignalPropagationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.band_profile_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transmitter_model_ != nullptr);
      _impl_.transmitter_model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.coverage_ != nullptr);
      _impl_.coverage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.step_size_ != nullptr);
      _impl_.step_size_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.spatial_propagation_step_size_ != nullptr);
      _impl_.spatial_propagation_step_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.reference_data_time_ != nullptr);
      _impl_.reference_data_time_->Clear();
    }
  }
  _impl_.explain_inaccessibility_ = false;
  clear_analysis_time();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalPropagationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider transmitter_model = 1 [json_name = "transmitterModel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitter_model(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string band_profile_id = 2 [json_name = "bandProfileId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_band_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider target = 3 [json_name = "target"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.CoordinateArray coverage = 4 [json_name = "coverage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.type.Interval analysis_interval = 6 [json_name = "analysisInterval"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Duration step_size = 7 [json_name = "stepSize"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_size(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool explain_inaccessibility = 8 [json_name = "explainInaccessibility"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_explain_inaccessibility(&has_bits);
          _impl_.explain_inaccessibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Duration spatial_propagation_step_size = 9 [json_name = "spatialPropagationStepSize"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_propagation_step_size(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp analysis_instant = 10 [json_name = "analysisInstant"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_instant(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp reference_data_time = 11 [json_name = "referenceDataTime"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_data_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignalPropagationRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider transmitter_model = 1 [json_name = "transmitterModel"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transmitter_model(this),
        _Internal::transmitter_model(this).GetCachedSize(), target, stream);
  }

  // optional string band_profile_id = 2 [json_name = "bandProfileId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_band_profile_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest.band_profile_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider target = 3 [json_name = "target"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.CoordinateArray coverage = 4 [json_name = "coverage"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coverage(this),
        _Internal::coverage(this).GetCachedSize(), target, stream);
  }

  // .google.type.Interval analysis_interval = 6 [json_name = "analysisInterval"];
  if (analysis_time_case() == kAnalysisInterval) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::analysis_interval(this),
        _Internal::analysis_interval(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration step_size = 7 [json_name = "stepSize"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::step_size(this),
        _Internal::step_size(this).GetCachedSize(), target, stream);
  }

  // optional bool explain_inaccessibility = 8 [json_name = "explainInaccessibility"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_explain_inaccessibility(), target);
  }

  // optional .google.protobuf.Duration spatial_propagation_step_size = 9 [json_name = "spatialPropagationStepSize"];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::spatial_propagation_step_size(this),
        _Internal::spatial_propagation_step_size(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp analysis_instant = 10 [json_name = "analysisInstant"];
  if (analysis_time_case() == kAnalysisInstant) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::analysis_instant(this),
        _Internal::analysis_instant(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp reference_data_time = 11 [json_name = "referenceDataTime"];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::reference_data_time(this),
        _Internal::reference_data_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  return target;
}

::size_t SignalPropagationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string band_profile_id = 2 [json_name = "bandProfileId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_band_profile_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider transmitter_model = 1 [json_name = "transmitterModel"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transmitter_model_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider target = 3 [json_name = "target"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.CoordinateArray coverage = 4 [json_name = "coverage"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coverage_);
    }

    // optional .google.protobuf.Duration step_size = 7 [json_name = "stepSize"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.step_size_);
    }

    // optional .google.protobuf.Duration spatial_propagation_step_size = 9 [json_name = "spatialPropagationStepSize"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spatial_propagation_step_size_);
    }

    // optional .google.protobuf.Timestamp reference_data_time = 11 [json_name = "referenceDataTime"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_data_time_);
    }

    // optional bool explain_inaccessibility = 8 [json_name = "explainInaccessibility"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  switch (analysis_time_case()) {
    // .google.type.Interval analysis_interval = 6 [json_name = "analysisInterval"];
    case kAnalysisInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.analysis_time_.analysis_interval_);
      break;
    }
    // .google.protobuf.Timestamp analysis_instant = 10 [json_name = "analysisInstant"];
    case kAnalysisInstant: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.analysis_time_.analysis_instant_);
      break;
    }
    case ANALYSIS_TIME_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalPropagationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalPropagationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalPropagationRequest::GetClassData() const { return &_class_data_; }


void SignalPropagationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalPropagationRequest*>(&to_msg);
  auto& from = static_cast<const SignalPropagationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_band_profile_id(from._internal_band_profile_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transmitter_model()->::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider::MergeFrom(
          from._internal_transmitter_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target()->::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_coverage()->::aalyria::spacetime::api::nbi::v1alpha::resources::CoordinateArray::MergeFrom(
          from._internal_coverage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_step_size()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_step_size());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_spatial_propagation_step_size()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_spatial_propagation_step_size());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_reference_data_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_reference_data_time());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.explain_inaccessibility_ = from._impl_.explain_inaccessibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.analysis_time_case()) {
    case kAnalysisInterval: {
      _this->_internal_mutable_analysis_interval()->::google::type::Interval::MergeFrom(
          from._internal_analysis_interval());
      break;
    }
    case kAnalysisInstant: {
      _this->_internal_mutable_analysis_instant()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_analysis_instant());
      break;
    }
    case ANALYSIS_TIME_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalPropagationRequest::CopyFrom(const SignalPropagationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPropagationRequest::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.transmitter_model_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.target_->IsInitialized()) return false;
  }
  return true;
}

void SignalPropagationRequest::InternalSwap(SignalPropagationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.band_profile_id_, lhs_arena,
                                       &other->_impl_.band_profile_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalPropagationRequest, _impl_.explain_inaccessibility_)
      + sizeof(SignalPropagationRequest::_impl_.explain_inaccessibility_)
      - PROTOBUF_FIELD_OFFSET(SignalPropagationRequest, _impl_.transmitter_model_)>(
          reinterpret_cast<char*>(&_impl_.transmitter_model_),
          reinterpret_cast<char*>(&other->_impl_.transmitter_model_));
  swap(_impl_.analysis_time_, other->_impl_.analysis_time_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalPropagationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto[0]);
}
// ===================================================================

class SignalPropagationResponse::_Internal {
 public:
};

void SignalPropagationResponse::clear_access_interval() {
  _internal_mutable_access_interval()->Clear();
}
SignalPropagationResponse::SignalPropagationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
}
SignalPropagationResponse::SignalPropagationResponse(const SignalPropagationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalPropagationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.access_interval_){from._impl_.access_interval_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
}

inline void SignalPropagationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.access_interval_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalPropagationResponse::~SignalPropagationResponse() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalPropagationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_access_interval()->~RepeatedPtrField();
}

void SignalPropagationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalPropagationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_access_interval()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalPropagationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval access_interval = 1 [json_name = "accessInterval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access_interval(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignalPropagationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval access_interval = 1 [json_name = "accessInterval"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_access_interval_size()); i < n; i++) {
    const auto& repfield = this->_internal_access_interval(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  return target;
}

::size_t SignalPropagationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval access_interval = 1 [json_name = "accessInterval"];
  total_size += 1UL * this->_internal_access_interval_size();
  for (const auto& msg : this->_internal_access_interval()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalPropagationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalPropagationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalPropagationResponse::GetClassData() const { return &_class_data_; }


void SignalPropagationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalPropagationResponse*>(&to_msg);
  auto& from = static_cast<const SignalPropagationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_access_interval()->MergeFrom(from._internal_access_interval());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalPropagationResponse::CopyFrom(const SignalPropagationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.SignalPropagationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPropagationResponse::IsInitialized() const {
  return true;
}

void SignalPropagationResponse::InternalSwap(SignalPropagationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_access_interval()->InternalSwap(other->_internal_mutable_access_interval());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalPropagationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fsignal_5fpropagation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::SignalPropagationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

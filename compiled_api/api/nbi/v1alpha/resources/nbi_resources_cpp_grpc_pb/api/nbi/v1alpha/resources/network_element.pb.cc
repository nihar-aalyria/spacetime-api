// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/network_element.proto

#include "api/nbi/v1alpha/resources/network_element.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
template <typename>
PROTOBUF_CONSTEXPR NetworkNode_SignalPowerBudget::NetworkNode_SignalPowerBudget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.available_signal_power_watts_)*/ 0
} {}
struct NetworkNode_SignalPowerBudgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkNode_SignalPowerBudgetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkNode_SignalPowerBudgetDefaultTypeInternal() {}
  union {
    NetworkNode_SignalPowerBudget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkNode_SignalPowerBudgetDefaultTypeInternal _NetworkNode_SignalPowerBudget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkNode_Storage::NetworkNode_Storage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.available_bytes_)*/ ::int64_t{0}
} {}
struct NetworkNode_StorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkNode_StorageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkNode_StorageDefaultTypeInternal() {}
  union {
    NetworkNode_Storage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkNode_StorageDefaultTypeInternal _NetworkNode_Storage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkNode::NetworkNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_interface_)*/{}
  , /*decltype(_impl_.subnet_)*/{}
  , /*decltype(_impl_.power_budget_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.agent_)*/nullptr
  , /*decltype(_impl_.storage_)*/nullptr} {}
struct NetworkNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkNodeDefaultTypeInternal() {}
  union {
    NetworkNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkNodeDefaultTypeInternal _NetworkNode_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUseDefaultTypeInternal _SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdnAgent::SdnAgent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maximum_control_plane_latency_)*/{}
  , /*decltype(_impl_.google_user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct SdnAgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdnAgentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdnAgentDefaultTypeInternal() {}
  union {
    SdnAgent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdnAgentDefaultTypeInternal _SdnAgent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkInterface_LocalId::NetworkInterface_LocalId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0
} {}
struct NetworkInterface_LocalIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInterface_LocalIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInterface_LocalIdDefaultTypeInternal() {}
  union {
    NetworkInterface_LocalId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInterface_LocalIdDefaultTypeInternal _NetworkInterface_LocalId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkInterface_Impairment::NetworkInterface_Impairment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reason_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.timestamp_usec_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct NetworkInterface_ImpairmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInterface_ImpairmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInterface_ImpairmentDefaultTypeInternal() {}
  union {
    NetworkInterface_Impairment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInterface_ImpairmentDefaultTypeInternal _NetworkInterface_Impairment_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkInterface::NetworkInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_id_)*/{}
  , /*decltype(_impl_.operational_impairment_)*/{}
  , /*decltype(_impl_.interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ip_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ethernet_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rx_mode_)*/ 0

  , /*decltype(_impl_.interface_medium_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NetworkInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInterfaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInterfaceDefaultTypeInternal() {}
  union {
    NetworkInterface _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInterfaceDefaultTypeInternal _NetworkInterface_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WiredDevice::WiredDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.platform_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_data_rate_bps_)*/ 0
} {}
struct WiredDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WiredDeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WiredDeviceDefaultTypeInternal() {}
  union {
    WiredDevice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WiredDeviceDefaultTypeInternal _WiredDevice_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessDevice::WirelessDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transceiver_model_id_)*/nullptr
  , /*decltype(_impl_.link_establishment_timeout_)*/nullptr} {}
struct WirelessDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessDeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessDeviceDefaultTypeInternal() {}
  union {
    WirelessDevice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessDeviceDefaultTypeInternal _WirelessDevice_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget, _impl_.available_signal_power_watts_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage, _impl_.available_bytes_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.subnet_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.node_interface_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.agent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.power_budget_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode, _impl_.storage_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    3,
    ~0u,
    4,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent, _impl_.google_user_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent, _impl_.maximum_control_plane_latency_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId, _impl_.index_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_.app_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_.timestamp_usec_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment, _impl_.details_),
    4,
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.ip_address_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.ethernet_address_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.rx_mode_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.local_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.operational_impairment_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_.interface_medium_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice, _impl_.max_data_rate_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice, _impl_.platform_id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice, _impl_.transceiver_model_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice, _impl_.link_establishment_timeout_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget)},
        { 12, 21, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage)},
        { 22, 38, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode)},
        { 46, 56, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse)},
        { 58, 69, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent)},
        { 72, 82, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId)},
        { 84, 97, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment)},
        { 102, 119, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface)},
        { 127, 137, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice)},
        { 139, 149, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkNode_SignalPowerBudget_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkNode_Storage_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkNode_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_SdnAgent_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkInterface_LocalId_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkInterface_Impairment_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkInterface_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WiredDevice_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessDevice_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/api/nbi/v1alpha/resources/network_elem"
    "ent.proto\022+aalyria.spacetime.api.nbi.v1a"
    "lpha.resources\032\025api/common/time.proto\032%a"
    "pi/common/wireless_transceiver.proto\032\031go"
    "ogle/protobuf/any.proto\032\036google/protobuf"
    "/duration.proto\"\315\005\n\013NetworkNode\022\027\n\007node_"
    "id\030\001 \001(\tR\006nodeId\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004"
    "type\030\007 \001(\tR\004type\022\026\n\006subnet\030\010 \003(\tR\006subnet"
    "\022d\n\016node_interface\030\004 \003(\0132=.aalyria.space"
    "time.api.nbi.v1alpha.resources.NetworkIn"
    "terfaceR\rnodeInterface\022K\n\005agent\030\005 \001(\01325."
    "aalyria.spacetime.api.nbi.v1alpha.resour"
    "ces.SdnAgentR\005agent\022m\n\014power_budget\030\t \003("
    "\0132J.aalyria.spacetime.api.nbi.v1alpha.re"
    "sources.NetworkNode.SignalPowerBudgetR\013p"
    "owerBudget\022Z\n\007storage\030\n \001(\0132@.aalyria.sp"
    "acetime.api.nbi.v1alpha.resources.Networ"
    "kNode.StorageR\007storage\032\234\001\n\021SignalPowerBu"
    "dget\022F\n\010interval\030\001 \001(\0132*.aalyria.spaceti"
    "me.api.common.TimeIntervalR\010interval\022\?\n\034"
    "available_signal_power_watts\030\002 \001(\001R\031avai"
    "lableSignalPowerWatts\0322\n\007Storage\022\'\n\017avai"
    "lable_bytes\030\001 \001(\003R\016availableBytesJ\004\010\003\020\004J"
    "\004\010\006\020\007J\010\010\013\020\200\200\200\200\002\"\267\003\n\010SdnAgent\022V\n\004type\030\001 \001"
    "(\0162B.aalyria.spacetime.api.nbi.v1alpha.r"
    "esources.SdnAgent.CdpiProtocolR\004type\022$\n\016"
    "google_user_id\030\002 \001(\tR\014googleUserId\022\230\001\n\035m"
    "aximum_control_plane_latency\030\003 \003(\0132U.aal"
    "yria.spacetime.api.nbi.v1alpha.resources"
    ".SdnAgent.MaximumControlPlaneLatencyEntr"
    "yR\032maximumControlPlaneLatency\032h\n\037Maximum"
    "ControlPlaneLatencyEntry\022\020\n\003key\030\001 \001(\rR\003k"
    "ey\022/\n\005value\030\002 \001(\0132\031.google.protobuf.Dura"
    "tionR\005value:\0028\001\"(\n\014CdpiProtocol\022\013\n\007UNKNO"
    "WN\020\000\022\013\n\007AIRFLOW\020\001\"\253\010\n\020NetworkInterface\022!"
    "\n\014interface_id\030\001 \001(\tR\013interfaceId\022\035\n\nip_"
    "address\030\016 \001(\tR\tipAddress\022)\n\020ethernet_add"
    "ress\030\017 \001(\tR\017ethernetAddress\022[\n\007rx_mode\030\010"
    " \001(\0162B.aalyria.spacetime.api.nbi.v1alpha"
    ".resources.NetworkInterface.ModeR\006rxMode"
    "\022`\n\010local_id\030\003 \003(\0132E.aalyria.spacetime.a"
    "pi.nbi.v1alpha.resources.NetworkInterfac"
    "e.LocalIdR\007localId\022P\n\005wired\030\004 \001(\01328.aaly"
    "ria.spacetime.api.nbi.v1alpha.resources."
    "WiredDeviceH\000R\005wired\022Y\n\010wireless\030\006 \001(\0132;"
    ".aalyria.spacetime.api.nbi.v1alpha.resou"
    "rces.WirelessDeviceH\000R\010wireless\022\177\n\026opera"
    "tional_impairment\030\020 \003(\0132H.aalyria.spacet"
    "ime.api.nbi.v1alpha.resources.NetworkInt"
    "erface.ImpairmentR\025operationalImpairment"
    "\0323\n\007LocalId\022\022\n\004type\030\001 \001(\tR\004type\022\024\n\005index"
    "\030\002 \001(\005R\005index\032\243\002\n\nImpairment\022a\n\004type\030\001 \001"
    "(\0162M.aalyria.spacetime.api.nbi.v1alpha.r"
    "esources.NetworkInterface.Impairment.Typ"
    "eR\004type\022\025\n\006app_id\030\002 \001(\tR\005appId\022%\n\016timest"
    "amp_usec\030\003 \001(\003R\rtimestampUsec\022\026\n\006reason\030"
    "\004 \001(\tR\006reason\022.\n\007details\030\005 \001(\0132\024.google."
    "protobuf.AnyR\007details\",\n\004Type\022\024\n\020DEFAULT"
    "_UNUSABLE\020\000\022\016\n\nUNRELIABLE\020\001\",\n\004Mode\022\017\n\013P"
    "ROMISCUOUS\020\000\022\023\n\017NON_PROMISCUOUS\020\001B\022\n\020int"
    "erface_mediumJ\004\010\002\020\003J\004\010\005\020\006J\004\010\007\020\010J\004\010\t\020\016J\010\010"
    "\021\020\200\200\200\200\002\"Y\n\013WiredDevice\022)\n\021max_data_rate_"
    "bps\030\001 \001(\001R\016maxDataRateBps\022\037\n\013platform_id"
    "\030\002 \001(\tR\nplatformId\"\351\001\n\016WirelessDevice\022b\n"
    "\024transceiver_model_id\030\005 \001(\01320.aalyria.sp"
    "acetime.api.common.TransceiverModelIdR\022t"
    "ransceiverModelId\022W\n\032link_establishment_"
    "timeout\030\006 \001(\0132\031.google.protobuf.Duration"
    "R\030linkEstablishmentTimeoutJ\004\010\001\020\002J\004\010\002\020\003J\004"
    "\010\004\020\005J\010\010\007\020\200\200\200\200\002Bb\n/com.aalyria.spacetime."
    "api.nbi.v1alpha.resourcesZ/aalyria.com/s"
    "pacetime/api/nbi/v1alpha/resources"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_deps[4] =
    {
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto = {
    false,
    false,
    2874,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
    "api/nbi/v1alpha/resources/network_element.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_deps,
    4,
    10,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdnAgent_CdpiProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[0];
}
bool SdnAgent_CdpiProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SdnAgent_CdpiProtocol SdnAgent::UNKNOWN;
constexpr SdnAgent_CdpiProtocol SdnAgent::AIRFLOW;
constexpr SdnAgent_CdpiProtocol SdnAgent::CdpiProtocol_MIN;
constexpr SdnAgent_CdpiProtocol SdnAgent::CdpiProtocol_MAX;
constexpr int SdnAgent::CdpiProtocol_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkInterface_Impairment_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[1];
}
bool NetworkInterface_Impairment_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NetworkInterface_Impairment_Type NetworkInterface_Impairment::DEFAULT_UNUSABLE;
constexpr NetworkInterface_Impairment_Type NetworkInterface_Impairment::UNRELIABLE;
constexpr NetworkInterface_Impairment_Type NetworkInterface_Impairment::Type_MIN;
constexpr NetworkInterface_Impairment_Type NetworkInterface_Impairment::Type_MAX;
constexpr int NetworkInterface_Impairment::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkInterface_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[2];
}
bool NetworkInterface_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NetworkInterface_Mode NetworkInterface::PROMISCUOUS;
constexpr NetworkInterface_Mode NetworkInterface::NON_PROMISCUOUS;
constexpr NetworkInterface_Mode NetworkInterface::Mode_MIN;
constexpr NetworkInterface_Mode NetworkInterface::Mode_MAX;
constexpr int NetworkInterface::Mode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NetworkNode_SignalPowerBudget::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkNode_SignalPowerBudget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkNode_SignalPowerBudget, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const NetworkNode_SignalPowerBudget* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_available_signal_power_watts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
NetworkNode_SignalPowerBudget::_Internal::interval(const NetworkNode_SignalPowerBudget* msg) {
  return *msg->_impl_.interval_;
}
void NetworkNode_SignalPowerBudget::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NetworkNode_SignalPowerBudget::NetworkNode_SignalPowerBudget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
}
NetworkNode_SignalPowerBudget::NetworkNode_SignalPowerBudget(const NetworkNode_SignalPowerBudget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkNode_SignalPowerBudget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.available_signal_power_watts_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  _this->_impl_.available_signal_power_watts_ = from._impl_.available_signal_power_watts_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
}

inline void NetworkNode_SignalPowerBudget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.available_signal_power_watts_) { 0 }

  };
}

NetworkNode_SignalPowerBudget::~NetworkNode_SignalPowerBudget() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkNode_SignalPowerBudget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void NetworkNode_SignalPowerBudget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkNode_SignalPowerBudget::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  _impl_.available_signal_power_watts_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkNode_SignalPowerBudget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double available_signal_power_watts = 2 [json_name = "availableSignalPowerWatts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_available_signal_power_watts(&has_bits);
          _impl_.available_signal_power_watts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkNode_SignalPowerBudget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional double available_signal_power_watts = 2 [json_name = "availableSignalPowerWatts"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_available_signal_power_watts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  return target;
}

::size_t NetworkNode_SignalPowerBudget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional double available_signal_power_watts = 2 [json_name = "availableSignalPowerWatts"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkNode_SignalPowerBudget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkNode_SignalPowerBudget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkNode_SignalPowerBudget::GetClassData() const { return &_class_data_; }


void NetworkNode_SignalPowerBudget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkNode_SignalPowerBudget*>(&to_msg);
  auto& from = static_cast<const NetworkNode_SignalPowerBudget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.available_signal_power_watts_ = from._impl_.available_signal_power_watts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkNode_SignalPowerBudget::CopyFrom(const NetworkNode_SignalPowerBudget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkNode_SignalPowerBudget::IsInitialized() const {
  return true;
}

void NetworkNode_SignalPowerBudget::InternalSwap(NetworkNode_SignalPowerBudget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkNode_SignalPowerBudget, _impl_.available_signal_power_watts_)
      + sizeof(NetworkNode_SignalPowerBudget::_impl_.available_signal_power_watts_)
      - PROTOBUF_FIELD_OFFSET(NetworkNode_SignalPowerBudget, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkNode_SignalPowerBudget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[0]);
}
// ===================================================================

class NetworkNode_Storage::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkNode_Storage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkNode_Storage, _impl_._has_bits_);
  static void set_has_available_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetworkNode_Storage::NetworkNode_Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
}
NetworkNode_Storage::NetworkNode_Storage(const NetworkNode_Storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
}

inline void NetworkNode_Storage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.available_bytes_) { ::int64_t{0} }

  };
}

NetworkNode_Storage::~NetworkNode_Storage() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkNode_Storage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkNode_Storage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkNode_Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.available_bytes_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkNode_Storage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 available_bytes = 1 [json_name = "availableBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_available_bytes(&has_bits);
          _impl_.available_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkNode_Storage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 available_bytes = 1 [json_name = "availableBytes"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_available_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  return target;
}

::size_t NetworkNode_Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 available_bytes = 1 [json_name = "availableBytes"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_available_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkNode_Storage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkNode_Storage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkNode_Storage::GetClassData() const { return &_class_data_; }


void NetworkNode_Storage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkNode_Storage*>(&to_msg);
  auto& from = static_cast<const NetworkNode_Storage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_available_bytes(from._internal_available_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkNode_Storage::CopyFrom(const NetworkNode_Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkNode_Storage::IsInitialized() const {
  return true;
}

void NetworkNode_Storage::InternalSwap(NetworkNode_Storage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.available_bytes_, other->_impl_.available_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkNode_Storage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[1]);
}
// ===================================================================

class NetworkNode::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkNode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkNode, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent& agent(const NetworkNode* msg);
  static void set_has_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage& storage(const NetworkNode* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent&
NetworkNode::_Internal::agent(const NetworkNode* msg) {
  return *msg->_impl_.agent_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage&
NetworkNode::_Internal::storage(const NetworkNode* msg) {
  return *msg->_impl_.storage_;
}
NetworkNode::NetworkNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
}
NetworkNode::NetworkNode(const NetworkNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_interface_){from._impl_.node_interface_}
    , decltype(_impl_.subnet_){from._impl_.subnet_}
    , decltype(_impl_.power_budget_){from._impl_.power_budget_}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.agent_){nullptr}
    , decltype(_impl_.storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.agent_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent(*from._impl_.agent_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.storage_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage(*from._impl_.storage_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
}

inline void NetworkNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_interface_){arena}
    , decltype(_impl_.subnet_){arena}
    , decltype(_impl_.power_budget_){arena}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.agent_){nullptr}
    , decltype(_impl_.storage_){nullptr}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkNode::~NetworkNode() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_node_interface()->~RepeatedPtrField();
  _internal_mutable_subnet()->~RepeatedPtrField();
  _internal_mutable_power_budget()->~RepeatedPtrField();
  _impl_.node_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.agent_;
  if (this != internal_default_instance()) delete _impl_.storage_;
}

void NetworkNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkNode::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_node_interface()->Clear();
  _internal_mutable_subnet()->Clear();
  _internal_mutable_power_budget()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.agent_ != nullptr);
      _impl_.agent_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.storage_ != nullptr);
      _impl_.storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface node_interface = 4 [json_name = "nodeInterface"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_interface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 5 [json_name = "agent"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string type = 7 [json_name = "type"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string subnet = 8 [json_name = "subnet"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subnet();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.subnet");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget power_budget = 9 [json_name = "powerBudget"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_power_budget(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 10 [json_name = "storage"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkNode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string name = 2 [json_name = "name"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface node_interface = 4 [json_name = "nodeInterface"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_interface_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_interface(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 5 [json_name = "agent"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::agent(this),
        _Internal::agent(this).GetCachedSize(), target, stream);
  }

  // optional string type = 7 [json_name = "type"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.type");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // repeated string subnet = 8 [json_name = "subnet"];
  for (int i = 0, n = this->_internal_subnet_size(); i < n; ++i) {
    const auto& s = this->_internal_subnet(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.subnet");
    target = stream->WriteString(8, s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget power_budget = 9 [json_name = "powerBudget"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_power_budget_size()); i < n; i++) {
    const auto& repfield = this->_internal_power_budget(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 10 [json_name = "storage"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::storage(this),
        _Internal::storage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  return target;
}

::size_t NetworkNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface node_interface = 4 [json_name = "nodeInterface"];
  total_size += 1UL * this->_internal_node_interface_size();
  for (const auto& msg : this->_internal_node_interface()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string subnet = 8 [json_name = "subnet"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_subnet().size());
  for (int i = 0, n = _internal_subnet().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_subnet().Get(i));
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.SignalPowerBudget power_budget = 9 [json_name = "powerBudget"];
  total_size += 1UL * this->_internal_power_budget_size();
  for (const auto& msg : this->_internal_power_budget()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional string name = 2 [json_name = "name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string type = 7 [json_name = "type"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 5 [json_name = "agent"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.agent_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 10 [json_name = "storage"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.storage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkNode::GetClassData() const { return &_class_data_; }


void NetworkNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkNode*>(&to_msg);
  auto& from = static_cast<const NetworkNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_node_interface()->MergeFrom(from._internal_node_interface());
  _this->_internal_mutable_subnet()->MergeFrom(from._internal_subnet());
  _this->_internal_mutable_power_budget()->MergeFrom(from._internal_power_budget());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_agent()->::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent::MergeFrom(
          from._internal_agent());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_storage()->::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage::MergeFrom(
          from._internal_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkNode::CopyFrom(const NetworkNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkNode::IsInitialized() const {
  return true;
}

void NetworkNode::InternalSwap(NetworkNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_node_interface()->InternalSwap(other->_internal_mutable_node_interface());
  _internal_mutable_subnet()->InternalSwap(
      other->_internal_mutable_subnet());
  _internal_mutable_power_budget()->InternalSwap(other->_internal_mutable_power_budget());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkNode, _impl_.storage_)
      + sizeof(NetworkNode::_impl_.storage_)
      - PROTOBUF_FIELD_OFFSET(NetworkNode, _impl_.agent_)>(
          reinterpret_cast<char*>(&_impl_.agent_),
          reinterpret_cast<char*>(&other->_impl_.agent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[2]);
}
// ===================================================================

SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse() {}
SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::MergeFrom(const SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[3]);
}
// ===================================================================

class SdnAgent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdnAgent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdnAgent, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_google_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SdnAgent::clear_maximum_control_plane_latency() {
  _impl_.maximum_control_plane_latency_.Clear();
}
SdnAgent::SdnAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
}
SdnAgent::SdnAgent(const SdnAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SdnAgent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.maximum_control_plane_latency_)*/{}
    , decltype(_impl_.google_user_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.maximum_control_plane_latency_.MergeFrom(from._impl_.maximum_control_plane_latency_);
  _impl_.google_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.google_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.google_user_id_.Set(from._internal_google_user_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
}

inline void SdnAgent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.maximum_control_plane_latency_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.google_user_id_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.google_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.google_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SdnAgent::~SdnAgent() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdnAgent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maximum_control_plane_latency_.~MapField();
  _impl_.google_user_id_.Destroy();
}

void SdnAgent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdnAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maximum_control_plane_latency_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.google_user_id_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdnAgent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent.CdpiProtocol type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_CdpiProtocol_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_CdpiProtocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string google_user_id = 2 [json_name = "googleUserId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_google_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent.google_user_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint32, .google.protobuf.Duration> maximum_control_plane_latency = 3 [json_name = "maximumControlPlaneLatency"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.maximum_control_plane_latency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdnAgent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent.CdpiProtocol type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string google_user_id = 2 [json_name = "googleUserId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_google_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent.google_user_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // map<uint32, .google.protobuf.Duration> maximum_control_plane_latency = 3 [json_name = "maximumControlPlaneLatency"];
  if (!this->_internal_maximum_control_plane_latency().empty()) {
    using MapType = ::_pb::Map<::uint32_t, ::PROTOBUF_NAMESPACE_ID::Duration>;
    using WireHelper = SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_maximum_control_plane_latency();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  return target;
}

::size_t SdnAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .google.protobuf.Duration> maximum_control_plane_latency = 3 [json_name = "maximumControlPlaneLatency"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maximum_control_plane_latency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, ::PROTOBUF_NAMESPACE_ID::Duration >::const_iterator
      it = this->_internal_maximum_control_plane_latency().begin();
      it != this->_internal_maximum_control_plane_latency().end(); ++it) {
    total_size += SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string google_user_id = 2 [json_name = "googleUserId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_google_user_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent.CdpiProtocol type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdnAgent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdnAgent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdnAgent::GetClassData() const { return &_class_data_; }


void SdnAgent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdnAgent*>(&to_msg);
  auto& from = static_cast<const SdnAgent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maximum_control_plane_latency_.MergeFrom(from._impl_.maximum_control_plane_latency_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_google_user_id(from._internal_google_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdnAgent::CopyFrom(const SdnAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdnAgent::IsInitialized() const {
  return true;
}

void SdnAgent::InternalSwap(SdnAgent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.maximum_control_plane_latency_.InternalSwap(&other->_impl_.maximum_control_plane_latency_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.google_user_id_, lhs_arena,
                                       &other->_impl_.google_user_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SdnAgent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[4]);
}
// ===================================================================

class NetworkInterface_LocalId::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterface_LocalId>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkInterface_LocalId, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NetworkInterface_LocalId::NetworkInterface_LocalId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
}
NetworkInterface_LocalId::NetworkInterface_LocalId(const NetworkInterface_LocalId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkInterface_LocalId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
}

inline void NetworkInterface_LocalId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.index_) { 0 }

  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkInterface_LocalId::~NetworkInterface_LocalId() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInterface_LocalId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void NetworkInterface_LocalId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkInterface_LocalId::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_.ClearNonDefaultToEmpty();
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkInterface_LocalId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 index = 2 [json_name = "index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkInterface_LocalId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 index = 2 [json_name = "index"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  return target;
}

::size_t NetworkInterface_LocalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional int32 index = 2 [json_name = "index"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkInterface_LocalId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkInterface_LocalId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkInterface_LocalId::GetClassData() const { return &_class_data_; }


void NetworkInterface_LocalId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkInterface_LocalId*>(&to_msg);
  auto& from = static_cast<const NetworkInterface_LocalId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkInterface_LocalId::CopyFrom(const NetworkInterface_LocalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface_LocalId::IsInitialized() const {
  return true;
}

void NetworkInterface_LocalId::InternalSwap(NetworkInterface_LocalId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);

  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInterface_LocalId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[5]);
}
// ===================================================================

class NetworkInterface_Impairment::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterface_Impairment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkInterface_Impairment, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& details(const NetworkInterface_Impairment* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
NetworkInterface_Impairment::_Internal::details(const NetworkInterface_Impairment* msg) {
  return *msg->_impl_.details_;
}
void NetworkInterface_Impairment::clear_details() {
  if (_impl_.details_ != nullptr) _impl_.details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
NetworkInterface_Impairment::NetworkInterface_Impairment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
}
NetworkInterface_Impairment::NetworkInterface_Impairment(const NetworkInterface_Impairment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkInterface_Impairment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.timestamp_usec_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.details_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.details_);
  }
  ::memcpy(&_impl_.timestamp_usec_, &from._impl_.timestamp_usec_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_usec_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
}

inline void NetworkInterface_Impairment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.timestamp_usec_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkInterface_Impairment::~NetworkInterface_Impairment() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInterface_Impairment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.details_;
}

void NetworkInterface_Impairment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkInterface_Impairment::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.details_ != nullptr);
      _impl_.details_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_usec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_usec_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkInterface_Impairment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.Type type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string app_id = 2 [json_name = "appId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.app_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          _impl_.timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string reason = 4 [json_name = "reason"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.reason");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Any details = 5 [json_name = "details"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkInterface_Impairment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.Type type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string app_id = 2 [json_name = "appId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_app_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.app_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_timestamp_usec(), target);
  }

  // optional string reason = 4 [json_name = "reason"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_reason();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.reason");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .google.protobuf.Any details = 5 [json_name = "details"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  return target;
}

::size_t NetworkInterface_Impairment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string app_id = 2 [json_name = "appId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_app_id());
    }

    // optional string reason = 4 [json_name = "reason"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_reason());
    }

    // optional .google.protobuf.Any details = 5 [json_name = "details"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional int64 timestamp_usec = 3 [json_name = "timestampUsec"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_usec());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment.Type type = 1 [json_name = "type"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkInterface_Impairment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkInterface_Impairment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkInterface_Impairment::GetClassData() const { return &_class_data_; }


void NetworkInterface_Impairment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkInterface_Impairment*>(&to_msg);
  auto& from = static_cast<const NetworkInterface_Impairment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_id(from._internal_app_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_details()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_usec_ = from._impl_.timestamp_usec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkInterface_Impairment::CopyFrom(const NetworkInterface_Impairment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface_Impairment::IsInitialized() const {
  return true;
}

void NetworkInterface_Impairment::InternalSwap(NetworkInterface_Impairment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_id_, lhs_arena,
                                       &other->_impl_.app_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkInterface_Impairment, _impl_.type_)
      + sizeof(NetworkInterface_Impairment::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(NetworkInterface_Impairment, _impl_.details_)>(
          reinterpret_cast<char*>(&_impl_.details_),
          reinterpret_cast<char*>(&other->_impl_.details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInterface_Impairment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[6]);
}
// ===================================================================

class NetworkInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterface>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkInterface, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface, _impl_._oneof_case_);
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ethernet_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rx_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice& wired(const NetworkInterface* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice& wireless(const NetworkInterface* msg);
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice&
NetworkInterface::_Internal::wired(const NetworkInterface* msg) {
  return *msg->_impl_.interface_medium_.wired_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice&
NetworkInterface::_Internal::wireless(const NetworkInterface* msg) {
  return *msg->_impl_.interface_medium_.wireless_;
}
void NetworkInterface::set_allocated_wired(::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice* wired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interface_medium();
  if (wired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wired);
    if (message_arena != submessage_arena) {
      wired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wired, submessage_arena);
    }
    set_has_wired();
    _impl_.interface_medium_.wired_ = wired;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.wired)
}
void NetworkInterface::set_allocated_wireless(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice* wireless) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interface_medium();
  if (wireless) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wireless);
    if (message_arena != submessage_arena) {
      wireless = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wireless, submessage_arena);
    }
    set_has_wireless();
    _impl_.interface_medium_.wireless_ = wireless;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.wireless)
}
NetworkInterface::NetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
}
NetworkInterface::NetworkInterface(const NetworkInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){from._impl_.local_id_}
    , decltype(_impl_.operational_impairment_){from._impl_.operational_impairment_}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.ip_address_) {}

    , decltype(_impl_.ethernet_address_) {}

    , decltype(_impl_.rx_mode_) {}

    , decltype(_impl_.interface_medium_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), _this->GetArenaForAllocation());
  }
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), _this->GetArenaForAllocation());
  }
  _impl_.ethernet_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethernet_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ethernet_address_.Set(from._internal_ethernet_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.rx_mode_ = from._impl_.rx_mode_;
  clear_has_interface_medium();
  switch (from.interface_medium_case()) {
    case kWired: {
      _this->_internal_mutable_wired()->::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice::MergeFrom(
          from._internal_wired());
      break;
    }
    case kWireless: {
      _this->_internal_mutable_wireless()->::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice::MergeFrom(
          from._internal_wireless());
      break;
    }
    case INTERFACE_MEDIUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
}

inline void NetworkInterface::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_id_){arena}
    , decltype(_impl_.operational_impairment_){arena}
    , decltype(_impl_.interface_id_) {}

    , decltype(_impl_.ip_address_) {}

    , decltype(_impl_.ethernet_address_) {}

    , decltype(_impl_.rx_mode_) { 0 }

    , decltype(_impl_.interface_medium_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ethernet_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethernet_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_interface_medium();
}

NetworkInterface::~NetworkInterface() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInterface::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_local_id()->~RepeatedPtrField();
  _internal_mutable_operational_impairment()->~RepeatedPtrField();
  _impl_.interface_id_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.ethernet_address_.Destroy();
  if (has_interface_medium()) {
    clear_interface_medium();
  }
}

void NetworkInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkInterface::clear_interface_medium() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  switch (interface_medium_case()) {
    case kWired: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interface_medium_.wired_;
      }
      break;
    }
    case kWireless: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interface_medium_.wireless_;
      }
      break;
    }
    case INTERFACE_MEDIUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTERFACE_MEDIUM_NOT_SET;
}


void NetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_local_id()->Clear();
  _internal_mutable_operational_impairment()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interface_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ip_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ethernet_address_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.rx_mode_ = 0;
  clear_interface_medium();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_id = 1 [json_name = "interfaceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId local_id = 3 [json_name = "localId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice wired = 4 [json_name = "wired"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_wired(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice wireless = 6 [json_name = "wireless"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wireless(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Mode rx_mode = 8 [json_name = "rxMode"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Mode_IsValid(static_cast<int>(val)))) {
            _internal_set_rx_mode(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string ip_address = 14 [json_name = "ipAddress"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.ip_address");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string ethernet_address = 15 [json_name = "ethernetAddress"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_ethernet_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.ethernet_address");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment operational_impairment = 16 [json_name = "operationalImpairment"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_operational_impairment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkInterface::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string interface_id = 1 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.interface_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId local_id = 3 [json_name = "localId"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  switch (interface_medium_case()) {
    case kWired: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::wired(this),
          _Internal::wired(this).GetCachedSize(), target, stream);
      break;
    }
    case kWireless: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::wireless(this),
          _Internal::wireless(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Mode rx_mode = 8 [json_name = "rxMode"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_rx_mode(), target);
  }

  // optional string ip_address = 14 [json_name = "ipAddress"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_ip_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.ip_address");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional string ethernet_address = 15 [json_name = "ethernetAddress"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_ethernet_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.ethernet_address");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment operational_impairment = 16 [json_name = "operationalImpairment"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operational_impairment_size()); i < n; i++) {
    const auto& repfield = this->_internal_operational_impairment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  return target;
}

::size_t NetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.LocalId local_id = 3 [json_name = "localId"];
  total_size += 1UL * this->_internal_local_id_size();
  for (const auto& msg : this->_internal_local_id()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Impairment operational_impairment = 16 [json_name = "operationalImpairment"];
  total_size += 2UL * this->_internal_operational_impairment_size();
  for (const auto& msg : this->_internal_operational_impairment()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string interface_id = 1 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_interface_id());
    }

    // optional string ip_address = 14 [json_name = "ipAddress"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_ip_address());
    }

    // optional string ethernet_address = 15 [json_name = "ethernetAddress"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_ethernet_address());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface.Mode rx_mode = 8 [json_name = "rxMode"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_rx_mode());
    }

  }
  switch (interface_medium_case()) {
    // .aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice wired = 4 [json_name = "wired"];
    case kWired: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interface_medium_.wired_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice wireless = 6 [json_name = "wireless"];
    case kWireless: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interface_medium_.wireless_);
      break;
    }
    case INTERFACE_MEDIUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkInterface::GetClassData() const { return &_class_data_; }


void NetworkInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkInterface*>(&to_msg);
  auto& from = static_cast<const NetworkInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_local_id()->MergeFrom(from._internal_local_id());
  _this->_internal_mutable_operational_impairment()->MergeFrom(from._internal_operational_impairment());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface_id(from._internal_interface_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ip_address(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ethernet_address(from._internal_ethernet_address());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rx_mode_ = from._impl_.rx_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.interface_medium_case()) {
    case kWired: {
      _this->_internal_mutable_wired()->::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice::MergeFrom(
          from._internal_wired());
      break;
    }
    case kWireless: {
      _this->_internal_mutable_wireless()->::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice::MergeFrom(
          from._internal_wireless());
      break;
    }
    case INTERFACE_MEDIUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkInterface::CopyFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const {
  return true;
}

void NetworkInterface::InternalSwap(NetworkInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_local_id()->InternalSwap(other->_internal_mutable_local_id());
  _internal_mutable_operational_impairment()->InternalSwap(other->_internal_mutable_operational_impairment());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_id_, lhs_arena,
                                       &other->_impl_.interface_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, lhs_arena,
                                       &other->_impl_.ip_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ethernet_address_, lhs_arena,
                                       &other->_impl_.ethernet_address_, rhs_arena);
  swap(_impl_.rx_mode_, other->_impl_.rx_mode_);
  swap(_impl_.interface_medium_, other->_impl_.interface_medium_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[7]);
}
// ===================================================================

class WiredDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<WiredDevice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WiredDevice, _impl_._has_bits_);
  static void set_has_max_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WiredDevice::WiredDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
}
WiredDevice::WiredDevice(const WiredDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WiredDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.platform_id_) {}

    , decltype(_impl_.max_data_rate_bps_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.platform_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.platform_id_.Set(from._internal_platform_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.max_data_rate_bps_ = from._impl_.max_data_rate_bps_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
}

inline void WiredDevice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.platform_id_) {}

    , decltype(_impl_.max_data_rate_bps_) { 0 }

  };
  _impl_.platform_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.platform_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WiredDevice::~WiredDevice() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WiredDevice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.platform_id_.Destroy();
}

void WiredDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WiredDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.platform_id_.ClearNonDefaultToEmpty();
  }
  _impl_.max_data_rate_bps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WiredDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_data_rate_bps = 1 [json_name = "maxDataRateBps"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_max_data_rate_bps(&has_bits);
          _impl_.max_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string platform_id = 2 [json_name = "platformId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_platform_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice.platform_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WiredDevice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_data_rate_bps = 1 [json_name = "maxDataRateBps"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_max_data_rate_bps(), target);
  }

  // optional string platform_id = 2 [json_name = "platformId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_platform_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice.platform_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  return target;
}

::size_t WiredDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string platform_id = 2 [json_name = "platformId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_platform_id());
    }

    // optional double max_data_rate_bps = 1 [json_name = "maxDataRateBps"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WiredDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WiredDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WiredDevice::GetClassData() const { return &_class_data_; }


void WiredDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WiredDevice*>(&to_msg);
  auto& from = static_cast<const WiredDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_platform_id(from._internal_platform_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_data_rate_bps_ = from._impl_.max_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WiredDevice::CopyFrom(const WiredDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WiredDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiredDevice::IsInitialized() const {
  return true;
}

void WiredDevice::InternalSwap(WiredDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_id_, lhs_arena,
                                       &other->_impl_.platform_id_, rhs_arena);

  swap(_impl_.max_data_rate_bps_, other->_impl_.max_data_rate_bps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WiredDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[8]);
}
// ===================================================================

class WirelessDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessDevice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessDevice, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TransceiverModelId& transceiver_model_id(const WirelessDevice* msg);
  static void set_has_transceiver_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& link_establishment_timeout(const WirelessDevice* msg);
  static void set_has_link_establishment_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::TransceiverModelId&
WirelessDevice::_Internal::transceiver_model_id(const WirelessDevice* msg) {
  return *msg->_impl_.transceiver_model_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
WirelessDevice::_Internal::link_establishment_timeout(const WirelessDevice* msg) {
  return *msg->_impl_.link_establishment_timeout_;
}
void WirelessDevice::clear_transceiver_model_id() {
  if (_impl_.transceiver_model_id_ != nullptr) _impl_.transceiver_model_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WirelessDevice::clear_link_establishment_timeout() {
  if (_impl_.link_establishment_timeout_ != nullptr) _impl_.link_establishment_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WirelessDevice::WirelessDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
}
WirelessDevice::WirelessDevice(const WirelessDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_model_id_){nullptr}
    , decltype(_impl_.link_establishment_timeout_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transceiver_model_id_ = new ::aalyria::spacetime::api::common::TransceiverModelId(*from._impl_.transceiver_model_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.link_establishment_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.link_establishment_timeout_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
}

inline void WirelessDevice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_model_id_){nullptr}
    , decltype(_impl_.link_establishment_timeout_){nullptr}
  };
}

WirelessDevice::~WirelessDevice() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessDevice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transceiver_model_id_;
  if (this != internal_default_instance()) delete _impl_.link_establishment_timeout_;
}

void WirelessDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transceiver_model_id_ != nullptr);
      _impl_.transceiver_model_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.link_establishment_timeout_ != nullptr);
      _impl_.link_establishment_timeout_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TransceiverModelId transceiver_model_id = 5 [json_name = "transceiverModelId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transceiver_model_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Duration link_establishment_timeout = 6 [json_name = "linkEstablishmentTimeout"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_establishment_timeout(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessDevice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TransceiverModelId transceiver_model_id = 5 [json_name = "transceiverModelId"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::transceiver_model_id(this),
        _Internal::transceiver_model_id(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration link_establishment_timeout = 6 [json_name = "linkEstablishmentTimeout"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::link_establishment_timeout(this),
        _Internal::link_establishment_timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  return target;
}

::size_t WirelessDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.TransceiverModelId transceiver_model_id = 5 [json_name = "transceiverModelId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transceiver_model_id_);
    }

    // optional .google.protobuf.Duration link_establishment_timeout = 6 [json_name = "linkEstablishmentTimeout"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.link_establishment_timeout_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessDevice::GetClassData() const { return &_class_data_; }


void WirelessDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessDevice*>(&to_msg);
  auto& from = static_cast<const WirelessDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transceiver_model_id()->::aalyria::spacetime::api::common::TransceiverModelId::MergeFrom(
          from._internal_transceiver_model_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_link_establishment_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_link_establishment_timeout());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessDevice::CopyFrom(const WirelessDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessDevice::IsInitialized() const {
  return true;
}

void WirelessDevice::InternalSwap(WirelessDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WirelessDevice, _impl_.link_establishment_timeout_)
      + sizeof(WirelessDevice::_impl_.link_establishment_timeout_)
      - PROTOBUF_FIELD_OFFSET(WirelessDevice, _impl_.transceiver_model_id_)>(
          reinterpret_cast<char*>(&_impl_.transceiver_model_id_),
          reinterpret_cast<char*>(&other->_impl_.transceiver_model_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_SignalPowerBudget >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent_MaximumControlPlaneLatencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_LocalId >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface_Impairment >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WiredDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessDevice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/wireless_evaluation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/common/coordinates.pb.h"
#include "api/common/wireless_transceiver.pb.h"
#include "api/nbi/v1alpha/resources/coverage.pb.h"
#include "api/nbi/v1alpha/resources/network_link.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/type/interval.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
class AccessInterval;
struct AccessIntervalDefaultTypeInternal;
extern AccessIntervalDefaultTypeInternal _AccessInterval_default_instance_;
class NoAccessReason;
struct NoAccessReasonDefaultTypeInternal;
extern NoAccessReasonDefaultTypeInternal _NoAccessReason_default_instance_;
class SpatialPropagation;
struct SpatialPropagationDefaultTypeInternal;
extern SpatialPropagationDefaultTypeInternal _SpatialPropagation_default_instance_;
class TransceiverProvider;
struct TransceiverProviderDefaultTypeInternal;
extern TransceiverProviderDefaultTypeInternal _TransceiverProvider_default_instance_;
class TransceiverWithMotion;
struct TransceiverWithMotionDefaultTypeInternal;
extern TransceiverWithMotionDefaultTypeInternal _TransceiverWithMotion_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AccessInterval>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverProvider>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
enum NoAccessReason_Constraint : int {
  NoAccessReason_Constraint_UNKNOWN_CONSTRAINT = 1,
  NoAccessReason_Constraint_SEPARATION_FROM_AZ_EL_MASK = 2,
  NoAccessReason_Constraint_LINK_RANGE = 3,
  NoAccessReason_Constraint_FIELD_OF_VIEW_OR_REGARD = 4,
  NoAccessReason_Constraint_SUN_EXCLUSION = 5,
  NoAccessReason_Constraint_PLATFORM_OBSTRUCTION = 6,
  NoAccessReason_Constraint_TERRAIN_OBSTRUCTION = 7,
  NoAccessReason_Constraint_RECEIVER_CNR_TOO_LOW = 8,
  NoAccessReason_Constraint_NO_LINE_OF_SIGHT = 9,
};

bool NoAccessReason_Constraint_IsValid(int value);
constexpr NoAccessReason_Constraint NoAccessReason_Constraint_Constraint_MIN = static_cast<NoAccessReason_Constraint>(1);
constexpr NoAccessReason_Constraint NoAccessReason_Constraint_Constraint_MAX = static_cast<NoAccessReason_Constraint>(9);
constexpr int NoAccessReason_Constraint_Constraint_ARRAYSIZE = 9 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
NoAccessReason_Constraint_descriptor();
template <typename T>
const std::string& NoAccessReason_Constraint_Name(T value) {
  static_assert(std::is_same<T, NoAccessReason_Constraint>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Constraint_Name().");
  return NoAccessReason_Constraint_Name(static_cast<NoAccessReason_Constraint>(value));
}
template <>
inline const std::string& NoAccessReason_Constraint_Name(NoAccessReason_Constraint value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<NoAccessReason_Constraint_descriptor,
                                                 1, 9>(
      static_cast<int>(value));
}
inline bool NoAccessReason_Constraint_Parse(absl::string_view name, NoAccessReason_Constraint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NoAccessReason_Constraint>(
      NoAccessReason_Constraint_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TransceiverWithMotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion) */ {
 public:
  inline TransceiverWithMotion() : TransceiverWithMotion(nullptr) {}
  ~TransceiverWithMotion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransceiverWithMotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransceiverWithMotion(const TransceiverWithMotion& from);
  TransceiverWithMotion(TransceiverWithMotion&& from) noexcept
    : TransceiverWithMotion() {
    *this = ::std::move(from);
  }

  inline TransceiverWithMotion& operator=(const TransceiverWithMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiverWithMotion& operator=(TransceiverWithMotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransceiverWithMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransceiverWithMotion* internal_default_instance() {
    return reinterpret_cast<const TransceiverWithMotion*>(
               &_TransceiverWithMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransceiverWithMotion& a, TransceiverWithMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiverWithMotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransceiverWithMotion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransceiverWithMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransceiverWithMotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransceiverWithMotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransceiverWithMotion& from) {
    TransceiverWithMotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiverWithMotion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion";
  }
  protected:
  explicit TransceiverWithMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kMotionFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.common.TransceiverModel model = 1 [json_name = "model"];
  bool has_model() const;
  void clear_model() ;
  const ::aalyria::spacetime::api::common::TransceiverModel& model() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TransceiverModel* release_model();
  ::aalyria::spacetime::api::common::TransceiverModel* mutable_model();
  void set_allocated_model(::aalyria::spacetime::api::common::TransceiverModel* model);
  private:
  const ::aalyria::spacetime::api::common::TransceiverModel& _internal_model() const;
  ::aalyria::spacetime::api::common::TransceiverModel* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::aalyria::spacetime::api::common::TransceiverModel* model);
  ::aalyria::spacetime::api::common::TransceiverModel* unsafe_arena_release_model();
  // optional .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
  bool has_motion() const;
  void clear_motion() ;
  const ::aalyria::spacetime::api::common::Motion& motion() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::Motion* release_motion();
  ::aalyria::spacetime::api::common::Motion* mutable_motion();
  void set_allocated_motion(::aalyria::spacetime::api::common::Motion* motion);
  private:
  const ::aalyria::spacetime::api::common::Motion& _internal_motion() const;
  ::aalyria::spacetime::api::common::Motion* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::aalyria::spacetime::api::common::Motion* motion);
  ::aalyria::spacetime::api::common::Motion* unsafe_arena_release_motion();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::TransceiverModel* model_;
    ::aalyria::spacetime::api::common::Motion* motion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
};// -------------------------------------------------------------------

class TransceiverProvider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider) */ {
 public:
  inline TransceiverProvider() : TransceiverProvider(nullptr) {}
  ~TransceiverProvider() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransceiverProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransceiverProvider(const TransceiverProvider& from);
  TransceiverProvider(TransceiverProvider&& from) noexcept
    : TransceiverProvider() {
    *this = ::std::move(from);
  }

  inline TransceiverProvider& operator=(const TransceiverProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiverProvider& operator=(TransceiverProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransceiverProvider& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kIdInStore = 1,
    kDefinition = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const TransceiverProvider* internal_default_instance() {
    return reinterpret_cast<const TransceiverProvider*>(
               &_TransceiverProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransceiverProvider& a, TransceiverProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiverProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransceiverProvider* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransceiverProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransceiverProvider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransceiverProvider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransceiverProvider& from) {
    TransceiverProvider::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiverProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider";
  }
  protected:
  explicit TransceiverProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdInStoreFieldNumber = 1,
    kDefinitionFieldNumber = 2,
  };
  // .aalyria.spacetime.api.common.TransceiverModelId id_in_store = 1 [json_name = "idInStore"];
  bool has_id_in_store() const;
  private:
  bool _internal_has_id_in_store() const;

  public:
  void clear_id_in_store() ;
  const ::aalyria::spacetime::api::common::TransceiverModelId& id_in_store() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TransceiverModelId* release_id_in_store();
  ::aalyria::spacetime::api::common::TransceiverModelId* mutable_id_in_store();
  void set_allocated_id_in_store(::aalyria::spacetime::api::common::TransceiverModelId* id_in_store);
  private:
  const ::aalyria::spacetime::api::common::TransceiverModelId& _internal_id_in_store() const;
  ::aalyria::spacetime::api::common::TransceiverModelId* _internal_mutable_id_in_store();
  public:
  void unsafe_arena_set_allocated_id_in_store(
      ::aalyria::spacetime::api::common::TransceiverModelId* id_in_store);
  ::aalyria::spacetime::api::common::TransceiverModelId* unsafe_arena_release_id_in_store();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion definition = 2 [json_name = "definition"];
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;

  public:
  void clear_definition() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion& definition() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* release_definition();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* mutable_definition();
  void set_allocated_definition(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* definition);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion& _internal_definition() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* definition);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* unsafe_arena_release_definition();
  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider)
 private:
  class _Internal;
  void set_has_id_in_store();
  void set_has_definition();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::common::TransceiverModelId* id_in_store_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* definition_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
};// -------------------------------------------------------------------

class NoAccessReason final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason) */ {
 public:
  inline NoAccessReason() : NoAccessReason(nullptr) {}
  ~NoAccessReason() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NoAccessReason(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoAccessReason(const NoAccessReason& from);
  NoAccessReason(NoAccessReason&& from) noexcept
    : NoAccessReason() {
    *this = ::std::move(from);
  }

  inline NoAccessReason& operator=(const NoAccessReason& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoAccessReason& operator=(NoAccessReason&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoAccessReason& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoAccessReason* internal_default_instance() {
    return reinterpret_cast<const NoAccessReason*>(
               &_NoAccessReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NoAccessReason& a, NoAccessReason& b) {
    a.Swap(&b);
  }
  inline void Swap(NoAccessReason* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoAccessReason* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoAccessReason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoAccessReason>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoAccessReason& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoAccessReason& from) {
    NoAccessReason::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoAccessReason* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason";
  }
  protected:
  explicit NoAccessReason(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Constraint = NoAccessReason_Constraint;
  static constexpr Constraint UNKNOWN_CONSTRAINT = NoAccessReason_Constraint_UNKNOWN_CONSTRAINT;
  static constexpr Constraint SEPARATION_FROM_AZ_EL_MASK = NoAccessReason_Constraint_SEPARATION_FROM_AZ_EL_MASK;
  static constexpr Constraint LINK_RANGE = NoAccessReason_Constraint_LINK_RANGE;
  static constexpr Constraint FIELD_OF_VIEW_OR_REGARD = NoAccessReason_Constraint_FIELD_OF_VIEW_OR_REGARD;
  static constexpr Constraint SUN_EXCLUSION = NoAccessReason_Constraint_SUN_EXCLUSION;
  static constexpr Constraint PLATFORM_OBSTRUCTION = NoAccessReason_Constraint_PLATFORM_OBSTRUCTION;
  static constexpr Constraint TERRAIN_OBSTRUCTION = NoAccessReason_Constraint_TERRAIN_OBSTRUCTION;
  static constexpr Constraint RECEIVER_CNR_TOO_LOW = NoAccessReason_Constraint_RECEIVER_CNR_TOO_LOW;
  static constexpr Constraint NO_LINE_OF_SIGHT = NoAccessReason_Constraint_NO_LINE_OF_SIGHT;
  static inline bool Constraint_IsValid(int value) {
    return NoAccessReason_Constraint_IsValid(value);
  }
  static constexpr Constraint Constraint_MIN = NoAccessReason_Constraint_Constraint_MIN;
  static constexpr Constraint Constraint_MAX = NoAccessReason_Constraint_Constraint_MAX;
  static constexpr int Constraint_ARRAYSIZE = NoAccessReason_Constraint_Constraint_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constraint_descriptor() {
    return NoAccessReason_Constraint_descriptor();
  }
  template <typename T>
  static inline const std::string& Constraint_Name(T value) {
    return NoAccessReason_Constraint_Name(value);
  }
  static inline bool Constraint_Parse(absl::string_view name, Constraint* value) {
    return NoAccessReason_Constraint_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransceiverLinkEndFieldNumber = 2,
    kConstraintFieldNumber = 1,
  };
  // optional .aalyria.spacetime.api.common.TransceiverModelId transceiver_link_end = 2 [json_name = "transceiverLinkEnd"];
  bool has_transceiver_link_end() const;
  void clear_transceiver_link_end() ;
  const ::aalyria::spacetime::api::common::TransceiverModelId& transceiver_link_end() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TransceiverModelId* release_transceiver_link_end();
  ::aalyria::spacetime::api::common::TransceiverModelId* mutable_transceiver_link_end();
  void set_allocated_transceiver_link_end(::aalyria::spacetime::api::common::TransceiverModelId* transceiver_link_end);
  private:
  const ::aalyria::spacetime::api::common::TransceiverModelId& _internal_transceiver_link_end() const;
  ::aalyria::spacetime::api::common::TransceiverModelId* _internal_mutable_transceiver_link_end();
  public:
  void unsafe_arena_set_allocated_transceiver_link_end(
      ::aalyria::spacetime::api::common::TransceiverModelId* transceiver_link_end);
  ::aalyria::spacetime::api::common::TransceiverModelId* unsafe_arena_release_transceiver_link_end();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.Constraint constraint = 1 [json_name = "constraint"];
  bool has_constraint() const;
  void clear_constraint() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint constraint() const;
  void set_constraint(::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint value);

  private:
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint _internal_constraint() const;
  void _internal_set_constraint(::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::common::TransceiverModelId* transceiver_link_end_;
    int constraint_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
};// -------------------------------------------------------------------

class AccessInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval) */ {
 public:
  inline AccessInterval() : AccessInterval(nullptr) {}
  ~AccessInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccessInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessInterval(const AccessInterval& from);
  AccessInterval(AccessInterval&& from) noexcept
    : AccessInterval() {
    *this = ::std::move(from);
  }

  inline AccessInterval& operator=(const AccessInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessInterval& operator=(AccessInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessInterval* internal_default_instance() {
    return reinterpret_cast<const AccessInterval*>(
               &_AccessInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccessInterval& a, AccessInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccessInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccessInterval& from) {
    AccessInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval";
  }
  protected:
  explicit AccessInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoAccessReasonFieldNumber = 3,
    kPropagationOverTimeFieldNumber = 4,
    kIntervalFieldNumber = 1,
    kAccessibilityFieldNumber = 2,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason no_access_reason = 3 [json_name = "noAccessReason"];
  int no_access_reason_size() const;
  private:
  int _internal_no_access_reason_size() const;

  public:
  void clear_no_access_reason() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* mutable_no_access_reason(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason >*
      mutable_no_access_reason();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason& _internal_no_access_reason(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* _internal_add_no_access_reason();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason>& _internal_no_access_reason() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason>* _internal_mutable_no_access_reason();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason& no_access_reason(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* add_no_access_reason();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason >&
      no_access_reason() const;
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation propagation_over_time = 4 [json_name = "propagationOverTime"];
  int propagation_over_time_size() const;
  private:
  int _internal_propagation_over_time_size() const;

  public:
  void clear_propagation_over_time() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* mutable_propagation_over_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation >*
      mutable_propagation_over_time();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation& _internal_propagation_over_time(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* _internal_add_propagation_over_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation>& _internal_propagation_over_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation>* _internal_mutable_propagation_over_time();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation& propagation_over_time(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* add_propagation_over_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation >&
      propagation_over_time() const;
  // optional .google.type.Interval interval = 1 [json_name = "interval"];
  bool has_interval() const;
  void clear_interval() ;
  const ::google::type::Interval& interval() const;
  PROTOBUF_NODISCARD ::google::type::Interval* release_interval();
  ::google::type::Interval* mutable_interval();
  void set_allocated_interval(::google::type::Interval* interval);
  private:
  const ::google::type::Interval& _internal_interval() const;
  ::google::type::Interval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::google::type::Interval* interval);
  ::google::type::Interval* unsafe_arena_release_interval();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
  bool has_accessibility() const;
  void clear_accessibility() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility accessibility() const;
  void set_accessibility(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility value);

  private:
  ::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility _internal_accessibility() const;
  void _internal_set_accessibility(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason > no_access_reason_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation > propagation_over_time_;
    ::google::type::Interval* interval_;
    int accessibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
};// -------------------------------------------------------------------

class SpatialPropagation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation) */ {
 public:
  inline SpatialPropagation() : SpatialPropagation(nullptr) {}
  ~SpatialPropagation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpatialPropagation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialPropagation(const SpatialPropagation& from);
  SpatialPropagation(SpatialPropagation&& from) noexcept
    : SpatialPropagation() {
    *this = ::std::move(from);
  }

  inline SpatialPropagation& operator=(const SpatialPropagation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialPropagation& operator=(SpatialPropagation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialPropagation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialPropagation* internal_default_instance() {
    return reinterpret_cast<const SpatialPropagation*>(
               &_SpatialPropagation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpatialPropagation& a, SpatialPropagation& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialPropagation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialPropagation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialPropagation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialPropagation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialPropagation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialPropagation& from) {
    SpatialPropagation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialPropagation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation";
  }
  protected:
  explicit SpatialPropagation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kReceptionFieldNumber = 2,
    kPointingVectorFieldNumber = 3,
    kPropagationDelayFieldNumber = 5,
    kCoverageFieldNumber = 6,
    kRangeMFieldNumber = 4,
  };
  // optional .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp"];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget reception = 2 [json_name = "reception"];
  bool has_reception() const;
  void clear_reception() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget& reception() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* release_reception();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* mutable_reception();
  void set_allocated_reception(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* reception);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget& _internal_reception() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* _internal_mutable_reception();
  public:
  void unsafe_arena_set_allocated_reception(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* reception);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* unsafe_arena_release_reception();
  // optional .aalyria.spacetime.api.common.PointingVector pointing_vector = 3 [json_name = "pointingVector"];
  bool has_pointing_vector() const;
  void clear_pointing_vector() ;
  const ::aalyria::spacetime::api::common::PointingVector& pointing_vector() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::PointingVector* release_pointing_vector();
  ::aalyria::spacetime::api::common::PointingVector* mutable_pointing_vector();
  void set_allocated_pointing_vector(::aalyria::spacetime::api::common::PointingVector* pointing_vector);
  private:
  const ::aalyria::spacetime::api::common::PointingVector& _internal_pointing_vector() const;
  ::aalyria::spacetime::api::common::PointingVector* _internal_mutable_pointing_vector();
  public:
  void unsafe_arena_set_allocated_pointing_vector(
      ::aalyria::spacetime::api::common::PointingVector* pointing_vector);
  ::aalyria::spacetime::api::common::PointingVector* unsafe_arena_release_pointing_vector();
  // optional .google.protobuf.Duration propagation_delay = 5 [json_name = "propagationDelay"];
  bool has_propagation_delay() const;
  void clear_propagation_delay() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& propagation_delay() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_propagation_delay();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_propagation_delay();
  void set_allocated_propagation_delay(::PROTOBUF_NAMESPACE_ID::Duration* propagation_delay);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_propagation_delay() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_propagation_delay();
  public:
  void unsafe_arena_set_allocated_propagation_delay(
      ::PROTOBUF_NAMESPACE_ID::Duration* propagation_delay);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_propagation_delay();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SignalPowerCoverage coverage = 6 [json_name = "coverage"];
  bool has_coverage() const;
  void clear_coverage() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage& coverage() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* release_coverage();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* mutable_coverage();
  void set_allocated_coverage(::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* coverage);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage& _internal_coverage() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* _internal_mutable_coverage();
  public:
  void unsafe_arena_set_allocated_coverage(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* coverage);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* unsafe_arena_release_coverage();
  // optional double range_m = 4 [json_name = "rangeM"];
  bool has_range_m() const;
  void clear_range_m() ;
  double range_m() const;
  void set_range_m(double value);

  private:
  double _internal_range_m() const;
  void _internal_set_range_m(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* reception_;
    ::aalyria::spacetime::api::common::PointingVector* pointing_vector_;
    ::PROTOBUF_NAMESPACE_ID::Duration* propagation_delay_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* coverage_;
    double range_m_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransceiverWithMotion

// optional .aalyria.spacetime.api.common.TransceiverModel model = 1 [json_name = "model"];
inline bool TransceiverWithMotion::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& TransceiverWithMotion::_internal_model() const {
  const ::aalyria::spacetime::api::common::TransceiverModel* p = _impl_.model_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TransceiverModel&>(
      ::aalyria::spacetime::api::common::_TransceiverModel_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& TransceiverWithMotion::model() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.model)
  return _internal_model();
}
inline void TransceiverWithMotion::unsafe_arena_set_allocated_model(
    ::aalyria::spacetime::api::common::TransceiverModel* model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_);
  }
  _impl_.model_ = model;
  if (model) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.model)
}
inline ::aalyria::spacetime::api::common::TransceiverModel* TransceiverWithMotion::release_model() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TransceiverModel* temp = _impl_.model_;
  _impl_.model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* TransceiverWithMotion::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.model)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TransceiverModel* temp = _impl_.model_;
  _impl_.model_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* TransceiverWithMotion::_internal_mutable_model() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModel>(GetArenaForAllocation());
    _impl_.model_ = p;
  }
  return _impl_.model_;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* TransceiverWithMotion::mutable_model() {
  ::aalyria::spacetime::api::common::TransceiverModel* _msg = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.model)
  return _msg;
}
inline void TransceiverWithMotion::set_allocated_model(::aalyria::spacetime::api::common::TransceiverModel* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model));
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_ = model;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.model)
}

// optional .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
inline bool TransceiverWithMotion::has_motion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.motion_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::Motion& TransceiverWithMotion::_internal_motion() const {
  const ::aalyria::spacetime::api::common::Motion* p = _impl_.motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::Motion&>(
      ::aalyria::spacetime::api::common::_Motion_default_instance_);
}
inline const ::aalyria::spacetime::api::common::Motion& TransceiverWithMotion::motion() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.motion)
  return _internal_motion();
}
inline void TransceiverWithMotion::unsafe_arena_set_allocated_motion(
    ::aalyria::spacetime::api::common::Motion* motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  _impl_.motion_ = motion;
  if (motion) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.motion)
}
inline ::aalyria::spacetime::api::common::Motion* TransceiverWithMotion::release_motion() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::Motion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::Motion* TransceiverWithMotion::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.motion)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::Motion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::Motion* TransceiverWithMotion::_internal_mutable_motion() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::Motion>(GetArenaForAllocation());
    _impl_.motion_ = p;
  }
  return _impl_.motion_;
}
inline ::aalyria::spacetime::api::common::Motion* TransceiverWithMotion::mutable_motion() {
  ::aalyria::spacetime::api::common::Motion* _msg = _internal_mutable_motion();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.motion)
  return _msg;
}
inline void TransceiverWithMotion::set_allocated_motion(::aalyria::spacetime::api::common::Motion* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion));
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion.motion)
}

// -------------------------------------------------------------------

// TransceiverProvider

// .aalyria.spacetime.api.common.TransceiverModelId id_in_store = 1 [json_name = "idInStore"];
inline bool TransceiverProvider::has_id_in_store() const {
  return source_case() == kIdInStore;
}
inline bool TransceiverProvider::_internal_has_id_in_store() const {
  return source_case() == kIdInStore;
}
inline void TransceiverProvider::set_has_id_in_store() {
  _impl_._oneof_case_[0] = kIdInStore;
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* TransceiverProvider::release_id_in_store() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.id_in_store)
  if (source_case() == kIdInStore) {
    clear_has_source();
    ::aalyria::spacetime::api::common::TransceiverModelId* temp = _impl_.source_.id_in_store_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.id_in_store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::common::TransceiverModelId& TransceiverProvider::_internal_id_in_store() const {
  return source_case() == kIdInStore
      ? *_impl_.source_.id_in_store_
      : reinterpret_cast<::aalyria::spacetime::api::common::TransceiverModelId&>(::aalyria::spacetime::api::common::_TransceiverModelId_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TransceiverModelId& TransceiverProvider::id_in_store() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.id_in_store)
  return _internal_id_in_store();
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* TransceiverProvider::unsafe_arena_release_id_in_store() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.id_in_store)
  if (source_case() == kIdInStore) {
    clear_has_source();
    ::aalyria::spacetime::api::common::TransceiverModelId* temp = _impl_.source_.id_in_store_;
    _impl_.source_.id_in_store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransceiverProvider::unsafe_arena_set_allocated_id_in_store(::aalyria::spacetime::api::common::TransceiverModelId* id_in_store) {
  clear_source();
  if (id_in_store) {
    set_has_id_in_store();
    _impl_.source_.id_in_store_ = id_in_store;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.id_in_store)
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* TransceiverProvider::_internal_mutable_id_in_store() {
  if (source_case() != kIdInStore) {
    clear_source();
    set_has_id_in_store();
    _impl_.source_.id_in_store_ = CreateMaybeMessage< ::aalyria::spacetime::api::common::TransceiverModelId >(GetArenaForAllocation());
  }
  return _impl_.source_.id_in_store_;
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* TransceiverProvider::mutable_id_in_store() {
  ::aalyria::spacetime::api::common::TransceiverModelId* _msg = _internal_mutable_id_in_store();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.id_in_store)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverWithMotion definition = 2 [json_name = "definition"];
inline bool TransceiverProvider::has_definition() const {
  return source_case() == kDefinition;
}
inline bool TransceiverProvider::_internal_has_definition() const {
  return source_case() == kDefinition;
}
inline void TransceiverProvider::set_has_definition() {
  _impl_._oneof_case_[0] = kDefinition;
}
inline void TransceiverProvider::clear_definition() {
  if (source_case() == kDefinition) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.source_.definition_;
    }
    clear_has_source();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* TransceiverProvider::release_definition() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.definition)
  if (source_case() == kDefinition) {
    clear_has_source();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* temp = _impl_.source_.definition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion& TransceiverProvider::_internal_definition() const {
  return source_case() == kDefinition
      ? *_impl_.source_.definition_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_TransceiverWithMotion_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion& TransceiverProvider::definition() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.definition)
  return _internal_definition();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* TransceiverProvider::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.definition)
  if (source_case() == kDefinition) {
    clear_has_source();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* temp = _impl_.source_.definition_;
    _impl_.source_.definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransceiverProvider::unsafe_arena_set_allocated_definition(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* definition) {
  clear_source();
  if (definition) {
    set_has_definition();
    _impl_.source_.definition_ = definition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.definition)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* TransceiverProvider::_internal_mutable_definition() {
  if (source_case() != kDefinition) {
    clear_source();
    set_has_definition();
    _impl_.source_.definition_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion >(GetArenaForAllocation());
  }
  return _impl_.source_.definition_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* TransceiverProvider::mutable_definition() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverWithMotion* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverProvider.definition)
  return _msg;
}

inline bool TransceiverProvider::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void TransceiverProvider::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline TransceiverProvider::SourceCase TransceiverProvider::source_case() const {
  return TransceiverProvider::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoAccessReason

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.Constraint constraint = 1 [json_name = "constraint"];
inline bool NoAccessReason::has_constraint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NoAccessReason::clear_constraint() {
  _impl_.constraint_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint NoAccessReason::constraint() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.constraint)
  return _internal_constraint();
}
inline void NoAccessReason::set_constraint(::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint value) {
   _internal_set_constraint(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.constraint)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint NoAccessReason::_internal_constraint() const {
  return static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint>(_impl_.constraint_);
}
inline void NoAccessReason::_internal_set_constraint(::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint value) {
  assert(::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.constraint_ = value;
}

// optional .aalyria.spacetime.api.common.TransceiverModelId transceiver_link_end = 2 [json_name = "transceiverLinkEnd"];
inline bool NoAccessReason::has_transceiver_link_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transceiver_link_end_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TransceiverModelId& NoAccessReason::_internal_transceiver_link_end() const {
  const ::aalyria::spacetime::api::common::TransceiverModelId* p = _impl_.transceiver_link_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TransceiverModelId&>(
      ::aalyria::spacetime::api::common::_TransceiverModelId_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TransceiverModelId& NoAccessReason::transceiver_link_end() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.transceiver_link_end)
  return _internal_transceiver_link_end();
}
inline void NoAccessReason::unsafe_arena_set_allocated_transceiver_link_end(
    ::aalyria::spacetime::api::common::TransceiverModelId* transceiver_link_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transceiver_link_end_);
  }
  _impl_.transceiver_link_end_ = transceiver_link_end;
  if (transceiver_link_end) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.transceiver_link_end)
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* NoAccessReason::release_transceiver_link_end() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TransceiverModelId* temp = _impl_.transceiver_link_end_;
  _impl_.transceiver_link_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* NoAccessReason::unsafe_arena_release_transceiver_link_end() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.transceiver_link_end)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::common::TransceiverModelId* temp = _impl_.transceiver_link_end_;
  _impl_.transceiver_link_end_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* NoAccessReason::_internal_mutable_transceiver_link_end() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transceiver_link_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModelId>(GetArenaForAllocation());
    _impl_.transceiver_link_end_ = p;
  }
  return _impl_.transceiver_link_end_;
}
inline ::aalyria::spacetime::api::common::TransceiverModelId* NoAccessReason::mutable_transceiver_link_end() {
  ::aalyria::spacetime::api::common::TransceiverModelId* _msg = _internal_mutable_transceiver_link_end();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.transceiver_link_end)
  return _msg;
}
inline void NoAccessReason::set_allocated_transceiver_link_end(::aalyria::spacetime::api::common::TransceiverModelId* transceiver_link_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transceiver_link_end_);
  }
  if (transceiver_link_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transceiver_link_end));
    if (message_arena != submessage_arena) {
      transceiver_link_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transceiver_link_end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transceiver_link_end_ = transceiver_link_end;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason.transceiver_link_end)
}

// -------------------------------------------------------------------

// AccessInterval

// optional .google.type.Interval interval = 1 [json_name = "interval"];
inline bool AccessInterval::has_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_ != nullptr);
  return value;
}
inline const ::google::type::Interval& AccessInterval::_internal_interval() const {
  const ::google::type::Interval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::type::Interval&>(
      ::google::type::_Interval_default_instance_);
}
inline const ::google::type::Interval& AccessInterval::interval() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.interval)
  return _internal_interval();
}
inline void AccessInterval::unsafe_arena_set_allocated_interval(
    ::google::type::Interval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.interval)
}
inline ::google::type::Interval* AccessInterval::release_interval() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::type::Interval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::type::Interval* AccessInterval::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.interval)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::type::Interval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::type::Interval* AccessInterval::_internal_mutable_interval() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::Interval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::google::type::Interval* AccessInterval::mutable_interval() {
  ::google::type::Interval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.interval)
  return _msg;
}
inline void AccessInterval::set_allocated_interval(::google::type::Interval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.interval)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
inline bool AccessInterval::has_accessibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AccessInterval::clear_accessibility() {
  _impl_.accessibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility AccessInterval::accessibility() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.accessibility)
  return _internal_accessibility();
}
inline void AccessInterval::set_accessibility(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility value) {
   _internal_set_accessibility(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.accessibility)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility AccessInterval::_internal_accessibility() const {
  return static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility>(_impl_.accessibility_);
}
inline void AccessInterval::_internal_set_accessibility(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility value) {
  assert(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accessibility_ = value;
}

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.NoAccessReason no_access_reason = 3 [json_name = "noAccessReason"];
inline int AccessInterval::_internal_no_access_reason_size() const {
  return _impl_.no_access_reason_.size();
}
inline int AccessInterval::no_access_reason_size() const {
  return _internal_no_access_reason_size();
}
inline void AccessInterval::clear_no_access_reason() {
  _internal_mutable_no_access_reason()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* AccessInterval::mutable_no_access_reason(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.no_access_reason)
  return _internal_mutable_no_access_reason()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason >*
AccessInterval::mutable_no_access_reason() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.no_access_reason)
  return _internal_mutable_no_access_reason();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason& AccessInterval::_internal_no_access_reason(int index) const {
  return _internal_no_access_reason().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason& AccessInterval::no_access_reason(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.no_access_reason)
  return _internal_no_access_reason(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* AccessInterval::_internal_add_no_access_reason() {
  return _internal_mutable_no_access_reason()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* AccessInterval::add_no_access_reason() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason* _add = _internal_add_no_access_reason();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.no_access_reason)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason >&
AccessInterval::no_access_reason() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.no_access_reason)
  return _internal_no_access_reason();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason>&
AccessInterval::_internal_no_access_reason() const {
  return _impl_.no_access_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason>*
AccessInterval::_internal_mutable_no_access_reason() {
  return &_impl_.no_access_reason_;
}

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation propagation_over_time = 4 [json_name = "propagationOverTime"];
inline int AccessInterval::_internal_propagation_over_time_size() const {
  return _impl_.propagation_over_time_.size();
}
inline int AccessInterval::propagation_over_time_size() const {
  return _internal_propagation_over_time_size();
}
inline void AccessInterval::clear_propagation_over_time() {
  _internal_mutable_propagation_over_time()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* AccessInterval::mutable_propagation_over_time(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.propagation_over_time)
  return _internal_mutable_propagation_over_time()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation >*
AccessInterval::mutable_propagation_over_time() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.propagation_over_time)
  return _internal_mutable_propagation_over_time();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation& AccessInterval::_internal_propagation_over_time(int index) const {
  return _internal_propagation_over_time().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation& AccessInterval::propagation_over_time(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.propagation_over_time)
  return _internal_propagation_over_time(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* AccessInterval::_internal_add_propagation_over_time() {
  return _internal_mutable_propagation_over_time()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* AccessInterval::add_propagation_over_time() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation* _add = _internal_add_propagation_over_time();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.propagation_over_time)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation >&
AccessInterval::propagation_over_time() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AccessInterval.propagation_over_time)
  return _internal_propagation_over_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation>&
AccessInterval::_internal_propagation_over_time() const {
  return _impl_.propagation_over_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::SpatialPropagation>*
AccessInterval::_internal_mutable_propagation_over_time() {
  return &_impl_.propagation_over_time_;
}

// -------------------------------------------------------------------

// SpatialPropagation

// optional .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp"];
inline bool SpatialPropagation::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SpatialPropagation::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SpatialPropagation::timestamp() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.timestamp)
  return _internal_timestamp();
}
inline void SpatialPropagation::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SpatialPropagation::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SpatialPropagation::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SpatialPropagation::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SpatialPropagation::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.timestamp)
  return _msg;
}
inline void SpatialPropagation::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.timestamp)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget reception = 2 [json_name = "reception"];
inline bool SpatialPropagation::has_reception() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reception_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget& SpatialPropagation::_internal_reception() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* p = _impl_.reception_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkBudget_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget& SpatialPropagation::reception() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.reception)
  return _internal_reception();
}
inline void SpatialPropagation::unsafe_arena_set_allocated_reception(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* reception) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reception_);
  }
  _impl_.reception_ = reception;
  if (reception) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.reception)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* SpatialPropagation::release_reception() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* temp = _impl_.reception_;
  _impl_.reception_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* SpatialPropagation::unsafe_arena_release_reception() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.reception)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* temp = _impl_.reception_;
  _impl_.reception_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* SpatialPropagation::_internal_mutable_reception() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reception_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget>(GetArenaForAllocation());
    _impl_.reception_ = p;
  }
  return _impl_.reception_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* SpatialPropagation::mutable_reception() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* _msg = _internal_mutable_reception();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.reception)
  return _msg;
}
inline void SpatialPropagation::set_allocated_reception(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget* reception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reception_);
  }
  if (reception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reception));
    if (message_arena != submessage_arena) {
      reception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reception, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reception_ = reception;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.reception)
}

// optional .aalyria.spacetime.api.common.PointingVector pointing_vector = 3 [json_name = "pointingVector"];
inline bool SpatialPropagation::has_pointing_vector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pointing_vector_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::PointingVector& SpatialPropagation::_internal_pointing_vector() const {
  const ::aalyria::spacetime::api::common::PointingVector* p = _impl_.pointing_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::PointingVector&>(
      ::aalyria::spacetime::api::common::_PointingVector_default_instance_);
}
inline const ::aalyria::spacetime::api::common::PointingVector& SpatialPropagation::pointing_vector() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.pointing_vector)
  return _internal_pointing_vector();
}
inline void SpatialPropagation::unsafe_arena_set_allocated_pointing_vector(
    ::aalyria::spacetime::api::common::PointingVector* pointing_vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pointing_vector_);
  }
  _impl_.pointing_vector_ = pointing_vector;
  if (pointing_vector) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.pointing_vector)
}
inline ::aalyria::spacetime::api::common::PointingVector* SpatialPropagation::release_pointing_vector() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::PointingVector* temp = _impl_.pointing_vector_;
  _impl_.pointing_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::PointingVector* SpatialPropagation::unsafe_arena_release_pointing_vector() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.pointing_vector)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::common::PointingVector* temp = _impl_.pointing_vector_;
  _impl_.pointing_vector_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::PointingVector* SpatialPropagation::_internal_mutable_pointing_vector() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pointing_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::PointingVector>(GetArenaForAllocation());
    _impl_.pointing_vector_ = p;
  }
  return _impl_.pointing_vector_;
}
inline ::aalyria::spacetime::api::common::PointingVector* SpatialPropagation::mutable_pointing_vector() {
  ::aalyria::spacetime::api::common::PointingVector* _msg = _internal_mutable_pointing_vector();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.pointing_vector)
  return _msg;
}
inline void SpatialPropagation::set_allocated_pointing_vector(::aalyria::spacetime::api::common::PointingVector* pointing_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pointing_vector_);
  }
  if (pointing_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointing_vector));
    if (message_arena != submessage_arena) {
      pointing_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointing_vector, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pointing_vector_ = pointing_vector;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.pointing_vector)
}

// optional double range_m = 4 [json_name = "rangeM"];
inline bool SpatialPropagation::has_range_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SpatialPropagation::clear_range_m() {
  _impl_.range_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SpatialPropagation::range_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.range_m)
  return _internal_range_m();
}
inline void SpatialPropagation::set_range_m(double value) {
  _internal_set_range_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.range_m)
}
inline double SpatialPropagation::_internal_range_m() const {
  return _impl_.range_m_;
}
inline void SpatialPropagation::_internal_set_range_m(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.range_m_ = value;
}

// optional .google.protobuf.Duration propagation_delay = 5 [json_name = "propagationDelay"];
inline bool SpatialPropagation::has_propagation_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.propagation_delay_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpatialPropagation::_internal_propagation_delay() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.propagation_delay_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SpatialPropagation::propagation_delay() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.propagation_delay)
  return _internal_propagation_delay();
}
inline void SpatialPropagation::unsafe_arena_set_allocated_propagation_delay(
    ::PROTOBUF_NAMESPACE_ID::Duration* propagation_delay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.propagation_delay_);
  }
  _impl_.propagation_delay_ = propagation_delay;
  if (propagation_delay) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.propagation_delay)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpatialPropagation::release_propagation_delay() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.propagation_delay_;
  _impl_.propagation_delay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpatialPropagation::unsafe_arena_release_propagation_delay() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.propagation_delay)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.propagation_delay_;
  _impl_.propagation_delay_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpatialPropagation::_internal_mutable_propagation_delay() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.propagation_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.propagation_delay_ = p;
  }
  return _impl_.propagation_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SpatialPropagation::mutable_propagation_delay() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_propagation_delay();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.propagation_delay)
  return _msg;
}
inline void SpatialPropagation::set_allocated_propagation_delay(::PROTOBUF_NAMESPACE_ID::Duration* propagation_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.propagation_delay_);
  }
  if (propagation_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagation_delay));
    if (message_arena != submessage_arena) {
      propagation_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propagation_delay, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.propagation_delay_ = propagation_delay;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.propagation_delay)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.SignalPowerCoverage coverage = 6 [json_name = "coverage"];
inline bool SpatialPropagation::has_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coverage_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage& SpatialPropagation::_internal_coverage() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* p = _impl_.coverage_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_SignalPowerCoverage_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage& SpatialPropagation::coverage() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.coverage)
  return _internal_coverage();
}
inline void SpatialPropagation::unsafe_arena_set_allocated_coverage(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* coverage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coverage_);
  }
  _impl_.coverage_ = coverage;
  if (coverage) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.coverage)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* SpatialPropagation::release_coverage() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* temp = _impl_.coverage_;
  _impl_.coverage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* SpatialPropagation::unsafe_arena_release_coverage() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.coverage)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* temp = _impl_.coverage_;
  _impl_.coverage_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* SpatialPropagation::_internal_mutable_coverage() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage>(GetArenaForAllocation());
    _impl_.coverage_ = p;
  }
  return _impl_.coverage_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* SpatialPropagation::mutable_coverage() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* _msg = _internal_mutable_coverage();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.coverage)
  return _msg;
}
inline void SpatialPropagation::set_allocated_coverage(::aalyria::spacetime::api::nbi::v1alpha::resources::SignalPowerCoverage* coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coverage_);
  }
  if (coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coverage));
    if (message_arena != submessage_arena) {
      coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coverage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.coverage_ = coverage;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.SpatialPropagation.coverage)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint>() {
  return ::aalyria::spacetime::api::nbi::v1alpha::resources::NoAccessReason_Constraint_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fwireless_5fevaluation_2eproto_2epb_2eh

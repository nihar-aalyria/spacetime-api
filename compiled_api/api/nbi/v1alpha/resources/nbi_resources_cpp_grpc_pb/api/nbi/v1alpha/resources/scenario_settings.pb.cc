// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/scenario_settings.proto

#include "api/nbi/v1alpha/resources/scenario_settings.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.semimajor_axis_km_)*/ 0

  , /*decltype(_impl_.inclination_deg_)*/ 0

  , /*decltype(_impl_.number_of_planes_)*/ 0u

  , /*decltype(_impl_.satellites_per_plane_)*/ 0u

  , /*decltype(_impl_.inter_plane_spacing_)*/ 0u

  , /*decltype(_impl_.isl_pattern_)*/ 0

  , /*decltype(_impl_.eccentricity_)*/ 0

  , /*decltype(_impl_.raan_offset_deg_)*/ 0
} {}
struct ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParametersDefaultTypeInternal() {}
  union {
    ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParametersDefaultTypeInternal _ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.motion_)*/nullptr} {}
struct ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParametersDefaultTypeInternal() {}
  union {
    ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParametersDefaultTypeInternal _ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParameters::ScenarioSettings_Constellation_OrbitalParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arbitrary_motion_parameters_)*/{}
  , /*decltype(_impl_.walker_delta_parameters_)*/nullptr} {}
struct ScenarioSettings_Constellation_OrbitalParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_OrbitalParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_Constellation_OrbitalParametersDefaultTypeInternal() {}
  union {
    ScenarioSettings_Constellation_OrbitalParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_Constellation_OrbitalParametersDefaultTypeInternal _ScenarioSettings_Constellation_OrbitalParameters_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_ServiceRequest::ScenarioSettings_Constellation_ServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pop_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uplink_capacity_bps_)*/ 0

  , /*decltype(_impl_.downlink_capacity_bps_)*/ 0

  , /*decltype(_impl_.priority_)*/ 0
} {}
struct ScenarioSettings_Constellation_ServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_Constellation_ServiceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_Constellation_ServiceRequestDefaultTypeInternal() {}
  union {
    ScenarioSettings_Constellation_ServiceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_Constellation_ServiceRequestDefaultTypeInternal _ScenarioSettings_Constellation_ServiceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Constellation::ScenarioSettings_Constellation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transceiver_models_)*/{}
  , /*decltype(_impl_.wireless_interfaces_)*/{}
  , /*decltype(_impl_.service_request_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orbital_parameters_)*/nullptr
  , /*decltype(_impl_.storage_)*/nullptr} {}
struct ScenarioSettings_ConstellationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_ConstellationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_ConstellationDefaultTypeInternal() {}
  union {
    ScenarioSettings_Constellation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_ConstellationDefaultTypeInternal _ScenarioSettings_Constellation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_WirelessInterface::ScenarioSettings_WirelessInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transceiver_model_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_WirelessInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_WirelessInterfaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_WirelessInterfaceDefaultTypeInternal() {}
  union {
    ScenarioSettings_WirelessInterface _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_WirelessInterfaceDefaultTypeInternal _ScenarioSettings_WirelessInterface_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_TransmitterDefinition::ScenarioSettings_TransmitterDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequential_channel_definition_)*/{}
  , /*decltype(_impl_.signal_processing_step_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_selection_method_)*/ 0
} {}
struct ScenarioSettings_TransmitterDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_TransmitterDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_TransmitterDefinitionDefaultTypeInternal() {}
  union {
    ScenarioSettings_TransmitterDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_TransmitterDefinitionDefaultTypeInternal _ScenarioSettings_TransmitterDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_ReceiverDefinition::ScenarioSettings_ReceiverDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequential_channel_definition_)*/{}
  , /*decltype(_impl_.signal_processing_step_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_selection_method_)*/ 0
} {}
struct ScenarioSettings_ReceiverDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_ReceiverDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_ReceiverDefinitionDefaultTypeInternal() {}
  union {
    ScenarioSettings_ReceiverDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_ReceiverDefinitionDefaultTypeInternal _ScenarioSettings_ReceiverDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_TransceiverModel::ScenarioSettings_TransceiverModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.macs_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmitter_)*/nullptr
  , /*decltype(_impl_.receiver_)*/nullptr
  , /*decltype(_impl_.antenna_definition_)*/nullptr} {}
struct ScenarioSettings_TransceiverModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_TransceiverModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_TransceiverModelDefaultTypeInternal() {}
  union {
    ScenarioSettings_TransceiverModel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_TransceiverModelDefaultTypeInternal _ScenarioSettings_TransceiverModel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_SequentialChannelDefinition::ScenarioSettings_SequentialChannelDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.starting_frequency_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bandwidth_hz_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_power_w_)*/ 0

  , /*decltype(_impl_.channel_count_)*/ 0u
} {}
struct ScenarioSettings_SequentialChannelDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_SequentialChannelDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_SequentialChannelDefinitionDefaultTypeInternal() {}
  union {
    ScenarioSettings_SequentialChannelDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_SequentialChannelDefinitionDefaultTypeInternal _ScenarioSettings_SequentialChannelDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Gateway::ScenarioSettings_Gateway(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transceiver_models_)*/{}
  , /*decltype(_impl_.wireless_interfaces_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wired_interface_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.agent_)*/nullptr
  , /*decltype(_impl_.max_wired_data_rate_bps_)*/ 0
} {}
struct ScenarioSettings_GatewayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_GatewayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_GatewayDefaultTypeInternal() {}
  union {
    ScenarioSettings_Gateway _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_GatewayDefaultTypeInternal _ScenarioSettings_Gateway_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_ScenarioChannelDefinition::ScenarioSettings_ScenarioChannelDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_)*/nullptr} {}
struct ScenarioSettings_ScenarioChannelDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_ScenarioChannelDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_ScenarioChannelDefinitionDefaultTypeInternal() {}
  union {
    ScenarioSettings_ScenarioChannelDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_ScenarioChannelDefinitionDefaultTypeInternal _ScenarioSettings_ScenarioChannelDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_AntennaPatternSettings::ScenarioSettings_AntennaPatternSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.antenna_pattern_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.antenna_pattern_)*/nullptr} {}
struct ScenarioSettings_AntennaPatternSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_AntennaPatternSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_AntennaPatternSettingsDefaultTypeInternal() {}
  union {
    ScenarioSettings_AntennaPatternSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_AntennaPatternSettingsDefaultTypeInternal _ScenarioSettings_AntennaPatternSettings_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminal_UserTerminalGridDefinition::ScenarioSettings_UserTerminal_UserTerminalGridDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.south_west_corner_)*/nullptr
  , /*decltype(_impl_.row_count_)*/ 0u

  , /*decltype(_impl_.column_count_)*/ 0u

  , /*decltype(_impl_.grid_latitude_spacing_deg_)*/ 0

  , /*decltype(_impl_.grid_longitude_spacing_deg_)*/ 0
} {}
struct ScenarioSettings_UserTerminal_UserTerminalGridDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminal_UserTerminalGridDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_UserTerminal_UserTerminalGridDefinitionDefaultTypeInternal() {}
  union {
    ScenarioSettings_UserTerminal_UserTerminalGridDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_UserTerminal_UserTerminalGridDefinitionDefaultTypeInternal _ScenarioSettings_UserTerminal_UserTerminalGridDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminal::ScenarioSettings_UserTerminal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_terminal_grid_definition_)*/{}
  , /*decltype(_impl_.transceiver_models_)*/{}
  , /*decltype(_impl_.wireless_interfaces_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_UserTerminalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_UserTerminalDefaultTypeInternal() {}
  union {
    ScenarioSettings_UserTerminal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_UserTerminalDefaultTypeInternal _ScenarioSettings_UserTerminal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminalCommonSettings::ScenarioSettings_UserTerminalCommonSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_terminal_forward_data_rate_bps_)*/ 0

  , /*decltype(_impl_.user_terminal_return_data_rate_bps_)*/ 0
} {}
struct ScenarioSettings_UserTerminalCommonSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_UserTerminalCommonSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_UserTerminalCommonSettingsDefaultTypeInternal() {}
  union {
    ScenarioSettings_UserTerminalCommonSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_UserTerminalCommonSettingsDefaultTypeInternal _ScenarioSettings_UserTerminalCommonSettings_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_Pop::ScenarioSettings_Pop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.max_data_rate_bps_)*/ 0
} {}
struct ScenarioSettings_PopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_PopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_PopDefaultTypeInternal() {}
  union {
    ScenarioSettings_Pop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_PopDefaultTypeInternal _ScenarioSettings_Pop_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_AirFleet_Aircraft::ScenarioSettings_AirFleet_Aircraft(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_transceiver_models_)*/{}
  , /*decltype(_impl_.additional_wireless_interfaces_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_AirFleet_AircraftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_AirFleet_AircraftDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_AirFleet_AircraftDefaultTypeInternal() {}
  union {
    ScenarioSettings_AirFleet_Aircraft _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_AirFleet_AircraftDefaultTypeInternal _ScenarioSettings_AirFleet_Aircraft_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_AirFleet::ScenarioSettings_AirFleet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.aircraft_)*/{}
  , /*decltype(_impl_.transceiver_models_)*/{}
  , /*decltype(_impl_.wireless_interfaces_)*/{}
  , /*decltype(_impl_.pop_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_AirFleetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_AirFleetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_AirFleetDefaultTypeInternal() {}
  union {
    ScenarioSettings_AirFleet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_AirFleetDefaultTypeInternal _ScenarioSettings_AirFleet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_ShipFleet_Ship::ScenarioSettings_ShipFleet_Ship(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_transceiver_models_)*/{}
  , /*decltype(_impl_.additional_wireless_interfaces_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_ShipFleet_ShipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_ShipFleet_ShipDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_ShipFleet_ShipDefaultTypeInternal() {}
  union {
    ScenarioSettings_ShipFleet_Ship _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_ShipFleet_ShipDefaultTypeInternal _ScenarioSettings_ShipFleet_Ship_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_ShipFleet::ScenarioSettings_ShipFleet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ship_)*/{}
  , /*decltype(_impl_.transceiver_models_)*/{}
  , /*decltype(_impl_.wireless_interfaces_)*/{}
  , /*decltype(_impl_.pop_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ScenarioSettings_ShipFleetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_ShipFleetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_ShipFleetDefaultTypeInternal() {}
  union {
    ScenarioSettings_ShipFleet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_ShipFleetDefaultTypeInternal _ScenarioSettings_ShipFleet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUseDefaultTypeInternal _ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings::ScenarioSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.constellation_)*/{}
  , /*decltype(_impl_.gateways_)*/{}
  , /*decltype(_impl_.scenario_channel_definition_)*/{}
  , /*decltype(_impl_.antenna_pattern_settings_)*/{}
  , /*decltype(_impl_.user_terminal_)*/{}
  , /*decltype(_impl_.pop_)*/{}
  , /*decltype(_impl_.airfleets_)*/{}
  , /*decltype(_impl_.shipfleets_)*/{}
  , /*decltype(_impl_.gateway_to_permitted_pops_)*/{}
  , /*decltype(_impl_.user_terminal_common_settings_)*/nullptr} {}
struct ScenarioSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettingsDefaultTypeInternal() {}
  union {
    ScenarioSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettingsDefaultTypeInternal _ScenarioSettings_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.semimajor_axis_km_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.eccentricity_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.inclination_deg_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.number_of_planes_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.satellites_per_plane_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.inter_plane_spacing_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.raan_offset_deg_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.isl_pattern_),
    0,
    6,
    1,
    2,
    3,
    4,
    7,
    5,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters, _impl_.motion_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters, _impl_.walker_delta_parameters_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters, _impl_.arbitrary_motion_parameters_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _impl_.pop_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _impl_.uplink_capacity_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _impl_.downlink_capacity_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest, _impl_.priority_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.orbital_parameters_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.wireless_interfaces_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.storage_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation, _impl_.service_request_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface, _impl_.transceiver_model_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _impl_.sequential_channel_definition_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _impl_.channel_selection_method_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition, _impl_.signal_processing_step_),
    0,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _impl_.sequential_channel_definition_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _impl_.channel_selection_method_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition, _impl_.signal_processing_step_),
    0,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_.transmitter_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_.antenna_definition_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel, _impl_.macs_),
    0,
    1,
    2,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_.channel_count_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_.starting_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_.bandwidth_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition, _impl_.tx_power_w_),
    0,
    4,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.wireless_interfaces_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.wired_interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.max_wired_data_rate_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway, _impl_.agent_),
    0,
    2,
    ~0u,
    ~0u,
    1,
    4,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition, _impl_.channel_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings, _impl_.antenna_pattern_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings, _impl_.antenna_pattern_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.south_west_corner_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.row_count_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.column_count_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.grid_latitude_spacing_deg_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.grid_longitude_spacing_deg_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _impl_.user_terminal_grid_definition_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _impl_.transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal, _impl_.wireless_interfaces_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings, _impl_.user_terminal_forward_data_rate_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings, _impl_.user_terminal_return_data_rate_bps_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop, _impl_.max_data_rate_bps_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft, _impl_.additional_transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft, _impl_.additional_wireless_interfaces_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _impl_.aircraft_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _impl_.transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _impl_.wireless_interfaces_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet, _impl_.pop_id_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _impl_.additional_transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship, _impl_.additional_wireless_interfaces_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _impl_.ship_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _impl_.transceiver_models_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _impl_.wireless_interfaces_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet, _impl_.pop_id_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.constellation_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.gateways_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.scenario_channel_definition_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.antenna_pattern_settings_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.user_terminal_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.user_terminal_common_settings_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.pop_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.airfleets_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.shipfleets_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings, _impl_.gateway_to_permitted_pops_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters)},
        { 24, 34, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters)},
        { 36, 46, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters)},
        { 48, 60, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest)},
        { 64, 79, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation)},
        { 86, 96, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface)},
        { 98, 110, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition)},
        { 114, 126, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition)},
        { 130, 143, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel)},
        { 148, 161, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition)},
        { 166, 181, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway)},
        { 188, 198, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition)},
        { 200, 210, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings)},
        { 212, 226, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition)},
        { 232, 244, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal)},
        { 248, 258, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings)},
        { 260, 271, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop)},
        { 274, 285, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft)},
        { 288, 300, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet)},
        { 304, 316, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship)},
        { 320, 332, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet)},
        { 336, 346, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse)},
        { 348, 366, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Constellation_OrbitalParameters_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Constellation_ServiceRequest_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Constellation_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_WirelessInterface_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_TransmitterDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_ReceiverDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_TransceiverModel_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_SequentialChannelDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Gateway_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_ScenarioChannelDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_AntennaPatternSettings_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_UserTerminal_UserTerminalGridDefinition_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_UserTerminal_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_UserTerminalCommonSettings_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_Pop_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_AirFleet_Aircraft_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_AirFleet_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_ShipFleet_Ship_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_ShipFleet_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ScenarioSettings_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1api/nbi/v1alpha/resources/scenario_set"
    "tings.proto\022+aalyria.spacetime.api.nbi.v"
    "1alpha.resources\032\030api/common/channel.pro"
    "to\032\034api/common/coordinates.proto\032!api/co"
    "mmon/platform_antenna.proto\032\"api/common/"
    "wireless_receiver.proto\032%api/common/wire"
    "less_transceiver.proto\032%api/common/wirel"
    "ess_transmitter.proto\032/api/nbi/v1alpha/r"
    "esources/antenna_pattern.proto\032/api/nbi/"
    "v1alpha/resources/network_element.proto\""
    "\333@\n\020ScenarioSettings\022q\n\rconstellation\030\001 "
    "\003(\0132K.aalyria.spacetime.api.nbi.v1alpha."
    "resources.ScenarioSettings.Constellation"
    "R\rconstellation\022a\n\010gateways\030\002 \003(\0132E.aaly"
    "ria.spacetime.api.nbi.v1alpha.resources."
    "ScenarioSettings.GatewayR\010gateways\022\227\001\n\033s"
    "cenario_channel_definition\030\003 \003(\0132W.aalyr"
    "ia.spacetime.api.nbi.v1alpha.resources.S"
    "cenarioSettings.ScenarioChannelDefinitio"
    "nR\031scenarioChannelDefinition\022\216\001\n\030antenna"
    "_pattern_settings\030\004 \003(\0132T.aalyria.spacet"
    "ime.api.nbi.v1alpha.resources.ScenarioSe"
    "ttings.AntennaPatternSettingsR\026antennaPa"
    "tternSettings\022o\n\ruser_terminal\030\005 \003(\0132J.a"
    "alyria.spacetime.api.nbi.v1alpha.resourc"
    "es.ScenarioSettings.UserTerminalR\014userTe"
    "rminal\022\233\001\n\035user_terminal_common_settings"
    "\030\006 \001(\0132X.aalyria.spacetime.api.nbi.v1alp"
    "ha.resources.ScenarioSettings.UserTermin"
    "alCommonSettingsR\032userTerminalCommonSett"
    "ings\022S\n\003pop\030\007 \003(\0132A.aalyria.spacetime.ap"
    "i.nbi.v1alpha.resources.ScenarioSettings"
    ".PopR\003pop\022d\n\tairfleets\030\010 \003(\0132F.aalyria.s"
    "pacetime.api.nbi.v1alpha.resources.Scena"
    "rioSettings.AirFleetR\tairfleets\022g\n\nshipf"
    "leets\030\t \003(\0132G.aalyria.spacetime.api.nbi."
    "v1alpha.resources.ScenarioSettings.ShipF"
    "leetR\nshipfleets\022\224\001\n\031gateway_to_permitte"
    "d_pops\030\n \003(\0132Y.aalyria.spacetime.api.nbi"
    ".v1alpha.resources.ScenarioSettings.Gate"
    "wayToPermittedPopsEntryR\026gatewayToPermit"
    "tedPops\032\215\017\n\rConstellation\022\022\n\004name\030\001 \001(\tR"
    "\004name\022\022\n\004type\030\005 \001(\tR\004type\022\214\001\n\022orbital_pa"
    "rameters\030\002 \001(\0132].aalyria.spacetime.api.n"
    "bi.v1alpha.resources.ScenarioSettings.Co"
    "nstellation.OrbitalParametersR\021orbitalPa"
    "rameters\022}\n\022transceiver_models\030\003 \003(\0132N.a"
    "alyria.spacetime.api.nbi.v1alpha.resourc"
    "es.ScenarioSettings.TransceiverModelR\021tr"
    "ansceiverModels\022\200\001\n\023wireless_interfaces\030"
    "\004 \003(\0132O.aalyria.spacetime.api.nbi.v1alph"
    "a.resources.ScenarioSettings.WirelessInt"
    "erfaceR\022wirelessInterfaces\022Z\n\007storage\030\006 "
    "\001(\0132@.aalyria.spacetime.api.nbi.v1alpha."
    "resources.NetworkNode.StorageR\007storage\022\203"
    "\001\n\017service_request\030\007 \003(\0132Z.aalyria.space"
    "time.api.nbi.v1alpha.resources.ScenarioS"
    "ettings.Constellation.ServiceRequestR\016se"
    "rviceRequest\032\266\010\n\021OrbitalParameters\022\253\001\n\027w"
    "alker_delta_parameters\030\002 \001(\0132s.aalyria.s"
    "pacetime.api.nbi.v1alpha.resources.Scena"
    "rioSettings.Constellation.OrbitalParamet"
    "ers.WalkerDeltaParametersR\025walkerDeltaPa"
    "rameters\022\267\001\n\033arbitrary_motion_parameters"
    "\030\003 \003(\0132w.aalyria.spacetime.api.nbi.v1alp"
    "ha.resources.ScenarioSettings.Constellat"
    "ion.OrbitalParameters.ArbitraryMotionPar"
    "ametersR\031arbitraryMotionParameters\032\311\004\n\025W"
    "alkerDeltaParameters\022*\n\021semimajor_axis_k"
    "m\030\001 \001(\001R\017semimajorAxisKm\022%\n\014eccentricity"
    "\030\007 \001(\001:\0010R\014eccentricity\022\'\n\017inclination_d"
    "eg\030\002 \001(\001R\016inclinationDeg\022(\n\020number_of_pl"
    "anes\030\003 \001(\rR\016numberOfPlanes\0220\n\024satellites"
    "_per_plane\030\004 \001(\rR\022satellitesPerPlane\022.\n\023"
    "inter_plane_spacing\030\005 \001(\rR\021interPlaneSpa"
    "cing\022&\n\017raan_offset_deg\030\010 \001(\001R\rraanOffse"
    "tDeg\022\261\001\n\013isl_pattern\030\006 \001(\0162~.aalyria.spa"
    "cetime.api.nbi.v1alpha.resources.Scenari"
    "oSettings.Constellation.OrbitalParameter"
    "s.WalkerDeltaParameters.IslPattern:\020ISL_"
    "PATTERN_NONER\nislPattern\"L\n\nIslPattern\022\024"
    "\n\020ISL_PATTERN_NONE\020\000\022\024\n\020ISL_PATTERN_NSEW"
    "\020\001\022\022\n\016ISL_PATTERN_NS\020\002\032m\n\031ArbitraryMotio"
    "nParameters\022\022\n\004name\030\001 \002(\tR\004name\022<\n\006motio"
    "n\030\002 \002(\0132$.aalyria.spacetime.api.common.M"
    "otionR\006motion\032\247\001\n\016ServiceRequest\022\025\n\006pop_"
    "id\030\001 \001(\tR\005popId\022.\n\023uplink_capacity_bps\030\002"
    " \001(\001R\021uplinkCapacityBps\0222\n\025downlink_capa"
    "city_bps\030\003 \001(\001R\023downlinkCapacityBps\022\032\n\010p"
    "riority\030\004 \001(\001R\010priority\032U\n\021WirelessInter"
    "face\022\016\n\002id\030\001 \001(\tR\002id\0220\n\024transceiver_mode"
    "l_id\030\003 \001(\tR\022transceiverModelId\032\250\003\n\025Trans"
    "mitterDefinition\022\022\n\004name\030\001 \001(\tR\004name\022\235\001\n"
    "\035sequential_channel_definition\030\002 \003(\0132Y.a"
    "alyria.spacetime.api.nbi.v1alpha.resourc"
    "es.ScenarioSettings.SequentialChannelDef"
    "initionR\033sequentialChannelDefinition\022n\n\030"
    "channel_selection_method\030\003 \001(\01624.aalyria"
    ".spacetime.api.common.ChannelSelectionMe"
    "thodR\026channelSelectionMethod\022k\n\026signal_p"
    "rocessing_step\030\004 \003(\01325.aalyria.spacetime"
    ".api.common.TransmitSignalProcessorR\024sig"
    "nalProcessingStep\032\244\003\n\022ReceiverDefinition"
    "\022\022\n\004name\030\001 \001(\tR\004name\022\235\001\n\035sequential_chan"
    "nel_definition\030\002 \003(\0132Y.aalyria.spacetime"
    ".api.nbi.v1alpha.resources.ScenarioSetti"
    "ngs.SequentialChannelDefinitionR\033sequent"
    "ialChannelDefinition\022n\n\030channel_selectio"
    "n_method\030\003 \001(\01624.aalyria.spacetime.api.c"
    "ommon.ChannelSelectionMethodR\026channelSel"
    "ectionMethod\022j\n\026signal_processing_step\030\004"
    " \003(\01324.aalyria.spacetime.api.common.Rece"
    "iveSignalProcessorR\024signalProcessingStep"
    "\032\246\003\n\020TransceiverModel\022\016\n\002id\030\001 \001(\tR\002id\022u\n"
    "\013transmitter\030\002 \001(\0132S.aalyria.spacetime.a"
    "pi.nbi.v1alpha.resources.ScenarioSetting"
    "s.TransmitterDefinitionR\013transmitter\022l\n\010"
    "receiver\030\003 \001(\0132P.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.ScenarioSettings.Re"
    "ceiverDefinitionR\010receiver\022^\n\022antenna_de"
    "finition\030\004 \001(\0132/.aalyria.spacetime.api.c"
    "ommon.AntennaDefinitionR\021antennaDefiniti"
    "on\022=\n\004macs\030\005 \003(\0132).aalyria.spacetime.api"
    ".common.WirelessMacR\004macs\032\326\001\n\033Sequential"
    "ChannelDefinition\022\035\n\nchannel_id\030\001 \001(\tR\tc"
    "hannelId\022#\n\rchannel_count\030\002 \001(\rR\014channel"
    "Count\0222\n\025starting_frequency_hz\030\003 \001(\004R\023st"
    "artingFrequencyHz\022!\n\014bandwidth_hz\030\004 \001(\004R"
    "\013bandwidthHz\022\034\n\ntx_power_w\030\005 \001(\001R\010txPowe"
    "rW\032\236\004\n\007Gateway\022\022\n\004name\030\001 \001(\tR\004name\022G\n\010lo"
    "cation\030\002 \001(\0132+.aalyria.spacetime.api.com"
    "mon.GeodeticWgs84R\010location\022}\n\022transceiv"
    "er_models\030\010 \003(\0132N.aalyria.spacetime.api."
    "nbi.v1alpha.resources.ScenarioSettings.T"
    "ransceiverModelR\021transceiverModels\022\200\001\n\023w"
    "ireless_interfaces\030\t \003(\0132O.aalyria.space"
    "time.api.nbi.v1alpha.resources.ScenarioS"
    "ettings.WirelessInterfaceR\022wirelessInter"
    "faces\0221\n\022wired_interface_id\030\n \001(\t:\003WANR\020"
    "wiredInterfaceId\0224\n\027max_wired_data_rate_"
    "bps\030\006 \001(\001R\023maxWiredDataRateBps\022K\n\005agent\030"
    "\003 \001(\01325.aalyria.spacetime.api.nbi.v1alph"
    "a.resources.SdnAgentR\005agent\032\177\n\031ScenarioC"
    "hannelDefinition\022\035\n\nchannel_id\030\001 \001(\tR\tch"
    "annelId\022C\n\007channel\030\002 \001(\0132).aalyria.space"
    "time.api.common.BandProfileR\007channel\032\254\001\n"
    "\026AntennaPatternSettings\022,\n\022antenna_patte"
    "rn_id\030\001 \001(\tR\020antennaPatternId\022d\n\017antenna"
    "_pattern\030\002 \001(\0132;.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.AntennaPatternR\016ant"
    "ennaPattern\032\235\006\n\014UserTerminal\022\022\n\004name\030\001 \001"
    "(\tR\004name\022\250\001\n\035user_terminal_grid_definiti"
    "on\030\002 \003(\0132e.aalyria.spacetime.api.nbi.v1a"
    "lpha.resources.ScenarioSettings.UserTerm"
    "inal.UserTerminalGridDefinitionR\032userTer"
    "minalGridDefinition\022}\n\022transceiver_model"
    "s\030\010 \003(\0132N.aalyria.spacetime.api.nbi.v1al"
    "pha.resources.ScenarioSettings.Transceiv"
    "erModelR\021transceiverModels\022\200\001\n\023wireless_"
    "interfaces\030\t \003(\0132O.aalyria.spacetime.api"
    ".nbi.v1alpha.resources.ScenarioSettings."
    "WirelessInterfaceR\022wirelessInterfaces\032\313\002"
    "\n\032UserTerminalGridDefinition\022\022\n\004name\030\006 \001"
    "(\tR\004name\022W\n\021south_west_corner\030\001 \001(\0132+.aa"
    "lyria.spacetime.api.common.GeodeticWgs84"
    "R\017southWestCorner\022\033\n\trow_count\030\002 \001(\rR\010ro"
    "wCount\022!\n\014column_count\030\003 \001(\rR\013columnCoun"
    "t\0229\n\031grid_latitude_spacing_deg\030\004 \001(\001R\026gr"
    "idLatitudeSpacingDeg\022;\n\032grid_longitude_s"
    "pacing_deg\030\005 \001(\001R\027gridLongitudeSpacingDe"
    "gJ\010\010\007\020\200\200\200\200\002\032\264\001\n\032UserTerminalCommonSettin"
    "gs\022K\n#user_terminal_forward_data_rate_bp"
    "s\030\001 \001(\001R\036userTerminalForwardDataRateBps\022"
    "I\n\"user_terminal_return_data_rate_bps\030\002 "
    "\001(\001R\035userTerminalReturnDataRateBps\032\215\001\n\003P"
    "op\022\022\n\004name\030\001 \001(\tR\004name\022G\n\010location\030\002 \001(\013"
    "2+.aalyria.spacetime.api.common.Geodetic"
    "Wgs84R\010location\022)\n\021max_data_rate_bps\030\003 \001"
    "(\001R\016maxDataRateBps\032\332\005\n\010AirFleet\022k\n\010aircr"
    "aft\030\001 \003(\0132O.aalyria.spacetime.api.nbi.v1"
    "alpha.resources.ScenarioSettings.AirFlee"
    "t.AircraftR\010aircraft\022}\n\022transceiver_mode"
    "ls\030\002 \003(\0132N.aalyria.spacetime.api.nbi.v1a"
    "lpha.resources.ScenarioSettings.Transcei"
    "verModelR\021transceiverModels\022\200\001\n\023wireless"
    "_interfaces\030\003 \003(\0132O.aalyria.spacetime.ap"
    "i.nbi.v1alpha.resources.ScenarioSettings"
    ".WirelessInterfaceR\022wirelessInterfaces\022\025"
    "\n\006pop_id\030\004 \001(\tR\005popId\032\307\002\n\010Aircraft\022\016\n\002id"
    "\030\001 \001(\tR\002id\022\222\001\n\035additional_transceiver_mo"
    "dels\030\002 \003(\0132N.aalyria.spacetime.api.nbi.v"
    "1alpha.resources.ScenarioSettings.Transc"
    "eiverModelR\033additionalTransceiverModels\022"
    "\225\001\n\036additional_wireless_interfaces\030\003 \003(\013"
    "2O.aalyria.spacetime.api.nbi.v1alpha.res"
    "ources.ScenarioSettings.WirelessInterfac"
    "eR\034additionalWirelessInterfaces\032\340\005\n\tShip"
    "Fleet\022`\n\004ship\030\001 \003(\0132L.aalyria.spacetime."
    "api.nbi.v1alpha.resources.ScenarioSettin"
    "gs.ShipFleet.ShipR\004ship\022}\n\022transceiver_m"
    "odels\030\002 \003(\0132N.aalyria.spacetime.api.nbi."
    "v1alpha.resources.ScenarioSettings.Trans"
    "ceiverModelR\021transceiverModels\022\200\001\n\023wirel"
    "ess_interfaces\030\003 \003(\0132O.aalyria.spacetime"
    ".api.nbi.v1alpha.resources.ScenarioSetti"
    "ngs.WirelessInterfaceR\022wirelessInterface"
    "s\022\025\n\006pop_id\030\004 \001(\tR\005popId\032\327\002\n\004Ship\022\016\n\002id\030"
    "\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\222\001\n\035additi"
    "onal_transceiver_models\030\004 \003(\0132N.aalyria."
    "spacetime.api.nbi.v1alpha.resources.Scen"
    "arioSettings.TransceiverModelR\033additiona"
    "lTransceiverModels\022\225\001\n\036additional_wirele"
    "ss_interfaces\030\005 \003(\0132O.aalyria.spacetime."
    "api.nbi.v1alpha.resources.ScenarioSettin"
    "gs.WirelessInterfaceR\034additionalWireless"
    "Interfaces\032I\n\033GatewayToPermittedPopsEntr"
    "y\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005valu"
    "e:\0028\001Bb\n/com.aalyria.spacetime.api.nbi.v"
    "1alpha.resourcesZ/aalyria.com/spacetime/"
    "api/nbi/v1alpha/resources"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_deps[8] =
    {
        &::descriptor_table_api_2fcommon_2fchannel_2eproto,
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2fplatform_5fantenna_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5freceiver_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransmitter_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
        &::descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5felement_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto = {
    false,
    false,
    8785,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto,
    "api/nbi/v1alpha/resources/scenario_settings.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_deps,
    8,
    23,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[0];
}
bool ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ISL_PATTERN_NONE;
constexpr ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ISL_PATTERN_NSEW;
constexpr ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ISL_PATTERN_NS;
constexpr ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::IslPattern_MIN;
constexpr ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::IslPattern_MAX;
constexpr int ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::IslPattern_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_._has_bits_);
  static void set_has_semimajor_axis_km(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eccentricity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inclination_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_planes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_satellites_per_plane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inter_plane_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raan_offset_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isl_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
}
ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters(const ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
}

inline void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.semimajor_axis_km_) { 0 }

    , decltype(_impl_.inclination_deg_) { 0 }

    , decltype(_impl_.number_of_planes_) { 0u }

    , decltype(_impl_.satellites_per_plane_) { 0u }

    , decltype(_impl_.inter_plane_spacing_) { 0u }

    , decltype(_impl_.isl_pattern_) { 0 }

    , decltype(_impl_.eccentricity_) { 0 }

    , decltype(_impl_.raan_offset_deg_) { 0 }

  };
}

ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::~ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.semimajor_axis_km_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.raan_offset_deg_) -
        reinterpret_cast<char*>(&_impl_.semimajor_axis_km_)) + sizeof(_impl_.raan_offset_deg_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double semimajor_axis_km = 1 [json_name = "semimajorAxisKm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_semimajor_axis_km(&has_bits);
          _impl_.semimajor_axis_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double inclination_deg = 2 [json_name = "inclinationDeg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_inclination_deg(&has_bits);
          _impl_.inclination_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_planes = 3 [json_name = "numberOfPlanes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_planes(&has_bits);
          _impl_.number_of_planes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 satellites_per_plane = 4 [json_name = "satellitesPerPlane"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_satellites_per_plane(&has_bits);
          _impl_.satellites_per_plane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 inter_plane_spacing = 5 [json_name = "interPlaneSpacing"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_inter_plane_spacing(&has_bits);
          _impl_.inter_plane_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters.IslPattern isl_pattern = 6 [default = ISL_PATTERN_NONE, json_name = "islPattern"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern_IsValid(static_cast<int>(val)))) {
            _internal_set_isl_pattern(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters_IslPattern>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double eccentricity = 7 [default = 0, json_name = "eccentricity"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_eccentricity(&has_bits);
          _impl_.eccentricity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double raan_offset_deg = 8 [json_name = "raanOffsetDeg"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _Internal::set_has_raan_offset_deg(&has_bits);
          _impl_.raan_offset_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double semimajor_axis_km = 1 [json_name = "semimajorAxisKm"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_semimajor_axis_km(), target);
  }

  // optional double inclination_deg = 2 [json_name = "inclinationDeg"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_inclination_deg(), target);
  }

  // optional uint32 number_of_planes = 3 [json_name = "numberOfPlanes"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_number_of_planes(), target);
  }

  // optional uint32 satellites_per_plane = 4 [json_name = "satellitesPerPlane"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_satellites_per_plane(), target);
  }

  // optional uint32 inter_plane_spacing = 5 [json_name = "interPlaneSpacing"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_inter_plane_spacing(), target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters.IslPattern isl_pattern = 6 [default = ISL_PATTERN_NONE, json_name = "islPattern"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_isl_pattern(), target);
  }

  // optional double eccentricity = 7 [default = 0, json_name = "eccentricity"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_eccentricity(), target);
  }

  // optional double raan_offset_deg = 8 [json_name = "raanOffsetDeg"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_raan_offset_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  return target;
}

::size_t ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double semimajor_axis_km = 1 [json_name = "semimajorAxisKm"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double inclination_deg = 2 [json_name = "inclinationDeg"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional uint32 number_of_planes = 3 [json_name = "numberOfPlanes"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_planes());
    }

    // optional uint32 satellites_per_plane = 4 [json_name = "satellitesPerPlane"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_satellites_per_plane());
    }

    // optional uint32 inter_plane_spacing = 5 [json_name = "interPlaneSpacing"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_inter_plane_spacing());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters.IslPattern isl_pattern = 6 [default = ISL_PATTERN_NONE, json_name = "islPattern"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_isl_pattern());
    }

    // optional double eccentricity = 7 [default = 0, json_name = "eccentricity"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional double raan_offset_deg = 8 [json_name = "raanOffsetDeg"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.semimajor_axis_km_ = from._impl_.semimajor_axis_km_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inclination_deg_ = from._impl_.inclination_deg_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_of_planes_ = from._impl_.number_of_planes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.satellites_per_plane_ = from._impl_.satellites_per_plane_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.inter_plane_spacing_ = from._impl_.inter_plane_spacing_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.isl_pattern_ = from._impl_.isl_pattern_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.eccentricity_ = from._impl_.eccentricity_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.raan_offset_deg_ = from._impl_.raan_offset_deg_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::CopyFrom(const ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::IsInitialized() const {
  return true;
}

void ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::InternalSwap(ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.raan_offset_deg_)
      + sizeof(ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::_impl_.raan_offset_deg_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters, _impl_.semimajor_axis_km_)>(
          reinterpret_cast<char*>(&_impl_.semimajor_axis_km_),
          reinterpret_cast<char*>(&other->_impl_.semimajor_axis_km_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[0]);
}
// ===================================================================

class ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::Motion& motion(const ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters* msg);
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::aalyria::spacetime::api::common::Motion&
ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::_Internal::motion(const ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters* msg) {
  return *msg->_impl_.motion_;
}
void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::clear_motion() {
  if (_impl_.motion_ != nullptr) _impl_.motion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
}
ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters(const ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.motion_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.motion_ = new ::aalyria::spacetime::api::common::Motion(*from._impl_.motion_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
}

inline void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.motion_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::~ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.motion_;
}

void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.motion_ != nullptr);
      _impl_.motion_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::motion(this),
        _Internal::motion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  return target;
}

::size_t ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1 [json_name = "name"];
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motion_);
  }

  return total_size;
}
::size_t ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1 [json_name = "name"];
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required .aalyria.spacetime.api.common.Motion motion = 2 [json_name = "motion"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motion_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_motion()->::aalyria::spacetime::api::common::Motion::MergeFrom(
          from._internal_motion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::CopyFrom(const ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.motion_->IsInitialized()) return false;
  }
  return true;
}

void ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::InternalSwap(ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.motion_, other->_impl_.motion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[1]);
}
// ===================================================================

class ScenarioSettings_Constellation_OrbitalParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Constellation_OrbitalParameters>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_OrbitalParameters, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters& walker_delta_parameters(const ScenarioSettings_Constellation_OrbitalParameters* msg);
  static void set_has_walker_delta_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters&
ScenarioSettings_Constellation_OrbitalParameters::_Internal::walker_delta_parameters(const ScenarioSettings_Constellation_OrbitalParameters* msg) {
  return *msg->_impl_.walker_delta_parameters_;
}
ScenarioSettings_Constellation_OrbitalParameters::ScenarioSettings_Constellation_OrbitalParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
}
ScenarioSettings_Constellation_OrbitalParameters::ScenarioSettings_Constellation_OrbitalParameters(const ScenarioSettings_Constellation_OrbitalParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Constellation_OrbitalParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arbitrary_motion_parameters_){from._impl_.arbitrary_motion_parameters_}
    , decltype(_impl_.walker_delta_parameters_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.walker_delta_parameters_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters(*from._impl_.walker_delta_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
}

inline void ScenarioSettings_Constellation_OrbitalParameters::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arbitrary_motion_parameters_){arena}
    , decltype(_impl_.walker_delta_parameters_){nullptr}
  };
}

ScenarioSettings_Constellation_OrbitalParameters::~ScenarioSettings_Constellation_OrbitalParameters() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Constellation_OrbitalParameters::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_arbitrary_motion_parameters()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.walker_delta_parameters_;
}

void ScenarioSettings_Constellation_OrbitalParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Constellation_OrbitalParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_arbitrary_motion_parameters()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.walker_delta_parameters_ != nullptr);
    _impl_.walker_delta_parameters_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Constellation_OrbitalParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters walker_delta_parameters = 2 [json_name = "walkerDeltaParameters"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_walker_delta_parameters(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters arbitrary_motion_parameters = 3 [json_name = "arbitraryMotionParameters"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arbitrary_motion_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Constellation_OrbitalParameters::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters walker_delta_parameters = 2 [json_name = "walkerDeltaParameters"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::walker_delta_parameters(this),
        _Internal::walker_delta_parameters(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters arbitrary_motion_parameters = 3 [json_name = "arbitraryMotionParameters"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arbitrary_motion_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_arbitrary_motion_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  return target;
}

::size_t ScenarioSettings_Constellation_OrbitalParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.ArbitraryMotionParameters arbitrary_motion_parameters = 3 [json_name = "arbitraryMotionParameters"];
  total_size += 1UL * this->_internal_arbitrary_motion_parameters_size();
  for (const auto& msg : this->_internal_arbitrary_motion_parameters()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters.WalkerDeltaParameters walker_delta_parameters = 2 [json_name = "walkerDeltaParameters"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.walker_delta_parameters_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Constellation_OrbitalParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Constellation_OrbitalParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Constellation_OrbitalParameters::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Constellation_OrbitalParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Constellation_OrbitalParameters*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Constellation_OrbitalParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_arbitrary_motion_parameters()->MergeFrom(from._internal_arbitrary_motion_parameters());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_walker_delta_parameters()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters::MergeFrom(
        from._internal_walker_delta_parameters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Constellation_OrbitalParameters::CopyFrom(const ScenarioSettings_Constellation_OrbitalParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Constellation_OrbitalParameters::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_arbitrary_motion_parameters()))
    return false;
  return true;
}

void ScenarioSettings_Constellation_OrbitalParameters::InternalSwap(ScenarioSettings_Constellation_OrbitalParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_arbitrary_motion_parameters()->InternalSwap(other->_internal_mutable_arbitrary_motion_parameters());
  swap(_impl_.walker_delta_parameters_, other->_impl_.walker_delta_parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Constellation_OrbitalParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[2]);
}
// ===================================================================

class ScenarioSettings_Constellation_ServiceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Constellation_ServiceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_ServiceRequest, _impl_._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uplink_capacity_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_downlink_capacity_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScenarioSettings_Constellation_ServiceRequest::ScenarioSettings_Constellation_ServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
}
ScenarioSettings_Constellation_ServiceRequest::ScenarioSettings_Constellation_ServiceRequest(const ScenarioSettings_Constellation_ServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Constellation_ServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pop_id_) {}

    , decltype(_impl_.uplink_capacity_bps_) {}

    , decltype(_impl_.downlink_capacity_bps_) {}

    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pop_id_.Set(from._internal_pop_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uplink_capacity_bps_, &from._impl_.uplink_capacity_bps_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.uplink_capacity_bps_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
}

inline void ScenarioSettings_Constellation_ServiceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pop_id_) {}

    , decltype(_impl_.uplink_capacity_bps_) { 0 }

    , decltype(_impl_.downlink_capacity_bps_) { 0 }

    , decltype(_impl_.priority_) { 0 }

  };
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_Constellation_ServiceRequest::~ScenarioSettings_Constellation_ServiceRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Constellation_ServiceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pop_id_.Destroy();
}

void ScenarioSettings_Constellation_ServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Constellation_ServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pop_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.uplink_capacity_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.uplink_capacity_bps_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Constellation_ServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pop_id = 1 [json_name = "popId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest.pop_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double uplink_capacity_bps = 2 [json_name = "uplinkCapacityBps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_uplink_capacity_bps(&has_bits);
          _impl_.uplink_capacity_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double downlink_capacity_bps = 3 [json_name = "downlinkCapacityBps"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_downlink_capacity_bps(&has_bits);
          _impl_.downlink_capacity_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double priority = 4 [json_name = "priority"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Constellation_ServiceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pop_id = 1 [json_name = "popId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pop_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest.pop_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional double uplink_capacity_bps = 2 [json_name = "uplinkCapacityBps"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_uplink_capacity_bps(), target);
  }

  // optional double downlink_capacity_bps = 3 [json_name = "downlinkCapacityBps"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_downlink_capacity_bps(), target);
  }

  // optional double priority = 4 [json_name = "priority"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  return target;
}

::size_t ScenarioSettings_Constellation_ServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string pop_id = 1 [json_name = "popId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pop_id());
    }

    // optional double uplink_capacity_bps = 2 [json_name = "uplinkCapacityBps"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double downlink_capacity_bps = 3 [json_name = "downlinkCapacityBps"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double priority = 4 [json_name = "priority"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Constellation_ServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Constellation_ServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Constellation_ServiceRequest::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Constellation_ServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Constellation_ServiceRequest*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Constellation_ServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pop_id(from._internal_pop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uplink_capacity_bps_ = from._impl_.uplink_capacity_bps_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.downlink_capacity_bps_ = from._impl_.downlink_capacity_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Constellation_ServiceRequest::CopyFrom(const ScenarioSettings_Constellation_ServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Constellation_ServiceRequest::IsInitialized() const {
  return true;
}

void ScenarioSettings_Constellation_ServiceRequest::InternalSwap(ScenarioSettings_Constellation_ServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pop_id_, lhs_arena,
                                       &other->_impl_.pop_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_ServiceRequest, _impl_.priority_)
      + sizeof(ScenarioSettings_Constellation_ServiceRequest::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation_ServiceRequest, _impl_.uplink_capacity_bps_)>(
          reinterpret_cast<char*>(&_impl_.uplink_capacity_bps_),
          reinterpret_cast<char*>(&other->_impl_.uplink_capacity_bps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Constellation_ServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[3]);
}
// ===================================================================

class ScenarioSettings_Constellation::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Constellation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters& orbital_parameters(const ScenarioSettings_Constellation* msg);
  static void set_has_orbital_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage& storage(const ScenarioSettings_Constellation* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters&
ScenarioSettings_Constellation::_Internal::orbital_parameters(const ScenarioSettings_Constellation* msg) {
  return *msg->_impl_.orbital_parameters_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage&
ScenarioSettings_Constellation::_Internal::storage(const ScenarioSettings_Constellation* msg) {
  return *msg->_impl_.storage_;
}
void ScenarioSettings_Constellation::clear_storage() {
  if (_impl_.storage_ != nullptr) _impl_.storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ScenarioSettings_Constellation::ScenarioSettings_Constellation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
}
ScenarioSettings_Constellation::ScenarioSettings_Constellation(const ScenarioSettings_Constellation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Constellation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_models_){from._impl_.transceiver_models_}
    , decltype(_impl_.wireless_interfaces_){from._impl_.wireless_interfaces_}
    , decltype(_impl_.service_request_){from._impl_.service_request_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.orbital_parameters_){nullptr}
    , decltype(_impl_.storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.orbital_parameters_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters(*from._impl_.orbital_parameters_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.storage_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage(*from._impl_.storage_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
}

inline void ScenarioSettings_Constellation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_models_){arena}
    , decltype(_impl_.wireless_interfaces_){arena}
    , decltype(_impl_.service_request_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.orbital_parameters_){nullptr}
    , decltype(_impl_.storage_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_Constellation::~ScenarioSettings_Constellation() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Constellation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_wireless_interfaces()->~RepeatedPtrField();
  _internal_mutable_service_request()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orbital_parameters_;
  if (this != internal_default_instance()) delete _impl_.storage_;
}

void ScenarioSettings_Constellation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Constellation::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_transceiver_models()->Clear();
  _internal_mutable_wireless_interfaces()->Clear();
  _internal_mutable_service_request()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.orbital_parameters_ != nullptr);
      _impl_.orbital_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.storage_ != nullptr);
      _impl_.storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Constellation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters orbital_parameters = 2 [json_name = "orbitalParameters"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orbital_parameters(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 3 [json_name = "transceiverModels"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 4 [json_name = "wirelessInterfaces"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 6 [json_name = "storage"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest service_request = 7 [json_name = "serviceRequest"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Constellation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters orbital_parameters = 2 [json_name = "orbitalParameters"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orbital_parameters(this),
        _Internal::orbital_parameters(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 3 [json_name = "transceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 4 [json_name = "wirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string type = 5 [json_name = "type"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 6 [json_name = "storage"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::storage(this),
        _Internal::storage(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest service_request = 7 [json_name = "serviceRequest"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_request_size()); i < n; i++) {
    const auto& repfield = this->_internal_service_request(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  return target;
}

::size_t ScenarioSettings_Constellation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 3 [json_name = "transceiverModels"];
  total_size += 1UL * this->_internal_transceiver_models_size();
  for (const auto& msg : this->_internal_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 4 [json_name = "wirelessInterfaces"];
  total_size += 1UL * this->_internal_wireless_interfaces_size();
  for (const auto& msg : this->_internal_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.ServiceRequest service_request = 7 [json_name = "serviceRequest"];
  total_size += 1UL * this->_internal_service_request_size();
  for (const auto& msg : this->_internal_service_request()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string type = 5 [json_name = "type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation.OrbitalParameters orbital_parameters = 2 [json_name = "orbitalParameters"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orbital_parameters_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.NetworkNode.Storage storage = 6 [json_name = "storage"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.storage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Constellation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Constellation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Constellation::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Constellation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Constellation*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Constellation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transceiver_models()->MergeFrom(from._internal_transceiver_models());
  _this->_internal_mutable_wireless_interfaces()->MergeFrom(from._internal_wireless_interfaces());
  _this->_internal_mutable_service_request()->MergeFrom(from._internal_service_request());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_orbital_parameters()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters::MergeFrom(
          from._internal_orbital_parameters());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_storage()->::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkNode_Storage::MergeFrom(
          from._internal_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Constellation::CopyFrom(const ScenarioSettings_Constellation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Constellation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_models()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.orbital_parameters_->IsInitialized()) return false;
  }
  return true;
}

void ScenarioSettings_Constellation::InternalSwap(ScenarioSettings_Constellation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_transceiver_models()->InternalSwap(other->_internal_mutable_transceiver_models());
  _internal_mutable_wireless_interfaces()->InternalSwap(other->_internal_mutable_wireless_interfaces());
  _internal_mutable_service_request()->InternalSwap(other->_internal_mutable_service_request());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation, _impl_.storage_)
      + sizeof(ScenarioSettings_Constellation::_impl_.storage_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_Constellation, _impl_.orbital_parameters_)>(
          reinterpret_cast<char*>(&_impl_.orbital_parameters_),
          reinterpret_cast<char*>(&other->_impl_.orbital_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Constellation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[4]);
}
// ===================================================================

class ScenarioSettings_WirelessInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_WirelessInterface>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_WirelessInterface, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transceiver_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioSettings_WirelessInterface::ScenarioSettings_WirelessInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
}
ScenarioSettings_WirelessInterface::ScenarioSettings_WirelessInterface(const ScenarioSettings_WirelessInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_WirelessInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transceiver_model_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.transceiver_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transceiver_model_id_.Set(from._internal_transceiver_model_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
}

inline void ScenarioSettings_WirelessInterface::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transceiver_model_id_) {}

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transceiver_model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transceiver_model_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_WirelessInterface::~ScenarioSettings_WirelessInterface() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_WirelessInterface::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.transceiver_model_id_.Destroy();
}

void ScenarioSettings_WirelessInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_WirelessInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.transceiver_model_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_WirelessInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string transceiver_model_id = 3 [json_name = "transceiverModelId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transceiver_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface.transceiver_model_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_WirelessInterface::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string transceiver_model_id = 3 [json_name = "transceiverModelId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_transceiver_model_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface.transceiver_model_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  return target;
}

::size_t ScenarioSettings_WirelessInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional string transceiver_model_id = 3 [json_name = "transceiverModelId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_transceiver_model_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_WirelessInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_WirelessInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_WirelessInterface::GetClassData() const { return &_class_data_; }


void ScenarioSettings_WirelessInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_WirelessInterface*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_WirelessInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_transceiver_model_id(from._internal_transceiver_model_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_WirelessInterface::CopyFrom(const ScenarioSettings_WirelessInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_WirelessInterface::IsInitialized() const {
  return true;
}

void ScenarioSettings_WirelessInterface::InternalSwap(ScenarioSettings_WirelessInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transceiver_model_id_, lhs_arena,
                                       &other->_impl_.transceiver_model_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_WirelessInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[5]);
}
// ===================================================================

class ScenarioSettings_TransmitterDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_TransmitterDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_TransmitterDefinition, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_selection_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ScenarioSettings_TransmitterDefinition::clear_signal_processing_step() {
  _internal_mutable_signal_processing_step()->Clear();
}
ScenarioSettings_TransmitterDefinition::ScenarioSettings_TransmitterDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
}
ScenarioSettings_TransmitterDefinition::ScenarioSettings_TransmitterDefinition(const ScenarioSettings_TransmitterDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_TransmitterDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequential_channel_definition_){from._impl_.sequential_channel_definition_}
    , decltype(_impl_.signal_processing_step_){from._impl_.signal_processing_step_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.channel_selection_method_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
}

inline void ScenarioSettings_TransmitterDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequential_channel_definition_){arena}
    , decltype(_impl_.signal_processing_step_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.channel_selection_method_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_TransmitterDefinition::~ScenarioSettings_TransmitterDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_TransmitterDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_sequential_channel_definition()->~RepeatedPtrField();
  _internal_mutable_signal_processing_step()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ScenarioSettings_TransmitterDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_TransmitterDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sequential_channel_definition()->Clear();
  _internal_mutable_signal_processing_step()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.channel_selection_method_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_TransmitterDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequential_channel_definition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::ChannelSelectionMethod_IsValid(static_cast<int>(val)))) {
            _internal_set_channel_selection_method(static_cast<::aalyria::spacetime::api::common::ChannelSelectionMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_processing_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_TransmitterDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sequential_channel_definition_size()); i < n; i++) {
    const auto& repfield = this->_internal_sequential_channel_definition(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_channel_selection_method(), target);
  }

  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_processing_step_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal_processing_step(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  return target;
}

::size_t ScenarioSettings_TransmitterDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
  total_size += 1UL * this->_internal_sequential_channel_definition_size();
  for (const auto& msg : this->_internal_sequential_channel_definition()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.TransmitSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
  total_size += 1UL * this->_internal_signal_processing_step_size();
  for (const auto& msg : this->_internal_signal_processing_step()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_selection_method());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_TransmitterDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_TransmitterDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_TransmitterDefinition::GetClassData() const { return &_class_data_; }


void ScenarioSettings_TransmitterDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_TransmitterDefinition*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_TransmitterDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sequential_channel_definition()->MergeFrom(from._internal_sequential_channel_definition());
  _this->_internal_mutable_signal_processing_step()->MergeFrom(from._internal_signal_processing_step());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_TransmitterDefinition::CopyFrom(const ScenarioSettings_TransmitterDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_TransmitterDefinition::IsInitialized() const {
  return true;
}

void ScenarioSettings_TransmitterDefinition::InternalSwap(ScenarioSettings_TransmitterDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_sequential_channel_definition()->InternalSwap(other->_internal_mutable_sequential_channel_definition());
  _internal_mutable_signal_processing_step()->InternalSwap(other->_internal_mutable_signal_processing_step());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.channel_selection_method_, other->_impl_.channel_selection_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_TransmitterDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[6]);
}
// ===================================================================

class ScenarioSettings_ReceiverDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_ReceiverDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_ReceiverDefinition, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_selection_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ScenarioSettings_ReceiverDefinition::clear_signal_processing_step() {
  _internal_mutable_signal_processing_step()->Clear();
}
ScenarioSettings_ReceiverDefinition::ScenarioSettings_ReceiverDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
}
ScenarioSettings_ReceiverDefinition::ScenarioSettings_ReceiverDefinition(const ScenarioSettings_ReceiverDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_ReceiverDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequential_channel_definition_){from._impl_.sequential_channel_definition_}
    , decltype(_impl_.signal_processing_step_){from._impl_.signal_processing_step_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.channel_selection_method_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
}

inline void ScenarioSettings_ReceiverDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequential_channel_definition_){arena}
    , decltype(_impl_.signal_processing_step_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.channel_selection_method_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_ReceiverDefinition::~ScenarioSettings_ReceiverDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_ReceiverDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_sequential_channel_definition()->~RepeatedPtrField();
  _internal_mutable_signal_processing_step()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ScenarioSettings_ReceiverDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_ReceiverDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sequential_channel_definition()->Clear();
  _internal_mutable_signal_processing_step()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.channel_selection_method_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_ReceiverDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequential_channel_definition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::common::ChannelSelectionMethod_IsValid(static_cast<int>(val)))) {
            _internal_set_channel_selection_method(static_cast<::aalyria::spacetime::api::common::ChannelSelectionMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.ReceiveSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_processing_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_ReceiverDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sequential_channel_definition_size()); i < n; i++) {
    const auto& repfield = this->_internal_sequential_channel_definition(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_channel_selection_method(), target);
  }

  // repeated .aalyria.spacetime.api.common.ReceiveSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_processing_step_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal_processing_step(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  return target;
}

::size_t ScenarioSettings_ReceiverDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition sequential_channel_definition = 2 [json_name = "sequentialChannelDefinition"];
  total_size += 1UL * this->_internal_sequential_channel_definition_size();
  for (const auto& msg : this->_internal_sequential_channel_definition()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.common.ReceiveSignalProcessor signal_processing_step = 4 [json_name = "signalProcessingStep"];
  total_size += 1UL * this->_internal_signal_processing_step_size();
  for (const auto& msg : this->_internal_signal_processing_step()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .aalyria.spacetime.api.common.ChannelSelectionMethod channel_selection_method = 3 [json_name = "channelSelectionMethod"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_selection_method());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_ReceiverDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_ReceiverDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_ReceiverDefinition::GetClassData() const { return &_class_data_; }


void ScenarioSettings_ReceiverDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_ReceiverDefinition*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_ReceiverDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sequential_channel_definition()->MergeFrom(from._internal_sequential_channel_definition());
  _this->_internal_mutable_signal_processing_step()->MergeFrom(from._internal_signal_processing_step());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_selection_method_ = from._impl_.channel_selection_method_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_ReceiverDefinition::CopyFrom(const ScenarioSettings_ReceiverDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_ReceiverDefinition::IsInitialized() const {
  return true;
}

void ScenarioSettings_ReceiverDefinition::InternalSwap(ScenarioSettings_ReceiverDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_sequential_channel_definition()->InternalSwap(other->_internal_mutable_sequential_channel_definition());
  _internal_mutable_signal_processing_step()->InternalSwap(other->_internal_mutable_signal_processing_step());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.channel_selection_method_, other->_impl_.channel_selection_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_ReceiverDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[7]);
}
// ===================================================================

class ScenarioSettings_TransceiverModel::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_TransceiverModel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_TransceiverModel, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition& transmitter(const ScenarioSettings_TransceiverModel* msg);
  static void set_has_transmitter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition& receiver(const ScenarioSettings_TransceiverModel* msg);
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::AntennaDefinition& antenna_definition(const ScenarioSettings_TransceiverModel* msg);
  static void set_has_antenna_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition&
ScenarioSettings_TransceiverModel::_Internal::transmitter(const ScenarioSettings_TransceiverModel* msg) {
  return *msg->_impl_.transmitter_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition&
ScenarioSettings_TransceiverModel::_Internal::receiver(const ScenarioSettings_TransceiverModel* msg) {
  return *msg->_impl_.receiver_;
}
const ::aalyria::spacetime::api::common::AntennaDefinition&
ScenarioSettings_TransceiverModel::_Internal::antenna_definition(const ScenarioSettings_TransceiverModel* msg) {
  return *msg->_impl_.antenna_definition_;
}
void ScenarioSettings_TransceiverModel::clear_antenna_definition() {
  if (_impl_.antenna_definition_ != nullptr) _impl_.antenna_definition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ScenarioSettings_TransceiverModel::clear_macs() {
  _internal_mutable_macs()->Clear();
}
ScenarioSettings_TransceiverModel::ScenarioSettings_TransceiverModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
}
ScenarioSettings_TransceiverModel::ScenarioSettings_TransceiverModel(const ScenarioSettings_TransceiverModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_TransceiverModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macs_){from._impl_.macs_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transmitter_){nullptr}
    , decltype(_impl_.receiver_){nullptr}
    , decltype(_impl_.antenna_definition_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transmitter_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition(*from._impl_.transmitter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.receiver_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition(*from._impl_.receiver_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.antenna_definition_ = new ::aalyria::spacetime::api::common::AntennaDefinition(*from._impl_.antenna_definition_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
}

inline void ScenarioSettings_TransceiverModel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.macs_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.transmitter_){nullptr}
    , decltype(_impl_.receiver_){nullptr}
    , decltype(_impl_.antenna_definition_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_TransceiverModel::~ScenarioSettings_TransceiverModel() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_TransceiverModel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_macs()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transmitter_;
  if (this != internal_default_instance()) delete _impl_.receiver_;
  if (this != internal_default_instance()) delete _impl_.antenna_definition_;
}

void ScenarioSettings_TransceiverModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_TransceiverModel::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_macs()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transmitter_ != nullptr);
      _impl_.transmitter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.receiver_ != nullptr);
      _impl_.receiver_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.antenna_definition_ != nullptr);
      _impl_.antenna_definition_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_TransceiverModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition receiver = 3 [json_name = "receiver"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.AntennaDefinition antenna_definition = 4 [json_name = "antennaDefinition"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_antenna_definition(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.WirelessMac macs = 5 [json_name = "macs"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_macs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_TransceiverModel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transmitter(this),
        _Internal::transmitter(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition receiver = 3 [json_name = "receiver"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::receiver(this),
        _Internal::receiver(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.AntennaDefinition antenna_definition = 4 [json_name = "antennaDefinition"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::antenna_definition(this),
        _Internal::antenna_definition(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.WirelessMac macs = 5 [json_name = "macs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_macs_size()); i < n; i++) {
    const auto& repfield = this->_internal_macs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  return target;
}

::size_t ScenarioSettings_TransceiverModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.WirelessMac macs = 5 [json_name = "macs"];
  total_size += 1UL * this->_internal_macs_size();
  for (const auto& msg : this->_internal_macs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransmitterDefinition transmitter = 2 [json_name = "transmitter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transmitter_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ReceiverDefinition receiver = 3 [json_name = "receiver"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.receiver_);
    }

    // optional .aalyria.spacetime.api.common.AntennaDefinition antenna_definition = 4 [json_name = "antennaDefinition"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.antenna_definition_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_TransceiverModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_TransceiverModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_TransceiverModel::GetClassData() const { return &_class_data_; }


void ScenarioSettings_TransceiverModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_TransceiverModel*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_TransceiverModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_macs()->MergeFrom(from._internal_macs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transmitter()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition::MergeFrom(
          from._internal_transmitter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_receiver()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition::MergeFrom(
          from._internal_receiver());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_antenna_definition()->::aalyria::spacetime::api::common::AntennaDefinition::MergeFrom(
          from._internal_antenna_definition());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_TransceiverModel::CopyFrom(const ScenarioSettings_TransceiverModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_TransceiverModel::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_macs()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.antenna_definition_->IsInitialized()) return false;
  }
  return true;
}

void ScenarioSettings_TransceiverModel::InternalSwap(ScenarioSettings_TransceiverModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_macs()->InternalSwap(other->_internal_mutable_macs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_TransceiverModel, _impl_.antenna_definition_)
      + sizeof(ScenarioSettings_TransceiverModel::_impl_.antenna_definition_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_TransceiverModel, _impl_.transmitter_)>(
          reinterpret_cast<char*>(&_impl_.transmitter_),
          reinterpret_cast<char*>(&other->_impl_.transmitter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_TransceiverModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[8]);
}
// ===================================================================

class ScenarioSettings_SequentialChannelDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_SequentialChannelDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_SequentialChannelDefinition, _impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starting_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bandwidth_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_power_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScenarioSettings_SequentialChannelDefinition::ScenarioSettings_SequentialChannelDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
}
ScenarioSettings_SequentialChannelDefinition::ScenarioSettings_SequentialChannelDefinition(const ScenarioSettings_SequentialChannelDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_SequentialChannelDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.starting_frequency_hz_) {}

    , decltype(_impl_.bandwidth_hz_) {}

    , decltype(_impl_.tx_power_w_) {}

    , decltype(_impl_.channel_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.starting_frequency_hz_, &from._impl_.starting_frequency_hz_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.channel_count_) -
    reinterpret_cast<char*>(&_impl_.starting_frequency_hz_)) + sizeof(_impl_.channel_count_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
}

inline void ScenarioSettings_SequentialChannelDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.starting_frequency_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.bandwidth_hz_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_power_w_) { 0 }

    , decltype(_impl_.channel_count_) { 0u }

  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_SequentialChannelDefinition::~ScenarioSettings_SequentialChannelDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_SequentialChannelDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
}

void ScenarioSettings_SequentialChannelDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_SequentialChannelDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.channel_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.starting_frequency_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_count_) -
        reinterpret_cast<char*>(&_impl_.starting_frequency_hz_)) + sizeof(_impl_.channel_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_SequentialChannelDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition.channel_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 channel_count = 2 [json_name = "channelCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_count(&has_bits);
          _impl_.channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 starting_frequency_hz = 3 [json_name = "startingFrequencyHz"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_starting_frequency_hz(&has_bits);
          _impl_.starting_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bandwidth_hz = 4 [json_name = "bandwidthHz"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bandwidth_hz(&has_bits);
          _impl_.bandwidth_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double tx_power_w = 5 [json_name = "txPowerW"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_tx_power_w(&has_bits);
          _impl_.tx_power_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_SequentialChannelDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_id = 1 [json_name = "channelId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 channel_count = 2 [json_name = "channelCount"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_channel_count(), target);
  }

  // optional uint64 starting_frequency_hz = 3 [json_name = "startingFrequencyHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_starting_frequency_hz(), target);
  }

  // optional uint64 bandwidth_hz = 4 [json_name = "bandwidthHz"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_bandwidth_hz(), target);
  }

  // optional double tx_power_w = 5 [json_name = "txPowerW"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_tx_power_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  return target;
}

::size_t ScenarioSettings_SequentialChannelDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string channel_id = 1 [json_name = "channelId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_channel_id());
    }

    // optional uint64 starting_frequency_hz = 3 [json_name = "startingFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_starting_frequency_hz());
    }

    // optional uint64 bandwidth_hz = 4 [json_name = "bandwidthHz"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bandwidth_hz());
    }

    // optional double tx_power_w = 5 [json_name = "txPowerW"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional uint32 channel_count = 2 [json_name = "channelCount"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_channel_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_SequentialChannelDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_SequentialChannelDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_SequentialChannelDefinition::GetClassData() const { return &_class_data_; }


void ScenarioSettings_SequentialChannelDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_SequentialChannelDefinition*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_SequentialChannelDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_id(from._internal_channel_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.starting_frequency_hz_ = from._impl_.starting_frequency_hz_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bandwidth_hz_ = from._impl_.bandwidth_hz_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tx_power_w_ = from._impl_.tx_power_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channel_count_ = from._impl_.channel_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_SequentialChannelDefinition::CopyFrom(const ScenarioSettings_SequentialChannelDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.SequentialChannelDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_SequentialChannelDefinition::IsInitialized() const {
  return true;
}

void ScenarioSettings_SequentialChannelDefinition::InternalSwap(ScenarioSettings_SequentialChannelDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_SequentialChannelDefinition, _impl_.channel_count_)
      + sizeof(ScenarioSettings_SequentialChannelDefinition::_impl_.channel_count_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_SequentialChannelDefinition, _impl_.starting_frequency_hz_)>(
          reinterpret_cast<char*>(&_impl_.starting_frequency_hz_),
          reinterpret_cast<char*>(&other->_impl_.starting_frequency_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_SequentialChannelDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[9]);
}
// ===================================================================

class ScenarioSettings_Gateway::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Gateway>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Gateway, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::GeodeticWgs84& location(const ScenarioSettings_Gateway* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wired_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_wired_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent& agent(const ScenarioSettings_Gateway* msg);
  static void set_has_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::common::GeodeticWgs84&
ScenarioSettings_Gateway::_Internal::location(const ScenarioSettings_Gateway* msg) {
  return *msg->_impl_.location_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent&
ScenarioSettings_Gateway::_Internal::agent(const ScenarioSettings_Gateway* msg) {
  return *msg->_impl_.agent_;
}
void ScenarioSettings_Gateway::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
/*static*/ const ::_pbi::LazyString ScenarioSettings_Gateway::Impl_::_i_give_permission_to_break_this_code_default_wired_interface_id_{
    {{"WAN", 3}},
    {nullptr},
};
void ScenarioSettings_Gateway::clear_agent() {
  if (_impl_.agent_ != nullptr) _impl_.agent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ScenarioSettings_Gateway::ScenarioSettings_Gateway(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
}
ScenarioSettings_Gateway::ScenarioSettings_Gateway(const ScenarioSettings_Gateway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Gateway* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_models_){from._impl_.transceiver_models_}
    , decltype(_impl_.wireless_interfaces_){from._impl_.wireless_interfaces_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.wired_interface_id_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.agent_){nullptr}
    , decltype(_impl_.max_wired_data_rate_bps_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.wired_interface_id_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.wired_interface_id_.Set(from._internal_wired_interface_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.location_ = new ::aalyria::spacetime::api::common::GeodeticWgs84(*from._impl_.location_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.agent_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent(*from._impl_.agent_);
  }
  _this->_impl_.max_wired_data_rate_bps_ = from._impl_.max_wired_data_rate_bps_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
}

inline void ScenarioSettings_Gateway::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transceiver_models_){arena}
    , decltype(_impl_.wireless_interfaces_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.wired_interface_id_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.agent_){nullptr}
    , decltype(_impl_.max_wired_data_rate_bps_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wired_interface_id_.InitDefault();
}

ScenarioSettings_Gateway::~ScenarioSettings_Gateway() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Gateway::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_wireless_interfaces()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.wired_interface_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.agent_;
}

void ScenarioSettings_Gateway::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Gateway::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_transceiver_models()->Clear();
  _internal_mutable_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wired_interface_id_.ClearToDefault(::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway::Impl_::_i_give_permission_to_break_this_code_default_wired_interface_id_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.agent_ != nullptr);
      _impl_.agent_->Clear();
    }
  }
  _impl_.max_wired_data_rate_bps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Gateway::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 3 [json_name = "agent"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double max_wired_data_rate_bps = 6 [json_name = "maxWiredDataRateBps"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_max_wired_data_rate_bps(&has_bits);
          _impl_.max_wired_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string wired_interface_id = 10 [default = "WAN", json_name = "wiredInterfaceId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_wired_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway.wired_interface_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Gateway::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 3 [json_name = "agent"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::agent(this),
        _Internal::agent(this).GetCachedSize(), target, stream);
  }

  // optional double max_wired_data_rate_bps = 6 [json_name = "maxWiredDataRateBps"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_max_wired_data_rate_bps(), target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string wired_interface_id = 10 [default = "WAN", json_name = "wiredInterfaceId"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_wired_interface_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway.wired_interface_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  return target;
}

::size_t ScenarioSettings_Gateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
  total_size += 1UL * this->_internal_transceiver_models_size();
  for (const auto& msg : this->_internal_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
  total_size += 1UL * this->_internal_wireless_interfaces_size();
  for (const auto& msg : this->_internal_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string wired_interface_id = 10 [default = "WAN", json_name = "wiredInterfaceId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_wired_interface_id());
    }

    // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.SdnAgent agent = 3 [json_name = "agent"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.agent_);
    }

    // optional double max_wired_data_rate_bps = 6 [json_name = "maxWiredDataRateBps"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Gateway::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Gateway::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Gateway::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Gateway::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Gateway*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Gateway&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transceiver_models()->MergeFrom(from._internal_transceiver_models());
  _this->_internal_mutable_wireless_interfaces()->MergeFrom(from._internal_wireless_interfaces());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_wired_interface_id(from._internal_wired_interface_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_location()->::aalyria::spacetime::api::common::GeodeticWgs84::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_agent()->::aalyria::spacetime::api::nbi::v1alpha::resources::SdnAgent::MergeFrom(
          from._internal_agent());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_wired_data_rate_bps_ = from._impl_.max_wired_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Gateway::CopyFrom(const ScenarioSettings_Gateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Gateway::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_Gateway::InternalSwap(ScenarioSettings_Gateway* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_transceiver_models()->InternalSwap(other->_internal_mutable_transceiver_models());
  _internal_mutable_wireless_interfaces()->InternalSwap(other->_internal_mutable_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wired_interface_id_, lhs_arena,
                                       &other->_impl_.wired_interface_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_Gateway, _impl_.max_wired_data_rate_bps_)
      + sizeof(ScenarioSettings_Gateway::_impl_.max_wired_data_rate_bps_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_Gateway, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Gateway::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[10]);
}
// ===================================================================

class ScenarioSettings_ScenarioChannelDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_ScenarioChannelDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_ScenarioChannelDefinition, _impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::BandProfile& channel(const ScenarioSettings_ScenarioChannelDefinition* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::BandProfile&
ScenarioSettings_ScenarioChannelDefinition::_Internal::channel(const ScenarioSettings_ScenarioChannelDefinition* msg) {
  return *msg->_impl_.channel_;
}
void ScenarioSettings_ScenarioChannelDefinition::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ScenarioSettings_ScenarioChannelDefinition::ScenarioSettings_ScenarioChannelDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
}
ScenarioSettings_ScenarioChannelDefinition::ScenarioSettings_ScenarioChannelDefinition(const ScenarioSettings_ScenarioChannelDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_ScenarioChannelDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.channel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.channel_ = new ::aalyria::spacetime::api::common::BandProfile(*from._impl_.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
}

inline void ScenarioSettings_ScenarioChannelDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.channel_){nullptr}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_ScenarioChannelDefinition::~ScenarioSettings_ScenarioChannelDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_ScenarioChannelDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.channel_;
}

void ScenarioSettings_ScenarioChannelDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_ScenarioChannelDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.channel_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.channel_ != nullptr);
      _impl_.channel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_ScenarioChannelDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition.channel_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.BandProfile channel = 2 [json_name = "channel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_ScenarioChannelDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_id = 1 [json_name = "channelId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.BandProfile channel = 2 [json_name = "channel"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  return target;
}

::size_t ScenarioSettings_ScenarioChannelDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_id = 1 [json_name = "channelId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_channel_id());
    }

    // optional .aalyria.spacetime.api.common.BandProfile channel = 2 [json_name = "channel"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.channel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_ScenarioChannelDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_ScenarioChannelDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_ScenarioChannelDefinition::GetClassData() const { return &_class_data_; }


void ScenarioSettings_ScenarioChannelDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_ScenarioChannelDefinition*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_ScenarioChannelDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_id(from._internal_channel_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_channel()->::aalyria::spacetime::api::common::BandProfile::MergeFrom(
          from._internal_channel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_ScenarioChannelDefinition::CopyFrom(const ScenarioSettings_ScenarioChannelDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_ScenarioChannelDefinition::IsInitialized() const {
  return true;
}

void ScenarioSettings_ScenarioChannelDefinition::InternalSwap(ScenarioSettings_ScenarioChannelDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_ScenarioChannelDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[11]);
}
// ===================================================================

class ScenarioSettings_AntennaPatternSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_AntennaPatternSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_AntennaPatternSettings, _impl_._has_bits_);
  static void set_has_antenna_pattern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& antenna_pattern(const ScenarioSettings_AntennaPatternSettings* msg);
  static void set_has_antenna_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
ScenarioSettings_AntennaPatternSettings::_Internal::antenna_pattern(const ScenarioSettings_AntennaPatternSettings* msg) {
  return *msg->_impl_.antenna_pattern_;
}
void ScenarioSettings_AntennaPatternSettings::clear_antenna_pattern() {
  if (_impl_.antenna_pattern_ != nullptr) _impl_.antenna_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ScenarioSettings_AntennaPatternSettings::ScenarioSettings_AntennaPatternSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
}
ScenarioSettings_AntennaPatternSettings::ScenarioSettings_AntennaPatternSettings(const ScenarioSettings_AntennaPatternSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_AntennaPatternSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.antenna_pattern_id_) {}

    , decltype(_impl_.antenna_pattern_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.antenna_pattern_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.antenna_pattern_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.antenna_pattern_id_.Set(from._internal_antenna_pattern_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.antenna_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern(*from._impl_.antenna_pattern_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
}

inline void ScenarioSettings_AntennaPatternSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.antenna_pattern_id_) {}

    , decltype(_impl_.antenna_pattern_){nullptr}
  };
  _impl_.antenna_pattern_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.antenna_pattern_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_AntennaPatternSettings::~ScenarioSettings_AntennaPatternSettings() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_AntennaPatternSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.antenna_pattern_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.antenna_pattern_;
}

void ScenarioSettings_AntennaPatternSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_AntennaPatternSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.antenna_pattern_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.antenna_pattern_ != nullptr);
      _impl_.antenna_pattern_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_AntennaPatternSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string antenna_pattern_id = 1 [json_name = "antennaPatternId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_antenna_pattern_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings.antenna_pattern_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern antenna_pattern = 2 [json_name = "antennaPattern"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_antenna_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_AntennaPatternSettings::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string antenna_pattern_id = 1 [json_name = "antennaPatternId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_antenna_pattern_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings.antenna_pattern_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern antenna_pattern = 2 [json_name = "antennaPattern"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::antenna_pattern(this),
        _Internal::antenna_pattern(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  return target;
}

::size_t ScenarioSettings_AntennaPatternSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string antenna_pattern_id = 1 [json_name = "antennaPatternId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_antenna_pattern_id());
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern antenna_pattern = 2 [json_name = "antennaPattern"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.antenna_pattern_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_AntennaPatternSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_AntennaPatternSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_AntennaPatternSettings::GetClassData() const { return &_class_data_; }


void ScenarioSettings_AntennaPatternSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_AntennaPatternSettings*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_AntennaPatternSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_antenna_pattern_id(from._internal_antenna_pattern_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_antenna_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_antenna_pattern());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_AntennaPatternSettings::CopyFrom(const ScenarioSettings_AntennaPatternSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_AntennaPatternSettings::IsInitialized() const {
  return true;
}

void ScenarioSettings_AntennaPatternSettings::InternalSwap(ScenarioSettings_AntennaPatternSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.antenna_pattern_id_, lhs_arena,
                                       &other->_impl_.antenna_pattern_id_, rhs_arena);
  swap(_impl_.antenna_pattern_, other->_impl_.antenna_pattern_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_AntennaPatternSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[12]);
}
// ===================================================================

class ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_UserTerminal_UserTerminalGridDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::GeodeticWgs84& south_west_corner(const ScenarioSettings_UserTerminal_UserTerminalGridDefinition* msg);
  static void set_has_south_west_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_grid_latitude_spacing_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grid_longitude_spacing_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::aalyria::spacetime::api::common::GeodeticWgs84&
ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_Internal::south_west_corner(const ScenarioSettings_UserTerminal_UserTerminalGridDefinition* msg) {
  return *msg->_impl_.south_west_corner_;
}
void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::clear_south_west_corner() {
  if (_impl_.south_west_corner_ != nullptr) _impl_.south_west_corner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ScenarioSettings_UserTerminal_UserTerminalGridDefinition::ScenarioSettings_UserTerminal_UserTerminalGridDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
}
ScenarioSettings_UserTerminal_UserTerminalGridDefinition::ScenarioSettings_UserTerminal_UserTerminalGridDefinition(const ScenarioSettings_UserTerminal_UserTerminalGridDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_UserTerminal_UserTerminalGridDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.south_west_corner_){nullptr}
    , decltype(_impl_.row_count_) {}

    , decltype(_impl_.column_count_) {}

    , decltype(_impl_.grid_latitude_spacing_deg_) {}

    , decltype(_impl_.grid_longitude_spacing_deg_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.south_west_corner_ = new ::aalyria::spacetime::api::common::GeodeticWgs84(*from._impl_.south_west_corner_);
  }
  ::memcpy(&_impl_.row_count_, &from._impl_.row_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.grid_longitude_spacing_deg_) -
    reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.grid_longitude_spacing_deg_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
}

inline void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.south_west_corner_){nullptr}
    , decltype(_impl_.row_count_) { 0u }

    , decltype(_impl_.column_count_) { 0u }

    , decltype(_impl_.grid_latitude_spacing_deg_) { 0 }

    , decltype(_impl_.grid_longitude_spacing_deg_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_UserTerminal_UserTerminalGridDefinition::~ScenarioSettings_UserTerminal_UserTerminalGridDefinition() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.south_west_corner_;
}

void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.south_west_corner_ != nullptr);
      _impl_.south_west_corner_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.row_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.grid_longitude_spacing_deg_) -
        reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.grid_longitude_spacing_deg_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.GeodeticWgs84 south_west_corner = 1 [json_name = "southWestCorner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_south_west_corner(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 row_count = 2 [json_name = "rowCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_row_count(&has_bits);
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 column_count = 3 [json_name = "columnCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_column_count(&has_bits);
          _impl_.column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double grid_latitude_spacing_deg = 4 [json_name = "gridLatitudeSpacingDeg"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_grid_latitude_spacing_deg(&has_bits);
          _impl_.grid_latitude_spacing_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double grid_longitude_spacing_deg = 5 [json_name = "gridLongitudeSpacingDeg"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_grid_longitude_spacing_deg(&has_bits);
          _impl_.grid_longitude_spacing_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 6 [json_name = "name"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.GeodeticWgs84 south_west_corner = 1 [json_name = "southWestCorner"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::south_west_corner(this),
        _Internal::south_west_corner(this).GetCachedSize(), target, stream);
  }

  // optional uint32 row_count = 2 [json_name = "rowCount"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_row_count(), target);
  }

  // optional uint32 column_count = 3 [json_name = "columnCount"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_column_count(), target);
  }

  // optional double grid_latitude_spacing_deg = 4 [json_name = "gridLatitudeSpacingDeg"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_grid_latitude_spacing_deg(), target);
  }

  // optional double grid_longitude_spacing_deg = 5 [json_name = "gridLongitudeSpacingDeg"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_grid_longitude_spacing_deg(), target);
  }

  // optional string name = 6 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition.name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  return target;
}

::size_t ScenarioSettings_UserTerminal_UserTerminalGridDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 6 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .aalyria.spacetime.api.common.GeodeticWgs84 south_west_corner = 1 [json_name = "southWestCorner"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.south_west_corner_);
    }

    // optional uint32 row_count = 2 [json_name = "rowCount"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_row_count());
    }

    // optional uint32 column_count = 3 [json_name = "columnCount"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_column_count());
    }

    // optional double grid_latitude_spacing_deg = 4 [json_name = "gridLatitudeSpacingDeg"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double grid_longitude_spacing_deg = 5 [json_name = "gridLongitudeSpacingDeg"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_UserTerminal_UserTerminalGridDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_UserTerminal_UserTerminalGridDefinition::GetClassData() const { return &_class_data_; }


void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_UserTerminal_UserTerminalGridDefinition*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_UserTerminal_UserTerminalGridDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_south_west_corner()->::aalyria::spacetime::api::common::GeodeticWgs84::MergeFrom(
          from._internal_south_west_corner());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_count_ = from._impl_.row_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_count_ = from._impl_.column_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.grid_latitude_spacing_deg_ = from._impl_.grid_latitude_spacing_deg_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.grid_longitude_spacing_deg_ = from._impl_.grid_longitude_spacing_deg_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::CopyFrom(const ScenarioSettings_UserTerminal_UserTerminalGridDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_UserTerminal_UserTerminalGridDefinition::IsInitialized() const {
  return true;
}

void ScenarioSettings_UserTerminal_UserTerminalGridDefinition::InternalSwap(ScenarioSettings_UserTerminal_UserTerminalGridDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.grid_longitude_spacing_deg_)
      + sizeof(ScenarioSettings_UserTerminal_UserTerminalGridDefinition::_impl_.grid_longitude_spacing_deg_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminal_UserTerminalGridDefinition, _impl_.south_west_corner_)>(
          reinterpret_cast<char*>(&_impl_.south_west_corner_),
          reinterpret_cast<char*>(&other->_impl_.south_west_corner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_UserTerminal_UserTerminalGridDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[13]);
}
// ===================================================================

class ScenarioSettings_UserTerminal::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_UserTerminal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminal, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioSettings_UserTerminal::ScenarioSettings_UserTerminal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
}
ScenarioSettings_UserTerminal::ScenarioSettings_UserTerminal(const ScenarioSettings_UserTerminal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_UserTerminal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_terminal_grid_definition_){from._impl_.user_terminal_grid_definition_}
    , decltype(_impl_.transceiver_models_){from._impl_.transceiver_models_}
    , decltype(_impl_.wireless_interfaces_){from._impl_.wireless_interfaces_}
    , decltype(_impl_.name_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
}

inline void ScenarioSettings_UserTerminal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_terminal_grid_definition_){arena}
    , decltype(_impl_.transceiver_models_){arena}
    , decltype(_impl_.wireless_interfaces_){arena}
    , decltype(_impl_.name_) {}

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_UserTerminal::~ScenarioSettings_UserTerminal() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_UserTerminal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_user_terminal_grid_definition()->~RepeatedPtrField();
  _internal_mutable_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_wireless_interfaces()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ScenarioSettings_UserTerminal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_UserTerminal::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_user_terminal_grid_definition()->Clear();
  _internal_mutable_transceiver_models()->Clear();
  _internal_mutable_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_UserTerminal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition user_terminal_grid_definition = 2 [json_name = "userTerminalGridDefinition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_terminal_grid_definition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_UserTerminal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition user_terminal_grid_definition = 2 [json_name = "userTerminalGridDefinition"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_terminal_grid_definition_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_terminal_grid_definition(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  return target;
}

::size_t ScenarioSettings_UserTerminal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal.UserTerminalGridDefinition user_terminal_grid_definition = 2 [json_name = "userTerminalGridDefinition"];
  total_size += 1UL * this->_internal_user_terminal_grid_definition_size();
  for (const auto& msg : this->_internal_user_terminal_grid_definition()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 8 [json_name = "transceiverModels"];
  total_size += 1UL * this->_internal_transceiver_models_size();
  for (const auto& msg : this->_internal_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 9 [json_name = "wirelessInterfaces"];
  total_size += 1UL * this->_internal_wireless_interfaces_size();
  for (const auto& msg : this->_internal_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1 [json_name = "name"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_UserTerminal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_UserTerminal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_UserTerminal::GetClassData() const { return &_class_data_; }


void ScenarioSettings_UserTerminal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_UserTerminal*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_UserTerminal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_user_terminal_grid_definition()->MergeFrom(from._internal_user_terminal_grid_definition());
  _this->_internal_mutable_transceiver_models()->MergeFrom(from._internal_transceiver_models());
  _this->_internal_mutable_wireless_interfaces()->MergeFrom(from._internal_wireless_interfaces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_UserTerminal::CopyFrom(const ScenarioSettings_UserTerminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_UserTerminal::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_UserTerminal::InternalSwap(ScenarioSettings_UserTerminal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_user_terminal_grid_definition()->InternalSwap(other->_internal_mutable_user_terminal_grid_definition());
  _internal_mutable_transceiver_models()->InternalSwap(other->_internal_mutable_transceiver_models());
  _internal_mutable_wireless_interfaces()->InternalSwap(other->_internal_mutable_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_UserTerminal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[14]);
}
// ===================================================================

class ScenarioSettings_UserTerminalCommonSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_UserTerminalCommonSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminalCommonSettings, _impl_._has_bits_);
  static void set_has_user_terminal_forward_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_terminal_return_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioSettings_UserTerminalCommonSettings::ScenarioSettings_UserTerminalCommonSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
}
ScenarioSettings_UserTerminalCommonSettings::ScenarioSettings_UserTerminalCommonSettings(const ScenarioSettings_UserTerminalCommonSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
}

inline void ScenarioSettings_UserTerminalCommonSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_terminal_forward_data_rate_bps_) { 0 }

    , decltype(_impl_.user_terminal_return_data_rate_bps_) { 0 }

  };
}

ScenarioSettings_UserTerminalCommonSettings::~ScenarioSettings_UserTerminalCommonSettings() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_UserTerminalCommonSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioSettings_UserTerminalCommonSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_UserTerminalCommonSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.user_terminal_forward_data_rate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.user_terminal_return_data_rate_bps_) -
        reinterpret_cast<char*>(&_impl_.user_terminal_forward_data_rate_bps_)) + sizeof(_impl_.user_terminal_return_data_rate_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_UserTerminalCommonSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double user_terminal_forward_data_rate_bps = 1 [json_name = "userTerminalForwardDataRateBps"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_user_terminal_forward_data_rate_bps(&has_bits);
          _impl_.user_terminal_forward_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double user_terminal_return_data_rate_bps = 2 [json_name = "userTerminalReturnDataRateBps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_user_terminal_return_data_rate_bps(&has_bits);
          _impl_.user_terminal_return_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_UserTerminalCommonSettings::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double user_terminal_forward_data_rate_bps = 1 [json_name = "userTerminalForwardDataRateBps"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_user_terminal_forward_data_rate_bps(), target);
  }

  // optional double user_terminal_return_data_rate_bps = 2 [json_name = "userTerminalReturnDataRateBps"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_user_terminal_return_data_rate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  return target;
}

::size_t ScenarioSettings_UserTerminalCommonSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double user_terminal_forward_data_rate_bps = 1 [json_name = "userTerminalForwardDataRateBps"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double user_terminal_return_data_rate_bps = 2 [json_name = "userTerminalReturnDataRateBps"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_UserTerminalCommonSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_UserTerminalCommonSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_UserTerminalCommonSettings::GetClassData() const { return &_class_data_; }


void ScenarioSettings_UserTerminalCommonSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_UserTerminalCommonSettings*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_UserTerminalCommonSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.user_terminal_forward_data_rate_bps_ = from._impl_.user_terminal_forward_data_rate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.user_terminal_return_data_rate_bps_ = from._impl_.user_terminal_return_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_UserTerminalCommonSettings::CopyFrom(const ScenarioSettings_UserTerminalCommonSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_UserTerminalCommonSettings::IsInitialized() const {
  return true;
}

void ScenarioSettings_UserTerminalCommonSettings::InternalSwap(ScenarioSettings_UserTerminalCommonSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminalCommonSettings, _impl_.user_terminal_return_data_rate_bps_)
      + sizeof(ScenarioSettings_UserTerminalCommonSettings::_impl_.user_terminal_return_data_rate_bps_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_UserTerminalCommonSettings, _impl_.user_terminal_forward_data_rate_bps_)>(
          reinterpret_cast<char*>(&_impl_.user_terminal_forward_data_rate_bps_),
          reinterpret_cast<char*>(&other->_impl_.user_terminal_forward_data_rate_bps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_UserTerminalCommonSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[15]);
}
// ===================================================================

class ScenarioSettings_Pop::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_Pop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_Pop, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::GeodeticWgs84& location(const ScenarioSettings_Pop* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::GeodeticWgs84&
ScenarioSettings_Pop::_Internal::location(const ScenarioSettings_Pop* msg) {
  return *msg->_impl_.location_;
}
void ScenarioSettings_Pop::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ScenarioSettings_Pop::ScenarioSettings_Pop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
}
ScenarioSettings_Pop::ScenarioSettings_Pop(const ScenarioSettings_Pop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_Pop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.max_data_rate_bps_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.location_ = new ::aalyria::spacetime::api::common::GeodeticWgs84(*from._impl_.location_);
  }
  _this->_impl_.max_data_rate_bps_ = from._impl_.max_data_rate_bps_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
}

inline void ScenarioSettings_Pop::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.max_data_rate_bps_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_Pop::~ScenarioSettings_Pop() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_Pop::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void ScenarioSettings_Pop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_Pop::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  _impl_.max_data_rate_bps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_Pop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double max_data_rate_bps = 3 [json_name = "maxDataRateBps"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_max_data_rate_bps(&has_bits);
          _impl_.max_data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_Pop::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [json_name = "name"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional double max_data_rate_bps = 3 [json_name = "maxDataRateBps"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_max_data_rate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  return target;
}

::size_t ScenarioSettings_Pop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [json_name = "name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 2 [json_name = "location"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional double max_data_rate_bps = 3 [json_name = "maxDataRateBps"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_Pop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_Pop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_Pop::GetClassData() const { return &_class_data_; }


void ScenarioSettings_Pop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_Pop*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_Pop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::aalyria::spacetime::api::common::GeodeticWgs84::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_data_rate_bps_ = from._impl_.max_data_rate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_Pop::CopyFrom(const ScenarioSettings_Pop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_Pop::IsInitialized() const {
  return true;
}

void ScenarioSettings_Pop::InternalSwap(ScenarioSettings_Pop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings_Pop, _impl_.max_data_rate_bps_)
      + sizeof(ScenarioSettings_Pop::_impl_.max_data_rate_bps_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings_Pop, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_Pop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[16]);
}
// ===================================================================

class ScenarioSettings_AirFleet_Aircraft::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_AirFleet_Aircraft>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_AirFleet_Aircraft, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioSettings_AirFleet_Aircraft::ScenarioSettings_AirFleet_Aircraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
}
ScenarioSettings_AirFleet_Aircraft::ScenarioSettings_AirFleet_Aircraft(const ScenarioSettings_AirFleet_Aircraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_AirFleet_Aircraft* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_transceiver_models_){from._impl_.additional_transceiver_models_}
    , decltype(_impl_.additional_wireless_interfaces_){from._impl_.additional_wireless_interfaces_}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
}

inline void ScenarioSettings_AirFleet_Aircraft::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_transceiver_models_){arena}
    , decltype(_impl_.additional_wireless_interfaces_){arena}
    , decltype(_impl_.id_) {}

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_AirFleet_Aircraft::~ScenarioSettings_AirFleet_Aircraft() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_AirFleet_Aircraft::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_additional_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_additional_wireless_interfaces()->~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void ScenarioSettings_AirFleet_Aircraft::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_AirFleet_Aircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_additional_transceiver_models()->Clear();
  _internal_mutable_additional_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_AirFleet_Aircraft::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 2 [json_name = "additionalTransceiverModels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 3 [json_name = "additionalWirelessInterfaces"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_AirFleet_Aircraft::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 2 [json_name = "additionalTransceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 3 [json_name = "additionalWirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  return target;
}

::size_t ScenarioSettings_AirFleet_Aircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 2 [json_name = "additionalTransceiverModels"];
  total_size += 1UL * this->_internal_additional_transceiver_models_size();
  for (const auto& msg : this->_internal_additional_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 3 [json_name = "additionalWirelessInterfaces"];
  total_size += 1UL * this->_internal_additional_wireless_interfaces_size();
  for (const auto& msg : this->_internal_additional_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1 [json_name = "id"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_AirFleet_Aircraft::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_AirFleet_Aircraft::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_AirFleet_Aircraft::GetClassData() const { return &_class_data_; }


void ScenarioSettings_AirFleet_Aircraft::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_AirFleet_Aircraft*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_AirFleet_Aircraft&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_additional_transceiver_models()->MergeFrom(from._internal_additional_transceiver_models());
  _this->_internal_mutable_additional_wireless_interfaces()->MergeFrom(from._internal_additional_wireless_interfaces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_AirFleet_Aircraft::CopyFrom(const ScenarioSettings_AirFleet_Aircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_AirFleet_Aircraft::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_additional_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_AirFleet_Aircraft::InternalSwap(ScenarioSettings_AirFleet_Aircraft* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_additional_transceiver_models()->InternalSwap(other->_internal_mutable_additional_transceiver_models());
  _internal_mutable_additional_wireless_interfaces()->InternalSwap(other->_internal_mutable_additional_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_AirFleet_Aircraft::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[17]);
}
// ===================================================================

class ScenarioSettings_AirFleet::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_AirFleet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_AirFleet, _impl_._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioSettings_AirFleet::ScenarioSettings_AirFleet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
}
ScenarioSettings_AirFleet::ScenarioSettings_AirFleet(const ScenarioSettings_AirFleet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_AirFleet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aircraft_){from._impl_.aircraft_}
    , decltype(_impl_.transceiver_models_){from._impl_.transceiver_models_}
    , decltype(_impl_.wireless_interfaces_){from._impl_.wireless_interfaces_}
    , decltype(_impl_.pop_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pop_id_.Set(from._internal_pop_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
}

inline void ScenarioSettings_AirFleet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aircraft_){arena}
    , decltype(_impl_.transceiver_models_){arena}
    , decltype(_impl_.wireless_interfaces_){arena}
    , decltype(_impl_.pop_id_) {}

  };
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_AirFleet::~ScenarioSettings_AirFleet() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_AirFleet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_aircraft()->~RepeatedPtrField();
  _internal_mutable_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_wireless_interfaces()->~RepeatedPtrField();
  _impl_.pop_id_.Destroy();
}

void ScenarioSettings_AirFleet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_AirFleet::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_aircraft()->Clear();
  _internal_mutable_transceiver_models()->Clear();
  _internal_mutable_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pop_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_AirFleet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft aircraft = 1 [json_name = "aircraft"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aircraft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pop_id = 4 [json_name = "popId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.pop_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_AirFleet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft aircraft = 1 [json_name = "aircraft"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aircraft_size()); i < n; i++) {
    const auto& repfield = this->_internal_aircraft(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pop_id = 4 [json_name = "popId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pop_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.pop_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  return target;
}

::size_t ScenarioSettings_AirFleet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet.Aircraft aircraft = 1 [json_name = "aircraft"];
  total_size += 1UL * this->_internal_aircraft_size();
  for (const auto& msg : this->_internal_aircraft()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
  total_size += 1UL * this->_internal_transceiver_models_size();
  for (const auto& msg : this->_internal_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
  total_size += 1UL * this->_internal_wireless_interfaces_size();
  for (const auto& msg : this->_internal_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string pop_id = 4 [json_name = "popId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_AirFleet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_AirFleet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_AirFleet::GetClassData() const { return &_class_data_; }


void ScenarioSettings_AirFleet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_AirFleet*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_AirFleet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aircraft()->MergeFrom(from._internal_aircraft());
  _this->_internal_mutable_transceiver_models()->MergeFrom(from._internal_transceiver_models());
  _this->_internal_mutable_wireless_interfaces()->MergeFrom(from._internal_wireless_interfaces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_pop_id(from._internal_pop_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_AirFleet::CopyFrom(const ScenarioSettings_AirFleet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_AirFleet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_aircraft()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_AirFleet::InternalSwap(ScenarioSettings_AirFleet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_aircraft()->InternalSwap(other->_internal_mutable_aircraft());
  _internal_mutable_transceiver_models()->InternalSwap(other->_internal_mutable_transceiver_models());
  _internal_mutable_wireless_interfaces()->InternalSwap(other->_internal_mutable_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pop_id_, lhs_arena,
                                       &other->_impl_.pop_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_AirFleet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[18]);
}
// ===================================================================

class ScenarioSettings_ShipFleet_Ship::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_ShipFleet_Ship>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_ShipFleet_Ship, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioSettings_ShipFleet_Ship::ScenarioSettings_ShipFleet_Ship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
}
ScenarioSettings_ShipFleet_Ship::ScenarioSettings_ShipFleet_Ship(const ScenarioSettings_ShipFleet_Ship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_ShipFleet_Ship* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_transceiver_models_){from._impl_.additional_transceiver_models_}
    , decltype(_impl_.additional_wireless_interfaces_){from._impl_.additional_wireless_interfaces_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
}

inline void ScenarioSettings_ShipFleet_Ship::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_transceiver_models_){arena}
    , decltype(_impl_.additional_wireless_interfaces_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_ShipFleet_Ship::~ScenarioSettings_ShipFleet_Ship() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_ShipFleet_Ship::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_additional_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_additional_wireless_interfaces()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void ScenarioSettings_ShipFleet_Ship::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_ShipFleet_Ship::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_additional_transceiver_models()->Clear();
  _internal_mutable_additional_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_ShipFleet_Ship::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 4 [json_name = "additionalTransceiverModels"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 5 [json_name = "additionalWirelessInterfaces"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_ShipFleet_Ship::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string name = 2 [json_name = "name"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 4 [json_name = "additionalTransceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 5 [json_name = "additionalWirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  return target;
}

::size_t ScenarioSettings_ShipFleet_Ship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel additional_transceiver_models = 4 [json_name = "additionalTransceiverModels"];
  total_size += 1UL * this->_internal_additional_transceiver_models_size();
  for (const auto& msg : this->_internal_additional_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface additional_wireless_interfaces = 5 [json_name = "additionalWirelessInterfaces"];
  total_size += 1UL * this->_internal_additional_wireless_interfaces_size();
  for (const auto& msg : this->_internal_additional_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional string name = 2 [json_name = "name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_ShipFleet_Ship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_ShipFleet_Ship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_ShipFleet_Ship::GetClassData() const { return &_class_data_; }


void ScenarioSettings_ShipFleet_Ship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_ShipFleet_Ship*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_ShipFleet_Ship&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_additional_transceiver_models()->MergeFrom(from._internal_additional_transceiver_models());
  _this->_internal_mutable_additional_wireless_interfaces()->MergeFrom(from._internal_additional_wireless_interfaces());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_ShipFleet_Ship::CopyFrom(const ScenarioSettings_ShipFleet_Ship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_ShipFleet_Ship::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_additional_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_ShipFleet_Ship::InternalSwap(ScenarioSettings_ShipFleet_Ship* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_additional_transceiver_models()->InternalSwap(other->_internal_mutable_additional_transceiver_models());
  _internal_mutable_additional_wireless_interfaces()->InternalSwap(other->_internal_mutable_additional_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_ShipFleet_Ship::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[19]);
}
// ===================================================================

class ScenarioSettings_ShipFleet::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings_ShipFleet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings_ShipFleet, _impl_._has_bits_);
  static void set_has_pop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioSettings_ShipFleet::ScenarioSettings_ShipFleet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
}
ScenarioSettings_ShipFleet::ScenarioSettings_ShipFleet(const ScenarioSettings_ShipFleet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings_ShipFleet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ship_){from._impl_.ship_}
    , decltype(_impl_.transceiver_models_){from._impl_.transceiver_models_}
    , decltype(_impl_.wireless_interfaces_){from._impl_.wireless_interfaces_}
    , decltype(_impl_.pop_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pop_id_.Set(from._internal_pop_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
}

inline void ScenarioSettings_ShipFleet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ship_){arena}
    , decltype(_impl_.transceiver_models_){arena}
    , decltype(_impl_.wireless_interfaces_){arena}
    , decltype(_impl_.pop_id_) {}

  };
  _impl_.pop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScenarioSettings_ShipFleet::~ScenarioSettings_ShipFleet() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings_ShipFleet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ship()->~RepeatedPtrField();
  _internal_mutable_transceiver_models()->~RepeatedPtrField();
  _internal_mutable_wireless_interfaces()->~RepeatedPtrField();
  _impl_.pop_id_.Destroy();
}

void ScenarioSettings_ShipFleet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings_ShipFleet::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ship()->Clear();
  _internal_mutable_transceiver_models()->Clear();
  _internal_mutable_wireless_interfaces()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pop_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings_ShipFleet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship ship = 1 [json_name = "ship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ship(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceiver_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wireless_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pop_id = 4 [json_name = "popId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.pop_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings_ShipFleet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship ship = 1 [json_name = "ship"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ship_size()); i < n; i++) {
    const auto& repfield = this->_internal_ship(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transceiver_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_transceiver_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wireless_interfaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_wireless_interfaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pop_id = 4 [json_name = "popId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pop_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.pop_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  return target;
}

::size_t ScenarioSettings_ShipFleet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet.Ship ship = 1 [json_name = "ship"];
  total_size += 1UL * this->_internal_ship_size();
  for (const auto& msg : this->_internal_ship()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.TransceiverModel transceiver_models = 2 [json_name = "transceiverModels"];
  total_size += 1UL * this->_internal_transceiver_models_size();
  for (const auto& msg : this->_internal_transceiver_models()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.WirelessInterface wireless_interfaces = 3 [json_name = "wirelessInterfaces"];
  total_size += 1UL * this->_internal_wireless_interfaces_size();
  for (const auto& msg : this->_internal_wireless_interfaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string pop_id = 4 [json_name = "popId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings_ShipFleet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings_ShipFleet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings_ShipFleet::GetClassData() const { return &_class_data_; }


void ScenarioSettings_ShipFleet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings_ShipFleet*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings_ShipFleet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ship()->MergeFrom(from._internal_ship());
  _this->_internal_mutable_transceiver_models()->MergeFrom(from._internal_transceiver_models());
  _this->_internal_mutable_wireless_interfaces()->MergeFrom(from._internal_wireless_interfaces());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_pop_id(from._internal_pop_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings_ShipFleet::CopyFrom(const ScenarioSettings_ShipFleet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings_ShipFleet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_ship()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_transceiver_models()))
    return false;
  return true;
}

void ScenarioSettings_ShipFleet::InternalSwap(ScenarioSettings_ShipFleet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_ship()->InternalSwap(other->_internal_mutable_ship());
  _internal_mutable_transceiver_models()->InternalSwap(other->_internal_mutable_transceiver_models());
  _internal_mutable_wireless_interfaces()->InternalSwap(other->_internal_mutable_wireless_interfaces());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pop_id_, lhs_arena,
                                       &other->_impl_.pop_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_ShipFleet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[20]);
}
// ===================================================================

ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse() {}
ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::MergeFrom(const ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[21]);
}
// ===================================================================

class ScenarioSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings& user_terminal_common_settings(const ScenarioSettings* msg);
  static void set_has_user_terminal_common_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings&
ScenarioSettings::_Internal::user_terminal_common_settings(const ScenarioSettings* msg) {
  return *msg->_impl_.user_terminal_common_settings_;
}
ScenarioSettings::ScenarioSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
}
ScenarioSettings::ScenarioSettings(const ScenarioSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScenarioSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constellation_){from._impl_.constellation_}
    , decltype(_impl_.gateways_){from._impl_.gateways_}
    , decltype(_impl_.scenario_channel_definition_){from._impl_.scenario_channel_definition_}
    , decltype(_impl_.antenna_pattern_settings_){from._impl_.antenna_pattern_settings_}
    , decltype(_impl_.user_terminal_){from._impl_.user_terminal_}
    , decltype(_impl_.pop_){from._impl_.pop_}
    , decltype(_impl_.airfleets_){from._impl_.airfleets_}
    , decltype(_impl_.shipfleets_){from._impl_.shipfleets_}
    , /*decltype(_impl_.gateway_to_permitted_pops_)*/{}
    , decltype(_impl_.user_terminal_common_settings_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gateway_to_permitted_pops_.MergeFrom(from._impl_.gateway_to_permitted_pops_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_terminal_common_settings_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings(*from._impl_.user_terminal_common_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
}

inline void ScenarioSettings::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constellation_){arena}
    , decltype(_impl_.gateways_){arena}
    , decltype(_impl_.scenario_channel_definition_){arena}
    , decltype(_impl_.antenna_pattern_settings_){arena}
    , decltype(_impl_.user_terminal_){arena}
    , decltype(_impl_.pop_){arena}
    , decltype(_impl_.airfleets_){arena}
    , decltype(_impl_.shipfleets_){arena}
    , /*decltype(_impl_.gateway_to_permitted_pops_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.user_terminal_common_settings_){nullptr}
  };
}

ScenarioSettings::~ScenarioSettings() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioSettings::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_constellation()->~RepeatedPtrField();
  _internal_mutable_gateways()->~RepeatedPtrField();
  _internal_mutable_scenario_channel_definition()->~RepeatedPtrField();
  _internal_mutable_antenna_pattern_settings()->~RepeatedPtrField();
  _internal_mutable_user_terminal()->~RepeatedPtrField();
  _internal_mutable_pop()->~RepeatedPtrField();
  _internal_mutable_airfleets()->~RepeatedPtrField();
  _internal_mutable_shipfleets()->~RepeatedPtrField();
  _impl_.gateway_to_permitted_pops_.~MapField();
  if (this != internal_default_instance()) delete _impl_.user_terminal_common_settings_;
}

void ScenarioSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_constellation()->Clear();
  _internal_mutable_gateways()->Clear();
  _internal_mutable_scenario_channel_definition()->Clear();
  _internal_mutable_antenna_pattern_settings()->Clear();
  _internal_mutable_user_terminal()->Clear();
  _internal_mutable_pop()->Clear();
  _internal_mutable_airfleets()->Clear();
  _internal_mutable_shipfleets()->Clear();
  _impl_.gateway_to_permitted_pops_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_terminal_common_settings_ != nullptr);
    _impl_.user_terminal_common_settings_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation constellation = 1 [json_name = "constellation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constellation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway gateways = 2 [json_name = "gateways"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gateways(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition scenario_channel_definition = 3 [json_name = "scenarioChannelDefinition"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scenario_channel_definition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings antenna_pattern_settings = 4 [json_name = "antennaPatternSettings"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_antenna_pattern_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal user_terminal = 5 [json_name = "userTerminal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_terminal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings user_terminal_common_settings = 6 [json_name = "userTerminalCommonSettings"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_terminal_common_settings(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop pop = 7 [json_name = "pop"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet airfleets = 8 [json_name = "airfleets"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_airfleets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet shipfleets = 9 [json_name = "shipfleets"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shipfleets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> gateway_to_permitted_pops = 10 [json_name = "gatewayToPermittedPops"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.gateway_to_permitted_pops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ScenarioSettings::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation constellation = 1 [json_name = "constellation"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_constellation_size()); i < n; i++) {
    const auto& repfield = this->_internal_constellation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway gateways = 2 [json_name = "gateways"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gateways_size()); i < n; i++) {
    const auto& repfield = this->_internal_gateways(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition scenario_channel_definition = 3 [json_name = "scenarioChannelDefinition"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scenario_channel_definition_size()); i < n; i++) {
    const auto& repfield = this->_internal_scenario_channel_definition(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings antenna_pattern_settings = 4 [json_name = "antennaPatternSettings"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_antenna_pattern_settings_size()); i < n; i++) {
    const auto& repfield = this->_internal_antenna_pattern_settings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal user_terminal = 5 [json_name = "userTerminal"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_terminal_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_terminal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings user_terminal_common_settings = 6 [json_name = "userTerminalCommonSettings"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::user_terminal_common_settings(this),
        _Internal::user_terminal_common_settings(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop pop = 7 [json_name = "pop"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pop_size()); i < n; i++) {
    const auto& repfield = this->_internal_pop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet airfleets = 8 [json_name = "airfleets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_airfleets_size()); i < n; i++) {
    const auto& repfield = this->_internal_airfleets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet shipfleets = 9 [json_name = "shipfleets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shipfleets_size()); i < n; i++) {
    const auto& repfield = this->_internal_shipfleets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, string> gateway_to_permitted_pops = 10 [json_name = "gatewayToPermittedPops"];
  if (!this->_internal_gateway_to_permitted_pops().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gateway_to_permitted_pops();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.gateway_to_permitted_pops");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.gateway_to_permitted_pops");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  return target;
}

::size_t ScenarioSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Constellation constellation = 1 [json_name = "constellation"];
  total_size += 1UL * this->_internal_constellation_size();
  for (const auto& msg : this->_internal_constellation()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Gateway gateways = 2 [json_name = "gateways"];
  total_size += 1UL * this->_internal_gateways_size();
  for (const auto& msg : this->_internal_gateways()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ScenarioChannelDefinition scenario_channel_definition = 3 [json_name = "scenarioChannelDefinition"];
  total_size += 1UL * this->_internal_scenario_channel_definition_size();
  for (const auto& msg : this->_internal_scenario_channel_definition()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AntennaPatternSettings antenna_pattern_settings = 4 [json_name = "antennaPatternSettings"];
  total_size += 1UL * this->_internal_antenna_pattern_settings_size();
  for (const auto& msg : this->_internal_antenna_pattern_settings()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminal user_terminal = 5 [json_name = "userTerminal"];
  total_size += 1UL * this->_internal_user_terminal_size();
  for (const auto& msg : this->_internal_user_terminal()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.Pop pop = 7 [json_name = "pop"];
  total_size += 1UL * this->_internal_pop_size();
  for (const auto& msg : this->_internal_pop()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.AirFleet airfleets = 8 [json_name = "airfleets"];
  total_size += 1UL * this->_internal_airfleets_size();
  for (const auto& msg : this->_internal_airfleets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.ShipFleet shipfleets = 9 [json_name = "shipfleets"];
  total_size += 1UL * this->_internal_shipfleets_size();
  for (const auto& msg : this->_internal_shipfleets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> gateway_to_permitted_pops = 10 [json_name = "gatewayToPermittedPops"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gateway_to_permitted_pops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_gateway_to_permitted_pops().begin();
      it != this->_internal_gateway_to_permitted_pops().end(); ++it) {
    total_size += ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings.UserTerminalCommonSettings user_terminal_common_settings = 6 [json_name = "userTerminalCommonSettings"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_terminal_common_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScenarioSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioSettings::GetClassData() const { return &_class_data_; }


void ScenarioSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScenarioSettings*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_constellation()->MergeFrom(from._internal_constellation());
  _this->_internal_mutable_gateways()->MergeFrom(from._internal_gateways());
  _this->_internal_mutable_scenario_channel_definition()->MergeFrom(from._internal_scenario_channel_definition());
  _this->_internal_mutable_antenna_pattern_settings()->MergeFrom(from._internal_antenna_pattern_settings());
  _this->_internal_mutable_user_terminal()->MergeFrom(from._internal_user_terminal());
  _this->_internal_mutable_pop()->MergeFrom(from._internal_pop());
  _this->_internal_mutable_airfleets()->MergeFrom(from._internal_airfleets());
  _this->_internal_mutable_shipfleets()->MergeFrom(from._internal_shipfleets());
  _this->_impl_.gateway_to_permitted_pops_.MergeFrom(from._impl_.gateway_to_permitted_pops_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user_terminal_common_settings()->::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings::MergeFrom(
        from._internal_user_terminal_common_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings::CopyFrom(const ScenarioSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ScenarioSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioSettings::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_constellation()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_gateways()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_user_terminal()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_airfleets()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_shipfleets()))
    return false;
  return true;
}

void ScenarioSettings::InternalSwap(ScenarioSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_constellation()->InternalSwap(other->_internal_mutable_constellation());
  _internal_mutable_gateways()->InternalSwap(other->_internal_mutable_gateways());
  _internal_mutable_scenario_channel_definition()->InternalSwap(other->_internal_mutable_scenario_channel_definition());
  _internal_mutable_antenna_pattern_settings()->InternalSwap(other->_internal_mutable_antenna_pattern_settings());
  _internal_mutable_user_terminal()->InternalSwap(other->_internal_mutable_user_terminal());
  _internal_mutable_pop()->InternalSwap(other->_internal_mutable_pop());
  _internal_mutable_airfleets()->InternalSwap(other->_internal_mutable_airfleets());
  _internal_mutable_shipfleets()->InternalSwap(other->_internal_mutable_shipfleets());
  _impl_.gateway_to_permitted_pops_.InternalSwap(&other->_impl_.gateway_to_permitted_pops_);
  swap(_impl_.user_terminal_common_settings_, other->_impl_.user_terminal_common_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fscenario_5fsettings_2eproto[22]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_WalkerDeltaParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters_ArbitraryMotionParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_OrbitalParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation_ServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Constellation >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_WirelessInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransmitterDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ReceiverDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_TransceiverModel >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_SequentialChannelDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Gateway >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ScenarioChannelDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AntennaPatternSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal_UserTerminalGridDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminal >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_UserTerminalCommonSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_Pop >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet_Aircraft >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_AirFleet >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet_Ship >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_ShipFleet >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings_GatewayToPermittedPopsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ScenarioSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

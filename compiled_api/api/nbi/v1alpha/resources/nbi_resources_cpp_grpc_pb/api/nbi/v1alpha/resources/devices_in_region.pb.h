// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/devices_in_region.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/common/wireless_transceiver.pb.h"
#include "api/nbi/v1alpha/resources/coverage.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
class DevicesInRegion;
struct DevicesInRegionDefaultTypeInternal;
extern DevicesInRegionDefaultTypeInternal _DevicesInRegion_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::DevicesInRegion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {

// ===================================================================


// -------------------------------------------------------------------

class DevicesInRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion) */ {
 public:
  inline DevicesInRegion() : DevicesInRegion(nullptr) {}
  ~DevicesInRegion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DevicesInRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DevicesInRegion(const DevicesInRegion& from);
  DevicesInRegion(DevicesInRegion&& from) noexcept
    : DevicesInRegion() {
    *this = ::std::move(from);
  }

  inline DevicesInRegion& operator=(const DevicesInRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevicesInRegion& operator=(DevicesInRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DevicesInRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const DevicesInRegion* internal_default_instance() {
    return reinterpret_cast<const DevicesInRegion*>(
               &_DevicesInRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DevicesInRegion& a, DevicesInRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(DevicesInRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevicesInRegion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DevicesInRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DevicesInRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DevicesInRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DevicesInRegion& from) {
    DevicesInRegion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevicesInRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion";
  }
  protected:
  explicit DevicesInRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceInRegionIdFieldNumber = 1,
    kReferenceDeviceFieldNumber = 2,
    kRegionOnEarthFieldNumber = 3,
    kDevicesPerKm2FieldNumber = 4,
  };
  // optional string device_in_region_id = 1 [json_name = "deviceInRegionId"];
  bool has_device_in_region_id() const;
  void clear_device_in_region_id() ;
  const std::string& device_in_region_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_in_region_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_in_region_id();
  PROTOBUF_NODISCARD std::string* release_device_in_region_id();
  void set_allocated_device_in_region_id(std::string* ptr);

  private:
  const std::string& _internal_device_in_region_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_in_region_id(
      const std::string& value);
  std::string* _internal_mutable_device_in_region_id();

  public:
  // optional .aalyria.spacetime.api.common.TransceiverModel reference_device = 2 [json_name = "referenceDevice"];
  bool has_reference_device() const;
  void clear_reference_device() ;
  const ::aalyria::spacetime::api::common::TransceiverModel& reference_device() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::common::TransceiverModel* release_reference_device();
  ::aalyria::spacetime::api::common::TransceiverModel* mutable_reference_device();
  void set_allocated_reference_device(::aalyria::spacetime::api::common::TransceiverModel* reference_device);
  private:
  const ::aalyria::spacetime::api::common::TransceiverModel& _internal_reference_device() const;
  ::aalyria::spacetime::api::common::TransceiverModel* _internal_mutable_reference_device();
  public:
  void unsafe_arena_set_allocated_reference_device(
      ::aalyria::spacetime::api::common::TransceiverModel* reference_device);
  ::aalyria::spacetime::api::common::TransceiverModel* unsafe_arena_release_reference_device();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.GeoJsonRegion region_on_earth = 3 [json_name = "regionOnEarth"];
  bool has_region_on_earth() const;
  void clear_region_on_earth() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion& region_on_earth() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* release_region_on_earth();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* mutable_region_on_earth();
  void set_allocated_region_on_earth(::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* region_on_earth);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion& _internal_region_on_earth() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* _internal_mutable_region_on_earth();
  public:
  void unsafe_arena_set_allocated_region_on_earth(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* region_on_earth);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* unsafe_arena_release_region_on_earth();
  // optional double devices_per_km2 = 4 [json_name = "devicesPerKm2"];
  bool has_devices_per_km2() const;
  void clear_devices_per_km2() ;
  double devices_per_km2() const;
  void set_devices_per_km2(double value);

  private:
  double _internal_devices_per_km2() const;
  void _internal_set_devices_per_km2(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_in_region_id_;
    ::aalyria::spacetime::api::common::TransceiverModel* reference_device_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* region_on_earth_;
    double devices_per_km2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DevicesInRegion

// optional string device_in_region_id = 1 [json_name = "deviceInRegionId"];
inline bool DevicesInRegion::has_device_in_region_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DevicesInRegion::clear_device_in_region_id() {
  _impl_.device_in_region_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DevicesInRegion::device_in_region_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.device_in_region_id)
  return _internal_device_in_region_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DevicesInRegion::set_device_in_region_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_in_region_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.device_in_region_id)
}
inline std::string* DevicesInRegion::mutable_device_in_region_id() {
  std::string* _s = _internal_mutable_device_in_region_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.device_in_region_id)
  return _s;
}
inline const std::string& DevicesInRegion::_internal_device_in_region_id() const {
  return _impl_.device_in_region_id_.Get();
}
inline void DevicesInRegion::_internal_set_device_in_region_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.device_in_region_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DevicesInRegion::_internal_mutable_device_in_region_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.device_in_region_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DevicesInRegion::release_device_in_region_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.device_in_region_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.device_in_region_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_in_region_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DevicesInRegion::set_allocated_device_in_region_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_in_region_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_in_region_id_.IsDefault()) {
          _impl_.device_in_region_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.device_in_region_id)
}

// optional .aalyria.spacetime.api.common.TransceiverModel reference_device = 2 [json_name = "referenceDevice"];
inline bool DevicesInRegion::has_reference_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_device_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& DevicesInRegion::_internal_reference_device() const {
  const ::aalyria::spacetime::api::common::TransceiverModel* p = _impl_.reference_device_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::common::TransceiverModel&>(
      ::aalyria::spacetime::api::common::_TransceiverModel_default_instance_);
}
inline const ::aalyria::spacetime::api::common::TransceiverModel& DevicesInRegion::reference_device() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.reference_device)
  return _internal_reference_device();
}
inline void DevicesInRegion::unsafe_arena_set_allocated_reference_device(
    ::aalyria::spacetime::api::common::TransceiverModel* reference_device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_device_);
  }
  _impl_.reference_device_ = reference_device;
  if (reference_device) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.reference_device)
}
inline ::aalyria::spacetime::api::common::TransceiverModel* DevicesInRegion::release_reference_device() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TransceiverModel* temp = _impl_.reference_device_;
  _impl_.reference_device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* DevicesInRegion::unsafe_arena_release_reference_device() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.reference_device)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::common::TransceiverModel* temp = _impl_.reference_device_;
  _impl_.reference_device_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* DevicesInRegion::_internal_mutable_reference_device() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reference_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::common::TransceiverModel>(GetArenaForAllocation());
    _impl_.reference_device_ = p;
  }
  return _impl_.reference_device_;
}
inline ::aalyria::spacetime::api::common::TransceiverModel* DevicesInRegion::mutable_reference_device() {
  ::aalyria::spacetime::api::common::TransceiverModel* _msg = _internal_mutable_reference_device();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.reference_device)
  return _msg;
}
inline void DevicesInRegion::set_allocated_reference_device(::aalyria::spacetime::api::common::TransceiverModel* reference_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_device_);
  }
  if (reference_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_device));
    if (message_arena != submessage_arena) {
      reference_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_device, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reference_device_ = reference_device;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.reference_device)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.GeoJsonRegion region_on_earth = 3 [json_name = "regionOnEarth"];
inline bool DevicesInRegion::has_region_on_earth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_on_earth_ != nullptr);
  return value;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion& DevicesInRegion::_internal_region_on_earth() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* p = _impl_.region_on_earth_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_GeoJsonRegion_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion& DevicesInRegion::region_on_earth() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.region_on_earth)
  return _internal_region_on_earth();
}
inline void DevicesInRegion::unsafe_arena_set_allocated_region_on_earth(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* region_on_earth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_on_earth_);
  }
  _impl_.region_on_earth_ = region_on_earth;
  if (region_on_earth) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.region_on_earth)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* DevicesInRegion::release_region_on_earth() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* temp = _impl_.region_on_earth_;
  _impl_.region_on_earth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* DevicesInRegion::unsafe_arena_release_region_on_earth() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.region_on_earth)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* temp = _impl_.region_on_earth_;
  _impl_.region_on_earth_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* DevicesInRegion::_internal_mutable_region_on_earth() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.region_on_earth_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion>(GetArenaForAllocation());
    _impl_.region_on_earth_ = p;
  }
  return _impl_.region_on_earth_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* DevicesInRegion::mutable_region_on_earth() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* _msg = _internal_mutable_region_on_earth();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.region_on_earth)
  return _msg;
}
inline void DevicesInRegion::set_allocated_region_on_earth(::aalyria::spacetime::api::nbi::v1alpha::resources::GeoJsonRegion* region_on_earth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_on_earth_);
  }
  if (region_on_earth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_on_earth));
    if (message_arena != submessage_arena) {
      region_on_earth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_on_earth, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.region_on_earth_ = region_on_earth;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.region_on_earth)
}

// optional double devices_per_km2 = 4 [json_name = "devicesPerKm2"];
inline bool DevicesInRegion::has_devices_per_km2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DevicesInRegion::clear_devices_per_km2() {
  _impl_.devices_per_km2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DevicesInRegion::devices_per_km2() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.devices_per_km2)
  return _internal_devices_per_km2();
}
inline void DevicesInRegion::set_devices_per_km2(double value) {
  _internal_set_devices_per_km2(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.DevicesInRegion.devices_per_km2)
}
inline double DevicesInRegion::_internal_devices_per_km2() const {
  return _impl_.devices_per_km2_;
}
inline void DevicesInRegion::_internal_set_devices_per_km2(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.devices_per_km2_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fdevices_5fin_5fregion_2eproto_2epb_2eh

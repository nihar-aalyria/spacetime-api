// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/nbi/v1alpha/resources/intent.proto

package resources

import (
	common "aalyria.com/spacetime/api/common"
	code "google.golang.org/genproto/googleapis/rpc/code"
	interval "google.golang.org/genproto/googleapis/type/interval"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntentState int32

const (
	IntentState_UNKNOWN         IntentState = 0
	IntentState_INSTALL_REQ     IntentState = 1
	IntentState_PUSHING         IntentState = 9
	IntentState_SCHEDULED       IntentState = 10
	IntentState_SCHEDULING      IntentState = 12
	IntentState_MAYBE_INSTALLED IntentState = 11
	IntentState_INSTALLING      IntentState = 3
	IntentState_INSTALLED       IntentState = 4
	IntentState_WITHDRAW_REQ    IntentState = 5
	IntentState_WITHDRAWING     IntentState = 6
	IntentState_FAILED          IntentState = 8
)

// Enum value maps for IntentState.
var (
	IntentState_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "INSTALL_REQ",
		9:  "PUSHING",
		10: "SCHEDULED",
		12: "SCHEDULING",
		11: "MAYBE_INSTALLED",
		3:  "INSTALLING",
		4:  "INSTALLED",
		5:  "WITHDRAW_REQ",
		6:  "WITHDRAWING",
		8:  "FAILED",
	}
	IntentState_value = map[string]int32{
		"UNKNOWN":         0,
		"INSTALL_REQ":     1,
		"PUSHING":         9,
		"SCHEDULED":       10,
		"SCHEDULING":      12,
		"MAYBE_INSTALLED": 11,
		"INSTALLING":      3,
		"INSTALLED":       4,
		"WITHDRAW_REQ":    5,
		"WITHDRAWING":     6,
		"FAILED":          8,
	}
)

func (x IntentState) Enum() *IntentState {
	p := new(IntentState)
	*p = x
	return p
}

func (x IntentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_nbi_v1alpha_resources_intent_proto_enumTypes[0].Descriptor()
}

func (IntentState) Type() protoreflect.EnumType {
	return &file_api_nbi_v1alpha_resources_intent_proto_enumTypes[0]
}

func (x IntentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IntentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IntentState(num)
	return nil
}

// Deprecated: Use IntentState.Descriptor instead.
func (IntentState) EnumDescriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{0}
}

type IntentFailure_IntentFailureType int32

const (
	IntentFailure_UNKNOWN                      IntentFailure_IntentFailureType = 0
	IntentFailure_COMPILATION_FAILURE          IntentFailure_IntentFailureType = 1
	IntentFailure_AGENT_INSTALLATION_FAILURE   IntentFailure_IntentFailureType = 2
	IntentFailure_UNREACHABLE_AGENT            IntentFailure_IntentFailureType = 3
	IntentFailure_UNEXPECTED_CDPI_STATE_CHANGE IntentFailure_IntentFailureType = 4
	IntentFailure_PRECONDITION_FAILED          IntentFailure_IntentFailureType = 5
	IntentFailure_DEADLINE_EXCEEDED            IntentFailure_IntentFailureType = 6
	IntentFailure_PRECONDITION_EXPIRED         IntentFailure_IntentFailureType = 7
	IntentFailure_SDN_INTERNAL_ERROR           IntentFailure_IntentFailureType = 9
)

// Enum value maps for IntentFailure_IntentFailureType.
var (
	IntentFailure_IntentFailureType_name = map[int32]string{
		0: "UNKNOWN",
		1: "COMPILATION_FAILURE",
		2: "AGENT_INSTALLATION_FAILURE",
		3: "UNREACHABLE_AGENT",
		4: "UNEXPECTED_CDPI_STATE_CHANGE",
		5: "PRECONDITION_FAILED",
		6: "DEADLINE_EXCEEDED",
		7: "PRECONDITION_EXPIRED",
		9: "SDN_INTERNAL_ERROR",
	}
	IntentFailure_IntentFailureType_value = map[string]int32{
		"UNKNOWN":                      0,
		"COMPILATION_FAILURE":          1,
		"AGENT_INSTALLATION_FAILURE":   2,
		"UNREACHABLE_AGENT":            3,
		"UNEXPECTED_CDPI_STATE_CHANGE": 4,
		"PRECONDITION_FAILED":          5,
		"DEADLINE_EXCEEDED":            6,
		"PRECONDITION_EXPIRED":         7,
		"SDN_INTERNAL_ERROR":           9,
	}
)

func (x IntentFailure_IntentFailureType) Enum() *IntentFailure_IntentFailureType {
	p := new(IntentFailure_IntentFailureType)
	*p = x
	return p
}

func (x IntentFailure_IntentFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentFailure_IntentFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_nbi_v1alpha_resources_intent_proto_enumTypes[1].Descriptor()
}

func (IntentFailure_IntentFailureType) Type() protoreflect.EnumType {
	return &file_api_nbi_v1alpha_resources_intent_proto_enumTypes[1]
}

func (x IntentFailure_IntentFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IntentFailure_IntentFailureType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IntentFailure_IntentFailureType(num)
	return nil
}

// Deprecated: Use IntentFailure_IntentFailureType.Descriptor instead.
func (IntentFailure_IntentFailureType) EnumDescriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{5, 0}
}

type IntentWithdrawal_WithdrawType int32

const (
	IntentWithdrawal_UNKNOWN      IntentWithdrawal_WithdrawType = 0
	IntentWithdrawal_INACCESSIBLE IntentWithdrawal_WithdrawType = 1
	IntentWithdrawal_NOT_REQUIRED IntentWithdrawal_WithdrawType = 2
)

// Enum value maps for IntentWithdrawal_WithdrawType.
var (
	IntentWithdrawal_WithdrawType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INACCESSIBLE",
		2: "NOT_REQUIRED",
	}
	IntentWithdrawal_WithdrawType_value = map[string]int32{
		"UNKNOWN":      0,
		"INACCESSIBLE": 1,
		"NOT_REQUIRED": 2,
	}
)

func (x IntentWithdrawal_WithdrawType) Enum() *IntentWithdrawal_WithdrawType {
	p := new(IntentWithdrawal_WithdrawType)
	*p = x
	return p
}

func (x IntentWithdrawal_WithdrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentWithdrawal_WithdrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_nbi_v1alpha_resources_intent_proto_enumTypes[2].Descriptor()
}

func (IntentWithdrawal_WithdrawType) Type() protoreflect.EnumType {
	return &file_api_nbi_v1alpha_resources_intent_proto_enumTypes[2]
}

func (x IntentWithdrawal_WithdrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IntentWithdrawal_WithdrawType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IntentWithdrawal_WithdrawType(num)
	return nil
}

// Deprecated: Use IntentWithdrawal_WithdrawType.Descriptor instead.
func (IntentWithdrawal_WithdrawType) EnumDescriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{6, 0}
}

type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
	AppId       *string                `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	TimeToEnact *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_to_enact,json=timeToEnact" json:"time_to_enact,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Intent_Link
	//	*Intent_Radio
	//	*Intent_Route
	//	*Intent_Tunnel
	Value                     isIntent_Value                       `protobuf_oneof:"value"`
	State                     *IntentState                         `protobuf:"varint,7,opt,name=state,enum=aalyria.spacetime.api.nbi.v1alpha.resources.IntentState,def=1" json:"state,omitempty"`
	RequestTimestampUs        *int64                               `protobuf:"varint,11,opt,name=request_timestamp_us,json=requestTimestampUs" json:"request_timestamp_us,omitempty"`
	CompiledUpdates           []*common.ScheduledControlUpdate     `protobuf:"bytes,8,rep,name=compiled_updates,json=compiledUpdates" json:"compiled_updates,omitempty"`
	Failure                   *IntentFailure                       `protobuf:"bytes,9,opt,name=failure" json:"failure,omitempty"`
	Withdrawal                *IntentWithdrawal                    `protobuf:"bytes,14,opt,name=withdrawal" json:"withdrawal,omitempty"`
	TimeToWithdraw            *common.DateTime                     `protobuf:"bytes,15,opt,name=time_to_withdraw,json=timeToWithdraw" json:"time_to_withdraw,omitempty"`
	DependentServiceRequests  []*Intent_ServiceRequestAndIntervals `protobuf:"bytes,16,rep,name=dependent_service_requests,json=dependentServiceRequests" json:"dependent_service_requests,omitempty"`
	CompiledWithdrawalUpdates []*common.ScheduledControlUpdate     `protobuf:"bytes,17,rep,name=compiled_withdrawal_updates,json=compiledWithdrawalUpdates" json:"compiled_withdrawal_updates,omitempty"`
	AutoRetry                 *bool                                `protobuf:"varint,12,opt,name=auto_retry,json=autoRetry" json:"auto_retry,omitempty"`
}

// Default values for Intent fields.
const (
	Default_Intent_State = IntentState_INSTALL_REQ
)

func (x *Intent) Reset() {
	*x = Intent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
func (x *Intent) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *Intent) GetTimeToEnact() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeToEnact
	}
	return nil
}

func (m *Intent) GetValue() isIntent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Intent) GetLink() *LinkIntent {
	if x, ok := x.GetValue().(*Intent_Link); ok {
		return x.Link
	}
	return nil
}

func (x *Intent) GetRadio() *RadioIntent {
	if x, ok := x.GetValue().(*Intent_Radio); ok {
		return x.Radio
	}
	return nil
}

func (x *Intent) GetRoute() *PathIntent {
	if x, ok := x.GetValue().(*Intent_Route); ok {
		return x.Route
	}
	return nil
}

func (x *Intent) GetTunnel() *TunnelIntent {
	if x, ok := x.GetValue().(*Intent_Tunnel); ok {
		return x.Tunnel
	}
	return nil
}

func (x *Intent) GetState() IntentState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_Intent_State
}

func (x *Intent) GetRequestTimestampUs() int64 {
	if x != nil && x.RequestTimestampUs != nil {
		return *x.RequestTimestampUs
	}
	return 0
}

func (x *Intent) GetCompiledUpdates() []*common.ScheduledControlUpdate {
	if x != nil {
		return x.CompiledUpdates
	}
	return nil
}

func (x *Intent) GetFailure() *IntentFailure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *Intent) GetWithdrawal() *IntentWithdrawal {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

func (x *Intent) GetTimeToWithdraw() *common.DateTime {
	if x != nil {
		return x.TimeToWithdraw
	}
	return nil
}

func (x *Intent) GetDependentServiceRequests() []*Intent_ServiceRequestAndIntervals {
	if x != nil {
		return x.DependentServiceRequests
	}
	return nil
}

func (x *Intent) GetCompiledWithdrawalUpdates() []*common.ScheduledControlUpdate {
	if x != nil {
		return x.CompiledWithdrawalUpdates
	}
	return nil
}

func (x *Intent) GetAutoRetry() bool {
	if x != nil && x.AutoRetry != nil {
		return *x.AutoRetry
	}
	return false
}

type isIntent_Value interface {
	isIntent_Value()
}

type Intent_Link struct {
	Link *LinkIntent `protobuf:"bytes,4,opt,name=link,oneof"`
}

type Intent_Radio struct {
	Radio *RadioIntent `protobuf:"bytes,5,opt,name=radio,oneof"`
}

type Intent_Route struct {
	Route *PathIntent `protobuf:"bytes,6,opt,name=route,oneof"`
}

type Intent_Tunnel struct {
	Tunnel *TunnelIntent `protobuf:"bytes,10,opt,name=tunnel,oneof"`
}

func (*Intent_Link) isIntent_Value() {}

func (*Intent_Radio) isIntent_Value() {}

func (*Intent_Route) isIntent_Value() {}

func (*Intent_Tunnel) isIntent_Value() {}

type LinkIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LinkType:
	//
	//	*LinkIntent_DirectionalLink
	//	*LinkIntent_BidirectionalLink
	LinkType isLinkIntent_LinkType `protobuf_oneof:"link_type"`
}

func (x *LinkIntent) Reset() {
	*x = LinkIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkIntent) ProtoMessage() {}

func (x *LinkIntent) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkIntent.ProtoReflect.Descriptor instead.
func (*LinkIntent) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{1}
}

func (m *LinkIntent) GetLinkType() isLinkIntent_LinkType {
	if m != nil {
		return m.LinkType
	}
	return nil
}

func (x *LinkIntent) GetDirectionalLink() *DirectionalLink {
	if x, ok := x.GetLinkType().(*LinkIntent_DirectionalLink); ok {
		return x.DirectionalLink
	}
	return nil
}

func (x *LinkIntent) GetBidirectionalLink() *BidirectionalLink {
	if x, ok := x.GetLinkType().(*LinkIntent_BidirectionalLink); ok {
		return x.BidirectionalLink
	}
	return nil
}

type isLinkIntent_LinkType interface {
	isLinkIntent_LinkType()
}

type LinkIntent_DirectionalLink struct {
	DirectionalLink *DirectionalLink `protobuf:"bytes,3,opt,name=directional_link,json=directionalLink,oneof"`
}

type LinkIntent_BidirectionalLink struct {
	BidirectionalLink *BidirectionalLink `protobuf:"bytes,2,opt,name=bidirectional_link,json=bidirectionalLink,oneof"`
}

func (*LinkIntent_DirectionalLink) isLinkIntent_LinkType() {}

func (*LinkIntent_BidirectionalLink) isLinkIntent_LinkType() {}

type RadioIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*RadioConfiguration `protobuf:"bytes,2,rep,name=configurations" json:"configurations,omitempty"`
}

func (x *RadioIntent) Reset() {
	*x = RadioIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioIntent) ProtoMessage() {}

func (x *RadioIntent) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioIntent.ProtoReflect.Descriptor instead.
func (*RadioIntent) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{2}
}

func (x *RadioIntent) GetConfigurations() []*RadioConfiguration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type PathIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
	SrcElementId *string `protobuf:"bytes,1,opt,name=src_element_id,json=srcElementId" json:"src_element_id,omitempty"`
	// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
	DstElementId *string                `protobuf:"bytes,2,opt,name=dst_element_id,json=dstElementId" json:"dst_element_id,omitempty"`
	Classifier   *common.FlowClassifier `protobuf:"bytes,10,opt,name=classifier" json:"classifier,omitempty"`
	PathSegments []*NetworkLink         `protobuf:"bytes,3,rep,name=path_segments,json=pathSegments" json:"path_segments,omitempty"`
}

func (x *PathIntent) Reset() {
	*x = PathIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathIntent) ProtoMessage() {}

func (x *PathIntent) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathIntent.ProtoReflect.Descriptor instead.
func (*PathIntent) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
func (x *PathIntent) GetSrcElementId() string {
	if x != nil && x.SrcElementId != nil {
		return *x.SrcElementId
	}
	return ""
}

// Deprecated: Marked as deprecated in api/nbi/v1alpha/resources/intent.proto.
func (x *PathIntent) GetDstElementId() string {
	if x != nil && x.DstElementId != nil {
		return *x.DstElementId
	}
	return ""
}

func (x *PathIntent) GetClassifier() *common.FlowClassifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (x *PathIntent) GetPathSegments() []*NetworkLink {
	if x != nil {
		return x.PathSegments
	}
	return nil
}

type TunnelIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A      *TunnelIntent_TunnelEndpoint `protobuf:"bytes,10,opt,name=a" json:"a,omitempty"`
	B      *TunnelIntent_TunnelEndpoint `protobuf:"bytes,11,opt,name=b" json:"b,omitempty"`
	Method *common.TunnelMethod         `protobuf:"bytes,5,opt,name=method" json:"method,omitempty"`
}

func (x *TunnelIntent) Reset() {
	*x = TunnelIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelIntent) ProtoMessage() {}

func (x *TunnelIntent) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelIntent.ProtoReflect.Descriptor instead.
func (*TunnelIntent) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{4}
}

func (x *TunnelIntent) GetA() *TunnelIntent_TunnelEndpoint {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *TunnelIntent) GetB() *TunnelIntent_TunnelEndpoint {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *TunnelIntent) GetMethod() *common.TunnelMethod {
	if x != nil {
		return x.Method
	}
	return nil
}

type IntentFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *IntentFailure_IntentFailureType `protobuf:"varint,1,opt,name=type,enum=aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure_IntentFailureType" json:"type,omitempty"`
	PreconditionFailure *IntentFailure                   `protobuf:"bytes,2,opt,name=precondition_failure,json=preconditionFailure" json:"precondition_failure,omitempty"`
	Description         *string                          `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	AgentIds            []string                         `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds" json:"agent_ids,omitempty"`
	AgentFailureCode    *code.Code                       `protobuf:"varint,5,opt,name=agent_failure_code,json=agentFailureCode,enum=google.rpc.Code" json:"agent_failure_code,omitempty"`
}

func (x *IntentFailure) Reset() {
	*x = IntentFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentFailure) ProtoMessage() {}

func (x *IntentFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentFailure.ProtoReflect.Descriptor instead.
func (*IntentFailure) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{5}
}

func (x *IntentFailure) GetType() IntentFailure_IntentFailureType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IntentFailure_UNKNOWN
}

func (x *IntentFailure) GetPreconditionFailure() *IntentFailure {
	if x != nil {
		return x.PreconditionFailure
	}
	return nil
}

func (x *IntentFailure) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *IntentFailure) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *IntentFailure) GetAgentFailureCode() code.Code {
	if x != nil && x.AgentFailureCode != nil {
		return *x.AgentFailureCode
	}
	return code.Code(0)
}

type IntentWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *IntentWithdrawal_WithdrawType `protobuf:"varint,1,opt,name=type,enum=aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal_WithdrawType" json:"type,omitempty"`
	Description *string                        `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *IntentWithdrawal) Reset() {
	*x = IntentWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentWithdrawal) ProtoMessage() {}

func (x *IntentWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentWithdrawal.ProtoReflect.Descriptor instead.
func (*IntentWithdrawal) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{6}
}

func (x *IntentWithdrawal) GetType() IntentWithdrawal_WithdrawType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IntentWithdrawal_UNKNOWN
}

func (x *IntentWithdrawal) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Intent_ServiceRequestAndIntervals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceRequestId *string              `protobuf:"bytes,1,opt,name=service_request_id,json=serviceRequestId" json:"service_request_id,omitempty"`
	Interval         []*interval.Interval `protobuf:"bytes,2,rep,name=interval" json:"interval,omitempty"`
}

func (x *Intent_ServiceRequestAndIntervals) Reset() {
	*x = Intent_ServiceRequestAndIntervals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent_ServiceRequestAndIntervals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent_ServiceRequestAndIntervals) ProtoMessage() {}

func (x *Intent_ServiceRequestAndIntervals) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent_ServiceRequestAndIntervals.ProtoReflect.Descriptor instead.
func (*Intent_ServiceRequestAndIntervals) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Intent_ServiceRequestAndIntervals) GetServiceRequestId() string {
	if x != nil && x.ServiceRequestId != nil {
		return *x.ServiceRequestId
	}
	return ""
}

func (x *Intent_ServiceRequestAndIntervals) GetInterval() []*interval.Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

type TunnelIntent_TunnelEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                     *string                `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Classifier                 *common.FlowClassifier `protobuf:"bytes,5,opt,name=classifier" json:"classifier,omitempty"`
	EncapsulatedSrcInterfaceId *string                `protobuf:"bytes,6,opt,name=encapsulated_src_interface_id,json=encapsulatedSrcInterfaceId" json:"encapsulated_src_interface_id,omitempty"`
	EncapsulatedSrcPort        *int32                 `protobuf:"varint,3,opt,name=encapsulated_src_port,json=encapsulatedSrcPort" json:"encapsulated_src_port,omitempty"`
}

func (x *TunnelIntent_TunnelEndpoint) Reset() {
	*x = TunnelIntent_TunnelEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelIntent_TunnelEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelIntent_TunnelEndpoint) ProtoMessage() {}

func (x *TunnelIntent_TunnelEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_intent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelIntent_TunnelEndpoint.ProtoReflect.Descriptor instead.
func (*TunnelIntent_TunnelEndpoint) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TunnelIntent_TunnelEndpoint) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *TunnelIntent_TunnelEndpoint) GetClassifier() *common.FlowClassifier {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (x *TunnelIntent_TunnelEndpoint) GetEncapsulatedSrcInterfaceId() string {
	if x != nil && x.EncapsulatedSrcInterfaceId != nil {
		return *x.EncapsulatedSrcInterfaceId
	}
	return ""
}

func (x *TunnelIntent_TunnelEndpoint) GetEncapsulatedSrcPort() int32 {
	if x != nil && x.EncapsulatedSrcPort != nil {
		return *x.EncapsulatedSrcPort
	}
	return 0
}

var File_api_nbi_v1alpha_resources_intent_proto protoreflect.FileDescriptor

var file_api_nbi_v1alpha_resources_intent_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x62, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x0a, 0x0a, 0x06,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x61, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x50, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x12, 0x4f, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x0b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5d,
	0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x50, 0x0a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x8c, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x52, 0x18, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x74,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x1a, 0x7d, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x08, 0x08, 0x12, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x85, 0x02, 0x0a, 0x0a,
	0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x6f, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x11, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x08, 0x08, 0x04, 0x10, 0x80, 0x80,
	0x80, 0x80, 0x02, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x9d, 0x02, 0x0a,
	0x0a, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d, 0x0a,
	0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c,
	0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x09, 0x4a, 0x08, 0x08, 0x0b, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x9f, 0x04, 0x0a,
	0x0c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a,
	0x01, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x01, 0x61, 0x12, 0x56, 0x0a, 0x01, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x01, 0x62, 0x12, 0x42, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0x84, 0x02, 0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x72, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x72, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x08,
	0x08, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x0a, 0x4a, 0x08, 0x08, 0x0c, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xf0,
	0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x60, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c,
	0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x3e, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x84, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x44, 0x50, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x44, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22, 0x08, 0x08,
	0x0a, 0x10, 0xff, 0xff, 0xff, 0xff, 0x07, 0x4a, 0x08, 0x08, 0x06, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x08, 0x08, 0x03, 0x10, 0xff, 0xff,
	0xff, 0xff, 0x07, 0x4a, 0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x2a, 0xc6, 0x01,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x55, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x59, 0x42, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02,
	0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x42, 0x62, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5a, 0x2f, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
}

var (
	file_api_nbi_v1alpha_resources_intent_proto_rawDescOnce sync.Once
	file_api_nbi_v1alpha_resources_intent_proto_rawDescData = file_api_nbi_v1alpha_resources_intent_proto_rawDesc
)

func file_api_nbi_v1alpha_resources_intent_proto_rawDescGZIP() []byte {
	file_api_nbi_v1alpha_resources_intent_proto_rawDescOnce.Do(func() {
		file_api_nbi_v1alpha_resources_intent_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_nbi_v1alpha_resources_intent_proto_rawDescData)
	})
	return file_api_nbi_v1alpha_resources_intent_proto_rawDescData
}

var file_api_nbi_v1alpha_resources_intent_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_nbi_v1alpha_resources_intent_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_nbi_v1alpha_resources_intent_proto_goTypes = []interface{}{
	(IntentState)(0),                          // 0: aalyria.spacetime.api.nbi.v1alpha.resources.IntentState
	(IntentFailure_IntentFailureType)(0),      // 1: aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure.IntentFailureType
	(IntentWithdrawal_WithdrawType)(0),        // 2: aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal.WithdrawType
	(*Intent)(nil),                            // 3: aalyria.spacetime.api.nbi.v1alpha.resources.Intent
	(*LinkIntent)(nil),                        // 4: aalyria.spacetime.api.nbi.v1alpha.resources.LinkIntent
	(*RadioIntent)(nil),                       // 5: aalyria.spacetime.api.nbi.v1alpha.resources.RadioIntent
	(*PathIntent)(nil),                        // 6: aalyria.spacetime.api.nbi.v1alpha.resources.PathIntent
	(*TunnelIntent)(nil),                      // 7: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent
	(*IntentFailure)(nil),                     // 8: aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure
	(*IntentWithdrawal)(nil),                  // 9: aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal
	(*Intent_ServiceRequestAndIntervals)(nil), // 10: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.ServiceRequestAndIntervals
	(*TunnelIntent_TunnelEndpoint)(nil),       // 11: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.TunnelEndpoint
	(*timestamppb.Timestamp)(nil),             // 12: google.protobuf.Timestamp
	(*common.ScheduledControlUpdate)(nil),     // 13: aalyria.spacetime.api.common.ScheduledControlUpdate
	(*common.DateTime)(nil),                   // 14: aalyria.spacetime.api.common.DateTime
	(*DirectionalLink)(nil),                   // 15: aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink
	(*BidirectionalLink)(nil),                 // 16: aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink
	(*RadioConfiguration)(nil),                // 17: aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration
	(*common.FlowClassifier)(nil),             // 18: aalyria.spacetime.api.common.FlowClassifier
	(*NetworkLink)(nil),                       // 19: aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink
	(*common.TunnelMethod)(nil),               // 20: aalyria.spacetime.api.common.TunnelMethod
	(code.Code)(0),                            // 21: google.rpc.Code
	(*interval.Interval)(nil),                 // 22: google.type.Interval
}
var file_api_nbi_v1alpha_resources_intent_proto_depIdxs = []int32{
	12, // 0: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.time_to_enact:type_name -> google.protobuf.Timestamp
	4,  // 1: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.link:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.LinkIntent
	5,  // 2: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.radio:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.RadioIntent
	6,  // 3: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.route:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.PathIntent
	7,  // 4: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.tunnel:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent
	0,  // 5: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.state:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentState
	13, // 6: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.compiled_updates:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdate
	8,  // 7: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.failure:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure
	9,  // 8: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.withdrawal:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal
	14, // 9: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.time_to_withdraw:type_name -> aalyria.spacetime.api.common.DateTime
	10, // 10: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.dependent_service_requests:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.Intent.ServiceRequestAndIntervals
	13, // 11: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.compiled_withdrawal_updates:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdate
	15, // 12: aalyria.spacetime.api.nbi.v1alpha.resources.LinkIntent.directional_link:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink
	16, // 13: aalyria.spacetime.api.nbi.v1alpha.resources.LinkIntent.bidirectional_link:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink
	17, // 14: aalyria.spacetime.api.nbi.v1alpha.resources.RadioIntent.configurations:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration
	18, // 15: aalyria.spacetime.api.nbi.v1alpha.resources.PathIntent.classifier:type_name -> aalyria.spacetime.api.common.FlowClassifier
	19, // 16: aalyria.spacetime.api.nbi.v1alpha.resources.PathIntent.path_segments:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink
	11, // 17: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.a:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.TunnelEndpoint
	11, // 18: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.b:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.TunnelEndpoint
	20, // 19: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.method:type_name -> aalyria.spacetime.api.common.TunnelMethod
	1,  // 20: aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure.type:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure.IntentFailureType
	8,  // 21: aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure.precondition_failure:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure
	21, // 22: aalyria.spacetime.api.nbi.v1alpha.resources.IntentFailure.agent_failure_code:type_name -> google.rpc.Code
	2,  // 23: aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal.type:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.IntentWithdrawal.WithdrawType
	22, // 24: aalyria.spacetime.api.nbi.v1alpha.resources.Intent.ServiceRequestAndIntervals.interval:type_name -> google.type.Interval
	18, // 25: aalyria.spacetime.api.nbi.v1alpha.resources.TunnelIntent.TunnelEndpoint.classifier:type_name -> aalyria.spacetime.api.common.FlowClassifier
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_nbi_v1alpha_resources_intent_proto_init() }
func file_api_nbi_v1alpha_resources_intent_proto_init() {
	if File_api_nbi_v1alpha_resources_intent_proto != nil {
		return
	}
	file_api_nbi_v1alpha_resources_network_link_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent_ServiceRequestAndIntervals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_intent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelIntent_TunnelEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_nbi_v1alpha_resources_intent_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Intent_Link)(nil),
		(*Intent_Radio)(nil),
		(*Intent_Route)(nil),
		(*Intent_Tunnel)(nil),
	}
	file_api_nbi_v1alpha_resources_intent_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LinkIntent_DirectionalLink)(nil),
		(*LinkIntent_BidirectionalLink)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_nbi_v1alpha_resources_intent_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_nbi_v1alpha_resources_intent_proto_goTypes,
		DependencyIndexes: file_api_nbi_v1alpha_resources_intent_proto_depIdxs,
		EnumInfos:         file_api_nbi_v1alpha_resources_intent_proto_enumTypes,
		MessageInfos:      file_api_nbi_v1alpha_resources_intent_proto_msgTypes,
	}.Build()
	File_api_nbi_v1alpha_resources_intent_proto = out.File
	file_api_nbi_v1alpha_resources_intent_proto_rawDesc = nil
	file_api_nbi_v1alpha_resources_intent_proto_goTypes = nil
	file_api_nbi_v1alpha_resources_intent_proto_depIdxs = nil
}

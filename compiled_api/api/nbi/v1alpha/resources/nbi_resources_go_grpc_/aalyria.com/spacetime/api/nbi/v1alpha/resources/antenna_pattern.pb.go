// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/nbi/v1alpha/resources/antenna_pattern.proto

package resources

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PatternType:
	//
	//	*AntennaPattern_CustomPhiThetaPattern
	//	*AntennaPattern_GaussianPattern
	//	*AntennaPattern_HelicalPattern
	//	*AntennaPattern_IsotropicPattern
	//	*AntennaPattern_ParabolicPattern
	//	*AntennaPattern_SquareHornPattern
	//	*AntennaPattern_GaussianOpticalPattern
	//	*AntennaPattern_PhasedArrayPattern
	//	*AntennaPattern_NearAndFarFieldPattern
	//	*AntennaPattern_TransmitterAndReceiverPattern
	//	*AntennaPattern_CustomAntennaPatternPerAngle_
	//	*AntennaPattern_CustomAzElPattern
	PatternType isAntennaPattern_PatternType `protobuf_oneof:"pattern_type"`
}

func (x *AntennaPattern) Reset() {
	*x = AntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern) ProtoMessage() {}

func (x *AntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0}
}

func (m *AntennaPattern) GetPatternType() isAntennaPattern_PatternType {
	if m != nil {
		return m.PatternType
	}
	return nil
}

func (x *AntennaPattern) GetCustomPhiThetaPattern() *AntennaPattern_CustomPhiThetaAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_CustomPhiThetaPattern); ok {
		return x.CustomPhiThetaPattern
	}
	return nil
}

func (x *AntennaPattern) GetGaussianPattern() *AntennaPattern_GaussianAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_GaussianPattern); ok {
		return x.GaussianPattern
	}
	return nil
}

func (x *AntennaPattern) GetHelicalPattern() *AntennaPattern_HelicalAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_HelicalPattern); ok {
		return x.HelicalPattern
	}
	return nil
}

func (x *AntennaPattern) GetIsotropicPattern() *AntennaPattern_IsotropicAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_IsotropicPattern); ok {
		return x.IsotropicPattern
	}
	return nil
}

func (x *AntennaPattern) GetParabolicPattern() *AntennaPattern_ParabolicAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_ParabolicPattern); ok {
		return x.ParabolicPattern
	}
	return nil
}

func (x *AntennaPattern) GetSquareHornPattern() *AntennaPattern_SquareHornAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_SquareHornPattern); ok {
		return x.SquareHornPattern
	}
	return nil
}

func (x *AntennaPattern) GetGaussianOpticalPattern() *AntennaPattern_GaussianOpticalAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_GaussianOpticalPattern); ok {
		return x.GaussianOpticalPattern
	}
	return nil
}

func (x *AntennaPattern) GetPhasedArrayPattern() *AntennaPattern_PhasedArrayAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_PhasedArrayPattern); ok {
		return x.PhasedArrayPattern
	}
	return nil
}

func (x *AntennaPattern) GetNearAndFarFieldPattern() *AntennaPattern_NearAndFarFieldAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_NearAndFarFieldPattern); ok {
		return x.NearAndFarFieldPattern
	}
	return nil
}

func (x *AntennaPattern) GetTransmitterAndReceiverPattern() *AntennaPattern_TransmitterAndReceiverAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_TransmitterAndReceiverPattern); ok {
		return x.TransmitterAndReceiverPattern
	}
	return nil
}

func (x *AntennaPattern) GetCustomAntennaPatternPerAngle() *AntennaPattern_CustomAntennaPatternPerAngle {
	if x, ok := x.GetPatternType().(*AntennaPattern_CustomAntennaPatternPerAngle_); ok {
		return x.CustomAntennaPatternPerAngle
	}
	return nil
}

func (x *AntennaPattern) GetCustomAzElPattern() *AntennaPattern_CustomAzElAntennaPattern {
	if x, ok := x.GetPatternType().(*AntennaPattern_CustomAzElPattern); ok {
		return x.CustomAzElPattern
	}
	return nil
}

type isAntennaPattern_PatternType interface {
	isAntennaPattern_PatternType()
}

type AntennaPattern_CustomPhiThetaPattern struct {
	CustomPhiThetaPattern *AntennaPattern_CustomPhiThetaAntennaPattern `protobuf:"bytes,1,opt,name=custom_phi_theta_pattern,json=customPhiThetaPattern,oneof"`
}

type AntennaPattern_GaussianPattern struct {
	GaussianPattern *AntennaPattern_GaussianAntennaPattern `protobuf:"bytes,2,opt,name=gaussian_pattern,json=gaussianPattern,oneof"`
}

type AntennaPattern_HelicalPattern struct {
	HelicalPattern *AntennaPattern_HelicalAntennaPattern `protobuf:"bytes,3,opt,name=helical_pattern,json=helicalPattern,oneof"`
}

type AntennaPattern_IsotropicPattern struct {
	IsotropicPattern *AntennaPattern_IsotropicAntennaPattern `protobuf:"bytes,4,opt,name=isotropic_pattern,json=isotropicPattern,oneof"`
}

type AntennaPattern_ParabolicPattern struct {
	ParabolicPattern *AntennaPattern_ParabolicAntennaPattern `protobuf:"bytes,5,opt,name=parabolic_pattern,json=parabolicPattern,oneof"`
}

type AntennaPattern_SquareHornPattern struct {
	SquareHornPattern *AntennaPattern_SquareHornAntennaPattern `protobuf:"bytes,6,opt,name=square_horn_pattern,json=squareHornPattern,oneof"`
}

type AntennaPattern_GaussianOpticalPattern struct {
	GaussianOpticalPattern *AntennaPattern_GaussianOpticalAntennaPattern `protobuf:"bytes,7,opt,name=gaussian_optical_pattern,json=gaussianOpticalPattern,oneof"`
}

type AntennaPattern_PhasedArrayPattern struct {
	PhasedArrayPattern *AntennaPattern_PhasedArrayAntennaPattern `protobuf:"bytes,10,opt,name=phased_array_pattern,json=phasedArrayPattern,oneof"`
}

type AntennaPattern_NearAndFarFieldPattern struct {
	NearAndFarFieldPattern *AntennaPattern_NearAndFarFieldAntennaPattern `protobuf:"bytes,9,opt,name=near_and_far_field_pattern,json=nearAndFarFieldPattern,oneof"`
}

type AntennaPattern_TransmitterAndReceiverPattern struct {
	TransmitterAndReceiverPattern *AntennaPattern_TransmitterAndReceiverAntennaPattern `protobuf:"bytes,11,opt,name=transmitter_and_receiver_pattern,json=transmitterAndReceiverPattern,oneof"`
}

type AntennaPattern_CustomAntennaPatternPerAngle_ struct {
	CustomAntennaPatternPerAngle *AntennaPattern_CustomAntennaPatternPerAngle `protobuf:"bytes,12,opt,name=custom_antenna_pattern_per_angle,json=customAntennaPatternPerAngle,oneof"`
}

type AntennaPattern_CustomAzElPattern struct {
	CustomAzElPattern *AntennaPattern_CustomAzElAntennaPattern `protobuf:"bytes,13,opt,name=custom_az_el_pattern,json=customAzElPattern,oneof"`
}

func (*AntennaPattern_CustomPhiThetaPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_GaussianPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_HelicalPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_IsotropicPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_ParabolicPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_SquareHornPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_GaussianOpticalPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_PhasedArrayPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_NearAndFarFieldPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_TransmitterAndReceiverPattern) isAntennaPattern_PatternType() {}

func (*AntennaPattern_CustomAntennaPatternPerAngle_) isAntennaPattern_PatternType() {}

func (*AntennaPattern_CustomAzElPattern) isAntennaPattern_PatternType() {}

type AntennaPattern_CustomPhiThetaAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainValue []*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue `protobuf:"bytes,1,rep,name=gain_value,json=gainValue" json:"gain_value,omitempty"`
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern) Reset() {
	*x = AntennaPattern_CustomPhiThetaAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomPhiThetaAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomPhiThetaAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomPhiThetaAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern) GetGainValue() []*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue {
	if x != nil {
		return x.GainValue
	}
	return nil
}

type AntennaPattern_CustomAzElAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainValues []*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue `protobuf:"bytes,1,rep,name=gain_values,json=gainValues" json:"gain_values,omitempty"`
}

func (x *AntennaPattern_CustomAzElAntennaPattern) Reset() {
	*x = AntennaPattern_CustomAzElAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomAzElAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomAzElAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_CustomAzElAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomAzElAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomAzElAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AntennaPattern_CustomAzElAntennaPattern) GetGainValues() []*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue {
	if x != nil {
		return x.GainValues
	}
	return nil
}

type AntennaPattern_CustomAntennaPatternPerAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanAngleAndCustomPatterns []*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern `protobuf:"bytes,1,rep,name=scan_angle_and_custom_patterns,json=scanAngleAndCustomPatterns" json:"scan_angle_and_custom_patterns,omitempty"`
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle) Reset() {
	*x = AntennaPattern_CustomAntennaPatternPerAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomAntennaPatternPerAngle) ProtoMessage() {}

func (x *AntennaPattern_CustomAntennaPatternPerAngle) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomAntennaPatternPerAngle.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomAntennaPatternPerAngle) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle) GetScanAngleAndCustomPatterns() []*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern {
	if x != nil {
		return x.ScanAngleAndCustomPatterns
	}
	return nil
}

type AntennaPattern_GaussianAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiameterM         *float64 `protobuf:"fixed64,1,opt,name=diameter_m,json=diameterM" json:"diameter_m,omitempty"`
	EfficiencyPercent *float64 `protobuf:"fixed64,2,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	BacklobeGainDb    *float64 `protobuf:"fixed64,3,opt,name=backlobe_gain_db,json=backlobeGainDb" json:"backlobe_gain_db,omitempty"`
}

func (x *AntennaPattern_GaussianAntennaPattern) Reset() {
	*x = AntennaPattern_GaussianAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_GaussianAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_GaussianAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_GaussianAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_GaussianAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_GaussianAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AntennaPattern_GaussianAntennaPattern) GetDiameterM() float64 {
	if x != nil && x.DiameterM != nil {
		return *x.DiameterM
	}
	return 0
}

func (x *AntennaPattern_GaussianAntennaPattern) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *AntennaPattern_GaussianAntennaPattern) GetBacklobeGainDb() float64 {
	if x != nil && x.BacklobeGainDb != nil {
		return *x.BacklobeGainDb
	}
	return 0
}

type AntennaPattern_HelicalAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiameterM         *float64 `protobuf:"fixed64,1,opt,name=diameter_m,json=diameterM" json:"diameter_m,omitempty"`
	EfficiencyPercent *float64 `protobuf:"fixed64,2,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	BacklobeGainDb    *float64 `protobuf:"fixed64,3,opt,name=backlobe_gain_db,json=backlobeGainDb" json:"backlobe_gain_db,omitempty"`
	NumberOfTurns     *float64 `protobuf:"fixed64,4,opt,name=number_of_turns,json=numberOfTurns" json:"number_of_turns,omitempty"`
	TurnSpacingM      *float64 `protobuf:"fixed64,5,opt,name=turn_spacing_m,json=turnSpacingM" json:"turn_spacing_m,omitempty"`
}

func (x *AntennaPattern_HelicalAntennaPattern) Reset() {
	*x = AntennaPattern_HelicalAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_HelicalAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_HelicalAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_HelicalAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_HelicalAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_HelicalAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AntennaPattern_HelicalAntennaPattern) GetDiameterM() float64 {
	if x != nil && x.DiameterM != nil {
		return *x.DiameterM
	}
	return 0
}

func (x *AntennaPattern_HelicalAntennaPattern) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *AntennaPattern_HelicalAntennaPattern) GetBacklobeGainDb() float64 {
	if x != nil && x.BacklobeGainDb != nil {
		return *x.BacklobeGainDb
	}
	return 0
}

func (x *AntennaPattern_HelicalAntennaPattern) GetNumberOfTurns() float64 {
	if x != nil && x.NumberOfTurns != nil {
		return *x.NumberOfTurns
	}
	return 0
}

func (x *AntennaPattern_HelicalAntennaPattern) GetTurnSpacingM() float64 {
	if x != nil && x.TurnSpacingM != nil {
		return *x.TurnSpacingM
	}
	return 0
}

type AntennaPattern_IsotropicAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AntennaPattern_IsotropicAntennaPattern) Reset() {
	*x = AntennaPattern_IsotropicAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_IsotropicAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_IsotropicAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_IsotropicAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_IsotropicAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_IsotropicAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 5}
}

type AntennaPattern_ParabolicAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiameterM         *float64 `protobuf:"fixed64,1,opt,name=diameter_m,json=diameterM" json:"diameter_m,omitempty"`
	EfficiencyPercent *float64 `protobuf:"fixed64,2,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	BacklobeGainDb    *float64 `protobuf:"fixed64,3,opt,name=backlobe_gain_db,json=backlobeGainDb" json:"backlobe_gain_db,omitempty"`
}

func (x *AntennaPattern_ParabolicAntennaPattern) Reset() {
	*x = AntennaPattern_ParabolicAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_ParabolicAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_ParabolicAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_ParabolicAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_ParabolicAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_ParabolicAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 6}
}

func (x *AntennaPattern_ParabolicAntennaPattern) GetDiameterM() float64 {
	if x != nil && x.DiameterM != nil {
		return *x.DiameterM
	}
	return 0
}

func (x *AntennaPattern_ParabolicAntennaPattern) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *AntennaPattern_ParabolicAntennaPattern) GetBacklobeGainDb() float64 {
	if x != nil && x.BacklobeGainDb != nil {
		return *x.BacklobeGainDb
	}
	return 0
}

type AntennaPattern_SquareHornAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiameterM         *float64 `protobuf:"fixed64,1,opt,name=diameter_m,json=diameterM" json:"diameter_m,omitempty"`
	EfficiencyPercent *float64 `protobuf:"fixed64,2,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	BacklobeGainDb    *float64 `protobuf:"fixed64,3,opt,name=backlobe_gain_db,json=backlobeGainDb" json:"backlobe_gain_db,omitempty"`
}

func (x *AntennaPattern_SquareHornAntennaPattern) Reset() {
	*x = AntennaPattern_SquareHornAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_SquareHornAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_SquareHornAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_SquareHornAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_SquareHornAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_SquareHornAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 7}
}

func (x *AntennaPattern_SquareHornAntennaPattern) GetDiameterM() float64 {
	if x != nil && x.DiameterM != nil {
		return *x.DiameterM
	}
	return 0
}

func (x *AntennaPattern_SquareHornAntennaPattern) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *AntennaPattern_SquareHornAntennaPattern) GetBacklobeGainDb() float64 {
	if x != nil && x.BacklobeGainDb != nil {
		return *x.BacklobeGainDb
	}
	return 0
}

type AntennaPattern_GaussianOpticalAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiameterM          *float64 `protobuf:"fixed64,1,opt,name=diameter_m,json=diameterM" json:"diameter_m,omitempty"`
	EfficiencyPercent  *float64 `protobuf:"fixed64,2,opt,name=efficiency_percent,json=efficiencyPercent" json:"efficiency_percent,omitempty"`
	DivergenceAngleRad *float64 `protobuf:"fixed64,3,opt,name=divergence_angle_rad,json=divergenceAngleRad" json:"divergence_angle_rad,omitempty"`
	PointingErrorRad   *float64 `protobuf:"fixed64,4,opt,name=pointing_error_rad,json=pointingErrorRad" json:"pointing_error_rad,omitempty"`
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) Reset() {
	*x = AntennaPattern_GaussianOpticalAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_GaussianOpticalAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_GaussianOpticalAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_GaussianOpticalAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 8}
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) GetDiameterM() float64 {
	if x != nil && x.DiameterM != nil {
		return *x.DiameterM
	}
	return 0
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) GetEfficiencyPercent() float64 {
	if x != nil && x.EfficiencyPercent != nil {
		return *x.EfficiencyPercent
	}
	return 0
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) GetDivergenceAngleRad() float64 {
	if x != nil && x.DivergenceAngleRad != nil {
		return *x.DivergenceAngleRad
	}
	return 0
}

func (x *AntennaPattern_GaussianOpticalAntennaPattern) GetPointingErrorRad() float64 {
	if x != nil && x.PointingErrorRad != nil {
		return *x.PointingErrorRad
	}
	return 0
}

type AntennaPattern_PhasedArrayAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesignFrequencyHz     *float64                                            `protobuf:"fixed64,1,opt,name=design_frequency_hz,json=designFrequencyHz" json:"design_frequency_hz,omitempty"`
	BacklobeSuppressionDb *float64                                            `protobuf:"fixed64,2,opt,name=backlobe_suppression_db,json=backlobeSuppressionDb" json:"backlobe_suppression_db,omitempty"`
	Elements              []*AntennaPattern_PhasedArrayAntennaPattern_Element `protobuf:"bytes,3,rep,name=elements" json:"elements,omitempty"`
	// Types that are assignable to Beamformer:
	//
	//	*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_
	Beamformer                  isAntennaPattern_PhasedArrayAntennaPattern_Beamformer                 `protobuf_oneof:"beamformer"`
	CosineExponentElementFactor *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor `protobuf:"bytes,5,opt,name=cosine_exponent_element_factor,json=cosineExponentElementFactor" json:"cosine_exponent_element_factor,omitempty"`
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) Reset() {
	*x = AntennaPattern_PhasedArrayAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_PhasedArrayAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_PhasedArrayAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_PhasedArrayAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_PhasedArrayAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 9}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) GetDesignFrequencyHz() float64 {
	if x != nil && x.DesignFrequencyHz != nil {
		return *x.DesignFrequencyHz
	}
	return 0
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) GetBacklobeSuppressionDb() float64 {
	if x != nil && x.BacklobeSuppressionDb != nil {
		return *x.BacklobeSuppressionDb
	}
	return 0
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) GetElements() []*AntennaPattern_PhasedArrayAntennaPattern_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (m *AntennaPattern_PhasedArrayAntennaPattern) GetBeamformer() isAntennaPattern_PhasedArrayAntennaPattern_Beamformer {
	if m != nil {
		return m.Beamformer
	}
	return nil
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) GetMinimumVarianceDistortionlessResponseBeamformer() *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer {
	if x, ok := x.GetBeamformer().(*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_); ok {
		return x.MinimumVarianceDistortionlessResponseBeamformer
	}
	return nil
}

func (x *AntennaPattern_PhasedArrayAntennaPattern) GetCosineExponentElementFactor() *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor {
	if x != nil {
		return x.CosineExponentElementFactor
	}
	return nil
}

type isAntennaPattern_PhasedArrayAntennaPattern_Beamformer interface {
	isAntennaPattern_PhasedArrayAntennaPattern_Beamformer()
}

type AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_ struct {
	MinimumVarianceDistortionlessResponseBeamformer *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer `protobuf:"bytes,4,opt,name=minimum_variance_distortionless_response_beamformer,json=minimumVarianceDistortionlessResponseBeamformer,oneof"`
}

func (*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_) isAntennaPattern_PhasedArrayAntennaPattern_Beamformer() {
}

type AntennaPattern_NearAndFarFieldAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NearFieldPattern *AntennaPattern `protobuf:"bytes,1,opt,name=near_field_pattern,json=nearFieldPattern" json:"near_field_pattern,omitempty"`
	FarFieldPattern  *AntennaPattern `protobuf:"bytes,2,opt,name=far_field_pattern,json=farFieldPattern" json:"far_field_pattern,omitempty"`
	NearFieldRangeM  *float64        `protobuf:"fixed64,3,opt,name=near_field_range_m,json=nearFieldRangeM" json:"near_field_range_m,omitempty"`
}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) Reset() {
	*x = AntennaPattern_NearAndFarFieldAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_NearAndFarFieldAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_NearAndFarFieldAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_NearAndFarFieldAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 10}
}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) GetNearFieldPattern() *AntennaPattern {
	if x != nil {
		return x.NearFieldPattern
	}
	return nil
}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) GetFarFieldPattern() *AntennaPattern {
	if x != nil {
		return x.FarFieldPattern
	}
	return nil
}

func (x *AntennaPattern_NearAndFarFieldAntennaPattern) GetNearFieldRangeM() float64 {
	if x != nil && x.NearFieldRangeM != nil {
		return *x.NearFieldRangeM
	}
	return 0
}

type AntennaPattern_TransmitterAndReceiverAntennaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmitterPattern *AntennaPattern `protobuf:"bytes,1,opt,name=transmitter_pattern,json=transmitterPattern" json:"transmitter_pattern,omitempty"`
	ReceiverPattern    *AntennaPattern `protobuf:"bytes,2,opt,name=receiver_pattern,json=receiverPattern" json:"receiver_pattern,omitempty"`
}

func (x *AntennaPattern_TransmitterAndReceiverAntennaPattern) Reset() {
	*x = AntennaPattern_TransmitterAndReceiverAntennaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_TransmitterAndReceiverAntennaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_TransmitterAndReceiverAntennaPattern) ProtoMessage() {}

func (x *AntennaPattern_TransmitterAndReceiverAntennaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_TransmitterAndReceiverAntennaPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_TransmitterAndReceiverAntennaPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 11}
}

func (x *AntennaPattern_TransmitterAndReceiverAntennaPattern) GetTransmitterPattern() *AntennaPattern {
	if x != nil {
		return x.TransmitterPattern
	}
	return nil
}

func (x *AntennaPattern_TransmitterAndReceiverAntennaPattern) GetReceiverPattern() *AntennaPattern {
	if x != nil {
		return x.ReceiverPattern
	}
	return nil
}

type AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainDb   *float64 `protobuf:"fixed64,1,opt,name=gain_db,json=gainDb" json:"gain_db,omitempty"`
	PhiRad   *float64 `protobuf:"fixed64,2,opt,name=phi_rad,json=phiRad" json:"phi_rad,omitempty"`
	ThetaRad *float64 `protobuf:"fixed64,3,opt,name=theta_rad,json=thetaRad" json:"theta_rad,omitempty"`
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) Reset() {
	*x = AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) ProtoMessage() {}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) GetGainDb() float64 {
	if x != nil && x.GainDb != nil {
		return *x.GainDb
	}
	return 0
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) GetPhiRad() float64 {
	if x != nil && x.PhiRad != nil {
		return *x.PhiRad
	}
	return 0
}

func (x *AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue) GetThetaRad() float64 {
	if x != nil && x.ThetaRad != nil {
		return *x.ThetaRad
	}
	return 0
}

type AntennaPattern_CustomAzElAntennaPattern_AzElGainValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GainDb *float64 `protobuf:"fixed64,1,opt,name=gain_db,json=gainDb" json:"gain_db,omitempty"`
	AzDeg  *float64 `protobuf:"fixed64,2,opt,name=az_deg,json=azDeg" json:"az_deg,omitempty"`
	ElDeg  *float64 `protobuf:"fixed64,3,opt,name=el_deg,json=elDeg" json:"el_deg,omitempty"`
}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) Reset() {
	*x = AntennaPattern_CustomAzElAntennaPattern_AzElGainValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) ProtoMessage() {}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomAzElAntennaPattern_AzElGainValue.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) GetGainDb() float64 {
	if x != nil && x.GainDb != nil {
		return *x.GainDb
	}
	return 0
}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) GetAzDeg() float64 {
	if x != nil && x.AzDeg != nil {
		return *x.AzDeg
	}
	return 0
}

func (x *AntennaPattern_CustomAzElAntennaPattern_AzElGainValue) GetElDeg() float64 {
	if x != nil && x.ElDeg != nil {
		return *x.ElDeg
	}
	return 0
}

type AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhiRad        *float32                                     `protobuf:"fixed32,1,opt,name=phi_rad,json=phiRad" json:"phi_rad,omitempty"`
	ThetaRad      *float32                                     `protobuf:"fixed32,2,opt,name=theta_rad,json=thetaRad" json:"theta_rad,omitempty"`
	CustomPattern *AntennaPattern_CustomPhiThetaAntennaPattern `protobuf:"bytes,3,opt,name=custom_pattern,json=customPattern" json:"custom_pattern,omitempty"`
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) Reset() {
	*x = AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) ProtoMessage() {}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern.ProtoReflect.Descriptor instead.
func (*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) GetPhiRad() float32 {
	if x != nil && x.PhiRad != nil {
		return *x.PhiRad
	}
	return 0
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) GetThetaRad() float32 {
	if x != nil && x.ThetaRad != nil {
		return *x.ThetaRad
	}
	return 0
}

func (x *AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern) GetCustomPattern() *AntennaPattern_CustomPhiThetaAntennaPattern {
	if x != nil {
		return x.CustomPattern
	}
	return nil
}

type AntennaPattern_PhasedArrayAntennaPattern_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y *float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_Element) Reset() {
	*x = AntennaPattern_PhasedArrayAntennaPattern_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_PhasedArrayAntennaPattern_Element) ProtoMessage() {}

func (x *AntennaPattern_PhasedArrayAntennaPattern_Element) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_PhasedArrayAntennaPattern_Element.ProtoReflect.Descriptor instead.
func (*AntennaPattern_PhasedArrayAntennaPattern_Element) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_Element) GetX() float64 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_Element) GetY() float64 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeamVariance *float64 `protobuf:"fixed64,1,opt,name=beam_variance,json=beamVariance" json:"beam_variance,omitempty"`
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) Reset() {
	*x = AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) ProtoMessage() {
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer.ProtoReflect.Descriptor instead.
func (*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer) GetBeamVariance() float64 {
	if x != nil && x.BeamVariance != nil {
		return *x.BeamVariance
	}
	return 0
}

type AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosineExponent *float64 `protobuf:"fixed64,1,opt,name=cosine_exponent,json=cosineExponent" json:"cosine_exponent,omitempty"`
	ElementAreaM2  *float64 `protobuf:"fixed64,2,opt,name=element_area_m2,json=elementAreaM2" json:"element_area_m2,omitempty"`
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) Reset() {
	*x = AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) ProtoMessage() {}

func (x *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) ProtoReflect() protoreflect.Message {
	mi := &file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor.ProtoReflect.Descriptor instead.
func (*AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) Descriptor() ([]byte, []int) {
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP(), []int{0, 9, 2}
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) GetCosineExponent() float64 {
	if x != nil && x.CosineExponent != nil {
		return *x.CosineExponent
	}
	return 0
}

func (x *AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor) GetElementAreaM2() float64 {
	if x != nil && x.ElementAreaM2 != nil {
		return *x.ElementAreaM2
	}
	return 0
}

var File_api_nbi_v1alpha_resources_antenna_pattern_proto protoreflect.FileDescriptor

var file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2b, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x89,
	0x28, 0x0a, 0x0e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x68, 0x69,
	0x5f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x68, 0x69, 0x54, 0x68, 0x65, 0x74, 0x61,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x68, 0x69, 0x54, 0x68, 0x65, 0x74, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x7f, 0x0a, 0x10, 0x67, 0x61, 0x75, 0x73, 0x73,
	0x69, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x47,
	0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61,
	0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x7c, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x48,
	0x65, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x74, 0x72,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x49, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x74, 0x72,
	0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x86, 0x01, 0x0a, 0x13, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x72, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x48, 0x6f, 0x72, 0x6e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x48, 0x6f,
	0x72, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x67, 0x61,
	0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x47, 0x61, 0x75, 0x73, 0x73, 0x69,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x67, 0x61, 0x75, 0x73, 0x73,
	0x69, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x70, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x97, 0x01,
	0x0a, 0x1a, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x4e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52,
	0x16, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x60, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x7a, 0x5f, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x7a, 0x45,
	0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x7a, 0x45, 0x6c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x1a, 0x90, 0x02, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x68, 0x69, 0x54, 0x68, 0x65, 0x74, 0x61, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x68,
	0x69, 0x54, 0x68, 0x65, 0x74, 0x61, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x61,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x63, 0x0a, 0x12, 0x53, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x47,
	0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x67, 0x61, 0x69, 0x6e, 0x44,
	0x62, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x68, 0x69, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x70, 0x68, 0x69, 0x52, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x52, 0x61, 0x64, 0x1a, 0xf8, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x7a, 0x45, 0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x7a,
	0x45, 0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x2e, 0x41, 0x7a, 0x45, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x67, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0d, 0x41, 0x7a,
	0x45, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x69, 0x6e, 0x5f, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x67, 0x61,
	0x69, 0x6e, 0x44, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x7a, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x7a, 0x44, 0x65, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x65, 0x6c, 0x44,
	0x65, 0x67, 0x1a, 0xac, 0x03, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x1e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x65,
	0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x1a, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0xd2, 0x01, 0x0a,
	0x19, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x68,
	0x69, 0x5f, 0x72, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x68, 0x69,
	0x52, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x68, 0x65, 0x74, 0x61, 0x52, 0x61, 0x64,
	0x12, 0x7f, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x68, 0x69, 0x54,
	0x68, 0x65, 0x74, 0x61, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x1a, 0x90, 0x01, 0x0a, 0x16, 0x47, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x12, 0x2d, 0x0a, 0x12, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x47, 0x61,
	0x69, 0x6e, 0x44, 0x62, 0x1a, 0xdd, 0x01, 0x0a, 0x15, 0x48, 0x65, 0x6c, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x12, 0x2d, 0x0a,
	0x12, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65,
	0x47, 0x61, 0x69, 0x6e, 0x44, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x1a, 0x19, 0x0a, 0x17, 0x49, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x70, 0x69,
	0x63, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a,
	0x91, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x47, 0x61, 0x69,
	0x6e, 0x44, 0x62, 0x1a, 0x92, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x48, 0x6f,
	0x72, 0x6e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x62, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x44, 0x62, 0x1a, 0xcd, 0x01, 0x0a, 0x1d, 0x47, 0x61, 0x75,
	0x73, 0x73, 0x69, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x69, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x1a, 0xad, 0x07, 0x0a, 0x19, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x62, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x62,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x62, 0x12, 0x79,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x33, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x65, 0x61, 0x6d, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x61, 0x61,
	0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x1b,
	0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x25, 0x0a, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x1a, 0x56, 0x0a, 0x2f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x65,
	0x61, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x6e, 0x0a, 0x1b, 0x43, 0x6f,
	0x73, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x73,
	0x69, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x62, 0x65,
	0x61, 0x6d, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x1a, 0xa0, 0x02, 0x0a, 0x1d, 0x4e, 0x65, 0x61,
	0x72, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x69, 0x0a, 0x12, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x10, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x67, 0x0a, 0x11, 0x66, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x66,
	0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2b,
	0x0a, 0x12, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x1a, 0xfc, 0x01, 0x0a, 0x24,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x66, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x4a, 0x08, 0x08, 0x0e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x42, 0x62, 0x0a, 0x2f, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x62, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5a, 0x2f, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
}

var (
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescOnce sync.Once
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescData = file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDesc
)

func file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescGZIP() []byte {
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescOnce.Do(func() {
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescData)
	})
	return file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDescData
}

var file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_nbi_v1alpha_resources_antenna_pattern_proto_goTypes = []interface{}{
	(*AntennaPattern)(nil),                                                                           // 0: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern
	(*AntennaPattern_CustomPhiThetaAntennaPattern)(nil),                                              // 1: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern
	(*AntennaPattern_CustomAzElAntennaPattern)(nil),                                                  // 2: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern
	(*AntennaPattern_CustomAntennaPatternPerAngle)(nil),                                              // 3: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle
	(*AntennaPattern_GaussianAntennaPattern)(nil),                                                    // 4: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern
	(*AntennaPattern_HelicalAntennaPattern)(nil),                                                     // 5: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern
	(*AntennaPattern_IsotropicAntennaPattern)(nil),                                                   // 6: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern
	(*AntennaPattern_ParabolicAntennaPattern)(nil),                                                   // 7: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern
	(*AntennaPattern_SquareHornAntennaPattern)(nil),                                                  // 8: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern
	(*AntennaPattern_GaussianOpticalAntennaPattern)(nil),                                             // 9: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern
	(*AntennaPattern_PhasedArrayAntennaPattern)(nil),                                                 // 10: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern
	(*AntennaPattern_NearAndFarFieldAntennaPattern)(nil),                                             // 11: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern
	(*AntennaPattern_TransmitterAndReceiverAntennaPattern)(nil),                                      // 12: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern
	(*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue)(nil),                           // 13: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue
	(*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue)(nil),                                    // 14: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue
	(*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern)(nil),                    // 15: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern
	(*AntennaPattern_PhasedArrayAntennaPattern_Element)(nil),                                         // 16: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element
	(*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer)(nil), // 17: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer
	(*AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor)(nil),                     // 18: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor
}
var file_api_nbi_v1alpha_resources_antenna_pattern_proto_depIdxs = []int32{
	1,  // 0: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern
	4,  // 1: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern
	5,  // 2: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern
	6,  // 3: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern
	7,  // 4: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern
	8,  // 5: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern
	9,  // 6: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern
	10, // 7: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern
	11, // 8: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern
	12, // 9: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern
	3,  // 10: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle
	2,  // 11: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern
	13, // 12: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue
	14, // 13: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue
	15, // 14: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern
	16, // 15: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element
	17, // 16: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer
	18, // 17: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor
	0,  // 18: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern
	0,  // 19: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern
	0,  // 20: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern
	0,  // 21: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern
	1,  // 22: aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern:type_name -> aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_nbi_v1alpha_resources_antenna_pattern_proto_init() }
func file_api_nbi_v1alpha_resources_antenna_pattern_proto_init() {
	if File_api_nbi_v1alpha_resources_antenna_pattern_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomPhiThetaAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomAzElAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomAntennaPatternPerAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_GaussianAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_HelicalAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_IsotropicAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_ParabolicAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_SquareHornAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_GaussianOpticalAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_PhasedArrayAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_NearAndFarFieldAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_TransmitterAndReceiverAntennaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_PhasedArrayAntennaPattern_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AntennaPattern_CustomPhiThetaPattern)(nil),
		(*AntennaPattern_GaussianPattern)(nil),
		(*AntennaPattern_HelicalPattern)(nil),
		(*AntennaPattern_IsotropicPattern)(nil),
		(*AntennaPattern_ParabolicPattern)(nil),
		(*AntennaPattern_SquareHornPattern)(nil),
		(*AntennaPattern_GaussianOpticalPattern)(nil),
		(*AntennaPattern_PhasedArrayPattern)(nil),
		(*AntennaPattern_NearAndFarFieldPattern)(nil),
		(*AntennaPattern_TransmitterAndReceiverPattern)(nil),
		(*AntennaPattern_CustomAntennaPatternPerAngle_)(nil),
		(*AntennaPattern_CustomAzElPattern)(nil),
	}
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_nbi_v1alpha_resources_antenna_pattern_proto_goTypes,
		DependencyIndexes: file_api_nbi_v1alpha_resources_antenna_pattern_proto_depIdxs,
		MessageInfos:      file_api_nbi_v1alpha_resources_antenna_pattern_proto_msgTypes,
	}.Build()
	File_api_nbi_v1alpha_resources_antenna_pattern_proto = out.File
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_rawDesc = nil
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_goTypes = nil
	file_api_nbi_v1alpha_resources_antenna_pattern_proto_depIdxs = nil
}

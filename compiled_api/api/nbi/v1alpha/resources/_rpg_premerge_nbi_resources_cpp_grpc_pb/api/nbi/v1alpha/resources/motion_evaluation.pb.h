// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/motion_evaluation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/common/coordinates.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
class ComputedMotion;
struct ComputedMotionDefaultTypeInternal;
extern ComputedMotionDefaultTypeInternal _ComputedMotion_default_instance_;
class ComputedMotion_ReferenceMotion;
struct ComputedMotion_ReferenceMotionDefaultTypeInternal;
extern ComputedMotion_ReferenceMotionDefaultTypeInternal _ComputedMotion_ReferenceMotion_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {

// ===================================================================


// -------------------------------------------------------------------

class ComputedMotion_ReferenceMotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion) */ {
 public:
  inline ComputedMotion_ReferenceMotion() : ComputedMotion_ReferenceMotion(nullptr) {}
  ~ComputedMotion_ReferenceMotion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComputedMotion_ReferenceMotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputedMotion_ReferenceMotion(const ComputedMotion_ReferenceMotion& from);
  ComputedMotion_ReferenceMotion(ComputedMotion_ReferenceMotion&& from) noexcept
    : ComputedMotion_ReferenceMotion() {
    *this = ::std::move(from);
  }

  inline ComputedMotion_ReferenceMotion& operator=(const ComputedMotion_ReferenceMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputedMotion_ReferenceMotion& operator=(ComputedMotion_ReferenceMotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputedMotion_ReferenceMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputedMotion_ReferenceMotion* internal_default_instance() {
    return reinterpret_cast<const ComputedMotion_ReferenceMotion*>(
               &_ComputedMotion_ReferenceMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComputedMotion_ReferenceMotion& a, ComputedMotion_ReferenceMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputedMotion_ReferenceMotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputedMotion_ReferenceMotion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComputedMotion_ReferenceMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComputedMotion_ReferenceMotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputedMotion_ReferenceMotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComputedMotion_ReferenceMotion& from) {
    ComputedMotion_ReferenceMotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputedMotion_ReferenceMotion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion";
  }
  protected:
  explicit ComputedMotion_ReferenceMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionRefIdFieldNumber = 1,
    kCommitTimestampFieldNumber = 2,
  };
  // optional string motion_ref_id = 1 [json_name = "motionRefId"];
  bool has_motion_ref_id() const;
  void clear_motion_ref_id() ;
  const std::string& motion_ref_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_motion_ref_id(Arg_&& arg, Args_... args);
  std::string* mutable_motion_ref_id();
  PROTOBUF_NODISCARD std::string* release_motion_ref_id();
  void set_allocated_motion_ref_id(std::string* ptr);

  private:
  const std::string& _internal_motion_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motion_ref_id(
      const std::string& value);
  std::string* _internal_mutable_motion_ref_id();

  public:
  // optional int64 commit_timestamp = 2 [json_name = "commitTimestamp"];
  bool has_commit_timestamp() const;
  void clear_commit_timestamp() ;
  ::int64_t commit_timestamp() const;
  void set_commit_timestamp(::int64_t value);

  private:
  ::int64_t _internal_commit_timestamp() const;
  void _internal_set_commit_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motion_ref_id_;
    ::int64_t commit_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto;
};// -------------------------------------------------------------------

class ComputedMotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion) */ {
 public:
  inline ComputedMotion() : ComputedMotion(nullptr) {}
  ~ComputedMotion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComputedMotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputedMotion(const ComputedMotion& from);
  ComputedMotion(ComputedMotion&& from) noexcept
    : ComputedMotion() {
    *this = ::std::move(from);
  }

  inline ComputedMotion& operator=(const ComputedMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputedMotion& operator=(ComputedMotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputedMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputedMotion* internal_default_instance() {
    return reinterpret_cast<const ComputedMotion*>(
               &_ComputedMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComputedMotion& a, ComputedMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputedMotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputedMotion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComputedMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComputedMotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputedMotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComputedMotion& from) {
    ComputedMotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputedMotion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion";
  }
  protected:
  explicit ComputedMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComputedMotion_ReferenceMotion ReferenceMotion;

  // accessors -------------------------------------------------------

  enum : int {
    kMotionsFieldNumber = 2,
    kReferenceFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.common.Motion motions = 2 [json_name = "motions"];
  int motions_size() const;
  private:
  int _internal_motions_size() const;

  public:
  void clear_motions() ;
  ::aalyria::spacetime::api::common::Motion* mutable_motions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::Motion >*
      mutable_motions();
  private:
  const ::aalyria::spacetime::api::common::Motion& _internal_motions(int index) const;
  ::aalyria::spacetime::api::common::Motion* _internal_add_motions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::Motion>& _internal_motions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::Motion>* _internal_mutable_motions();
  public:
  const ::aalyria::spacetime::api::common::Motion& motions(int index) const;
  ::aalyria::spacetime::api::common::Motion* add_motions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::Motion >&
      motions() const;
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion reference = 1 [json_name = "reference"];
  bool has_reference() const;
  void clear_reference() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion& reference() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* release_reference();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* mutable_reference();
  void set_allocated_reference(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* reference);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion& _internal_reference() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* reference);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* unsafe_arena_release_reference();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::Motion > motions_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ComputedMotion_ReferenceMotion

// optional string motion_ref_id = 1 [json_name = "motionRefId"];
inline bool ComputedMotion_ReferenceMotion::has_motion_ref_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ComputedMotion_ReferenceMotion::clear_motion_ref_id() {
  _impl_.motion_ref_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComputedMotion_ReferenceMotion::motion_ref_id() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id)
  return _internal_motion_ref_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComputedMotion_ReferenceMotion::set_motion_ref_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.motion_ref_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id)
}
inline std::string* ComputedMotion_ReferenceMotion::mutable_motion_ref_id() {
  std::string* _s = _internal_mutable_motion_ref_id();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id)
  return _s;
}
inline const std::string& ComputedMotion_ReferenceMotion::_internal_motion_ref_id() const {
  return _impl_.motion_ref_id_.Get();
}
inline void ComputedMotion_ReferenceMotion::_internal_set_motion_ref_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.motion_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ComputedMotion_ReferenceMotion::_internal_mutable_motion_ref_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.motion_ref_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ComputedMotion_ReferenceMotion::release_motion_ref_id() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.motion_ref_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ComputedMotion_ReferenceMotion::set_allocated_motion_ref_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.motion_ref_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.motion_ref_id_.IsDefault()) {
          _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id)
}

// optional int64 commit_timestamp = 2 [json_name = "commitTimestamp"];
inline bool ComputedMotion_ReferenceMotion::has_commit_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ComputedMotion_ReferenceMotion::clear_commit_timestamp() {
  _impl_.commit_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t ComputedMotion_ReferenceMotion::commit_timestamp() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.commit_timestamp)
  return _internal_commit_timestamp();
}
inline void ComputedMotion_ReferenceMotion::set_commit_timestamp(::int64_t value) {
  _internal_set_commit_timestamp(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.commit_timestamp)
}
inline ::int64_t ComputedMotion_ReferenceMotion::_internal_commit_timestamp() const {
  return _impl_.commit_timestamp_;
}
inline void ComputedMotion_ReferenceMotion::_internal_set_commit_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.commit_timestamp_ = value;
}

// -------------------------------------------------------------------

// ComputedMotion

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion reference = 1 [json_name = "reference"];
inline bool ComputedMotion::has_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_ != nullptr);
  return value;
}
inline void ComputedMotion::clear_reference() {
  if (_impl_.reference_ != nullptr) _impl_.reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion& ComputedMotion::_internal_reference() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* p = _impl_.reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_ComputedMotion_ReferenceMotion_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion& ComputedMotion::reference() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.reference)
  return _internal_reference();
}
inline void ComputedMotion::unsafe_arena_set_allocated_reference(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_);
  }
  _impl_.reference_ = reference;
  if (reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.reference)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* ComputedMotion::release_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* temp = _impl_.reference_;
  _impl_.reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* ComputedMotion::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* temp = _impl_.reference_;
  _impl_.reference_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* ComputedMotion::_internal_mutable_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion>(GetArenaForAllocation());
    _impl_.reference_ = p;
  }
  return _impl_.reference_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* ComputedMotion::mutable_reference() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* _msg = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.reference)
  return _msg;
}
inline void ComputedMotion::set_allocated_reference(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reference_;
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.reference)
}

// repeated .aalyria.spacetime.api.common.Motion motions = 2 [json_name = "motions"];
inline int ComputedMotion::_internal_motions_size() const {
  return _impl_.motions_.size();
}
inline int ComputedMotion::motions_size() const {
  return _internal_motions_size();
}
inline ::aalyria::spacetime::api::common::Motion* ComputedMotion::mutable_motions(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.motions)
  return _internal_mutable_motions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::Motion >*
ComputedMotion::mutable_motions() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.motions)
  return _internal_mutable_motions();
}
inline const ::aalyria::spacetime::api::common::Motion& ComputedMotion::_internal_motions(int index) const {
  return _internal_motions().Get(index);
}
inline const ::aalyria::spacetime::api::common::Motion& ComputedMotion::motions(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.motions)
  return _internal_motions(index);
}
inline ::aalyria::spacetime::api::common::Motion* ComputedMotion::_internal_add_motions() {
  return _internal_mutable_motions()->Add();
}
inline ::aalyria::spacetime::api::common::Motion* ComputedMotion::add_motions() {
  ::aalyria::spacetime::api::common::Motion* _add = _internal_add_motions();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.motions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::common::Motion >&
ComputedMotion::motions() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.motions)
  return _internal_motions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::Motion>&
ComputedMotion::_internal_motions() const {
  return _impl_.motions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::common::Motion>*
ComputedMotion::_internal_mutable_motions() {
  return &_impl_.motions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_2epb_2eh

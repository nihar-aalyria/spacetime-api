// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/antenna_pattern.proto

#include "api/nbi/v1alpha/resources/antenna_pattern.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gain_db_)*/ 0

  , /*decltype(_impl_.phi_rad_)*/ 0

  , /*decltype(_impl_.theta_rad_)*/ 0
} {}
struct AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal _AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPattern::AntennaPattern_CustomPhiThetaAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gain_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomPhiThetaAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal _AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gain_db_)*/ 0

  , /*decltype(_impl_.az_deg_)*/ 0

  , /*decltype(_impl_.el_deg_)*/ 0
} {}
struct AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomAzElAntennaPattern_AzElGainValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal _AntennaPattern_CustomAzElAntennaPattern_AzElGainValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPattern::AntennaPattern_CustomAzElAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gain_values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomAzElAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal _AntennaPattern_CustomAzElAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_pattern_)*/nullptr
  , /*decltype(_impl_.phi_rad_)*/ 0

  , /*decltype(_impl_.theta_rad_)*/ 0
} {}
struct AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal _AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngle::AntennaPattern_CustomAntennaPatternPerAngle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scan_angle_and_custom_patterns_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal() {}
  union {
    AntennaPattern_CustomAntennaPatternPerAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal _AntennaPattern_CustomAntennaPatternPerAngle_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_GaussianAntennaPattern::AntennaPattern_GaussianAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diameter_m_)*/ 0

  , /*decltype(_impl_.efficiency_percent_)*/ 0

  , /*decltype(_impl_.backlobe_gain_db_)*/ 0
} {}
struct AntennaPattern_GaussianAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_GaussianAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_GaussianAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_GaussianAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_GaussianAntennaPatternDefaultTypeInternal _AntennaPattern_GaussianAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_HelicalAntennaPattern::AntennaPattern_HelicalAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diameter_m_)*/ 0

  , /*decltype(_impl_.efficiency_percent_)*/ 0

  , /*decltype(_impl_.backlobe_gain_db_)*/ 0

  , /*decltype(_impl_.number_of_turns_)*/ 0

  , /*decltype(_impl_.turn_spacing_m_)*/ 0
} {}
struct AntennaPattern_HelicalAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_HelicalAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_HelicalAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_HelicalAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_HelicalAntennaPatternDefaultTypeInternal _AntennaPattern_HelicalAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_IsotropicAntennaPattern::AntennaPattern_IsotropicAntennaPattern(
    ::_pbi::ConstantInitialized) {}
struct AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_IsotropicAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal _AntennaPattern_IsotropicAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_ParabolicAntennaPattern::AntennaPattern_ParabolicAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diameter_m_)*/ 0

  , /*decltype(_impl_.efficiency_percent_)*/ 0

  , /*decltype(_impl_.backlobe_gain_db_)*/ 0
} {}
struct AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_ParabolicAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal _AntennaPattern_ParabolicAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_SquareHornAntennaPattern::AntennaPattern_SquareHornAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diameter_m_)*/ 0

  , /*decltype(_impl_.efficiency_percent_)*/ 0

  , /*decltype(_impl_.backlobe_gain_db_)*/ 0
} {}
struct AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_SquareHornAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal _AntennaPattern_SquareHornAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_GaussianOpticalAntennaPattern::AntennaPattern_GaussianOpticalAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diameter_m_)*/ 0

  , /*decltype(_impl_.efficiency_percent_)*/ 0

  , /*decltype(_impl_.divergence_angle_rad_)*/ 0

  , /*decltype(_impl_.pointing_error_rad_)*/ 0
} {}
struct AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_GaussianOpticalAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal _AntennaPattern_GaussianOpticalAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_Element::AntennaPattern_PhasedArrayAntennaPattern_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0
} {}
struct AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal() {}
  union {
    AntennaPattern_PhasedArrayAntennaPattern_Element _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_Element_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.beam_variance_)*/ 0
} {}
struct AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal() {}
  union {
    AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cosine_exponent_)*/ 0

  , /*decltype(_impl_.element_area_m2_)*/ 0
} {}
struct AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal() {}
  union {
    AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern::AntennaPattern_PhasedArrayAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_.cosine_exponent_element_factor_)*/nullptr
  , /*decltype(_impl_.design_frequency_hz_)*/ 0

  , /*decltype(_impl_.backlobe_suppression_db_)*/ 0

  , /*decltype(_impl_.beamformer_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_PhasedArrayAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_NearAndFarFieldAntennaPattern::AntennaPattern_NearAndFarFieldAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.near_field_pattern_)*/nullptr
  , /*decltype(_impl_.far_field_pattern_)*/nullptr
  , /*decltype(_impl_.near_field_range_m_)*/ 0
} {}
struct AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_NearAndFarFieldAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal _AntennaPattern_NearAndFarFieldAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern_TransmitterAndReceiverAntennaPattern::AntennaPattern_TransmitterAndReceiverAntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transmitter_pattern_)*/nullptr
  , /*decltype(_impl_.receiver_pattern_)*/nullptr} {}
struct AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern_TransmitterAndReceiverAntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal _AntennaPattern_TransmitterAndReceiverAntennaPattern_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AntennaPattern::AntennaPattern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pattern_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AntennaPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AntennaPatternDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AntennaPatternDefaultTypeInternal() {}
  union {
    AntennaPattern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AntennaPatternDefaultTypeInternal _AntennaPattern_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[19];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_.gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_.phi_rad_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_.theta_rad_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern, _impl_.gain_value_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_.gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_.az_deg_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_.el_deg_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern, _impl_.gain_values_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_.phi_rad_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_.theta_rad_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_.custom_pattern_),
    1,
    2,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle, _impl_.scan_angle_and_custom_patterns_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern, _impl_.diameter_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern, _impl_.efficiency_percent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern, _impl_.backlobe_gain_db_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_.diameter_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_.efficiency_percent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_.backlobe_gain_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_.number_of_turns_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern, _impl_.turn_spacing_m_),
    0,
    1,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern, _impl_.diameter_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern, _impl_.efficiency_percent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern, _impl_.backlobe_gain_db_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern, _impl_.diameter_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern, _impl_.efficiency_percent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern, _impl_.backlobe_gain_db_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _impl_.diameter_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _impl_.efficiency_percent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _impl_.divergence_angle_rad_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern, _impl_.pointing_error_rad_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_.y_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer, _impl_.beam_variance_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_.cosine_exponent_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_.element_area_m2_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_.design_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_.backlobe_suppression_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_.elements_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_.cosine_exponent_element_factor_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_.beamformer_),
    1,
    2,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern, _impl_.near_field_pattern_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern, _impl_.far_field_pattern_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern, _impl_.near_field_range_m_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_.transmitter_pattern_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_.receiver_pattern_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern, _impl_.pattern_type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue)},
        { 14, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern)},
        { 23, 34, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue)},
        { 37, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern)},
        { 46, 57, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern)},
        { 60, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle)},
        { 69, 80, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern)},
        { 83, 96, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern)},
        { 101, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern)},
        { 109, 120, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern)},
        { 123, 134, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern)},
        { 137, 149, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern)},
        { 153, 163, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element)},
        { 165, 174, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer)},
        { 175, 185, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor)},
        { 187, 201, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern)},
        { 206, 217, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern)},
        { 220, 230, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern)},
        { 232, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAzElAntennaPattern_AzElGainValue_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAzElAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAntennaPatternPerAngle_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_GaussianAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_HelicalAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_IsotropicAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_ParabolicAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_SquareHornAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_GaussianOpticalAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_Element_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_NearAndFarFieldAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_TransmitterAndReceiverAntennaPattern_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/api/nbi/v1alpha/resources/antenna_patt"
    "ern.proto\022+aalyria.spacetime.api.nbi.v1a"
    "lpha.resources\"\211(\n\016AntennaPattern\022\223\001\n\030cu"
    "stom_phi_theta_pattern\030\001 \001(\0132X.aalyria.s"
    "pacetime.api.nbi.v1alpha.resources.Anten"
    "naPattern.CustomPhiThetaAntennaPatternH\000"
    "R\025customPhiThetaPattern\022\177\n\020gaussian_patt"
    "ern\030\002 \001(\0132R.aalyria.spacetime.api.nbi.v1"
    "alpha.resources.AntennaPattern.GaussianA"
    "ntennaPatternH\000R\017gaussianPattern\022|\n\017heli"
    "cal_pattern\030\003 \001(\0132Q.aalyria.spacetime.ap"
    "i.nbi.v1alpha.resources.AntennaPattern.H"
    "elicalAntennaPatternH\000R\016helicalPattern\022\202"
    "\001\n\021isotropic_pattern\030\004 \001(\0132S.aalyria.spa"
    "cetime.api.nbi.v1alpha.resources.Antenna"
    "Pattern.IsotropicAntennaPatternH\000R\020isotr"
    "opicPattern\022\202\001\n\021parabolic_pattern\030\005 \001(\0132"
    "S.aalyria.spacetime.api.nbi.v1alpha.reso"
    "urces.AntennaPattern.ParabolicAntennaPat"
    "ternH\000R\020parabolicPattern\022\206\001\n\023square_horn"
    "_pattern\030\006 \001(\0132T.aalyria.spacetime.api.n"
    "bi.v1alpha.resources.AntennaPattern.Squa"
    "reHornAntennaPatternH\000R\021squareHornPatter"
    "n\022\225\001\n\030gaussian_optical_pattern\030\007 \001(\0132Y.a"
    "alyria.spacetime.api.nbi.v1alpha.resourc"
    "es.AntennaPattern.GaussianOpticalAntenna"
    "PatternH\000R\026gaussianOpticalPattern\022\211\001\n\024ph"
    "ased_array_pattern\030\n \001(\0132U.aalyria.space"
    "time.api.nbi.v1alpha.resources.AntennaPa"
    "ttern.PhasedArrayAntennaPatternH\000R\022phase"
    "dArrayPattern\022\227\001\n\032near_and_far_field_pat"
    "tern\030\t \001(\0132Y.aalyria.spacetime.api.nbi.v"
    "1alpha.resources.AntennaPattern.NearAndF"
    "arFieldAntennaPatternH\000R\026nearAndFarField"
    "Pattern\022\253\001\n transmitter_and_receiver_pat"
    "tern\030\013 \001(\0132`.aalyria.spacetime.api.nbi.v"
    "1alpha.resources.AntennaPattern.Transmit"
    "terAndReceiverAntennaPatternH\000R\035transmit"
    "terAndReceiverPattern\022\242\001\n custom_antenna"
    "_pattern_per_angle\030\014 \001(\0132X.aalyria.space"
    "time.api.nbi.v1alpha.resources.AntennaPa"
    "ttern.CustomAntennaPatternPerAngleH\000R\034cu"
    "stomAntennaPatternPerAngle\022\207\001\n\024custom_az"
    "_el_pattern\030\r \001(\0132T.aalyria.spacetime.ap"
    "i.nbi.v1alpha.resources.AntennaPattern.C"
    "ustomAzElAntennaPatternH\000R\021customAzElPat"
    "tern\032\220\002\n\034CustomPhiThetaAntennaPattern\022\212\001"
    "\n\ngain_value\030\001 \003(\0132k.aalyria.spacetime.a"
    "pi.nbi.v1alpha.resources.AntennaPattern."
    "CustomPhiThetaAntennaPattern.SphericalGa"
    "inValueR\tgainValue\032c\n\022SphericalGainValue"
    "\022\027\n\007gain_db\030\001 \001(\001R\006gainDb\022\027\n\007phi_rad\030\002 \001"
    "(\001R\006phiRad\022\033\n\ttheta_rad\030\003 \001(\001R\010thetaRad\032"
    "\370\001\n\030CustomAzElAntennaPattern\022\203\001\n\013gain_va"
    "lues\030\001 \003(\0132b.aalyria.spacetime.api.nbi.v"
    "1alpha.resources.AntennaPattern.CustomAz"
    "ElAntennaPattern.AzElGainValueR\ngainValu"
    "es\032V\n\rAzElGainValue\022\027\n\007gain_db\030\001 \001(\001R\006ga"
    "inDb\022\025\n\006az_deg\030\002 \001(\001R\005azDeg\022\025\n\006el_deg\030\003 "
    "\001(\001R\005elDeg\032\254\003\n\034CustomAntennaPatternPerAn"
    "gle\022\266\001\n\036scan_angle_and_custom_patterns\030\001"
    " \003(\0132r.aalyria.spacetime.api.nbi.v1alpha"
    ".resources.AntennaPattern.CustomAntennaP"
    "atternPerAngle.ScanAngleAndCustomPattern"
    "R\032scanAngleAndCustomPatterns\032\322\001\n\031ScanAng"
    "leAndCustomPattern\022\027\n\007phi_rad\030\001 \001(\002R\006phi"
    "Rad\022\033\n\ttheta_rad\030\002 \001(\002R\010thetaRad\022\177\n\016cust"
    "om_pattern\030\003 \001(\0132X.aalyria.spacetime.api"
    ".nbi.v1alpha.resources.AntennaPattern.Cu"
    "stomPhiThetaAntennaPatternR\rcustomPatter"
    "n\032\220\001\n\026GaussianAntennaPattern\022\035\n\ndiameter"
    "_m\030\001 \001(\001R\tdiameterM\022-\n\022efficiency_percen"
    "t\030\002 \001(\001R\021efficiencyPercent\022(\n\020backlobe_g"
    "ain_db\030\003 \001(\001R\016backlobeGainDb\032\335\001\n\025Helical"
    "AntennaPattern\022\035\n\ndiameter_m\030\001 \001(\001R\tdiam"
    "eterM\022-\n\022efficiency_percent\030\002 \001(\001R\021effic"
    "iencyPercent\022(\n\020backlobe_gain_db\030\003 \001(\001R\016"
    "backlobeGainDb\022&\n\017number_of_turns\030\004 \001(\001R"
    "\rnumberOfTurns\022$\n\016turn_spacing_m\030\005 \001(\001R\014"
    "turnSpacingM\032\031\n\027IsotropicAntennaPattern\032"
    "\221\001\n\027ParabolicAntennaPattern\022\035\n\ndiameter_"
    "m\030\001 \001(\001R\tdiameterM\022-\n\022efficiency_percent"
    "\030\002 \001(\001R\021efficiencyPercent\022(\n\020backlobe_ga"
    "in_db\030\003 \001(\001R\016backlobeGainDb\032\222\001\n\030SquareHo"
    "rnAntennaPattern\022\035\n\ndiameter_m\030\001 \001(\001R\tdi"
    "ameterM\022-\n\022efficiency_percent\030\002 \001(\001R\021eff"
    "iciencyPercent\022(\n\020backlobe_gain_db\030\003 \001(\001"
    "R\016backlobeGainDb\032\315\001\n\035GaussianOpticalAnte"
    "nnaPattern\022\035\n\ndiameter_m\030\001 \001(\001R\tdiameter"
    "M\022-\n\022efficiency_percent\030\002 \001(\001R\021efficienc"
    "yPercent\0220\n\024divergence_angle_rad\030\003 \001(\001R\022"
    "divergenceAngleRad\022,\n\022pointing_error_rad"
    "\030\004 \001(\001R\020pointingErrorRad\032\255\007\n\031PhasedArray"
    "AntennaPattern\022.\n\023design_frequency_hz\030\001 "
    "\001(\001R\021designFrequencyHz\0226\n\027backlobe_suppr"
    "ession_db\030\002 \001(\001R\025backlobeSuppressionDb\022y"
    "\n\010elements\030\003 \003(\0132].aalyria.spacetime.api"
    ".nbi.v1alpha.resources.AntennaPattern.Ph"
    "asedArrayAntennaPattern.ElementR\010element"
    "s\022\366\001\n3minimum_variance_distortionless_re"
    "sponse_beamformer\030\004 \001(\0132\205\001.aalyria.space"
    "time.api.nbi.v1alpha.resources.AntennaPa"
    "ttern.PhasedArrayAntennaPattern.MinimumV"
    "arianceDistortionlessResponseBeamformerH"
    "\000R/minimumVarianceDistortionlessResponse"
    "Beamformer\022\266\001\n\036cosine_exponent_element_f"
    "actor\030\005 \001(\0132q.aalyria.spacetime.api.nbi."
    "v1alpha.resources.AntennaPattern.PhasedA"
    "rrayAntennaPattern.CosineExponentElement"
    "FactorR\033cosineExponentElementFactor\032%\n\007E"
    "lement\022\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\032V\n/Mi"
    "nimumVarianceDistortionlessResponseBeamf"
    "ormer\022#\n\rbeam_variance\030\001 \001(\001R\014beamVarian"
    "ce\032n\n\033CosineExponentElementFactor\022\'\n\017cos"
    "ine_exponent\030\001 \001(\001R\016cosineExponent\022&\n\017el"
    "ement_area_m2\030\002 \001(\001R\relementAreaM2B\014\n\nbe"
    "amformer\032\240\002\n\035NearAndFarFieldAntennaPatte"
    "rn\022i\n\022near_field_pattern\030\001 \001(\0132;.aalyria"
    ".spacetime.api.nbi.v1alpha.resources.Ant"
    "ennaPatternR\020nearFieldPattern\022g\n\021far_fie"
    "ld_pattern\030\002 \001(\0132;.aalyria.spacetime.api"
    ".nbi.v1alpha.resources.AntennaPatternR\017f"
    "arFieldPattern\022+\n\022near_field_range_m\030\003 \001"
    "(\001R\017nearFieldRangeM\032\374\001\n$TransmitterAndRe"
    "ceiverAntennaPattern\022l\n\023transmitter_patt"
    "ern\030\001 \001(\0132;.aalyria.spacetime.api.nbi.v1"
    "alpha.resources.AntennaPatternR\022transmit"
    "terPattern\022f\n\020receiver_pattern\030\002 \001(\0132;.a"
    "alyria.spacetime.api.nbi.v1alpha.resourc"
    "es.AntennaPatternR\017receiverPatternB\016\n\014pa"
    "ttern_typeJ\004\010\010\020\tJ\010\010\016\020\200\200\200\200\002Bb\n/com.aalyri"
    "a.spacetime.api.nbi.v1alpha.resourcesZ/a"
    "alyria.com/spacetime/api/nbi/v1alpha/res"
    "ources"
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto = {
    false,
    false,
    5326,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
    "api/nbi/v1alpha/resources/antenna_pattern.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
    nullptr,
    0,
    19,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
// ===================================================================

class AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_._has_bits_);
  static void set_has_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phi_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_theta_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
}
AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
}

inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gain_db_) { 0 }

    , decltype(_impl_.phi_rad_) { 0 }

    , decltype(_impl_.theta_rad_) { 0 }

  };
}

AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::~AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gain_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.theta_rad_) -
        reinterpret_cast<char*>(&_impl_.gain_db_)) + sizeof(_impl_.theta_rad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gain_db = 1 [json_name = "gainDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_gain_db(&has_bits);
          _impl_.gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double phi_rad = 2 [json_name = "phiRad"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_phi_rad(&has_bits);
          _impl_.phi_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double theta_rad = 3 [json_name = "thetaRad"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_theta_rad(&has_bits);
          _impl_.theta_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double gain_db = 1 [json_name = "gainDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_gain_db(), target);
  }

  // optional double phi_rad = 2 [json_name = "phiRad"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_phi_rad(), target);
  }

  // optional double theta_rad = 3 [json_name = "thetaRad"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_theta_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  return target;
}

::size_t AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double gain_db = 1 [json_name = "gainDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double phi_rad = 2 [json_name = "phiRad"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double theta_rad = 3 [json_name = "thetaRad"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gain_db_ = from._impl_.gain_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phi_rad_ = from._impl_.phi_rad_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.theta_rad_ = from._impl_.theta_rad_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::CopyFrom(const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::InternalSwap(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_.theta_rad_)
      + sizeof(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_impl_.theta_rad_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue, _impl_.gain_db_)>(
          reinterpret_cast<char*>(&_impl_.gain_db_),
          reinterpret_cast<char*>(&other->_impl_.gain_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[0]);
}
// ===================================================================

class AntennaPattern_CustomPhiThetaAntennaPattern::_Internal {
 public:
};

AntennaPattern_CustomPhiThetaAntennaPattern::AntennaPattern_CustomPhiThetaAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
}
AntennaPattern_CustomPhiThetaAntennaPattern::AntennaPattern_CustomPhiThetaAntennaPattern(const AntennaPattern_CustomPhiThetaAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_CustomPhiThetaAntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_value_){from._impl_.gain_value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
}

inline void AntennaPattern_CustomPhiThetaAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AntennaPattern_CustomPhiThetaAntennaPattern::~AntennaPattern_CustomPhiThetaAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomPhiThetaAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_gain_value()->~RepeatedPtrField();
}

void AntennaPattern_CustomPhiThetaAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomPhiThetaAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_gain_value()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomPhiThetaAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue gain_value = 1 [json_name = "gainValue"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gain_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomPhiThetaAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue gain_value = 1 [json_name = "gainValue"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gain_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_gain_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  return target;
}

::size_t AntennaPattern_CustomPhiThetaAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue gain_value = 1 [json_name = "gainValue"];
  total_size += 1UL * this->_internal_gain_value_size();
  for (const auto& msg : this->_internal_gain_value()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomPhiThetaAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomPhiThetaAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomPhiThetaAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomPhiThetaAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomPhiThetaAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomPhiThetaAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gain_value()->MergeFrom(from._internal_gain_value());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomPhiThetaAntennaPattern::CopyFrom(const AntennaPattern_CustomPhiThetaAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomPhiThetaAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomPhiThetaAntennaPattern::InternalSwap(AntennaPattern_CustomPhiThetaAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_gain_value()->InternalSwap(other->_internal_mutable_gain_value());
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomPhiThetaAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[1]);
}
// ===================================================================

class AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_._has_bits_);
  static void set_has_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_az_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_el_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
}
AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
}

inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gain_db_) { 0 }

    , decltype(_impl_.az_deg_) { 0 }

    , decltype(_impl_.el_deg_) { 0 }

  };
}

AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::~AntennaPattern_CustomAzElAntennaPattern_AzElGainValue() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gain_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.el_deg_) -
        reinterpret_cast<char*>(&_impl_.gain_db_)) + sizeof(_impl_.el_deg_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gain_db = 1 [json_name = "gainDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_gain_db(&has_bits);
          _impl_.gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double az_deg = 2 [json_name = "azDeg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_az_deg(&has_bits);
          _impl_.az_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double el_deg = 3 [json_name = "elDeg"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_el_deg(&has_bits);
          _impl_.el_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double gain_db = 1 [json_name = "gainDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_gain_db(), target);
  }

  // optional double az_deg = 2 [json_name = "azDeg"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_az_deg(), target);
  }

  // optional double el_deg = 3 [json_name = "elDeg"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_el_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  return target;
}

::size_t AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double gain_db = 1 [json_name = "gainDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double az_deg = 2 [json_name = "azDeg"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double el_deg = 3 [json_name = "elDeg"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomAzElAntennaPattern_AzElGainValue*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gain_db_ = from._impl_.gain_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.az_deg_ = from._impl_.az_deg_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.el_deg_ = from._impl_.el_deg_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::CopyFrom(const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::InternalSwap(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_.el_deg_)
      + sizeof(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_impl_.el_deg_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue, _impl_.gain_db_)>(
          reinterpret_cast<char*>(&_impl_.gain_db_),
          reinterpret_cast<char*>(&other->_impl_.gain_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[2]);
}
// ===================================================================

class AntennaPattern_CustomAzElAntennaPattern::_Internal {
 public:
};

AntennaPattern_CustomAzElAntennaPattern::AntennaPattern_CustomAzElAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
}
AntennaPattern_CustomAzElAntennaPattern::AntennaPattern_CustomAzElAntennaPattern(const AntennaPattern_CustomAzElAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_CustomAzElAntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_values_){from._impl_.gain_values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
}

inline void AntennaPattern_CustomAzElAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AntennaPattern_CustomAzElAntennaPattern::~AntennaPattern_CustomAzElAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomAzElAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_gain_values()->~RepeatedPtrField();
}

void AntennaPattern_CustomAzElAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomAzElAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_gain_values()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomAzElAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue gain_values = 1 [json_name = "gainValues"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gain_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomAzElAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue gain_values = 1 [json_name = "gainValues"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gain_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_gain_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  return target;
}

::size_t AntennaPattern_CustomAzElAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue gain_values = 1 [json_name = "gainValues"];
  total_size += 1UL * this->_internal_gain_values_size();
  for (const auto& msg : this->_internal_gain_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomAzElAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomAzElAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomAzElAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomAzElAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomAzElAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomAzElAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gain_values()->MergeFrom(from._internal_gain_values());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomAzElAntennaPattern::CopyFrom(const AntennaPattern_CustomAzElAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomAzElAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomAzElAntennaPattern::InternalSwap(AntennaPattern_CustomAzElAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_gain_values()->InternalSwap(other->_internal_mutable_gain_values());
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomAzElAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[3]);
}
// ===================================================================

class AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_._has_bits_);
  static void set_has_phi_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_theta_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& custom_pattern(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* msg);
  static void set_has_custom_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern&
AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_Internal::custom_pattern(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* msg) {
  return *msg->_impl_.custom_pattern_;
}
AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
}
AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_pattern_){nullptr}
    , decltype(_impl_.phi_rad_) {}

    , decltype(_impl_.theta_rad_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.custom_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern(*from._impl_.custom_pattern_);
  }
  ::memcpy(&_impl_.phi_rad_, &from._impl_.phi_rad_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.theta_rad_) -
    reinterpret_cast<char*>(&_impl_.phi_rad_)) + sizeof(_impl_.theta_rad_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
}

inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_pattern_){nullptr}
    , decltype(_impl_.phi_rad_) { 0 }

    , decltype(_impl_.theta_rad_) { 0 }

  };
}

AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::~AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.custom_pattern_;
}

void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.custom_pattern_ != nullptr);
    _impl_.custom_pattern_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.phi_rad_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.theta_rad_) -
        reinterpret_cast<char*>(&_impl_.phi_rad_)) + sizeof(_impl_.theta_rad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float phi_rad = 1 [json_name = "phiRad"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _Internal::set_has_phi_rad(&has_bits);
          _impl_.phi_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float theta_rad = 2 [json_name = "thetaRad"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _Internal::set_has_theta_rad(&has_bits);
          _impl_.theta_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_pattern = 3 [json_name = "customPattern"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float phi_rad = 1 [json_name = "phiRad"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_phi_rad(), target);
  }

  // optional float theta_rad = 2 [json_name = "thetaRad"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_theta_rad(), target);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_pattern = 3 [json_name = "customPattern"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::custom_pattern(this),
        _Internal::custom_pattern(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  return target;
}

::size_t AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_pattern = 3 [json_name = "customPattern"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_pattern_);
    }

    // optional float phi_rad = 1 [json_name = "phiRad"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional float theta_rad = 2 [json_name = "thetaRad"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_custom_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern::MergeFrom(
          from._internal_custom_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phi_rad_ = from._impl_.phi_rad_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.theta_rad_ = from._impl_.theta_rad_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::CopyFrom(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::InternalSwap(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_.theta_rad_)
      + sizeof(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_impl_.theta_rad_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern, _impl_.custom_pattern_)>(
          reinterpret_cast<char*>(&_impl_.custom_pattern_),
          reinterpret_cast<char*>(&other->_impl_.custom_pattern_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[4]);
}
// ===================================================================

class AntennaPattern_CustomAntennaPatternPerAngle::_Internal {
 public:
};

AntennaPattern_CustomAntennaPatternPerAngle::AntennaPattern_CustomAntennaPatternPerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
}
AntennaPattern_CustomAntennaPatternPerAngle::AntennaPattern_CustomAntennaPatternPerAngle(const AntennaPattern_CustomAntennaPatternPerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_CustomAntennaPatternPerAngle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scan_angle_and_custom_patterns_){from._impl_.scan_angle_and_custom_patterns_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
}

inline void AntennaPattern_CustomAntennaPatternPerAngle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scan_angle_and_custom_patterns_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AntennaPattern_CustomAntennaPatternPerAngle::~AntennaPattern_CustomAntennaPatternPerAngle() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_CustomAntennaPatternPerAngle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_scan_angle_and_custom_patterns()->~RepeatedPtrField();
}

void AntennaPattern_CustomAntennaPatternPerAngle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_CustomAntennaPatternPerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_scan_angle_and_custom_patterns()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_CustomAntennaPatternPerAngle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern scan_angle_and_custom_patterns = 1 [json_name = "scanAngleAndCustomPatterns"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scan_angle_and_custom_patterns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_CustomAntennaPatternPerAngle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern scan_angle_and_custom_patterns = 1 [json_name = "scanAngleAndCustomPatterns"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scan_angle_and_custom_patterns_size()); i < n; i++) {
    const auto& repfield = this->_internal_scan_angle_and_custom_patterns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  return target;
}

::size_t AntennaPattern_CustomAntennaPatternPerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern scan_angle_and_custom_patterns = 1 [json_name = "scanAngleAndCustomPatterns"];
  total_size += 1UL * this->_internal_scan_angle_and_custom_patterns_size();
  for (const auto& msg : this->_internal_scan_angle_and_custom_patterns()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_CustomAntennaPatternPerAngle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_CustomAntennaPatternPerAngle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_CustomAntennaPatternPerAngle::GetClassData() const { return &_class_data_; }


void AntennaPattern_CustomAntennaPatternPerAngle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_CustomAntennaPatternPerAngle*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_CustomAntennaPatternPerAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scan_angle_and_custom_patterns()->MergeFrom(from._internal_scan_angle_and_custom_patterns());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_CustomAntennaPatternPerAngle::CopyFrom(const AntennaPattern_CustomAntennaPatternPerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_CustomAntennaPatternPerAngle::IsInitialized() const {
  return true;
}

void AntennaPattern_CustomAntennaPatternPerAngle::InternalSwap(AntennaPattern_CustomAntennaPatternPerAngle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_scan_angle_and_custom_patterns()->InternalSwap(other->_internal_mutable_scan_angle_and_custom_patterns());
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_CustomAntennaPatternPerAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[5]);
}
// ===================================================================

class AntennaPattern_GaussianAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_GaussianAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianAntennaPattern, _impl_._has_bits_);
  static void set_has_diameter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efficiency_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backlobe_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AntennaPattern_GaussianAntennaPattern::AntennaPattern_GaussianAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
}
AntennaPattern_GaussianAntennaPattern::AntennaPattern_GaussianAntennaPattern(const AntennaPattern_GaussianAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
}

inline void AntennaPattern_GaussianAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diameter_m_) { 0 }

    , decltype(_impl_.efficiency_percent_) { 0 }

    , decltype(_impl_.backlobe_gain_db_) { 0 }

  };
}

AntennaPattern_GaussianAntennaPattern::~AntennaPattern_GaussianAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_GaussianAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_GaussianAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_GaussianAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.diameter_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.backlobe_gain_db_) -
        reinterpret_cast<char*>(&_impl_.diameter_m_)) + sizeof(_impl_.backlobe_gain_db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_GaussianAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double diameter_m = 1 [json_name = "diameterM"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_diameter_m(&has_bits);
          _impl_.diameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_efficiency_percent(&has_bits);
          _impl_.efficiency_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_backlobe_gain_db(&has_bits);
          _impl_.backlobe_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_GaussianAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double diameter_m = 1 [json_name = "diameterM"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_diameter_m(), target);
  }

  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_efficiency_percent(), target);
  }

  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_backlobe_gain_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  return target;
}

::size_t AntennaPattern_GaussianAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double diameter_m = 1 [json_name = "diameterM"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_GaussianAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_GaussianAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_GaussianAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_GaussianAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_GaussianAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_GaussianAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.diameter_m_ = from._impl_.diameter_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.efficiency_percent_ = from._impl_.efficiency_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backlobe_gain_db_ = from._impl_.backlobe_gain_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_GaussianAntennaPattern::CopyFrom(const AntennaPattern_GaussianAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_GaussianAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_GaussianAntennaPattern::InternalSwap(AntennaPattern_GaussianAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianAntennaPattern, _impl_.backlobe_gain_db_)
      + sizeof(AntennaPattern_GaussianAntennaPattern::_impl_.backlobe_gain_db_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianAntennaPattern, _impl_.diameter_m_)>(
          reinterpret_cast<char*>(&_impl_.diameter_m_),
          reinterpret_cast<char*>(&other->_impl_.diameter_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_GaussianAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[6]);
}
// ===================================================================

class AntennaPattern_HelicalAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_HelicalAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_HelicalAntennaPattern, _impl_._has_bits_);
  static void set_has_diameter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efficiency_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backlobe_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number_of_turns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turn_spacing_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AntennaPattern_HelicalAntennaPattern::AntennaPattern_HelicalAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
}
AntennaPattern_HelicalAntennaPattern::AntennaPattern_HelicalAntennaPattern(const AntennaPattern_HelicalAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
}

inline void AntennaPattern_HelicalAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diameter_m_) { 0 }

    , decltype(_impl_.efficiency_percent_) { 0 }

    , decltype(_impl_.backlobe_gain_db_) { 0 }

    , decltype(_impl_.number_of_turns_) { 0 }

    , decltype(_impl_.turn_spacing_m_) { 0 }

  };
}

AntennaPattern_HelicalAntennaPattern::~AntennaPattern_HelicalAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_HelicalAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_HelicalAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_HelicalAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.diameter_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.turn_spacing_m_) -
        reinterpret_cast<char*>(&_impl_.diameter_m_)) + sizeof(_impl_.turn_spacing_m_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_HelicalAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double diameter_m = 1 [json_name = "diameterM"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_diameter_m(&has_bits);
          _impl_.diameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_efficiency_percent(&has_bits);
          _impl_.efficiency_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_backlobe_gain_db(&has_bits);
          _impl_.backlobe_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double number_of_turns = 4 [json_name = "numberOfTurns"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_number_of_turns(&has_bits);
          _impl_.number_of_turns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double turn_spacing_m = 5 [json_name = "turnSpacingM"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_turn_spacing_m(&has_bits);
          _impl_.turn_spacing_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_HelicalAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double diameter_m = 1 [json_name = "diameterM"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_diameter_m(), target);
  }

  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_efficiency_percent(), target);
  }

  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_backlobe_gain_db(), target);
  }

  // optional double number_of_turns = 4 [json_name = "numberOfTurns"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_number_of_turns(), target);
  }

  // optional double turn_spacing_m = 5 [json_name = "turnSpacingM"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_turn_spacing_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  return target;
}

::size_t AntennaPattern_HelicalAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double diameter_m = 1 [json_name = "diameterM"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double number_of_turns = 4 [json_name = "numberOfTurns"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double turn_spacing_m = 5 [json_name = "turnSpacingM"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_HelicalAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_HelicalAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_HelicalAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_HelicalAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_HelicalAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_HelicalAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.diameter_m_ = from._impl_.diameter_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.efficiency_percent_ = from._impl_.efficiency_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backlobe_gain_db_ = from._impl_.backlobe_gain_db_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.number_of_turns_ = from._impl_.number_of_turns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.turn_spacing_m_ = from._impl_.turn_spacing_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_HelicalAntennaPattern::CopyFrom(const AntennaPattern_HelicalAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_HelicalAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_HelicalAntennaPattern::InternalSwap(AntennaPattern_HelicalAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_HelicalAntennaPattern, _impl_.turn_spacing_m_)
      + sizeof(AntennaPattern_HelicalAntennaPattern::_impl_.turn_spacing_m_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_HelicalAntennaPattern, _impl_.diameter_m_)>(
          reinterpret_cast<char*>(&_impl_.diameter_m_),
          reinterpret_cast<char*>(&other->_impl_.diameter_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_HelicalAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[7]);
}
// ===================================================================

class AntennaPattern_IsotropicAntennaPattern::_Internal {
 public:
};

AntennaPattern_IsotropicAntennaPattern::AntennaPattern_IsotropicAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern)
}
AntennaPattern_IsotropicAntennaPattern::AntennaPattern_IsotropicAntennaPattern(const AntennaPattern_IsotropicAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AntennaPattern_IsotropicAntennaPattern* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_IsotropicAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_IsotropicAntennaPattern::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_IsotropicAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[8]);
}
// ===================================================================

class AntennaPattern_ParabolicAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_ParabolicAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_ParabolicAntennaPattern, _impl_._has_bits_);
  static void set_has_diameter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efficiency_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backlobe_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AntennaPattern_ParabolicAntennaPattern::AntennaPattern_ParabolicAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
}
AntennaPattern_ParabolicAntennaPattern::AntennaPattern_ParabolicAntennaPattern(const AntennaPattern_ParabolicAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
}

inline void AntennaPattern_ParabolicAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diameter_m_) { 0 }

    , decltype(_impl_.efficiency_percent_) { 0 }

    , decltype(_impl_.backlobe_gain_db_) { 0 }

  };
}

AntennaPattern_ParabolicAntennaPattern::~AntennaPattern_ParabolicAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_ParabolicAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_ParabolicAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_ParabolicAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.diameter_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.backlobe_gain_db_) -
        reinterpret_cast<char*>(&_impl_.diameter_m_)) + sizeof(_impl_.backlobe_gain_db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_ParabolicAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double diameter_m = 1 [json_name = "diameterM"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_diameter_m(&has_bits);
          _impl_.diameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_efficiency_percent(&has_bits);
          _impl_.efficiency_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_backlobe_gain_db(&has_bits);
          _impl_.backlobe_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_ParabolicAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double diameter_m = 1 [json_name = "diameterM"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_diameter_m(), target);
  }

  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_efficiency_percent(), target);
  }

  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_backlobe_gain_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  return target;
}

::size_t AntennaPattern_ParabolicAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double diameter_m = 1 [json_name = "diameterM"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_ParabolicAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_ParabolicAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_ParabolicAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_ParabolicAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_ParabolicAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_ParabolicAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.diameter_m_ = from._impl_.diameter_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.efficiency_percent_ = from._impl_.efficiency_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backlobe_gain_db_ = from._impl_.backlobe_gain_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_ParabolicAntennaPattern::CopyFrom(const AntennaPattern_ParabolicAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_ParabolicAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_ParabolicAntennaPattern::InternalSwap(AntennaPattern_ParabolicAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_ParabolicAntennaPattern, _impl_.backlobe_gain_db_)
      + sizeof(AntennaPattern_ParabolicAntennaPattern::_impl_.backlobe_gain_db_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_ParabolicAntennaPattern, _impl_.diameter_m_)>(
          reinterpret_cast<char*>(&_impl_.diameter_m_),
          reinterpret_cast<char*>(&other->_impl_.diameter_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_ParabolicAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[9]);
}
// ===================================================================

class AntennaPattern_SquareHornAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_SquareHornAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_SquareHornAntennaPattern, _impl_._has_bits_);
  static void set_has_diameter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efficiency_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backlobe_gain_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AntennaPattern_SquareHornAntennaPattern::AntennaPattern_SquareHornAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
}
AntennaPattern_SquareHornAntennaPattern::AntennaPattern_SquareHornAntennaPattern(const AntennaPattern_SquareHornAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
}

inline void AntennaPattern_SquareHornAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diameter_m_) { 0 }

    , decltype(_impl_.efficiency_percent_) { 0 }

    , decltype(_impl_.backlobe_gain_db_) { 0 }

  };
}

AntennaPattern_SquareHornAntennaPattern::~AntennaPattern_SquareHornAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_SquareHornAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_SquareHornAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_SquareHornAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.diameter_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.backlobe_gain_db_) -
        reinterpret_cast<char*>(&_impl_.diameter_m_)) + sizeof(_impl_.backlobe_gain_db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_SquareHornAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double diameter_m = 1 [json_name = "diameterM"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_diameter_m(&has_bits);
          _impl_.diameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_efficiency_percent(&has_bits);
          _impl_.efficiency_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_backlobe_gain_db(&has_bits);
          _impl_.backlobe_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_SquareHornAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double diameter_m = 1 [json_name = "diameterM"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_diameter_m(), target);
  }

  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_efficiency_percent(), target);
  }

  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_backlobe_gain_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  return target;
}

::size_t AntennaPattern_SquareHornAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double diameter_m = 1 [json_name = "diameterM"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_SquareHornAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_SquareHornAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_SquareHornAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_SquareHornAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_SquareHornAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_SquareHornAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.diameter_m_ = from._impl_.diameter_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.efficiency_percent_ = from._impl_.efficiency_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backlobe_gain_db_ = from._impl_.backlobe_gain_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_SquareHornAntennaPattern::CopyFrom(const AntennaPattern_SquareHornAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_SquareHornAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_SquareHornAntennaPattern::InternalSwap(AntennaPattern_SquareHornAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_SquareHornAntennaPattern, _impl_.backlobe_gain_db_)
      + sizeof(AntennaPattern_SquareHornAntennaPattern::_impl_.backlobe_gain_db_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_SquareHornAntennaPattern, _impl_.diameter_m_)>(
          reinterpret_cast<char*>(&_impl_.diameter_m_),
          reinterpret_cast<char*>(&other->_impl_.diameter_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_SquareHornAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[10]);
}
// ===================================================================

class AntennaPattern_GaussianOpticalAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_GaussianOpticalAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianOpticalAntennaPattern, _impl_._has_bits_);
  static void set_has_diameter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efficiency_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_divergence_angle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pointing_error_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AntennaPattern_GaussianOpticalAntennaPattern::AntennaPattern_GaussianOpticalAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
}
AntennaPattern_GaussianOpticalAntennaPattern::AntennaPattern_GaussianOpticalAntennaPattern(const AntennaPattern_GaussianOpticalAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
}

inline void AntennaPattern_GaussianOpticalAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diameter_m_) { 0 }

    , decltype(_impl_.efficiency_percent_) { 0 }

    , decltype(_impl_.divergence_angle_rad_) { 0 }

    , decltype(_impl_.pointing_error_rad_) { 0 }

  };
}

AntennaPattern_GaussianOpticalAntennaPattern::~AntennaPattern_GaussianOpticalAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_GaussianOpticalAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_GaussianOpticalAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_GaussianOpticalAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.diameter_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pointing_error_rad_) -
        reinterpret_cast<char*>(&_impl_.diameter_m_)) + sizeof(_impl_.pointing_error_rad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_GaussianOpticalAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double diameter_m = 1 [json_name = "diameterM"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_diameter_m(&has_bits);
          _impl_.diameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_efficiency_percent(&has_bits);
          _impl_.efficiency_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double divergence_angle_rad = 3 [json_name = "divergenceAngleRad"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_divergence_angle_rad(&has_bits);
          _impl_.divergence_angle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double pointing_error_rad = 4 [json_name = "pointingErrorRad"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_pointing_error_rad(&has_bits);
          _impl_.pointing_error_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_GaussianOpticalAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double diameter_m = 1 [json_name = "diameterM"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_diameter_m(), target);
  }

  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_efficiency_percent(), target);
  }

  // optional double divergence_angle_rad = 3 [json_name = "divergenceAngleRad"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_divergence_angle_rad(), target);
  }

  // optional double pointing_error_rad = 4 [json_name = "pointingErrorRad"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_pointing_error_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  return target;
}

::size_t AntennaPattern_GaussianOpticalAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double diameter_m = 1 [json_name = "diameterM"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double divergence_angle_rad = 3 [json_name = "divergenceAngleRad"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double pointing_error_rad = 4 [json_name = "pointingErrorRad"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_GaussianOpticalAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_GaussianOpticalAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_GaussianOpticalAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_GaussianOpticalAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_GaussianOpticalAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_GaussianOpticalAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.diameter_m_ = from._impl_.diameter_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.efficiency_percent_ = from._impl_.efficiency_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.divergence_angle_rad_ = from._impl_.divergence_angle_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pointing_error_rad_ = from._impl_.pointing_error_rad_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_GaussianOpticalAntennaPattern::CopyFrom(const AntennaPattern_GaussianOpticalAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_GaussianOpticalAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_GaussianOpticalAntennaPattern::InternalSwap(AntennaPattern_GaussianOpticalAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianOpticalAntennaPattern, _impl_.pointing_error_rad_)
      + sizeof(AntennaPattern_GaussianOpticalAntennaPattern::_impl_.pointing_error_rad_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_GaussianOpticalAntennaPattern, _impl_.diameter_m_)>(
          reinterpret_cast<char*>(&_impl_.diameter_m_),
          reinterpret_cast<char*>(&other->_impl_.diameter_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_GaussianOpticalAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[11]);
}
// ===================================================================

class AntennaPattern_PhasedArrayAntennaPattern_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_PhasedArrayAntennaPattern_Element>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AntennaPattern_PhasedArrayAntennaPattern_Element::AntennaPattern_PhasedArrayAntennaPattern_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
}
AntennaPattern_PhasedArrayAntennaPattern_Element::AntennaPattern_PhasedArrayAntennaPattern_Element(const AntennaPattern_PhasedArrayAntennaPattern_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
}

inline void AntennaPattern_PhasedArrayAntennaPattern_Element::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

  };
}

AntennaPattern_PhasedArrayAntennaPattern_Element::~AntennaPattern_PhasedArrayAntennaPattern_Element() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_PhasedArrayAntennaPattern_Element::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_PhasedArrayAntennaPattern_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_PhasedArrayAntennaPattern_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_PhasedArrayAntennaPattern_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_PhasedArrayAntennaPattern_Element::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1 [json_name = "x"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // optional double y = 2 [json_name = "y"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  return target;
}

::size_t AntennaPattern_PhasedArrayAntennaPattern_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1 [json_name = "x"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double y = 2 [json_name = "y"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_PhasedArrayAntennaPattern_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_PhasedArrayAntennaPattern_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_PhasedArrayAntennaPattern_Element::GetClassData() const { return &_class_data_; }


void AntennaPattern_PhasedArrayAntennaPattern_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_PhasedArrayAntennaPattern_Element*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_PhasedArrayAntennaPattern_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_PhasedArrayAntennaPattern_Element::CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_PhasedArrayAntennaPattern_Element::IsInitialized() const {
  return true;
}

void AntennaPattern_PhasedArrayAntennaPattern_Element::InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_Element* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_.y_)
      + sizeof(AntennaPattern_PhasedArrayAntennaPattern_Element::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_Element, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_PhasedArrayAntennaPattern_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[12]);
}
// ===================================================================

class AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer, _impl_._has_bits_);
  static void set_has_beam_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
}
AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
}

inline void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.beam_variance_) { 0 }

  };
}

AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::~AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beam_variance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double beam_variance = 1 [json_name = "beamVariance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_beam_variance(&has_bits);
          _impl_.beam_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double beam_variance = 1 [json_name = "beamVariance"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_beam_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  return target;
}

::size_t AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double beam_variance = 1 [json_name = "beamVariance"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::GetClassData() const { return &_class_data_; }


void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_beam_variance(from._internal_beam_variance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::IsInitialized() const {
  return true;
}

void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.beam_variance_, other->_impl_.beam_variance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[13]);
}
// ===================================================================

class AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_._has_bits_);
  static void set_has_cosine_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_element_area_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
}
AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
}

inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cosine_exponent_) { 0 }

    , decltype(_impl_.element_area_m2_) { 0 }

  };
}

AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::~AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cosine_exponent_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.element_area_m2_) -
        reinterpret_cast<char*>(&_impl_.cosine_exponent_)) + sizeof(_impl_.element_area_m2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double cosine_exponent = 1 [json_name = "cosineExponent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_cosine_exponent(&has_bits);
          _impl_.cosine_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double element_area_m2 = 2 [json_name = "elementAreaM2"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_element_area_m2(&has_bits);
          _impl_.element_area_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double cosine_exponent = 1 [json_name = "cosineExponent"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_cosine_exponent(), target);
  }

  // optional double element_area_m2 = 2 [json_name = "elementAreaM2"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_element_area_m2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  return target;
}

::size_t AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double cosine_exponent = 1 [json_name = "cosineExponent"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double element_area_m2 = 2 [json_name = "elementAreaM2"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::GetClassData() const { return &_class_data_; }


void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cosine_exponent_ = from._impl_.cosine_exponent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.element_area_m2_ = from._impl_.element_area_m2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::IsInitialized() const {
  return true;
}

void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_.element_area_m2_)
      + sizeof(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_impl_.element_area_m2_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor, _impl_.cosine_exponent_)>(
          reinterpret_cast<char*>(&_impl_.cosine_exponent_),
          reinterpret_cast<char*>(&other->_impl_.cosine_exponent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[14]);
}
// ===================================================================

class AntennaPattern_PhasedArrayAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_PhasedArrayAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern, _impl_._oneof_case_);
  static void set_has_design_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backlobe_suppression_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& minimum_variance_distortionless_response_beamformer(const AntennaPattern_PhasedArrayAntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& cosine_exponent_element_factor(const AntennaPattern_PhasedArrayAntennaPattern* msg);
  static void set_has_cosine_exponent_element_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer&
AntennaPattern_PhasedArrayAntennaPattern::_Internal::minimum_variance_distortionless_response_beamformer(const AntennaPattern_PhasedArrayAntennaPattern* msg) {
  return *msg->_impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor&
AntennaPattern_PhasedArrayAntennaPattern::_Internal::cosine_exponent_element_factor(const AntennaPattern_PhasedArrayAntennaPattern* msg) {
  return *msg->_impl_.cosine_exponent_element_factor_;
}
void AntennaPattern_PhasedArrayAntennaPattern::set_allocated_minimum_variance_distortionless_response_beamformer(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* minimum_variance_distortionless_response_beamformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_beamformer();
  if (minimum_variance_distortionless_response_beamformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(minimum_variance_distortionless_response_beamformer);
    if (message_arena != submessage_arena) {
      minimum_variance_distortionless_response_beamformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_variance_distortionless_response_beamformer, submessage_arena);
    }
    set_has_minimum_variance_distortionless_response_beamformer();
    _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_ = minimum_variance_distortionless_response_beamformer;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
}
AntennaPattern_PhasedArrayAntennaPattern::AntennaPattern_PhasedArrayAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
}
AntennaPattern_PhasedArrayAntennaPattern::AntennaPattern_PhasedArrayAntennaPattern(const AntennaPattern_PhasedArrayAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_PhasedArrayAntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){from._impl_.elements_}
    , decltype(_impl_.cosine_exponent_element_factor_){nullptr}
    , decltype(_impl_.design_frequency_hz_) {}

    , decltype(_impl_.backlobe_suppression_db_) {}

    , decltype(_impl_.beamformer_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cosine_exponent_element_factor_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(*from._impl_.cosine_exponent_element_factor_);
  }
  ::memcpy(&_impl_.design_frequency_hz_, &from._impl_.design_frequency_hz_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.backlobe_suppression_db_) -
    reinterpret_cast<char*>(&_impl_.design_frequency_hz_)) + sizeof(_impl_.backlobe_suppression_db_));
  clear_has_beamformer();
  switch (from.beamformer_case()) {
    case kMinimumVarianceDistortionlessResponseBeamformer: {
      _this->_internal_mutable_minimum_variance_distortionless_response_beamformer()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::MergeFrom(
          from._internal_minimum_variance_distortionless_response_beamformer());
      break;
    }
    case BEAMFORMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
}

inline void AntennaPattern_PhasedArrayAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){arena}
    , decltype(_impl_.cosine_exponent_element_factor_){nullptr}
    , decltype(_impl_.design_frequency_hz_) { 0 }

    , decltype(_impl_.backlobe_suppression_db_) { 0 }

    , decltype(_impl_.beamformer_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_beamformer();
}

AntennaPattern_PhasedArrayAntennaPattern::~AntennaPattern_PhasedArrayAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_PhasedArrayAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_elements()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cosine_exponent_element_factor_;
  if (has_beamformer()) {
    clear_beamformer();
  }
}

void AntennaPattern_PhasedArrayAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_PhasedArrayAntennaPattern::clear_beamformer() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  switch (beamformer_case()) {
    case kMinimumVarianceDistortionlessResponseBeamformer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
      }
      break;
    }
    case BEAMFORMER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BEAMFORMER_NOT_SET;
}


void AntennaPattern_PhasedArrayAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_elements()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cosine_exponent_element_factor_ != nullptr);
    _impl_.cosine_exponent_element_factor_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.design_frequency_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.backlobe_suppression_db_) -
        reinterpret_cast<char*>(&_impl_.design_frequency_hz_)) + sizeof(_impl_.backlobe_suppression_db_));
  }
  clear_beamformer();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_PhasedArrayAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double design_frequency_hz = 1 [json_name = "designFrequencyHz"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_design_frequency_hz(&has_bits);
          _impl_.design_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double backlobe_suppression_db = 2 [json_name = "backlobeSuppressionDb"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_backlobe_suppression_db(&has_bits);
          _impl_.backlobe_suppression_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element elements = 3 [json_name = "elements"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer minimum_variance_distortionless_response_beamformer = 4 [json_name = "minimumVarianceDistortionlessResponseBeamformer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_variance_distortionless_response_beamformer(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor cosine_exponent_element_factor = 5 [json_name = "cosineExponentElementFactor"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cosine_exponent_element_factor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_PhasedArrayAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double design_frequency_hz = 1 [json_name = "designFrequencyHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_design_frequency_hz(), target);
  }

  // optional double backlobe_suppression_db = 2 [json_name = "backlobeSuppressionDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_backlobe_suppression_db(), target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element elements = 3 [json_name = "elements"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer minimum_variance_distortionless_response_beamformer = 4 [json_name = "minimumVarianceDistortionlessResponseBeamformer"];
  if (beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::minimum_variance_distortionless_response_beamformer(this),
        _Internal::minimum_variance_distortionless_response_beamformer(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor cosine_exponent_element_factor = 5 [json_name = "cosineExponentElementFactor"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cosine_exponent_element_factor(this),
        _Internal::cosine_exponent_element_factor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  return target;
}

::size_t AntennaPattern_PhasedArrayAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element elements = 3 [json_name = "elements"];
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_internal_elements()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor cosine_exponent_element_factor = 5 [json_name = "cosineExponentElementFactor"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cosine_exponent_element_factor_);
    }

    // optional double design_frequency_hz = 1 [json_name = "designFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double backlobe_suppression_db = 2 [json_name = "backlobeSuppressionDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  switch (beamformer_case()) {
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer minimum_variance_distortionless_response_beamformer = 4 [json_name = "minimumVarianceDistortionlessResponseBeamformer"];
    case kMinimumVarianceDistortionlessResponseBeamformer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.beamformer_.minimum_variance_distortionless_response_beamformer_);
      break;
    }
    case BEAMFORMER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_PhasedArrayAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_PhasedArrayAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_PhasedArrayAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_PhasedArrayAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_PhasedArrayAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_PhasedArrayAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_elements()->MergeFrom(from._internal_elements());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cosine_exponent_element_factor()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::MergeFrom(
          from._internal_cosine_exponent_element_factor());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.design_frequency_hz_ = from._impl_.design_frequency_hz_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.backlobe_suppression_db_ = from._impl_.backlobe_suppression_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.beamformer_case()) {
    case kMinimumVarianceDistortionlessResponseBeamformer: {
      _this->_internal_mutable_minimum_variance_distortionless_response_beamformer()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::MergeFrom(
          from._internal_minimum_variance_distortionless_response_beamformer());
      break;
    }
    case BEAMFORMER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_PhasedArrayAntennaPattern::CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_PhasedArrayAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_PhasedArrayAntennaPattern::InternalSwap(AntennaPattern_PhasedArrayAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_elements()->InternalSwap(other->_internal_mutable_elements());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern, _impl_.backlobe_suppression_db_)
      + sizeof(AntennaPattern_PhasedArrayAntennaPattern::_impl_.backlobe_suppression_db_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_PhasedArrayAntennaPattern, _impl_.cosine_exponent_element_factor_)>(
          reinterpret_cast<char*>(&_impl_.cosine_exponent_element_factor_),
          reinterpret_cast<char*>(&other->_impl_.cosine_exponent_element_factor_));
  swap(_impl_.beamformer_, other->_impl_.beamformer_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_PhasedArrayAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[15]);
}
// ===================================================================

class AntennaPattern_NearAndFarFieldAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_NearAndFarFieldAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_NearAndFarFieldAntennaPattern, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& near_field_pattern(const AntennaPattern_NearAndFarFieldAntennaPattern* msg);
  static void set_has_near_field_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& far_field_pattern(const AntennaPattern_NearAndFarFieldAntennaPattern* msg);
  static void set_has_far_field_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_near_field_range_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
AntennaPattern_NearAndFarFieldAntennaPattern::_Internal::near_field_pattern(const AntennaPattern_NearAndFarFieldAntennaPattern* msg) {
  return *msg->_impl_.near_field_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
AntennaPattern_NearAndFarFieldAntennaPattern::_Internal::far_field_pattern(const AntennaPattern_NearAndFarFieldAntennaPattern* msg) {
  return *msg->_impl_.far_field_pattern_;
}
AntennaPattern_NearAndFarFieldAntennaPattern::AntennaPattern_NearAndFarFieldAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
}
AntennaPattern_NearAndFarFieldAntennaPattern::AntennaPattern_NearAndFarFieldAntennaPattern(const AntennaPattern_NearAndFarFieldAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_NearAndFarFieldAntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.near_field_pattern_){nullptr}
    , decltype(_impl_.far_field_pattern_){nullptr}
    , decltype(_impl_.near_field_range_m_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.near_field_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern(*from._impl_.near_field_pattern_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.far_field_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern(*from._impl_.far_field_pattern_);
  }
  _this->_impl_.near_field_range_m_ = from._impl_.near_field_range_m_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
}

inline void AntennaPattern_NearAndFarFieldAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.near_field_pattern_){nullptr}
    , decltype(_impl_.far_field_pattern_){nullptr}
    , decltype(_impl_.near_field_range_m_) { 0 }

  };
}

AntennaPattern_NearAndFarFieldAntennaPattern::~AntennaPattern_NearAndFarFieldAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_NearAndFarFieldAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.near_field_pattern_;
  if (this != internal_default_instance()) delete _impl_.far_field_pattern_;
}

void AntennaPattern_NearAndFarFieldAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_NearAndFarFieldAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.near_field_pattern_ != nullptr);
      _impl_.near_field_pattern_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.far_field_pattern_ != nullptr);
      _impl_.far_field_pattern_->Clear();
    }
  }
  _impl_.near_field_range_m_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_NearAndFarFieldAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern near_field_pattern = 1 [json_name = "nearFieldPattern"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_near_field_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern far_field_pattern = 2 [json_name = "farFieldPattern"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_far_field_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double near_field_range_m = 3 [json_name = "nearFieldRangeM"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_near_field_range_m(&has_bits);
          _impl_.near_field_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_NearAndFarFieldAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern near_field_pattern = 1 [json_name = "nearFieldPattern"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::near_field_pattern(this),
        _Internal::near_field_pattern(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern far_field_pattern = 2 [json_name = "farFieldPattern"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::far_field_pattern(this),
        _Internal::far_field_pattern(this).GetCachedSize(), target, stream);
  }

  // optional double near_field_range_m = 3 [json_name = "nearFieldRangeM"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_near_field_range_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  return target;
}

::size_t AntennaPattern_NearAndFarFieldAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern near_field_pattern = 1 [json_name = "nearFieldPattern"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.near_field_pattern_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern far_field_pattern = 2 [json_name = "farFieldPattern"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.far_field_pattern_);
    }

    // optional double near_field_range_m = 3 [json_name = "nearFieldRangeM"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_NearAndFarFieldAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_NearAndFarFieldAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_NearAndFarFieldAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_NearAndFarFieldAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_NearAndFarFieldAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_NearAndFarFieldAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_near_field_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_near_field_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_far_field_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_far_field_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.near_field_range_m_ = from._impl_.near_field_range_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_NearAndFarFieldAntennaPattern::CopyFrom(const AntennaPattern_NearAndFarFieldAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_NearAndFarFieldAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_NearAndFarFieldAntennaPattern::InternalSwap(AntennaPattern_NearAndFarFieldAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_NearAndFarFieldAntennaPattern, _impl_.near_field_range_m_)
      + sizeof(AntennaPattern_NearAndFarFieldAntennaPattern::_impl_.near_field_range_m_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_NearAndFarFieldAntennaPattern, _impl_.near_field_pattern_)>(
          reinterpret_cast<char*>(&_impl_.near_field_pattern_),
          reinterpret_cast<char*>(&other->_impl_.near_field_pattern_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_NearAndFarFieldAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[16]);
}
// ===================================================================

class AntennaPattern_TransmitterAndReceiverAntennaPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<AntennaPattern_TransmitterAndReceiverAntennaPattern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& transmitter_pattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern* msg);
  static void set_has_transmitter_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& receiver_pattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern* msg);
  static void set_has_receiver_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
AntennaPattern_TransmitterAndReceiverAntennaPattern::_Internal::transmitter_pattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern* msg) {
  return *msg->_impl_.transmitter_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&
AntennaPattern_TransmitterAndReceiverAntennaPattern::_Internal::receiver_pattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern* msg) {
  return *msg->_impl_.receiver_pattern_;
}
AntennaPattern_TransmitterAndReceiverAntennaPattern::AntennaPattern_TransmitterAndReceiverAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
}
AntennaPattern_TransmitterAndReceiverAntennaPattern::AntennaPattern_TransmitterAndReceiverAntennaPattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern_TransmitterAndReceiverAntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transmitter_pattern_){nullptr}
    , decltype(_impl_.receiver_pattern_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transmitter_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern(*from._impl_.transmitter_pattern_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.receiver_pattern_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern(*from._impl_.receiver_pattern_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
}

inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transmitter_pattern_){nullptr}
    , decltype(_impl_.receiver_pattern_){nullptr}
  };
}

AntennaPattern_TransmitterAndReceiverAntennaPattern::~AntennaPattern_TransmitterAndReceiverAntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transmitter_pattern_;
  if (this != internal_default_instance()) delete _impl_.receiver_pattern_;
}

void AntennaPattern_TransmitterAndReceiverAntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern_TransmitterAndReceiverAntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transmitter_pattern_ != nullptr);
      _impl_.transmitter_pattern_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.receiver_pattern_ != nullptr);
      _impl_.receiver_pattern_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern_TransmitterAndReceiverAntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern transmitter_pattern = 1 [json_name = "transmitterPattern"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitter_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern receiver_pattern = 2 [json_name = "receiverPattern"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern_TransmitterAndReceiverAntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern transmitter_pattern = 1 [json_name = "transmitterPattern"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transmitter_pattern(this),
        _Internal::transmitter_pattern(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern receiver_pattern = 2 [json_name = "receiverPattern"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::receiver_pattern(this),
        _Internal::receiver_pattern(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  return target;
}

::size_t AntennaPattern_TransmitterAndReceiverAntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern transmitter_pattern = 1 [json_name = "transmitterPattern"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transmitter_pattern_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern receiver_pattern = 2 [json_name = "receiverPattern"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.receiver_pattern_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern_TransmitterAndReceiverAntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern_TransmitterAndReceiverAntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern_TransmitterAndReceiverAntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern_TransmitterAndReceiverAntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern_TransmitterAndReceiverAntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern_TransmitterAndReceiverAntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transmitter_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_transmitter_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_receiver_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern::MergeFrom(
          from._internal_receiver_pattern());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern_TransmitterAndReceiverAntennaPattern::CopyFrom(const AntennaPattern_TransmitterAndReceiverAntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern_TransmitterAndReceiverAntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern_TransmitterAndReceiverAntennaPattern::InternalSwap(AntennaPattern_TransmitterAndReceiverAntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_.receiver_pattern_)
      + sizeof(AntennaPattern_TransmitterAndReceiverAntennaPattern::_impl_.receiver_pattern_)
      - PROTOBUF_FIELD_OFFSET(AntennaPattern_TransmitterAndReceiverAntennaPattern, _impl_.transmitter_pattern_)>(
          reinterpret_cast<char*>(&_impl_.transmitter_pattern_),
          reinterpret_cast<char*>(&other->_impl_.transmitter_pattern_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern_TransmitterAndReceiverAntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[17]);
}
// ===================================================================

class AntennaPattern::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& custom_phi_theta_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern& gaussian_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern& helical_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern& isotropic_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern& parabolic_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern& square_horn_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern& gaussian_optical_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern& phased_array_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern& near_and_far_field_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern& transmitter_and_receiver_pattern(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle& custom_antenna_pattern_per_angle(const AntennaPattern* msg);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern& custom_az_el_pattern(const AntennaPattern* msg);
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern&
AntennaPattern::_Internal::custom_phi_theta_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.custom_phi_theta_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern&
AntennaPattern::_Internal::gaussian_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.gaussian_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern&
AntennaPattern::_Internal::helical_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.helical_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern&
AntennaPattern::_Internal::isotropic_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.isotropic_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern&
AntennaPattern::_Internal::parabolic_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.parabolic_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern&
AntennaPattern::_Internal::square_horn_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.square_horn_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern&
AntennaPattern::_Internal::gaussian_optical_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.gaussian_optical_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern&
AntennaPattern::_Internal::phased_array_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.phased_array_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern&
AntennaPattern::_Internal::near_and_far_field_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.near_and_far_field_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern&
AntennaPattern::_Internal::transmitter_and_receiver_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.transmitter_and_receiver_pattern_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle&
AntennaPattern::_Internal::custom_antenna_pattern_per_angle(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.custom_antenna_pattern_per_angle_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern&
AntennaPattern::_Internal::custom_az_el_pattern(const AntennaPattern* msg) {
  return *msg->_impl_.pattern_type_.custom_az_el_pattern_;
}
void AntennaPattern::set_allocated_custom_phi_theta_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_phi_theta_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (custom_phi_theta_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_phi_theta_pattern);
    if (message_arena != submessage_arena) {
      custom_phi_theta_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_phi_theta_pattern, submessage_arena);
    }
    set_has_custom_phi_theta_pattern();
    _impl_.pattern_type_.custom_phi_theta_pattern_ = custom_phi_theta_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
}
void AntennaPattern::set_allocated_gaussian_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* gaussian_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (gaussian_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gaussian_pattern);
    if (message_arena != submessage_arena) {
      gaussian_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaussian_pattern, submessage_arena);
    }
    set_has_gaussian_pattern();
    _impl_.pattern_type_.gaussian_pattern_ = gaussian_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
}
void AntennaPattern::set_allocated_helical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* helical_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (helical_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(helical_pattern);
    if (message_arena != submessage_arena) {
      helical_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, helical_pattern, submessage_arena);
    }
    set_has_helical_pattern();
    _impl_.pattern_type_.helical_pattern_ = helical_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
}
void AntennaPattern::set_allocated_isotropic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* isotropic_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (isotropic_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(isotropic_pattern);
    if (message_arena != submessage_arena) {
      isotropic_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, isotropic_pattern, submessage_arena);
    }
    set_has_isotropic_pattern();
    _impl_.pattern_type_.isotropic_pattern_ = isotropic_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
}
void AntennaPattern::set_allocated_parabolic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* parabolic_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (parabolic_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parabolic_pattern);
    if (message_arena != submessage_arena) {
      parabolic_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parabolic_pattern, submessage_arena);
    }
    set_has_parabolic_pattern();
    _impl_.pattern_type_.parabolic_pattern_ = parabolic_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
}
void AntennaPattern::set_allocated_square_horn_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* square_horn_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (square_horn_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(square_horn_pattern);
    if (message_arena != submessage_arena) {
      square_horn_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, square_horn_pattern, submessage_arena);
    }
    set_has_square_horn_pattern();
    _impl_.pattern_type_.square_horn_pattern_ = square_horn_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
}
void AntennaPattern::set_allocated_gaussian_optical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* gaussian_optical_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (gaussian_optical_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gaussian_optical_pattern);
    if (message_arena != submessage_arena) {
      gaussian_optical_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaussian_optical_pattern, submessage_arena);
    }
    set_has_gaussian_optical_pattern();
    _impl_.pattern_type_.gaussian_optical_pattern_ = gaussian_optical_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
}
void AntennaPattern::set_allocated_phased_array_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* phased_array_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (phased_array_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(phased_array_pattern);
    if (message_arena != submessage_arena) {
      phased_array_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phased_array_pattern, submessage_arena);
    }
    set_has_phased_array_pattern();
    _impl_.pattern_type_.phased_array_pattern_ = phased_array_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
}
void AntennaPattern::set_allocated_near_and_far_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* near_and_far_field_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (near_and_far_field_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(near_and_far_field_pattern);
    if (message_arena != submessage_arena) {
      near_and_far_field_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, near_and_far_field_pattern, submessage_arena);
    }
    set_has_near_and_far_field_pattern();
    _impl_.pattern_type_.near_and_far_field_pattern_ = near_and_far_field_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
}
void AntennaPattern::set_allocated_transmitter_and_receiver_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* transmitter_and_receiver_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (transmitter_and_receiver_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transmitter_and_receiver_pattern);
    if (message_arena != submessage_arena) {
      transmitter_and_receiver_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmitter_and_receiver_pattern, submessage_arena);
    }
    set_has_transmitter_and_receiver_pattern();
    _impl_.pattern_type_.transmitter_and_receiver_pattern_ = transmitter_and_receiver_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
}
void AntennaPattern::set_allocated_custom_antenna_pattern_per_angle(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* custom_antenna_pattern_per_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (custom_antenna_pattern_per_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_antenna_pattern_per_angle);
    if (message_arena != submessage_arena) {
      custom_antenna_pattern_per_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_antenna_pattern_per_angle, submessage_arena);
    }
    set_has_custom_antenna_pattern_per_angle();
    _impl_.pattern_type_.custom_antenna_pattern_per_angle_ = custom_antenna_pattern_per_angle;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
}
void AntennaPattern::set_allocated_custom_az_el_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* custom_az_el_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pattern_type();
  if (custom_az_el_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_az_el_pattern);
    if (message_arena != submessage_arena) {
      custom_az_el_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_az_el_pattern, submessage_arena);
    }
    set_has_custom_az_el_pattern();
    _impl_.pattern_type_.custom_az_el_pattern_ = custom_az_el_pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
}
AntennaPattern::AntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
}
AntennaPattern::AntennaPattern(const AntennaPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AntennaPattern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pattern_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_pattern_type();
  switch (from.pattern_type_case()) {
    case kCustomPhiThetaPattern: {
      _this->_internal_mutable_custom_phi_theta_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern::MergeFrom(
          from._internal_custom_phi_theta_pattern());
      break;
    }
    case kGaussianPattern: {
      _this->_internal_mutable_gaussian_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern::MergeFrom(
          from._internal_gaussian_pattern());
      break;
    }
    case kHelicalPattern: {
      _this->_internal_mutable_helical_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern::MergeFrom(
          from._internal_helical_pattern());
      break;
    }
    case kIsotropicPattern: {
      _this->_internal_mutable_isotropic_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern::MergeFrom(
          from._internal_isotropic_pattern());
      break;
    }
    case kParabolicPattern: {
      _this->_internal_mutable_parabolic_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern::MergeFrom(
          from._internal_parabolic_pattern());
      break;
    }
    case kSquareHornPattern: {
      _this->_internal_mutable_square_horn_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern::MergeFrom(
          from._internal_square_horn_pattern());
      break;
    }
    case kGaussianOpticalPattern: {
      _this->_internal_mutable_gaussian_optical_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern::MergeFrom(
          from._internal_gaussian_optical_pattern());
      break;
    }
    case kPhasedArrayPattern: {
      _this->_internal_mutable_phased_array_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern::MergeFrom(
          from._internal_phased_array_pattern());
      break;
    }
    case kNearAndFarFieldPattern: {
      _this->_internal_mutable_near_and_far_field_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern::MergeFrom(
          from._internal_near_and_far_field_pattern());
      break;
    }
    case kTransmitterAndReceiverPattern: {
      _this->_internal_mutable_transmitter_and_receiver_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern::MergeFrom(
          from._internal_transmitter_and_receiver_pattern());
      break;
    }
    case kCustomAntennaPatternPerAngle: {
      _this->_internal_mutable_custom_antenna_pattern_per_angle()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle::MergeFrom(
          from._internal_custom_antenna_pattern_per_angle());
      break;
    }
    case kCustomAzElPattern: {
      _this->_internal_mutable_custom_az_el_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern::MergeFrom(
          from._internal_custom_az_el_pattern());
      break;
    }
    case PATTERN_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
}

inline void AntennaPattern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pattern_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_pattern_type();
}

AntennaPattern::~AntennaPattern() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AntennaPattern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_pattern_type()) {
    clear_pattern_type();
  }
}

void AntennaPattern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AntennaPattern::clear_pattern_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  switch (pattern_type_case()) {
    case kCustomPhiThetaPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.custom_phi_theta_pattern_;
      }
      break;
    }
    case kGaussianPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.gaussian_pattern_;
      }
      break;
    }
    case kHelicalPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.helical_pattern_;
      }
      break;
    }
    case kIsotropicPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.isotropic_pattern_;
      }
      break;
    }
    case kParabolicPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.parabolic_pattern_;
      }
      break;
    }
    case kSquareHornPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.square_horn_pattern_;
      }
      break;
    }
    case kGaussianOpticalPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.gaussian_optical_pattern_;
      }
      break;
    }
    case kPhasedArrayPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.phased_array_pattern_;
      }
      break;
    }
    case kNearAndFarFieldPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.near_and_far_field_pattern_;
      }
      break;
    }
    case kTransmitterAndReceiverPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.transmitter_and_receiver_pattern_;
      }
      break;
    }
    case kCustomAntennaPatternPerAngle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.custom_antenna_pattern_per_angle_;
      }
      break;
    }
    case kCustomAzElPattern: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.pattern_type_.custom_az_el_pattern_;
      }
      break;
    }
    case PATTERN_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PATTERN_TYPE_NOT_SET;
}


void AntennaPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_pattern_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_phi_theta_pattern = 1 [json_name = "customPhiThetaPattern"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_phi_theta_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern gaussian_pattern = 2 [json_name = "gaussianPattern"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern helical_pattern = 3 [json_name = "helicalPattern"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_helical_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern isotropic_pattern = 4 [json_name = "isotropicPattern"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_isotropic_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern parabolic_pattern = 5 [json_name = "parabolicPattern"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parabolic_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern square_horn_pattern = 6 [json_name = "squareHornPattern"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_square_horn_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern gaussian_optical_pattern = 7 [json_name = "gaussianOpticalPattern"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_optical_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern near_and_far_field_pattern = 9 [json_name = "nearAndFarFieldPattern"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_near_and_far_field_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern phased_array_pattern = 10 [json_name = "phasedArrayPattern"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_phased_array_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern transmitter_and_receiver_pattern = 11 [json_name = "transmitterAndReceiverPattern"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmitter_and_receiver_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle custom_antenna_pattern_per_angle = 12 [json_name = "customAntennaPatternPerAngle"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_antenna_pattern_per_angle(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern custom_az_el_pattern = 13 [json_name = "customAzElPattern"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_az_el_pattern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AntennaPattern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (pattern_type_case()) {
    case kCustomPhiThetaPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::custom_phi_theta_pattern(this),
          _Internal::custom_phi_theta_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kGaussianPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::gaussian_pattern(this),
          _Internal::gaussian_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kHelicalPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::helical_pattern(this),
          _Internal::helical_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsotropicPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::isotropic_pattern(this),
          _Internal::isotropic_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kParabolicPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::parabolic_pattern(this),
          _Internal::parabolic_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kSquareHornPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::square_horn_pattern(this),
          _Internal::square_horn_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kGaussianOpticalPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::gaussian_optical_pattern(this),
          _Internal::gaussian_optical_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kNearAndFarFieldPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::near_and_far_field_pattern(this),
          _Internal::near_and_far_field_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kPhasedArrayPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::phased_array_pattern(this),
          _Internal::phased_array_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kTransmitterAndReceiverPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::transmitter_and_receiver_pattern(this),
          _Internal::transmitter_and_receiver_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    case kCustomAntennaPatternPerAngle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::custom_antenna_pattern_per_angle(this),
          _Internal::custom_antenna_pattern_per_angle(this).GetCachedSize(), target, stream);
      break;
    }
    case kCustomAzElPattern: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::custom_az_el_pattern(this),
          _Internal::custom_az_el_pattern(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  return target;
}

::size_t AntennaPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (pattern_type_case()) {
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_phi_theta_pattern = 1 [json_name = "customPhiThetaPattern"];
    case kCustomPhiThetaPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.custom_phi_theta_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern gaussian_pattern = 2 [json_name = "gaussianPattern"];
    case kGaussianPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.gaussian_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern helical_pattern = 3 [json_name = "helicalPattern"];
    case kHelicalPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.helical_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern isotropic_pattern = 4 [json_name = "isotropicPattern"];
    case kIsotropicPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.isotropic_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern parabolic_pattern = 5 [json_name = "parabolicPattern"];
    case kParabolicPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.parabolic_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern square_horn_pattern = 6 [json_name = "squareHornPattern"];
    case kSquareHornPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.square_horn_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern gaussian_optical_pattern = 7 [json_name = "gaussianOpticalPattern"];
    case kGaussianOpticalPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.gaussian_optical_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern phased_array_pattern = 10 [json_name = "phasedArrayPattern"];
    case kPhasedArrayPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.phased_array_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern near_and_far_field_pattern = 9 [json_name = "nearAndFarFieldPattern"];
    case kNearAndFarFieldPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.near_and_far_field_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern transmitter_and_receiver_pattern = 11 [json_name = "transmitterAndReceiverPattern"];
    case kTransmitterAndReceiverPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.transmitter_and_receiver_pattern_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle custom_antenna_pattern_per_angle = 12 [json_name = "customAntennaPatternPerAngle"];
    case kCustomAntennaPatternPerAngle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.custom_antenna_pattern_per_angle_);
      break;
    }
    // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern custom_az_el_pattern = 13 [json_name = "customAzElPattern"];
    case kCustomAzElPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pattern_type_.custom_az_el_pattern_);
      break;
    }
    case PATTERN_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntennaPattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AntennaPattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntennaPattern::GetClassData() const { return &_class_data_; }


void AntennaPattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AntennaPattern*>(&to_msg);
  auto& from = static_cast<const AntennaPattern&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.pattern_type_case()) {
    case kCustomPhiThetaPattern: {
      _this->_internal_mutable_custom_phi_theta_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern::MergeFrom(
          from._internal_custom_phi_theta_pattern());
      break;
    }
    case kGaussianPattern: {
      _this->_internal_mutable_gaussian_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern::MergeFrom(
          from._internal_gaussian_pattern());
      break;
    }
    case kHelicalPattern: {
      _this->_internal_mutable_helical_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern::MergeFrom(
          from._internal_helical_pattern());
      break;
    }
    case kIsotropicPattern: {
      _this->_internal_mutable_isotropic_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern::MergeFrom(
          from._internal_isotropic_pattern());
      break;
    }
    case kParabolicPattern: {
      _this->_internal_mutable_parabolic_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern::MergeFrom(
          from._internal_parabolic_pattern());
      break;
    }
    case kSquareHornPattern: {
      _this->_internal_mutable_square_horn_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern::MergeFrom(
          from._internal_square_horn_pattern());
      break;
    }
    case kGaussianOpticalPattern: {
      _this->_internal_mutable_gaussian_optical_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern::MergeFrom(
          from._internal_gaussian_optical_pattern());
      break;
    }
    case kPhasedArrayPattern: {
      _this->_internal_mutable_phased_array_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern::MergeFrom(
          from._internal_phased_array_pattern());
      break;
    }
    case kNearAndFarFieldPattern: {
      _this->_internal_mutable_near_and_far_field_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern::MergeFrom(
          from._internal_near_and_far_field_pattern());
      break;
    }
    case kTransmitterAndReceiverPattern: {
      _this->_internal_mutable_transmitter_and_receiver_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern::MergeFrom(
          from._internal_transmitter_and_receiver_pattern());
      break;
    }
    case kCustomAntennaPatternPerAngle: {
      _this->_internal_mutable_custom_antenna_pattern_per_angle()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle::MergeFrom(
          from._internal_custom_antenna_pattern_per_angle());
      break;
    }
    case kCustomAzElPattern: {
      _this->_internal_mutable_custom_az_el_pattern()->::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern::MergeFrom(
          from._internal_custom_az_el_pattern());
      break;
    }
    case PATTERN_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntennaPattern::CopyFrom(const AntennaPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaPattern::IsInitialized() const {
  return true;
}

void AntennaPattern::InternalSwap(AntennaPattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pattern_type_, other->_impl_.pattern_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaPattern::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto[18]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/network_link.proto

#include "api/nbi/v1alpha/resources/network_link.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
template <typename>
PROTOBUF_CONSTEXPR NetworkLink::NetworkLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.src_)*/nullptr
  , /*decltype(_impl_.dst_)*/nullptr} {}
struct NetworkLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkLinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkLinkDefaultTypeInternal() {}
  union {
    NetworkLink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkLinkDefaultTypeInternal _NetworkLink_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioConfiguration::RadioConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rate_table_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.interface_id_)*/nullptr
  , /*decltype(_impl_.tx_state_)*/nullptr
  , /*decltype(_impl_.rx_state_)*/nullptr
  , /*decltype(_impl_.tdma_schedule_)*/nullptr} {}
struct RadioConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioConfigurationDefaultTypeInternal() {}
  union {
    RadioConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioConfigurationDefaultTypeInternal _RadioConfiguration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Radio::Radio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.band_profile_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.center_frequency_hz_)*/ ::uint64_t{0u}
} {}
struct RadioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioDefaultTypeInternal() {}
  union {
    Radio _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioDefaultTypeInternal _Radio_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LinkEnd::LinkEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr} {}
struct LinkEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkEndDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkEndDefaultTypeInternal() {}
  union {
    LinkEnd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkEndDefaultTypeInternal _LinkEnd_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BeamTarget::BeamTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BeamTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeamTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeamTargetDefaultTypeInternal() {}
  union {
    BeamTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeamTargetDefaultTypeInternal _BeamTarget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BidirectionalLink::BidirectionalLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.a_)*/nullptr
  , /*decltype(_impl_.b_)*/nullptr
  , /*decltype(_impl_.a_to_b_radio_)*/nullptr
  , /*decltype(_impl_.b_to_a_radio_)*/nullptr} {}
struct BidirectionalLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BidirectionalLinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BidirectionalLinkDefaultTypeInternal() {}
  union {
    BidirectionalLink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BidirectionalLinkDefaultTypeInternal _BidirectionalLink_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DirectionalLink::DirectionalLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.radio_configuration_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr} {}
struct DirectionalLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectionalLinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectionalLinkDefaultTypeInternal() {}
  union {
    DirectionalLink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectionalLinkDefaultTypeInternal _DirectionalLink_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUseDefaultTypeInternal _WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessLinkBudget::WirelessLinkBudget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_propagation_loss_db_)*/{}
  , /*decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_)*/ 0

  , /*decltype(_impl_.effective_isotropic_radiated_power_dbw_)*/ 0

  , /*decltype(_impl_.propagation_loss_db_)*/ 0

  , /*decltype(_impl_.received_isotropic_power_dbw_)*/ 0

  , /*decltype(_impl_.received_power_flux_density_db_w_per_m2_)*/ 0

  , /*decltype(_impl_.receiver_antenna_gain_in_link_direction_db_)*/ 0

  , /*decltype(_impl_.power_at_receiver_output_dbw_)*/ 0

  , /*decltype(_impl_.carrier_to_noise_db_)*/ 0

  , /*decltype(_impl_.carrier_to_noise_density_db_per_hz_)*/ 0

  , /*decltype(_impl_.carrier_to_noise_plus_interference_db_)*/ 0
} {}
struct WirelessLinkBudgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessLinkBudgetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessLinkBudgetDefaultTypeInternal() {}
  union {
    WirelessLinkBudget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessLinkBudgetDefaultTypeInternal _WirelessLinkBudget_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.propagation_delay_)*/nullptr
  , /*decltype(_impl_.pointing_vector_)*/nullptr
  , /*decltype(_impl_.range_m_)*/ 0

  , /*decltype(_impl_.data_rate_bps_)*/ 0

  , /*decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_)*/ 0

  , /*decltype(_impl_.receiver_antenna_gain_in_link_direction_db_)*/ 0
} {}
struct WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetricsDefaultTypeInternal() {}
  union {
    WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetricsDefaultTypeInternal _WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessLinkReport_WirelessAccessInterval::WirelessLinkReport_WirelessAccessInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.no_access_reason_)*/{}
  , /*decltype(_impl_.sampled_metrics_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.accessibility_)*/ 0
} {}
struct WirelessLinkReport_WirelessAccessIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessLinkReport_WirelessAccessIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessLinkReport_WirelessAccessIntervalDefaultTypeInternal() {}
  union {
    WirelessLinkReport_WirelessAccessInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessLinkReport_WirelessAccessIntervalDefaultTypeInternal _WirelessLinkReport_WirelessAccessInterval_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WirelessLinkReport::WirelessLinkReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.center_frequencies_hz_)*/ {}

  , /*decltype(_impl_.access_intervals_)*/{}
  , /*decltype(_impl_.band_profile_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_)*/nullptr} {}
struct WirelessLinkReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WirelessLinkReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WirelessLinkReportDefaultTypeInternal() {}
  union {
    WirelessLinkReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WirelessLinkReportDefaultTypeInternal _WirelessLinkReport_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InterfaceLinkReport_AccessInterval::InterfaceLinkReport_AccessInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.frame_delay_)*/nullptr
  , /*decltype(_impl_.data_rate_bps_)*/ 0

  , /*decltype(_impl_.accessibility_)*/ 0
} {}
struct InterfaceLinkReport_AccessIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceLinkReport_AccessIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceLinkReport_AccessIntervalDefaultTypeInternal() {}
  union {
    InterfaceLinkReport_AccessInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceLinkReport_AccessIntervalDefaultTypeInternal _InterfaceLinkReport_AccessInterval_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InterfaceLinkReport::InterfaceLinkReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.access_intervals_)*/{}
  , /*decltype(_impl_.src_)*/nullptr
  , /*decltype(_impl_.dst_)*/nullptr} {}
struct InterfaceLinkReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceLinkReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceLinkReportDefaultTypeInternal() {}
  union {
    InterfaceLinkReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceLinkReportDefaultTypeInternal _InterfaceLinkReport_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransceiverLinkReport::TransceiverLinkReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.src_)*/nullptr} {}
struct TransceiverLinkReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransceiverLinkReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransceiverLinkReportDefaultTypeInternal() {}
  union {
    TransceiverLinkReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransceiverLinkReportDefaultTypeInternal _TransceiverLinkReport_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink, _impl_.dst_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_.interface_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_.tx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_.rx_state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_.rate_table_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration, _impl_.tdma_schedule_),
    1,
    2,
    3,
    0,
    4,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::Radio, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::Radio, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::Radio, _impl_.center_frequency_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::Radio, _impl_.band_profile_id_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd, _impl_.id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _impl_.b_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _impl_.a_to_b_radio_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink, _impl_.b_to_a_radio_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink, _impl_.radio_configuration_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink, _impl_.target_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.transmitter_antenna_gain_in_link_direction_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.effective_isotropic_radiated_power_dbw_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.component_propagation_loss_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.propagation_loss_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.received_isotropic_power_dbw_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.received_power_flux_density_db_w_per_m2_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.receiver_antenna_gain_in_link_direction_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.power_at_receiver_output_dbw_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.carrier_to_noise_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.carrier_to_noise_plus_interference_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget, _impl_.carrier_to_noise_density_db_per_hz_),
    0,
    1,
    ~0u,
    2,
    3,
    4,
    5,
    6,
    7,
    9,
    8,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.propagation_delay_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.pointing_vector_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.range_m_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.data_rate_bps_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.transmitter_antenna_gain_in_link_direction_db_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.receiver_antenna_gain_in_link_direction_db_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _impl_.accessibility_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _impl_.no_access_reason_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval, _impl_.sampled_metrics_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _impl_.dst_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _impl_.band_profile_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _impl_.center_frequencies_hz_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport, _impl_.access_intervals_),
    1,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _impl_.accessibility_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _impl_.frame_delay_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval, _impl_.data_rate_bps_),
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport, _impl_.dst_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport, _impl_.access_intervals_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport, _impl_.links_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink)},
        { 12, 25, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration)},
        { 30, 40, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::Radio)},
        { 42, 51, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd)},
        { 52, -1, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget)},
        { 63, 75, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink)},
        { 79, 90, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink)},
        { 93, 103, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse)},
        { 105, 124, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget)},
        { 135, 150, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics)},
        { 157, 169, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval)},
        { 173, 185, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport)},
        { 189, 201, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval)},
        { 205, 216, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport)},
        { 219, 229, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_NetworkLink_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_RadioConfiguration_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_Radio_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_LinkEnd_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_BeamTarget_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_BidirectionalLink_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_DirectionalLink_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkBudget_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkReport_WirelessAccessInterval_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_WirelessLinkReport_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_InterfaceLinkReport_AccessInterval_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_InterfaceLinkReport_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_TransceiverLinkReport_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,api/nbi/v1alpha/resources/network_link"
    ".proto\022+aalyria.spacetime.api.nbi.v1alph"
    "a.resources\032\036api/common/control_radio.pr"
    "oto\032\034api/common/coordinates.proto\032\030api/c"
    "ommon/network.proto\032\025api/common/time.pro"
    "to\032%api/common/wireless_transceiver.prot"
    "o\"\241\001\n\013NetworkLink\022B\n\003src\030\003 \001(\01320.aalyria"
    ".spacetime.api.common.NetworkInterfaceId"
    "R\003src\022B\n\003dst\030\004 \001(\01320.aalyria.spacetime.a"
    "pi.common.NetworkInterfaceIdR\003dstJ\004\010\001\020\002J"
    "\004\010\002\020\003\"\373\002\n\022RadioConfiguration\022S\n\014interfac"
    "e_id\030\001 \001(\01320.aalyria.spacetime.api.commo"
    "n.NetworkInterfaceIdR\013interfaceId\022I\n\010tx_"
    "state\030\002 \001(\0132..aalyria.spacetime.api.comm"
    "on.TransmitterStateR\007txState\022F\n\010rx_state"
    "\030\003 \001(\0132+.aalyria.spacetime.api.common.Re"
    "ceiverStateR\007rxState\022\"\n\rrate_table_id\030\005 "
    "\001(\tR\013rateTableId\022O\n\rtdma_schedule\030\004 \001(\0132"
    "*.aalyria.spacetime.api.common.TdmaSched"
    "uleR\014tdmaScheduleJ\010\010\006\020\200\200\200\200\002\"_\n\005Radio\022.\n\023"
    "center_frequency_hz\030\001 \001(\004R\021centerFrequen"
    "cyHz\022&\n\017band_profile_id\030\002 \001(\tR\rbandProfi"
    "leId\"]\n\007LinkEnd\022@\n\002id\030\003 \001(\01320.aalyria.sp"
    "acetime.api.common.NetworkInterfaceIdR\002i"
    "dJ\004\010\001\020\002J\004\010\002\020\003J\004\010\004\020\005\"\271\001\n\nBeamTarget\022Y\n\016tr"
    "ansceiver_id\030\001 \001(\01320.aalyria.spacetime.a"
    "pi.common.TransceiverModelIdH\000R\rtranscei"
    "verId\022H\n\013coordinates\030\002 \001(\0132$.aalyria.spa"
    "cetime.api.common.MotionH\000R\013coordinatesB"
    "\006\n\004type\"\305\002\n\021BidirectionalLink\022B\n\001a\030\001 \001(\013"
    "24.aalyria.spacetime.api.nbi.v1alpha.res"
    "ources.LinkEndR\001a\022B\n\001b\030\002 \001(\01324.aalyria.s"
    "pacetime.api.nbi.v1alpha.resources.LinkE"
    "ndR\001b\022S\n\014a_to_b_radio\030\003 \001(\01322.aalyria.sp"
    "acetime.api.nbi.v1alpha.resources.RadioR"
    "\taToBRadio\022S\n\014b_to_a_radio\030\004 \001(\01322.aalyr"
    "ia.spacetime.api.nbi.v1alpha.resources.R"
    "adioR\tbToARadio\"\211\002\n\017DirectionalLink\022@\n\002i"
    "d\030\001 \001(\01320.aalyria.spacetime.api.common.N"
    "etworkInterfaceIdR\002id\022c\n\023radio_configura"
    "tion\030\002 \001(\01322.aalyria.spacetime.api.nbi.v"
    "1alpha.resources.RadioR\022radioConfigurati"
    "on\022O\n\006target\030\003 \001(\01327.aalyria.spacetime.a"
    "pi.nbi.v1alpha.resources.BeamTargetR\006tar"
    "get\"\364\007\n\022WirelessLinkBudget\022^\n-transmitte"
    "r_antenna_gain_in_link_direction_db\030\001 \001("
    "\001R\'transmitterAntennaGainInLinkDirection"
    "Db\022R\n&effective_isotropic_radiated_power"
    "_dbw\030\002 \001(\001R\"effectiveIsotropicRadiatedPo"
    "werDbw\022\242\001\n\035component_propagation_loss_db"
    "\030\017 \003(\0132_.aalyria.spacetime.api.nbi.v1alp"
    "ha.resources.WirelessLinkBudget.Componen"
    "tPropagationLossDbEntryR\032componentPropag"
    "ationLossDb\022.\n\023propagation_loss_db\030\003 \001(\001"
    "R\021propagationLossDb\022\?\n\034received_isotropi"
    "c_power_dbw\030\004 \001(\001R\031receivedIsotropicPowe"
    "rDbw\022Q\n\'received_power_flux_density_db_w"
    "_per_m2\030\005 \001(\001R receivedPowerFluxDensityD"
    "bWPerM2\022X\n*receiver_antenna_gain_in_link"
    "_direction_db\030\006 \001(\001R$receiverAntennaGain"
    "InLinkDirectionDb\022>\n\034power_at_receiver_o"
    "utput_dbw\030\007 \001(\001R\030powerAtReceiverOutputDb"
    "w\022-\n\023carrier_to_noise_db\030\010 \001(\001R\020carrierT"
    "oNoiseDb\022O\n%carrier_to_noise_plus_interf"
    "erence_db\030\020 \001(\001R carrierToNoisePlusInter"
    "ferenceDb\022H\n\"carrier_to_noise_density_db"
    "_per_hz\030\t \001(\001R\034carrierToNoiseDensityDbPe"
    "rHz\032M\n\037ComponentPropagationLossDbEntry\022\020"
    "\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\001R\005value:\002"
    "8\001J\004\010\n\020\017J\010\010\021\020\200\200\200\200\002\"\276\t\n\022WirelessLinkRepor"
    "t\022B\n\003dst\030\001 \001(\01320.aalyria.spacetime.api.c"
    "ommon.TransceiverModelIdR\003dst\022&\n\017band_pr"
    "ofile_id\030\002 \001(\tR\rbandProfileId\0222\n\025center_"
    "frequencies_hz\030\003 \003(\004R\023centerFrequenciesH"
    "z\022\201\001\n\020access_intervals\030\004 \003(\0132V.aalyria.s"
    "pacetime.api.nbi.v1alpha.resources.Wirel"
    "essLinkReport.WirelessAccessIntervalR\017ac"
    "cessIntervals\032\203\007\n\026WirelessAccessInterval"
    "\022F\n\010interval\030\001 \001(\0132*.aalyria.spacetime.a"
    "pi.common.TimeIntervalR\010interval\022`\n\racce"
    "ssibility\030\002 \001(\0162:.aalyria.spacetime.api."
    "nbi.v1alpha.resources.AccessibilityR\racc"
    "essibility\022(\n\020no_access_reason\030\003 \003(\tR\016no"
    "AccessReason\022\223\001\n\017sampled_metrics\030\004 \003(\0132j"
    ".aalyria.spacetime.api.nbi.v1alpha.resou"
    "rces.WirelessLinkReport.WirelessAccessIn"
    "terval.WirelessLinkMetricsR\016sampledMetri"
    "cs\032\376\003\n\023WirelessLinkMetrics\022D\n\ttimestamp\030"
    "\001 \001(\0132&.aalyria.spacetime.api.common.Dat"
    "eTimeR\ttimestamp\022S\n\021propagation_delay\030\002 "
    "\001(\0132&.aalyria.spacetime.api.common.Durat"
    "ionR\020propagationDelay\022U\n\017pointing_vector"
    "\030\003 \001(\0132,.aalyria.spacetime.api.common.Po"
    "intingVectorR\016pointingVector\022\027\n\007range_m\030"
    "\004 \001(\001R\006rangeM\022\"\n\rdata_rate_bps\030\006 \001(\001R\013da"
    "taRateBps\022^\n-transmitter_antenna_gain_in"
    "_link_direction_db\030\007 \001(\001R\'transmitterAnt"
    "ennaGainInLinkDirectionDb\022X\n*receiver_an"
    "tenna_gain_in_link_direction_db\030\010 \001(\001R$r"
    "eceiverAntennaGainInLinkDirectionDb\"\325\004\n\023"
    "InterfaceLinkReport\022B\n\003src\030\004 \001(\01320.aalyr"
    "ia.spacetime.api.common.NetworkInterface"
    "IdR\003src\022B\n\003dst\030\005 \001(\01320.aalyria.spacetime"
    ".api.common.NetworkInterfaceIdR\003dst\022z\n\020a"
    "ccess_intervals\030\006 \003(\0132O.aalyria.spacetim"
    "e.api.nbi.v1alpha.resources.InterfaceLin"
    "kReport.AccessIntervalR\017accessIntervals\032"
    "\247\002\n\016AccessInterval\022F\n\010interval\030\001 \001(\0132*.a"
    "alyria.spacetime.api.common.TimeInterval"
    "R\010interval\022`\n\raccessibility\030\002 \001(\0162:.aaly"
    "ria.spacetime.api.nbi.v1alpha.resources."
    "AccessibilityR\raccessibility\022G\n\013frame_de"
    "lay\030\003 \001(\0132&.aalyria.spacetime.api.common"
    ".DurationR\nframeDelay\022\"\n\rdata_rate_bps\030\004"
    " \001(\001R\013dataRateBpsJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004\"\262\001\n\025"
    "TransceiverLinkReport\022B\n\003src\030\001 \001(\01320.aal"
    "yria.spacetime.api.common.TransceiverMod"
    "elIdR\003src\022U\n\005links\030\002 \003(\0132\?.aalyria.space"
    "time.api.nbi.v1alpha.resources.WirelessL"
    "inkReportR\005links*Z\n\rAccessibility\022\022\n\016ACC"
    "ESS_UNKNOWN\020\000\022\021\n\rACCESS_EXISTS\020\001\022\023\n\017ACCE"
    "SS_MARGINAL\020\003\022\r\n\tNO_ACCESS\020\002Bb\n/com.aaly"
    "ria.spacetime.api.nbi.v1alpha.resourcesZ"
    "/aalyria.com/spacetime/api/nbi/v1alpha/r"
    "esources"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_deps[5] =
    {
        &::descriptor_table_api_2fcommon_2fcontrol_5fradio_2eproto,
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2fnetwork_2eproto,
        &::descriptor_table_api_2fcommon_2ftime_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5ftransceiver_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto = {
    false,
    false,
    4968,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto,
    "api/nbi/v1alpha/resources/network_link.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_deps,
    5,
    15,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accessibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto);
  return file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[0];
}
bool Accessibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class NetworkLink::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkLink>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkLink, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& src(const NetworkLink* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& dst(const NetworkLink* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
NetworkLink::_Internal::src(const NetworkLink* msg) {
  return *msg->_impl_.src_;
}
const ::aalyria::spacetime::api::common::NetworkInterfaceId&
NetworkLink::_Internal::dst(const NetworkLink* msg) {
  return *msg->_impl_.dst_;
}
void NetworkLink::clear_src() {
  if (_impl_.src_ != nullptr) _impl_.src_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NetworkLink::clear_dst() {
  if (_impl_.dst_ != nullptr) _impl_.dst_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NetworkLink::NetworkLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
}
NetworkLink::NetworkLink(const NetworkLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.src_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.src_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dst_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.dst_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
}

inline void NetworkLink::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
  };
}

NetworkLink::~NetworkLink() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkLink::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.src_;
  if (this != internal_default_instance()) delete _impl_.dst_;
}

void NetworkLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkLink::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.src_ != nullptr);
      _impl_.src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dst_ != nullptr);
      _impl_.dst_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 3 [json_name = "src"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 4 [json_name = "dst"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkLink::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 3 [json_name = "src"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::src(this),
        _Internal::src(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 4 [json_name = "dst"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dst(this),
        _Internal::dst(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  return target;
}

::size_t NetworkLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 3 [json_name = "src"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.src_);
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 4 [json_name = "dst"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkLink::GetClassData() const { return &_class_data_; }


void NetworkLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkLink*>(&to_msg);
  auto& from = static_cast<const NetworkLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_src()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_dst());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkLink::CopyFrom(const NetworkLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.NetworkLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkLink::IsInitialized() const {
  return true;
}

void NetworkLink::InternalSwap(NetworkLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkLink, _impl_.dst_)
      + sizeof(NetworkLink::_impl_.dst_)
      - PROTOBUF_FIELD_OFFSET(NetworkLink, _impl_.src_)>(
          reinterpret_cast<char*>(&_impl_.src_),
          reinterpret_cast<char*>(&other->_impl_.src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[0]);
}
// ===================================================================

class RadioConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioConfiguration, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& interface_id(const RadioConfiguration* msg);
  static void set_has_interface_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::TransmitterState& tx_state(const RadioConfiguration* msg);
  static void set_has_tx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::common::ReceiverState& rx_state(const RadioConfiguration* msg);
  static void set_has_rx_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rate_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::TdmaSchedule& tdma_schedule(const RadioConfiguration* msg);
  static void set_has_tdma_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
RadioConfiguration::_Internal::interface_id(const RadioConfiguration* msg) {
  return *msg->_impl_.interface_id_;
}
const ::aalyria::spacetime::api::common::TransmitterState&
RadioConfiguration::_Internal::tx_state(const RadioConfiguration* msg) {
  return *msg->_impl_.tx_state_;
}
const ::aalyria::spacetime::api::common::ReceiverState&
RadioConfiguration::_Internal::rx_state(const RadioConfiguration* msg) {
  return *msg->_impl_.rx_state_;
}
const ::aalyria::spacetime::api::common::TdmaSchedule&
RadioConfiguration::_Internal::tdma_schedule(const RadioConfiguration* msg) {
  return *msg->_impl_.tdma_schedule_;
}
void RadioConfiguration::clear_interface_id() {
  if (_impl_.interface_id_ != nullptr) _impl_.interface_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RadioConfiguration::clear_tx_state() {
  if (_impl_.tx_state_ != nullptr) _impl_.tx_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RadioConfiguration::clear_rx_state() {
  if (_impl_.rx_state_ != nullptr) _impl_.rx_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RadioConfiguration::clear_tdma_schedule() {
  if (_impl_.tdma_schedule_ != nullptr) _impl_.tdma_schedule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
RadioConfiguration::RadioConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
}
RadioConfiguration::RadioConfiguration(const RadioConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_table_id_) {}

    , decltype(_impl_.interface_id_){nullptr}
    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rate_table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_table_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rate_table_id_.Set(from._internal_rate_table_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interface_id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.interface_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.tx_state_ = new ::aalyria::spacetime::api::common::TransmitterState(*from._impl_.tx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.rx_state_ = new ::aalyria::spacetime::api::common::ReceiverState(*from._impl_.rx_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.tdma_schedule_ = new ::aalyria::spacetime::api::common::TdmaSchedule(*from._impl_.tdma_schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
}

inline void RadioConfiguration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rate_table_id_) {}

    , decltype(_impl_.interface_id_){nullptr}
    , decltype(_impl_.tx_state_){nullptr}
    , decltype(_impl_.rx_state_){nullptr}
    , decltype(_impl_.tdma_schedule_){nullptr}
  };
  _impl_.rate_table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_table_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadioConfiguration::~RadioConfiguration() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rate_table_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interface_id_;
  if (this != internal_default_instance()) delete _impl_.tx_state_;
  if (this != internal_default_instance()) delete _impl_.rx_state_;
  if (this != internal_default_instance()) delete _impl_.tdma_schedule_;
}

void RadioConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rate_table_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interface_id_ != nullptr);
      _impl_.interface_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tx_state_ != nullptr);
      _impl_.tx_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rx_state_ != nullptr);
      _impl_.rx_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.tdma_schedule_ != nullptr);
      _impl_.tdma_schedule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 1 [json_name = "interfaceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 2 [json_name = "txState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 3 [json_name = "rxState"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 4 [json_name = "tdmaSchedule"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdma_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rate_table_id = 5 [json_name = "rateTableId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rate_table_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration.rate_table_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioConfiguration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 1 [json_name = "interfaceId"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interface_id(this),
        _Internal::interface_id(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 2 [json_name = "txState"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tx_state(this),
        _Internal::tx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 3 [json_name = "rxState"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rx_state(this),
        _Internal::rx_state(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 4 [json_name = "tdmaSchedule"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tdma_schedule(this),
        _Internal::tdma_schedule(this).GetCachedSize(), target, stream);
  }

  // optional string rate_table_id = 5 [json_name = "rateTableId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rate_table_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration.rate_table_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  return target;
}

::size_t RadioConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rate_table_id = 5 [json_name = "rateTableId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rate_table_id());
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId interface_id = 1 [json_name = "interfaceId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interface_id_);
    }

    // optional .aalyria.spacetime.api.common.TransmitterState tx_state = 2 [json_name = "txState"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_state_);
    }

    // optional .aalyria.spacetime.api.common.ReceiverState rx_state = 3 [json_name = "rxState"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rx_state_);
    }

    // optional .aalyria.spacetime.api.common.TdmaSchedule tdma_schedule = 4 [json_name = "tdmaSchedule"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tdma_schedule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioConfiguration::GetClassData() const { return &_class_data_; }


void RadioConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioConfiguration*>(&to_msg);
  auto& from = static_cast<const RadioConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rate_table_id(from._internal_rate_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interface_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_interface_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tx_state()->::aalyria::spacetime::api::common::TransmitterState::MergeFrom(
          from._internal_tx_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rx_state()->::aalyria::spacetime::api::common::ReceiverState::MergeFrom(
          from._internal_rx_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tdma_schedule()->::aalyria::spacetime::api::common::TdmaSchedule::MergeFrom(
          from._internal_tdma_schedule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioConfiguration::CopyFrom(const RadioConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.RadioConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioConfiguration::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!_impl_.tdma_schedule_->IsInitialized()) return false;
  }
  return true;
}

void RadioConfiguration::InternalSwap(RadioConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rate_table_id_, lhs_arena,
                                       &other->_impl_.rate_table_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioConfiguration, _impl_.tdma_schedule_)
      + sizeof(RadioConfiguration::_impl_.tdma_schedule_)
      - PROTOBUF_FIELD_OFFSET(RadioConfiguration, _impl_.interface_id_)>(
          reinterpret_cast<char*>(&_impl_.interface_id_),
          reinterpret_cast<char*>(&other->_impl_.interface_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[1]);
}
// ===================================================================

class Radio::_Internal {
 public:
  using HasBits = decltype(std::declval<Radio>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Radio, _impl_._has_bits_);
  static void set_has_center_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_band_profile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Radio::Radio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
}
Radio::Radio(const Radio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Radio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.center_frequency_hz_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.band_profile_id_.Set(from._internal_band_profile_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
}

inline void Radio::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.center_frequency_hz_) { ::uint64_t{0u} }

  };
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Radio::~Radio() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Radio::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.band_profile_id_.Destroy();
}

void Radio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Radio::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.band_profile_id_.ClearNonDefaultToEmpty();
  }
  _impl_.center_frequency_hz_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Radio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_center_frequency_hz(&has_bits);
          _impl_.center_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string band_profile_id = 2 [json_name = "bandProfileId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_band_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.Radio.band_profile_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Radio::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_center_frequency_hz(), target);
  }

  // optional string band_profile_id = 2 [json_name = "bandProfileId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_band_profile_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.Radio.band_profile_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  return target;
}

::size_t Radio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string band_profile_id = 2 [json_name = "bandProfileId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_band_profile_id());
    }

    // optional uint64 center_frequency_hz = 1 [json_name = "centerFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_center_frequency_hz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Radio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Radio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Radio::GetClassData() const { return &_class_data_; }


void Radio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Radio*>(&to_msg);
  auto& from = static_cast<const Radio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_band_profile_id(from._internal_band_profile_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.center_frequency_hz_ = from._impl_.center_frequency_hz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Radio::CopyFrom(const Radio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.Radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radio::IsInitialized() const {
  return true;
}

void Radio::InternalSwap(Radio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.band_profile_id_, lhs_arena,
                                       &other->_impl_.band_profile_id_, rhs_arena);

  swap(_impl_.center_frequency_hz_, other->_impl_.center_frequency_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Radio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[2]);
}
// ===================================================================

class LinkEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkEnd>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LinkEnd, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& id(const LinkEnd* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
LinkEnd::_Internal::id(const LinkEnd* msg) {
  return *msg->_impl_.id_;
}
void LinkEnd::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LinkEnd::LinkEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
}
LinkEnd::LinkEnd(const LinkEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
}

inline void LinkEnd::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
  };
}

LinkEnd::~LinkEnd() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkEnd::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
}

void LinkEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.id_ != nullptr);
    _impl_.id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LinkEnd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 3 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  return target;
}

::size_t LinkEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 3 [json_name = "id"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkEnd::GetClassData() const { return &_class_data_; }


void LinkEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkEnd*>(&to_msg);
  auto& from = static_cast<const LinkEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkEnd::CopyFrom(const LinkEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkEnd::IsInitialized() const {
  return true;
}

void LinkEnd::InternalSwap(LinkEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[3]);
}
// ===================================================================

class BeamTarget::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::TransceiverModelId& transceiver_id(const BeamTarget* msg);
  static const ::aalyria::spacetime::api::common::Motion& coordinates(const BeamTarget* msg);
};

const ::aalyria::spacetime::api::common::TransceiverModelId&
BeamTarget::_Internal::transceiver_id(const BeamTarget* msg) {
  return *msg->_impl_.type_.transceiver_id_;
}
const ::aalyria::spacetime::api::common::Motion&
BeamTarget::_Internal::coordinates(const BeamTarget* msg) {
  return *msg->_impl_.type_.coordinates_;
}
void BeamTarget::set_allocated_transceiver_id(::aalyria::spacetime::api::common::TransceiverModelId* transceiver_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (transceiver_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transceiver_id));
    if (message_arena != submessage_arena) {
      transceiver_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transceiver_id, submessage_arena);
    }
    set_has_transceiver_id();
    _impl_.type_.transceiver_id_ = transceiver_id;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget.transceiver_id)
}
void BeamTarget::clear_transceiver_id() {
  if (type_case() == kTransceiverId) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.transceiver_id_;
    }
    clear_has_type();
  }
}
void BeamTarget::set_allocated_coordinates(::aalyria::spacetime::api::common::Motion* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates));
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    set_has_coordinates();
    _impl_.type_.coordinates_ = coordinates;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget.coordinates)
}
void BeamTarget::clear_coordinates() {
  if (type_case() == kCoordinates) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.coordinates_;
    }
    clear_has_type();
  }
}
BeamTarget::BeamTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
}
BeamTarget::BeamTarget(const BeamTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BeamTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTransceiverId: {
      _this->_internal_mutable_transceiver_id()->::aalyria::spacetime::api::common::TransceiverModelId::MergeFrom(
          from._internal_transceiver_id());
      break;
    }
    case kCoordinates: {
      _this->_internal_mutable_coordinates()->::aalyria::spacetime::api::common::Motion::MergeFrom(
          from._internal_coordinates());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
}

inline void BeamTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

BeamTarget::~BeamTarget() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeamTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void BeamTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeamTarget::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  switch (type_case()) {
    case kTransceiverId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.transceiver_id_;
      }
      break;
    }
    case kCoordinates: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.coordinates_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void BeamTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeamTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.TransceiverModelId transceiver_id = 1 [json_name = "transceiverId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transceiver_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.Motion coordinates = 2 [json_name = "coordinates"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BeamTarget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kTransceiverId: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::transceiver_id(this),
          _Internal::transceiver_id(this).GetCachedSize(), target, stream);
      break;
    }
    case kCoordinates: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::coordinates(this),
          _Internal::coordinates(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  return target;
}

::size_t BeamTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .aalyria.spacetime.api.common.TransceiverModelId transceiver_id = 1 [json_name = "transceiverId"];
    case kTransceiverId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.transceiver_id_);
      break;
    }
    // .aalyria.spacetime.api.common.Motion coordinates = 2 [json_name = "coordinates"];
    case kCoordinates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.coordinates_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeamTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BeamTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeamTarget::GetClassData() const { return &_class_data_; }


void BeamTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BeamTarget*>(&to_msg);
  auto& from = static_cast<const BeamTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTransceiverId: {
      _this->_internal_mutable_transceiver_id()->::aalyria::spacetime::api::common::TransceiverModelId::MergeFrom(
          from._internal_transceiver_id());
      break;
    }
    case kCoordinates: {
      _this->_internal_mutable_coordinates()->::aalyria::spacetime::api::common::Motion::MergeFrom(
          from._internal_coordinates());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeamTarget::CopyFrom(const BeamTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamTarget::IsInitialized() const {
  switch (type_case()) {
    case kTransceiverId: {
      break;
    }
    case kCoordinates: {
      if (type_case() == kCoordinates) {
        if (!_impl_.type_.coordinates_->IsInitialized()) return false;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void BeamTarget::InternalSwap(BeamTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeamTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[4]);
}
// ===================================================================

class BidirectionalLink::_Internal {
 public:
  using HasBits = decltype(std::declval<BidirectionalLink>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BidirectionalLink, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd& a(const BidirectionalLink* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd& b(const BidirectionalLink* msg);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio& a_to_b_radio(const BidirectionalLink* msg);
  static void set_has_a_to_b_radio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio& b_to_a_radio(const BidirectionalLink* msg);
  static void set_has_b_to_a_radio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd&
BidirectionalLink::_Internal::a(const BidirectionalLink* msg) {
  return *msg->_impl_.a_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd&
BidirectionalLink::_Internal::b(const BidirectionalLink* msg) {
  return *msg->_impl_.b_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio&
BidirectionalLink::_Internal::a_to_b_radio(const BidirectionalLink* msg) {
  return *msg->_impl_.a_to_b_radio_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio&
BidirectionalLink::_Internal::b_to_a_radio(const BidirectionalLink* msg) {
  return *msg->_impl_.b_to_a_radio_;
}
BidirectionalLink::BidirectionalLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
}
BidirectionalLink::BidirectionalLink(const BidirectionalLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BidirectionalLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){nullptr}
    , decltype(_impl_.b_){nullptr}
    , decltype(_impl_.a_to_b_radio_){nullptr}
    , decltype(_impl_.b_to_a_radio_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.a_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd(*from._impl_.a_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.b_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd(*from._impl_.b_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.a_to_b_radio_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio(*from._impl_.a_to_b_radio_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.b_to_a_radio_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio(*from._impl_.b_to_a_radio_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
}

inline void BidirectionalLink::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){nullptr}
    , decltype(_impl_.b_){nullptr}
    , decltype(_impl_.a_to_b_radio_){nullptr}
    , decltype(_impl_.b_to_a_radio_){nullptr}
  };
}

BidirectionalLink::~BidirectionalLink() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BidirectionalLink::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.a_;
  if (this != internal_default_instance()) delete _impl_.b_;
  if (this != internal_default_instance()) delete _impl_.a_to_b_radio_;
  if (this != internal_default_instance()) delete _impl_.b_to_a_radio_;
}

void BidirectionalLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BidirectionalLink::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.a_ != nullptr);
      _impl_.a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.b_ != nullptr);
      _impl_.b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.a_to_b_radio_ != nullptr);
      _impl_.a_to_b_radio_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.b_to_a_radio_ != nullptr);
      _impl_.b_to_a_radio_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BidirectionalLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd a = 1 [json_name = "a"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd b = 2 [json_name = "b"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio a_to_b_radio = 3 [json_name = "aToBRadio"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_to_b_radio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio b_to_a_radio = 4 [json_name = "bToARadio"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_b_to_a_radio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BidirectionalLink::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd a = 1 [json_name = "a"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd b = 2 [json_name = "b"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::b(this),
        _Internal::b(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio a_to_b_radio = 3 [json_name = "aToBRadio"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::a_to_b_radio(this),
        _Internal::a_to_b_radio(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio b_to_a_radio = 4 [json_name = "bToARadio"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::b_to_a_radio(this),
        _Internal::b_to_a_radio(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  return target;
}

::size_t BidirectionalLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd a = 1 [json_name = "a"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.a_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.LinkEnd b = 2 [json_name = "b"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.b_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio a_to_b_radio = 3 [json_name = "aToBRadio"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.a_to_b_radio_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio b_to_a_radio = 4 [json_name = "bToARadio"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.b_to_a_radio_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BidirectionalLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BidirectionalLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BidirectionalLink::GetClassData() const { return &_class_data_; }


void BidirectionalLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BidirectionalLink*>(&to_msg);
  auto& from = static_cast<const BidirectionalLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_a()->::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd::MergeFrom(
          from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_b()->::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd::MergeFrom(
          from._internal_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_a_to_b_radio()->::aalyria::spacetime::api::nbi::v1alpha::resources::Radio::MergeFrom(
          from._internal_a_to_b_radio());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_b_to_a_radio()->::aalyria::spacetime::api::nbi::v1alpha::resources::Radio::MergeFrom(
          from._internal_b_to_a_radio());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BidirectionalLink::CopyFrom(const BidirectionalLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.BidirectionalLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidirectionalLink::IsInitialized() const {
  return true;
}

void BidirectionalLink::InternalSwap(BidirectionalLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BidirectionalLink, _impl_.b_to_a_radio_)
      + sizeof(BidirectionalLink::_impl_.b_to_a_radio_)
      - PROTOBUF_FIELD_OFFSET(BidirectionalLink, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BidirectionalLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[5]);
}
// ===================================================================

class DirectionalLink::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionalLink>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DirectionalLink, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& id(const DirectionalLink* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio& radio_configuration(const DirectionalLink* msg);
  static void set_has_radio_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget& target(const DirectionalLink* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
DirectionalLink::_Internal::id(const DirectionalLink* msg) {
  return *msg->_impl_.id_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio&
DirectionalLink::_Internal::radio_configuration(const DirectionalLink* msg) {
  return *msg->_impl_.radio_configuration_;
}
const ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget&
DirectionalLink::_Internal::target(const DirectionalLink* msg) {
  return *msg->_impl_.target_;
}
void DirectionalLink::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DirectionalLink::DirectionalLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
}
DirectionalLink::DirectionalLink(const DirectionalLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectionalLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.radio_configuration_){nullptr}
    , decltype(_impl_.target_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.radio_configuration_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio(*from._impl_.radio_configuration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.target_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
}

inline void DirectionalLink::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.radio_configuration_){nullptr}
    , decltype(_impl_.target_){nullptr}
  };
}

DirectionalLink::~DirectionalLink() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectionalLink::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.radio_configuration_;
  if (this != internal_default_instance()) delete _impl_.target_;
}

void DirectionalLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectionalLink::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.radio_configuration_ != nullptr);
      _impl_.radio_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionalLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio radio_configuration = 2 [json_name = "radioConfiguration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_configuration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget target = 3 [json_name = "target"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DirectionalLink::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio radio_configuration = 2 [json_name = "radioConfiguration"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::radio_configuration(this),
        _Internal::radio_configuration(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget target = 3 [json_name = "target"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  return target;
}

::size_t DirectionalLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .aalyria.spacetime.api.common.NetworkInterfaceId id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Radio radio_configuration = 2 [json_name = "radioConfiguration"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radio_configuration_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.BeamTarget target = 3 [json_name = "target"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectionalLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectionalLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectionalLink::GetClassData() const { return &_class_data_; }


void DirectionalLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectionalLink*>(&to_msg);
  auto& from = static_cast<const DirectionalLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_radio_configuration()->::aalyria::spacetime::api::nbi::v1alpha::resources::Radio::MergeFrom(
          from._internal_radio_configuration());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target()->::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget::MergeFrom(
          from._internal_target());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectionalLink::CopyFrom(const DirectionalLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.DirectionalLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionalLink::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.target_->IsInitialized()) return false;
  }
  return true;
}

void DirectionalLink::InternalSwap(DirectionalLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionalLink, _impl_.target_)
      + sizeof(DirectionalLink::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(DirectionalLink, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionalLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[6]);
}
// ===================================================================

WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse() {}
WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::MergeFrom(const WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[7]);
}
// ===================================================================

class WirelessLinkBudget::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessLinkBudget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessLinkBudget, _impl_._has_bits_);
  static void set_has_transmitter_antenna_gain_in_link_direction_db(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effective_isotropic_radiated_power_dbw(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_propagation_loss_db(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_received_isotropic_power_dbw(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_received_power_flux_density_db_w_per_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_receiver_antenna_gain_in_link_direction_db(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_power_at_receiver_output_dbw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_carrier_to_noise_db(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_carrier_to_noise_plus_interference_db(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_carrier_to_noise_density_db_per_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

WirelessLinkBudget::WirelessLinkBudget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
}
WirelessLinkBudget::WirelessLinkBudget(const WirelessLinkBudget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessLinkBudget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.component_propagation_loss_db_)*/{}
    , decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_) {}

    , decltype(_impl_.effective_isotropic_radiated_power_dbw_) {}

    , decltype(_impl_.propagation_loss_db_) {}

    , decltype(_impl_.received_isotropic_power_dbw_) {}

    , decltype(_impl_.received_power_flux_density_db_w_per_m2_) {}

    , decltype(_impl_.receiver_antenna_gain_in_link_direction_db_) {}

    , decltype(_impl_.power_at_receiver_output_dbw_) {}

    , decltype(_impl_.carrier_to_noise_db_) {}

    , decltype(_impl_.carrier_to_noise_density_db_per_hz_) {}

    , decltype(_impl_.carrier_to_noise_plus_interference_db_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.component_propagation_loss_db_.MergeFrom(from._impl_.component_propagation_loss_db_);
  ::memcpy(&_impl_.transmitter_antenna_gain_in_link_direction_db_, &from._impl_.transmitter_antenna_gain_in_link_direction_db_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.carrier_to_noise_plus_interference_db_) -
    reinterpret_cast<char*>(&_impl_.transmitter_antenna_gain_in_link_direction_db_)) + sizeof(_impl_.carrier_to_noise_plus_interference_db_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
}

inline void WirelessLinkBudget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.component_propagation_loss_db_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_) { 0 }

    , decltype(_impl_.effective_isotropic_radiated_power_dbw_) { 0 }

    , decltype(_impl_.propagation_loss_db_) { 0 }

    , decltype(_impl_.received_isotropic_power_dbw_) { 0 }

    , decltype(_impl_.received_power_flux_density_db_w_per_m2_) { 0 }

    , decltype(_impl_.receiver_antenna_gain_in_link_direction_db_) { 0 }

    , decltype(_impl_.power_at_receiver_output_dbw_) { 0 }

    , decltype(_impl_.carrier_to_noise_db_) { 0 }

    , decltype(_impl_.carrier_to_noise_density_db_per_hz_) { 0 }

    , decltype(_impl_.carrier_to_noise_plus_interference_db_) { 0 }

  };
}

WirelessLinkBudget::~WirelessLinkBudget() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessLinkBudget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_propagation_loss_db_.~MapField();
}

void WirelessLinkBudget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessLinkBudget::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_propagation_loss_db_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.transmitter_antenna_gain_in_link_direction_db_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.carrier_to_noise_db_) -
        reinterpret_cast<char*>(&_impl_.transmitter_antenna_gain_in_link_direction_db_)) + sizeof(_impl_.carrier_to_noise_db_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.carrier_to_noise_density_db_per_hz_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.carrier_to_noise_plus_interference_db_) -
        reinterpret_cast<char*>(&_impl_.carrier_to_noise_density_db_per_hz_)) + sizeof(_impl_.carrier_to_noise_plus_interference_db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessLinkBudget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double transmitter_antenna_gain_in_link_direction_db = 1 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_transmitter_antenna_gain_in_link_direction_db(&has_bits);
          _impl_.transmitter_antenna_gain_in_link_direction_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double effective_isotropic_radiated_power_dbw = 2 [json_name = "effectiveIsotropicRadiatedPowerDbw"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_effective_isotropic_radiated_power_dbw(&has_bits);
          _impl_.effective_isotropic_radiated_power_dbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double propagation_loss_db = 3 [json_name = "propagationLossDb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_propagation_loss_db(&has_bits);
          _impl_.propagation_loss_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double received_isotropic_power_dbw = 4 [json_name = "receivedIsotropicPowerDbw"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_received_isotropic_power_dbw(&has_bits);
          _impl_.received_isotropic_power_dbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double received_power_flux_density_db_w_per_m2 = 5 [json_name = "receivedPowerFluxDensityDbWPerM2"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_received_power_flux_density_db_w_per_m2(&has_bits);
          _impl_.received_power_flux_density_db_w_per_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double receiver_antenna_gain_in_link_direction_db = 6 [json_name = "receiverAntennaGainInLinkDirectionDb"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_receiver_antenna_gain_in_link_direction_db(&has_bits);
          _impl_.receiver_antenna_gain_in_link_direction_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double power_at_receiver_output_dbw = 7 [json_name = "powerAtReceiverOutputDbw"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_power_at_receiver_output_dbw(&has_bits);
          _impl_.power_at_receiver_output_dbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double carrier_to_noise_db = 8 [json_name = "carrierToNoiseDb"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _Internal::set_has_carrier_to_noise_db(&has_bits);
          _impl_.carrier_to_noise_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double carrier_to_noise_density_db_per_hz = 9 [json_name = "carrierToNoiseDensityDbPerHz"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 73)) {
          _Internal::set_has_carrier_to_noise_density_db_per_hz(&has_bits);
          _impl_.carrier_to_noise_density_db_per_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, double> component_propagation_loss_db = 15 [json_name = "componentPropagationLossDb"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.component_propagation_loss_db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double carrier_to_noise_plus_interference_db = 16 [json_name = "carrierToNoisePlusInterferenceDb"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 129)) {
          _Internal::set_has_carrier_to_noise_plus_interference_db(&has_bits);
          _impl_.carrier_to_noise_plus_interference_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessLinkBudget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double transmitter_antenna_gain_in_link_direction_db = 1 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_transmitter_antenna_gain_in_link_direction_db(), target);
  }

  // optional double effective_isotropic_radiated_power_dbw = 2 [json_name = "effectiveIsotropicRadiatedPowerDbw"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_effective_isotropic_radiated_power_dbw(), target);
  }

  // optional double propagation_loss_db = 3 [json_name = "propagationLossDb"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_propagation_loss_db(), target);
  }

  // optional double received_isotropic_power_dbw = 4 [json_name = "receivedIsotropicPowerDbw"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_received_isotropic_power_dbw(), target);
  }

  // optional double received_power_flux_density_db_w_per_m2 = 5 [json_name = "receivedPowerFluxDensityDbWPerM2"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_received_power_flux_density_db_w_per_m2(), target);
  }

  // optional double receiver_antenna_gain_in_link_direction_db = 6 [json_name = "receiverAntennaGainInLinkDirectionDb"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_receiver_antenna_gain_in_link_direction_db(), target);
  }

  // optional double power_at_receiver_output_dbw = 7 [json_name = "powerAtReceiverOutputDbw"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_power_at_receiver_output_dbw(), target);
  }

  // optional double carrier_to_noise_db = 8 [json_name = "carrierToNoiseDb"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_carrier_to_noise_db(), target);
  }

  // optional double carrier_to_noise_density_db_per_hz = 9 [json_name = "carrierToNoiseDensityDbPerHz"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_carrier_to_noise_density_db_per_hz(), target);
  }

  // map<string, double> component_propagation_loss_db = 15 [json_name = "componentPropagationLossDb"];
  if (!this->_internal_component_propagation_loss_db().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_component_propagation_loss_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget.component_propagation_loss_db");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional double carrier_to_noise_plus_interference_db = 16 [json_name = "carrierToNoisePlusInterferenceDb"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_carrier_to_noise_plus_interference_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  return target;
}

::size_t WirelessLinkBudget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> component_propagation_loss_db = 15 [json_name = "componentPropagationLossDb"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_component_propagation_loss_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_component_propagation_loss_db().begin();
      it != this->_internal_component_propagation_loss_db().end(); ++it) {
    total_size += WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double transmitter_antenna_gain_in_link_direction_db = 1 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional double effective_isotropic_radiated_power_dbw = 2 [json_name = "effectiveIsotropicRadiatedPowerDbw"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional double propagation_loss_db = 3 [json_name = "propagationLossDb"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional double received_isotropic_power_dbw = 4 [json_name = "receivedIsotropicPowerDbw"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double received_power_flux_density_db_w_per_m2 = 5 [json_name = "receivedPowerFluxDensityDbWPerM2"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double receiver_antenna_gain_in_link_direction_db = 6 [json_name = "receiverAntennaGainInLinkDirectionDb"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional double power_at_receiver_output_dbw = 7 [json_name = "powerAtReceiverOutputDbw"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional double carrier_to_noise_db = 8 [json_name = "carrierToNoiseDb"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double carrier_to_noise_density_db_per_hz = 9 [json_name = "carrierToNoiseDensityDbPerHz"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional double carrier_to_noise_plus_interference_db = 16 [json_name = "carrierToNoisePlusInterferenceDb"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 10;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessLinkBudget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessLinkBudget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessLinkBudget::GetClassData() const { return &_class_data_; }


void WirelessLinkBudget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessLinkBudget*>(&to_msg);
  auto& from = static_cast<const WirelessLinkBudget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_propagation_loss_db_.MergeFrom(from._impl_.component_propagation_loss_db_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.transmitter_antenna_gain_in_link_direction_db_ = from._impl_.transmitter_antenna_gain_in_link_direction_db_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.effective_isotropic_radiated_power_dbw_ = from._impl_.effective_isotropic_radiated_power_dbw_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.propagation_loss_db_ = from._impl_.propagation_loss_db_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.received_isotropic_power_dbw_ = from._impl_.received_isotropic_power_dbw_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.received_power_flux_density_db_w_per_m2_ = from._impl_.received_power_flux_density_db_w_per_m2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.receiver_antenna_gain_in_link_direction_db_ = from._impl_.receiver_antenna_gain_in_link_direction_db_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.power_at_receiver_output_dbw_ = from._impl_.power_at_receiver_output_dbw_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.carrier_to_noise_db_ = from._impl_.carrier_to_noise_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.carrier_to_noise_density_db_per_hz_ = from._impl_.carrier_to_noise_density_db_per_hz_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.carrier_to_noise_plus_interference_db_ = from._impl_.carrier_to_noise_plus_interference_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessLinkBudget::CopyFrom(const WirelessLinkBudget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkBudget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessLinkBudget::IsInitialized() const {
  return true;
}

void WirelessLinkBudget::InternalSwap(WirelessLinkBudget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.component_propagation_loss_db_.InternalSwap(&other->_impl_.component_propagation_loss_db_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WirelessLinkBudget, _impl_.carrier_to_noise_plus_interference_db_)
      + sizeof(WirelessLinkBudget::_impl_.carrier_to_noise_plus_interference_db_)
      - PROTOBUF_FIELD_OFFSET(WirelessLinkBudget, _impl_.transmitter_antenna_gain_in_link_direction_db_)>(
          reinterpret_cast<char*>(&_impl_.transmitter_antenna_gain_in_link_direction_db_),
          reinterpret_cast<char*>(&other->_impl_.transmitter_antenna_gain_in_link_direction_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessLinkBudget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[8]);
}
// ===================================================================

class WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::DateTime& timestamp(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::Duration& propagation_delay(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg);
  static void set_has_propagation_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::PointingVector& pointing_vector(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg);
  static void set_has_pointing_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transmitter_antenna_gain_in_link_direction_db(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receiver_antenna_gain_in_link_direction_db(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::aalyria::spacetime::api::common::DateTime&
WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_Internal::timestamp(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg) {
  return *msg->_impl_.timestamp_;
}
const ::aalyria::spacetime::api::common::Duration&
WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_Internal::propagation_delay(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg) {
  return *msg->_impl_.propagation_delay_;
}
const ::aalyria::spacetime::api::common::PointingVector&
WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_Internal::pointing_vector(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* msg) {
  return *msg->_impl_.pointing_vector_;
}
void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::clear_propagation_delay() {
  if (_impl_.propagation_delay_ != nullptr) _impl_.propagation_delay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::clear_pointing_vector() {
  if (_impl_.pointing_vector_ != nullptr) _impl_.pointing_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
}
WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.propagation_delay_){nullptr}
    , decltype(_impl_.pointing_vector_){nullptr}
    , decltype(_impl_.range_m_) {}

    , decltype(_impl_.data_rate_bps_) {}

    , decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_) {}

    , decltype(_impl_.receiver_antenna_gain_in_link_direction_db_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::aalyria::spacetime::api::common::DateTime(*from._impl_.timestamp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.propagation_delay_ = new ::aalyria::spacetime::api::common::Duration(*from._impl_.propagation_delay_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.pointing_vector_ = new ::aalyria::spacetime::api::common::PointingVector(*from._impl_.pointing_vector_);
  }
  ::memcpy(&_impl_.range_m_, &from._impl_.range_m_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.receiver_antenna_gain_in_link_direction_db_) -
    reinterpret_cast<char*>(&_impl_.range_m_)) + sizeof(_impl_.receiver_antenna_gain_in_link_direction_db_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
}

inline void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.propagation_delay_){nullptr}
    , decltype(_impl_.pointing_vector_){nullptr}
    , decltype(_impl_.range_m_) { 0 }

    , decltype(_impl_.data_rate_bps_) { 0 }

    , decltype(_impl_.transmitter_antenna_gain_in_link_direction_db_) { 0 }

    , decltype(_impl_.receiver_antenna_gain_in_link_direction_db_) { 0 }

  };
}

WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::~WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.propagation_delay_;
  if (this != internal_default_instance()) delete _impl_.pointing_vector_;
}

void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.propagation_delay_ != nullptr);
      _impl_.propagation_delay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.pointing_vector_ != nullptr);
      _impl_.pointing_vector_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.range_m_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.receiver_antenna_gain_in_link_direction_db_) -
        reinterpret_cast<char*>(&_impl_.range_m_)) + sizeof(_impl_.receiver_antenna_gain_in_link_direction_db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.DateTime timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Duration propagation_delay = 2 [json_name = "propagationDelay"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_propagation_delay(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.PointingVector pointing_vector = 3 [json_name = "pointingVector"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointing_vector(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double range_m = 4 [json_name = "rangeM"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_range_m(&has_bits);
          _impl_.range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double data_rate_bps = 6 [json_name = "dataRateBps"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_data_rate_bps(&has_bits);
          _impl_.data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double transmitter_antenna_gain_in_link_direction_db = 7 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_transmitter_antenna_gain_in_link_direction_db(&has_bits);
          _impl_.transmitter_antenna_gain_in_link_direction_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double receiver_antenna_gain_in_link_direction_db = 8 [json_name = "receiverAntennaGainInLinkDirectionDb"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _Internal::set_has_receiver_antenna_gain_in_link_direction_db(&has_bits);
          _impl_.receiver_antenna_gain_in_link_direction_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.DateTime timestamp = 1 [json_name = "timestamp"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.Duration propagation_delay = 2 [json_name = "propagationDelay"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::propagation_delay(this),
        _Internal::propagation_delay(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.PointingVector pointing_vector = 3 [json_name = "pointingVector"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pointing_vector(this),
        _Internal::pointing_vector(this).GetCachedSize(), target, stream);
  }

  // optional double range_m = 4 [json_name = "rangeM"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_range_m(), target);
  }

  // optional double data_rate_bps = 6 [json_name = "dataRateBps"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_data_rate_bps(), target);
  }

  // optional double transmitter_antenna_gain_in_link_direction_db = 7 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_transmitter_antenna_gain_in_link_direction_db(), target);
  }

  // optional double receiver_antenna_gain_in_link_direction_db = 8 [json_name = "receiverAntennaGainInLinkDirectionDb"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_receiver_antenna_gain_in_link_direction_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  return target;
}

::size_t WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .aalyria.spacetime.api.common.DateTime timestamp = 1 [json_name = "timestamp"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional .aalyria.spacetime.api.common.Duration propagation_delay = 2 [json_name = "propagationDelay"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.propagation_delay_);
    }

    // optional .aalyria.spacetime.api.common.PointingVector pointing_vector = 3 [json_name = "pointingVector"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pointing_vector_);
    }

    // optional double range_m = 4 [json_name = "rangeM"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional double data_rate_bps = 6 [json_name = "dataRateBps"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional double transmitter_antenna_gain_in_link_direction_db = 7 [json_name = "transmitterAntennaGainInLinkDirectionDb"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional double receiver_antenna_gain_in_link_direction_db = 8 [json_name = "receiverAntennaGainInLinkDirectionDb"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::GetClassData() const { return &_class_data_; }


void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics*>(&to_msg);
  auto& from = static_cast<const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::aalyria::spacetime::api::common::DateTime::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_propagation_delay()->::aalyria::spacetime::api::common::Duration::MergeFrom(
          from._internal_propagation_delay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pointing_vector()->::aalyria::spacetime::api::common::PointingVector::MergeFrom(
          from._internal_pointing_vector());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.range_m_ = from._impl_.range_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.data_rate_bps_ = from._impl_.data_rate_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.transmitter_antenna_gain_in_link_direction_db_ = from._impl_.transmitter_antenna_gain_in_link_direction_db_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.receiver_antenna_gain_in_link_direction_db_ = from._impl_.receiver_antenna_gain_in_link_direction_db_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::CopyFrom(const WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.propagation_delay_->IsInitialized()) return false;
  }
  return true;
}

void WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::InternalSwap(WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.receiver_antenna_gain_in_link_direction_db_)
      + sizeof(WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::_impl_.receiver_antenna_gain_in_link_direction_db_)
      - PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[9]);
}
// ===================================================================

class WirelessLinkReport_WirelessAccessInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessLinkReport_WirelessAccessInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const WirelessLinkReport_WirelessAccessInterval* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
WirelessLinkReport_WirelessAccessInterval::_Internal::interval(const WirelessLinkReport_WirelessAccessInterval* msg) {
  return *msg->_impl_.interval_;
}
void WirelessLinkReport_WirelessAccessInterval::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WirelessLinkReport_WirelessAccessInterval::WirelessLinkReport_WirelessAccessInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
}
WirelessLinkReport_WirelessAccessInterval::WirelessLinkReport_WirelessAccessInterval(const WirelessLinkReport_WirelessAccessInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessLinkReport_WirelessAccessInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.no_access_reason_){from._impl_.no_access_reason_}
    , decltype(_impl_.sampled_metrics_){from._impl_.sampled_metrics_}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.accessibility_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  _this->_impl_.accessibility_ = from._impl_.accessibility_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
}

inline void WirelessLinkReport_WirelessAccessInterval::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.no_access_reason_){arena}
    , decltype(_impl_.sampled_metrics_){arena}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.accessibility_) { 0 }

  };
}

WirelessLinkReport_WirelessAccessInterval::~WirelessLinkReport_WirelessAccessInterval() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessLinkReport_WirelessAccessInterval::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_no_access_reason()->~RepeatedPtrField();
  _internal_mutable_sampled_metrics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void WirelessLinkReport_WirelessAccessInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessLinkReport_WirelessAccessInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_no_access_reason()->Clear();
  _internal_mutable_sampled_metrics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  _impl_.accessibility_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessLinkReport_WirelessAccessInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility_IsValid(static_cast<int>(val)))) {
            _internal_set_accessibility(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string no_access_reason = 3 [json_name = "noAccessReason"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_no_access_reason();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.no_access_reason");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics sampled_metrics = 4 [json_name = "sampledMetrics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sampled_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessLinkReport_WirelessAccessInterval::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_accessibility(), target);
  }

  // repeated string no_access_reason = 3 [json_name = "noAccessReason"];
  for (int i = 0, n = this->_internal_no_access_reason_size(); i < n; ++i) {
    const auto& s = this->_internal_no_access_reason(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.no_access_reason");
    target = stream->WriteString(3, s, target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics sampled_metrics = 4 [json_name = "sampledMetrics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sampled_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_sampled_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  return target;
}

::size_t WirelessLinkReport_WirelessAccessInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string no_access_reason = 3 [json_name = "noAccessReason"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_no_access_reason().size());
  for (int i = 0, n = _internal_no_access_reason().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_no_access_reason().Get(i));
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval.WirelessLinkMetrics sampled_metrics = 4 [json_name = "sampledMetrics"];
  total_size += 1UL * this->_internal_sampled_metrics_size();
  for (const auto& msg : this->_internal_sampled_metrics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_accessibility());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessLinkReport_WirelessAccessInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessLinkReport_WirelessAccessInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessLinkReport_WirelessAccessInterval::GetClassData() const { return &_class_data_; }


void WirelessLinkReport_WirelessAccessInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessLinkReport_WirelessAccessInterval*>(&to_msg);
  auto& from = static_cast<const WirelessLinkReport_WirelessAccessInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_no_access_reason()->MergeFrom(from._internal_no_access_reason());
  _this->_internal_mutable_sampled_metrics()->MergeFrom(from._internal_sampled_metrics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accessibility_ = from._impl_.accessibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessLinkReport_WirelessAccessInterval::CopyFrom(const WirelessLinkReport_WirelessAccessInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessLinkReport_WirelessAccessInterval::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_sampled_metrics()))
    return false;
  return true;
}

void WirelessLinkReport_WirelessAccessInterval::InternalSwap(WirelessLinkReport_WirelessAccessInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_no_access_reason()->InternalSwap(
      other->_internal_mutable_no_access_reason());
  _internal_mutable_sampled_metrics()->InternalSwap(other->_internal_mutable_sampled_metrics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval, _impl_.accessibility_)
      + sizeof(WirelessLinkReport_WirelessAccessInterval::_impl_.accessibility_)
      - PROTOBUF_FIELD_OFFSET(WirelessLinkReport_WirelessAccessInterval, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessLinkReport_WirelessAccessInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[10]);
}
// ===================================================================

class WirelessLinkReport::_Internal {
 public:
  using HasBits = decltype(std::declval<WirelessLinkReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WirelessLinkReport, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TransceiverModelId& dst(const WirelessLinkReport* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_band_profile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::TransceiverModelId&
WirelessLinkReport::_Internal::dst(const WirelessLinkReport* msg) {
  return *msg->_impl_.dst_;
}
void WirelessLinkReport::clear_dst() {
  if (_impl_.dst_ != nullptr) _impl_.dst_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WirelessLinkReport::WirelessLinkReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
}
WirelessLinkReport::WirelessLinkReport(const WirelessLinkReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WirelessLinkReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_frequencies_hz_) { from._impl_.center_frequencies_hz_ }

    , decltype(_impl_.access_intervals_){from._impl_.access_intervals_}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.dst_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.band_profile_id_.Set(from._internal_band_profile_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dst_ = new ::aalyria::spacetime::api::common::TransceiverModelId(*from._impl_.dst_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
}

inline void WirelessLinkReport::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_frequencies_hz_) { arena }

    , decltype(_impl_.access_intervals_){arena}
    , decltype(_impl_.band_profile_id_) {}

    , decltype(_impl_.dst_){nullptr}
  };
  _impl_.band_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.band_profile_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WirelessLinkReport::~WirelessLinkReport() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WirelessLinkReport::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.center_frequencies_hz_.~RepeatedField();
  _internal_mutable_access_intervals()->~RepeatedPtrField();
  _impl_.band_profile_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dst_;
}

void WirelessLinkReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WirelessLinkReport::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_center_frequencies_hz()->Clear();
  _internal_mutable_access_intervals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.band_profile_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dst_ != nullptr);
      _impl_.dst_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WirelessLinkReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TransceiverModelId dst = 1 [json_name = "dst"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string band_profile_id = 2 [json_name = "bandProfileId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_band_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.band_profile_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 center_frequencies_hz = 3 [json_name = "centerFrequenciesHz"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_center_frequencies_hz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_center_frequencies_hz(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval access_intervals = 4 [json_name = "accessIntervals"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WirelessLinkReport::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TransceiverModelId dst = 1 [json_name = "dst"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dst(this),
        _Internal::dst(this).GetCachedSize(), target, stream);
  }

  // optional string band_profile_id = 2 [json_name = "bandProfileId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_band_profile_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.band_profile_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 center_frequencies_hz = 3 [json_name = "centerFrequenciesHz"];
  for (int i = 0, n = this->_internal_center_frequencies_hz_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_center_frequencies_hz(i), target);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval access_intervals = 4 [json_name = "accessIntervals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_access_intervals_size()); i < n; i++) {
    const auto& repfield = this->_internal_access_intervals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  return target;
}

::size_t WirelessLinkReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 center_frequencies_hz = 3 [json_name = "centerFrequenciesHz"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_center_frequencies_hz())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_center_frequencies_hz_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport.WirelessAccessInterval access_intervals = 4 [json_name = "accessIntervals"];
  total_size += 1UL * this->_internal_access_intervals_size();
  for (const auto& msg : this->_internal_access_intervals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string band_profile_id = 2 [json_name = "bandProfileId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_band_profile_id());
    }

    // optional .aalyria.spacetime.api.common.TransceiverModelId dst = 1 [json_name = "dst"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WirelessLinkReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WirelessLinkReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WirelessLinkReport::GetClassData() const { return &_class_data_; }


void WirelessLinkReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WirelessLinkReport*>(&to_msg);
  auto& from = static_cast<const WirelessLinkReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.center_frequencies_hz_.MergeFrom(from._impl_.center_frequencies_hz_);
  _this->_internal_mutable_access_intervals()->MergeFrom(from._internal_access_intervals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_band_profile_id(from._internal_band_profile_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst()->::aalyria::spacetime::api::common::TransceiverModelId::MergeFrom(
          from._internal_dst());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WirelessLinkReport::CopyFrom(const WirelessLinkReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirelessLinkReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_access_intervals()))
    return false;
  return true;
}

void WirelessLinkReport::InternalSwap(WirelessLinkReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.center_frequencies_hz_.InternalSwap(&other->_impl_.center_frequencies_hz_);
  _internal_mutable_access_intervals()->InternalSwap(other->_internal_mutable_access_intervals());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.band_profile_id_, lhs_arena,
                                       &other->_impl_.band_profile_id_, rhs_arena);
  swap(_impl_.dst_, other->_impl_.dst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WirelessLinkReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[11]);
}
// ===================================================================

class InterfaceLinkReport_AccessInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<InterfaceLinkReport_AccessInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InterfaceLinkReport_AccessInterval, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TimeInterval& interval(const InterfaceLinkReport_AccessInterval* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::common::Duration& frame_delay(const InterfaceLinkReport_AccessInterval* msg);
  static void set_has_frame_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_rate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::TimeInterval&
InterfaceLinkReport_AccessInterval::_Internal::interval(const InterfaceLinkReport_AccessInterval* msg) {
  return *msg->_impl_.interval_;
}
const ::aalyria::spacetime::api::common::Duration&
InterfaceLinkReport_AccessInterval::_Internal::frame_delay(const InterfaceLinkReport_AccessInterval* msg) {
  return *msg->_impl_.frame_delay_;
}
void InterfaceLinkReport_AccessInterval::clear_interval() {
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InterfaceLinkReport_AccessInterval::clear_frame_delay() {
  if (_impl_.frame_delay_ != nullptr) _impl_.frame_delay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InterfaceLinkReport_AccessInterval::InterfaceLinkReport_AccessInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
}
InterfaceLinkReport_AccessInterval::InterfaceLinkReport_AccessInterval(const InterfaceLinkReport_AccessInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterfaceLinkReport_AccessInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.frame_delay_){nullptr}
    , decltype(_impl_.data_rate_bps_) {}

    , decltype(_impl_.accessibility_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_ = new ::aalyria::spacetime::api::common::TimeInterval(*from._impl_.interval_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.frame_delay_ = new ::aalyria::spacetime::api::common::Duration(*from._impl_.frame_delay_);
  }
  ::memcpy(&_impl_.data_rate_bps_, &from._impl_.data_rate_bps_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.accessibility_) -
    reinterpret_cast<char*>(&_impl_.data_rate_bps_)) + sizeof(_impl_.accessibility_));
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
}

inline void InterfaceLinkReport_AccessInterval::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.frame_delay_){nullptr}
    , decltype(_impl_.data_rate_bps_) { 0 }

    , decltype(_impl_.accessibility_) { 0 }

  };
}

InterfaceLinkReport_AccessInterval::~InterfaceLinkReport_AccessInterval() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterfaceLinkReport_AccessInterval::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.frame_delay_;
}

void InterfaceLinkReport_AccessInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterfaceLinkReport_AccessInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.interval_ != nullptr);
      _impl_.interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.frame_delay_ != nullptr);
      _impl_.frame_delay_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.data_rate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.accessibility_) -
        reinterpret_cast<char*>(&_impl_.data_rate_bps_)) + sizeof(_impl_.accessibility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceLinkReport_AccessInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility_IsValid(static_cast<int>(val)))) {
            _internal_set_accessibility(static_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::Accessibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.Duration frame_delay = 3 [json_name = "frameDelay"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_delay(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double data_rate_bps = 4 [json_name = "dataRateBps"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _Internal::set_has_data_rate_bps(&has_bits);
          _impl_.data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InterfaceLinkReport_AccessInterval::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_accessibility(), target);
  }

  // optional .aalyria.spacetime.api.common.Duration frame_delay = 3 [json_name = "frameDelay"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::frame_delay(this),
        _Internal::frame_delay(this).GetCachedSize(), target, stream);
  }

  // optional double data_rate_bps = 4 [json_name = "dataRateBps"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_data_rate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  return target;
}

::size_t InterfaceLinkReport_AccessInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aalyria.spacetime.api.common.TimeInterval interval = 1 [json_name = "interval"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_);
    }

    // optional .aalyria.spacetime.api.common.Duration frame_delay = 3 [json_name = "frameDelay"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frame_delay_);
    }

    // optional double data_rate_bps = 4 [json_name = "dataRateBps"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional .aalyria.spacetime.api.nbi.v1alpha.resources.Accessibility accessibility = 2 [json_name = "accessibility"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_accessibility());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceLinkReport_AccessInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterfaceLinkReport_AccessInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceLinkReport_AccessInterval::GetClassData() const { return &_class_data_; }


void InterfaceLinkReport_AccessInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterfaceLinkReport_AccessInterval*>(&to_msg);
  auto& from = static_cast<const InterfaceLinkReport_AccessInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval()->::aalyria::spacetime::api::common::TimeInterval::MergeFrom(
          from._internal_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_frame_delay()->::aalyria::spacetime::api::common::Duration::MergeFrom(
          from._internal_frame_delay());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_rate_bps_ = from._impl_.data_rate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.accessibility_ = from._impl_.accessibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceLinkReport_AccessInterval::CopyFrom(const InterfaceLinkReport_AccessInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceLinkReport_AccessInterval::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.frame_delay_->IsInitialized()) return false;
  }
  return true;
}

void InterfaceLinkReport_AccessInterval::InternalSwap(InterfaceLinkReport_AccessInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceLinkReport_AccessInterval, _impl_.accessibility_)
      + sizeof(InterfaceLinkReport_AccessInterval::_impl_.accessibility_)
      - PROTOBUF_FIELD_OFFSET(InterfaceLinkReport_AccessInterval, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceLinkReport_AccessInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[12]);
}
// ===================================================================

class InterfaceLinkReport::_Internal {
 public:
  using HasBits = decltype(std::declval<InterfaceLinkReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InterfaceLinkReport, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& src(const InterfaceLinkReport* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::NetworkInterfaceId& dst(const InterfaceLinkReport* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::NetworkInterfaceId&
InterfaceLinkReport::_Internal::src(const InterfaceLinkReport* msg) {
  return *msg->_impl_.src_;
}
const ::aalyria::spacetime::api::common::NetworkInterfaceId&
InterfaceLinkReport::_Internal::dst(const InterfaceLinkReport* msg) {
  return *msg->_impl_.dst_;
}
void InterfaceLinkReport::clear_src() {
  if (_impl_.src_ != nullptr) _impl_.src_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InterfaceLinkReport::clear_dst() {
  if (_impl_.dst_ != nullptr) _impl_.dst_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InterfaceLinkReport::InterfaceLinkReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
}
InterfaceLinkReport::InterfaceLinkReport(const InterfaceLinkReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterfaceLinkReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.access_intervals_){from._impl_.access_intervals_}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.src_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.src_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dst_ = new ::aalyria::spacetime::api::common::NetworkInterfaceId(*from._impl_.dst_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
}

inline void InterfaceLinkReport::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.access_intervals_){arena}
    , decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
  };
}

InterfaceLinkReport::~InterfaceLinkReport() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterfaceLinkReport::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_access_intervals()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.src_;
  if (this != internal_default_instance()) delete _impl_.dst_;
}

void InterfaceLinkReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterfaceLinkReport::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_access_intervals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.src_ != nullptr);
      _impl_.src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dst_ != nullptr);
      _impl_.dst_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceLinkReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 4 [json_name = "src"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 5 [json_name = "dst"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval access_intervals = 6 [json_name = "accessIntervals"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InterfaceLinkReport::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 4 [json_name = "src"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::src(this),
        _Internal::src(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 5 [json_name = "dst"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dst(this),
        _Internal::dst(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval access_intervals = 6 [json_name = "accessIntervals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_access_intervals_size()); i < n; i++) {
    const auto& repfield = this->_internal_access_intervals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  return target;
}

::size_t InterfaceLinkReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport.AccessInterval access_intervals = 6 [json_name = "accessIntervals"];
  total_size += 1UL * this->_internal_access_intervals_size();
  for (const auto& msg : this->_internal_access_intervals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.NetworkInterfaceId src = 4 [json_name = "src"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.src_);
    }

    // optional .aalyria.spacetime.api.common.NetworkInterfaceId dst = 5 [json_name = "dst"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceLinkReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterfaceLinkReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceLinkReport::GetClassData() const { return &_class_data_; }


void InterfaceLinkReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterfaceLinkReport*>(&to_msg);
  auto& from = static_cast<const InterfaceLinkReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_access_intervals()->MergeFrom(from._internal_access_intervals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_src()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst()->::aalyria::spacetime::api::common::NetworkInterfaceId::MergeFrom(
          from._internal_dst());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceLinkReport::CopyFrom(const InterfaceLinkReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.InterfaceLinkReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceLinkReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_access_intervals()))
    return false;
  return true;
}

void InterfaceLinkReport::InternalSwap(InterfaceLinkReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_access_intervals()->InternalSwap(other->_internal_mutable_access_intervals());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceLinkReport, _impl_.dst_)
      + sizeof(InterfaceLinkReport::_impl_.dst_)
      - PROTOBUF_FIELD_OFFSET(InterfaceLinkReport, _impl_.src_)>(
          reinterpret_cast<char*>(&_impl_.src_),
          reinterpret_cast<char*>(&other->_impl_.src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceLinkReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[13]);
}
// ===================================================================

class TransceiverLinkReport::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiverLinkReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransceiverLinkReport, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::TransceiverModelId& src(const TransceiverLinkReport* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::TransceiverModelId&
TransceiverLinkReport::_Internal::src(const TransceiverLinkReport* msg) {
  return *msg->_impl_.src_;
}
void TransceiverLinkReport::clear_src() {
  if (_impl_.src_ != nullptr) _impl_.src_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransceiverLinkReport::TransceiverLinkReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
}
TransceiverLinkReport::TransceiverLinkReport(const TransceiverLinkReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransceiverLinkReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.src_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.src_ = new ::aalyria::spacetime::api::common::TransceiverModelId(*from._impl_.src_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
}

inline void TransceiverLinkReport::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.links_){arena}
    , decltype(_impl_.src_){nullptr}
  };
}

TransceiverLinkReport::~TransceiverLinkReport() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransceiverLinkReport::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_links()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.src_;
}

void TransceiverLinkReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransceiverLinkReport::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_links()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.src_ != nullptr);
    _impl_.src_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransceiverLinkReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.TransceiverModelId src = 1 [json_name = "src"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport links = 2 [json_name = "links"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransceiverLinkReport::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.TransceiverModelId src = 1 [json_name = "src"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::src(this),
        _Internal::src(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport links = 2 [json_name = "links"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  return target;
}

::size_t TransceiverLinkReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.WirelessLinkReport links = 2 [json_name = "links"];
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_internal_links()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .aalyria.spacetime.api.common.TransceiverModelId src = 1 [json_name = "src"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransceiverLinkReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransceiverLinkReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransceiverLinkReport::GetClassData() const { return &_class_data_; }


void TransceiverLinkReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransceiverLinkReport*>(&to_msg);
  auto& from = static_cast<const TransceiverLinkReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(from._internal_links());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_src()->::aalyria::spacetime::api::common::TransceiverModelId::MergeFrom(
        from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransceiverLinkReport::CopyFrom(const TransceiverLinkReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.TransceiverLinkReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiverLinkReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_links()))
    return false;
  return true;
}

void TransceiverLinkReport::InternalSwap(TransceiverLinkReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_links()->InternalSwap(other->_internal_mutable_links());
  swap(_impl_.src_, other->_impl_.src_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiverLinkReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fnetwork_5flink_2eproto[14]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::NetworkLink >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::RadioConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::Radio >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::LinkEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::BeamTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::BidirectionalLink >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::DirectionalLink >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget_ComponentPropagationLossDbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkBudget >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval_WirelessLinkMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport_WirelessAccessInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::WirelessLinkReport >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport_AccessInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::InterfaceLinkReport >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::TransceiverLinkReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

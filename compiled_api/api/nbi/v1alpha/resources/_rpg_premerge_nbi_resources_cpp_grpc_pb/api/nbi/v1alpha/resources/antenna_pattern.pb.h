// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/antenna_pattern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
class AntennaPattern;
struct AntennaPatternDefaultTypeInternal;
extern AntennaPatternDefaultTypeInternal _AntennaPattern_default_instance_;
class AntennaPattern_CustomAntennaPatternPerAngle;
struct AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal;
extern AntennaPattern_CustomAntennaPatternPerAngleDefaultTypeInternal _AntennaPattern_CustomAntennaPatternPerAngle_default_instance_;
class AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern;
struct AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal;
extern AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPatternDefaultTypeInternal _AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern_default_instance_;
class AntennaPattern_CustomAzElAntennaPattern;
struct AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal;
extern AntennaPattern_CustomAzElAntennaPatternDefaultTypeInternal _AntennaPattern_CustomAzElAntennaPattern_default_instance_;
class AntennaPattern_CustomAzElAntennaPattern_AzElGainValue;
struct AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal;
extern AntennaPattern_CustomAzElAntennaPattern_AzElGainValueDefaultTypeInternal _AntennaPattern_CustomAzElAntennaPattern_AzElGainValue_default_instance_;
class AntennaPattern_CustomPhiThetaAntennaPattern;
struct AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal;
extern AntennaPattern_CustomPhiThetaAntennaPatternDefaultTypeInternal _AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_;
class AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue;
struct AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal;
extern AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValueDefaultTypeInternal _AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue_default_instance_;
class AntennaPattern_GaussianAntennaPattern;
struct AntennaPattern_GaussianAntennaPatternDefaultTypeInternal;
extern AntennaPattern_GaussianAntennaPatternDefaultTypeInternal _AntennaPattern_GaussianAntennaPattern_default_instance_;
class AntennaPattern_GaussianOpticalAntennaPattern;
struct AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal;
extern AntennaPattern_GaussianOpticalAntennaPatternDefaultTypeInternal _AntennaPattern_GaussianOpticalAntennaPattern_default_instance_;
class AntennaPattern_HelicalAntennaPattern;
struct AntennaPattern_HelicalAntennaPatternDefaultTypeInternal;
extern AntennaPattern_HelicalAntennaPatternDefaultTypeInternal _AntennaPattern_HelicalAntennaPattern_default_instance_;
class AntennaPattern_IsotropicAntennaPattern;
struct AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal;
extern AntennaPattern_IsotropicAntennaPatternDefaultTypeInternal _AntennaPattern_IsotropicAntennaPattern_default_instance_;
class AntennaPattern_NearAndFarFieldAntennaPattern;
struct AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal;
extern AntennaPattern_NearAndFarFieldAntennaPatternDefaultTypeInternal _AntennaPattern_NearAndFarFieldAntennaPattern_default_instance_;
class AntennaPattern_ParabolicAntennaPattern;
struct AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal;
extern AntennaPattern_ParabolicAntennaPatternDefaultTypeInternal _AntennaPattern_ParabolicAntennaPattern_default_instance_;
class AntennaPattern_PhasedArrayAntennaPattern;
struct AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal;
extern AntennaPattern_PhasedArrayAntennaPatternDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_default_instance_;
class AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor;
struct AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal;
extern AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactorDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor_default_instance_;
class AntennaPattern_PhasedArrayAntennaPattern_Element;
struct AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal;
extern AntennaPattern_PhasedArrayAntennaPattern_ElementDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_Element_default_instance_;
class AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer;
struct AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal;
extern AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformerDefaultTypeInternal _AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_default_instance_;
class AntennaPattern_SquareHornAntennaPattern;
struct AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal;
extern AntennaPattern_SquareHornAntennaPatternDefaultTypeInternal _AntennaPattern_SquareHornAntennaPattern_default_instance_;
class AntennaPattern_TransmitterAndReceiverAntennaPattern;
struct AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal;
extern AntennaPattern_TransmitterAndReceiverAntennaPatternDefaultTypeInternal _AntennaPattern_TransmitterAndReceiverAntennaPattern_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern>(Arena*);
template <>
::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* Arena::CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {

// ===================================================================


// -------------------------------------------------------------------

class AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue) */ {
 public:
  inline AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue() : AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(nullptr) {}
  ~AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from);
  AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue&& from) noexcept
    : AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& operator=(const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& operator=(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue*>(
               &_AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& a, AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& from) {
    AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue";
  }
  protected:
  explicit AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainDbFieldNumber = 1,
    kPhiRadFieldNumber = 2,
    kThetaRadFieldNumber = 3,
  };
  // optional double gain_db = 1 [json_name = "gainDb"];
  bool has_gain_db() const;
  void clear_gain_db() ;
  double gain_db() const;
  void set_gain_db(double value);

  private:
  double _internal_gain_db() const;
  void _internal_set_gain_db(double value);

  public:
  // optional double phi_rad = 2 [json_name = "phiRad"];
  bool has_phi_rad() const;
  void clear_phi_rad() ;
  double phi_rad() const;
  void set_phi_rad(double value);

  private:
  double _internal_phi_rad() const;
  void _internal_set_phi_rad(double value);

  public:
  // optional double theta_rad = 3 [json_name = "thetaRad"];
  bool has_theta_rad() const;
  void clear_theta_rad() ;
  double theta_rad() const;
  void set_theta_rad(double value);

  private:
  double _internal_theta_rad() const;
  void _internal_set_theta_rad(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double gain_db_;
    double phi_rad_;
    double theta_rad_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_CustomPhiThetaAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern) */ {
 public:
  inline AntennaPattern_CustomPhiThetaAntennaPattern() : AntennaPattern_CustomPhiThetaAntennaPattern(nullptr) {}
  ~AntennaPattern_CustomPhiThetaAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomPhiThetaAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomPhiThetaAntennaPattern(const AntennaPattern_CustomPhiThetaAntennaPattern& from);
  AntennaPattern_CustomPhiThetaAntennaPattern(AntennaPattern_CustomPhiThetaAntennaPattern&& from) noexcept
    : AntennaPattern_CustomPhiThetaAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomPhiThetaAntennaPattern& operator=(const AntennaPattern_CustomPhiThetaAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomPhiThetaAntennaPattern& operator=(AntennaPattern_CustomPhiThetaAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomPhiThetaAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomPhiThetaAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomPhiThetaAntennaPattern*>(
               &_AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AntennaPattern_CustomPhiThetaAntennaPattern& a, AntennaPattern_CustomPhiThetaAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomPhiThetaAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomPhiThetaAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomPhiThetaAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomPhiThetaAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomPhiThetaAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomPhiThetaAntennaPattern& from) {
    AntennaPattern_CustomPhiThetaAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomPhiThetaAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern";
  }
  protected:
  explicit AntennaPattern_CustomPhiThetaAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue SphericalGainValue;

  // accessors -------------------------------------------------------

  enum : int {
    kGainValueFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue gain_value = 1 [json_name = "gainValue"];
  int gain_value_size() const;
  private:
  int _internal_gain_value_size() const;

  public:
  void clear_gain_value() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* mutable_gain_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >*
      mutable_gain_value();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& _internal_gain_value(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* _internal_add_gain_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>& _internal_gain_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>* _internal_mutable_gain_value();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& gain_value(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* add_gain_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >&
      gain_value() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue > gain_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_CustomAzElAntennaPattern_AzElGainValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue) */ {
 public:
  inline AntennaPattern_CustomAzElAntennaPattern_AzElGainValue() : AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(nullptr) {}
  ~AntennaPattern_CustomAzElAntennaPattern_AzElGainValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from);
  AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue&& from) noexcept
    : AntennaPattern_CustomAzElAntennaPattern_AzElGainValue() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& operator=(const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& operator=(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue*>(
               &_AntennaPattern_CustomAzElAntennaPattern_AzElGainValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& a, AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& from) {
    AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue";
  }
  protected:
  explicit AntennaPattern_CustomAzElAntennaPattern_AzElGainValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainDbFieldNumber = 1,
    kAzDegFieldNumber = 2,
    kElDegFieldNumber = 3,
  };
  // optional double gain_db = 1 [json_name = "gainDb"];
  bool has_gain_db() const;
  void clear_gain_db() ;
  double gain_db() const;
  void set_gain_db(double value);

  private:
  double _internal_gain_db() const;
  void _internal_set_gain_db(double value);

  public:
  // optional double az_deg = 2 [json_name = "azDeg"];
  bool has_az_deg() const;
  void clear_az_deg() ;
  double az_deg() const;
  void set_az_deg(double value);

  private:
  double _internal_az_deg() const;
  void _internal_set_az_deg(double value);

  public:
  // optional double el_deg = 3 [json_name = "elDeg"];
  bool has_el_deg() const;
  void clear_el_deg() ;
  double el_deg() const;
  void set_el_deg(double value);

  private:
  double _internal_el_deg() const;
  void _internal_set_el_deg(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double gain_db_;
    double az_deg_;
    double el_deg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_CustomAzElAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern) */ {
 public:
  inline AntennaPattern_CustomAzElAntennaPattern() : AntennaPattern_CustomAzElAntennaPattern(nullptr) {}
  ~AntennaPattern_CustomAzElAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomAzElAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomAzElAntennaPattern(const AntennaPattern_CustomAzElAntennaPattern& from);
  AntennaPattern_CustomAzElAntennaPattern(AntennaPattern_CustomAzElAntennaPattern&& from) noexcept
    : AntennaPattern_CustomAzElAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomAzElAntennaPattern& operator=(const AntennaPattern_CustomAzElAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomAzElAntennaPattern& operator=(AntennaPattern_CustomAzElAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomAzElAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomAzElAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomAzElAntennaPattern*>(
               &_AntennaPattern_CustomAzElAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AntennaPattern_CustomAzElAntennaPattern& a, AntennaPattern_CustomAzElAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomAzElAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomAzElAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomAzElAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomAzElAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomAzElAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomAzElAntennaPattern& from) {
    AntennaPattern_CustomAzElAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomAzElAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern";
  }
  protected:
  explicit AntennaPattern_CustomAzElAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntennaPattern_CustomAzElAntennaPattern_AzElGainValue AzElGainValue;

  // accessors -------------------------------------------------------

  enum : int {
    kGainValuesFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue gain_values = 1 [json_name = "gainValues"];
  int gain_values_size() const;
  private:
  int _internal_gain_values_size() const;

  public:
  void clear_gain_values() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* mutable_gain_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >*
      mutable_gain_values();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& _internal_gain_values(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* _internal_add_gain_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>& _internal_gain_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>* _internal_mutable_gain_values();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& gain_values(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* add_gain_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >&
      gain_values() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue > gain_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern) */ {
 public:
  inline AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern() : AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(nullptr) {}
  ~AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from);
  AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern&& from) noexcept
    : AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& operator=(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& operator=(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern*>(
               &_AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& a, AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& from) {
    AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern";
  }
  protected:
  explicit AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomPatternFieldNumber = 3,
    kPhiRadFieldNumber = 1,
    kThetaRadFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_pattern = 3 [json_name = "customPattern"];
  bool has_custom_pattern() const;
  void clear_custom_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& custom_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* release_custom_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* mutable_custom_pattern();
  void set_allocated_custom_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& _internal_custom_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* _internal_mutable_custom_pattern();
  public:
  void unsafe_arena_set_allocated_custom_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* unsafe_arena_release_custom_pattern();
  // optional float phi_rad = 1 [json_name = "phiRad"];
  bool has_phi_rad() const;
  void clear_phi_rad() ;
  float phi_rad() const;
  void set_phi_rad(float value);

  private:
  float _internal_phi_rad() const;
  void _internal_set_phi_rad(float value);

  public:
  // optional float theta_rad = 2 [json_name = "thetaRad"];
  bool has_theta_rad() const;
  void clear_theta_rad() ;
  float theta_rad() const;
  void set_theta_rad(float value);

  private:
  float _internal_theta_rad() const;
  void _internal_set_theta_rad(float value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_pattern_;
    float phi_rad_;
    float theta_rad_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_CustomAntennaPatternPerAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle) */ {
 public:
  inline AntennaPattern_CustomAntennaPatternPerAngle() : AntennaPattern_CustomAntennaPatternPerAngle(nullptr) {}
  ~AntennaPattern_CustomAntennaPatternPerAngle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_CustomAntennaPatternPerAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_CustomAntennaPatternPerAngle(const AntennaPattern_CustomAntennaPatternPerAngle& from);
  AntennaPattern_CustomAntennaPatternPerAngle(AntennaPattern_CustomAntennaPatternPerAngle&& from) noexcept
    : AntennaPattern_CustomAntennaPatternPerAngle() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_CustomAntennaPatternPerAngle& operator=(const AntennaPattern_CustomAntennaPatternPerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_CustomAntennaPatternPerAngle& operator=(AntennaPattern_CustomAntennaPatternPerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_CustomAntennaPatternPerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_CustomAntennaPatternPerAngle* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_CustomAntennaPatternPerAngle*>(
               &_AntennaPattern_CustomAntennaPatternPerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AntennaPattern_CustomAntennaPatternPerAngle& a, AntennaPattern_CustomAntennaPatternPerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_CustomAntennaPatternPerAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_CustomAntennaPatternPerAngle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_CustomAntennaPatternPerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_CustomAntennaPatternPerAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_CustomAntennaPatternPerAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_CustomAntennaPatternPerAngle& from) {
    AntennaPattern_CustomAntennaPatternPerAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_CustomAntennaPatternPerAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle";
  }
  protected:
  explicit AntennaPattern_CustomAntennaPatternPerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern ScanAngleAndCustomPattern;

  // accessors -------------------------------------------------------

  enum : int {
    kScanAngleAndCustomPatternsFieldNumber = 1,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern scan_angle_and_custom_patterns = 1 [json_name = "scanAngleAndCustomPatterns"];
  int scan_angle_and_custom_patterns_size() const;
  private:
  int _internal_scan_angle_and_custom_patterns_size() const;

  public:
  void clear_scan_angle_and_custom_patterns() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* mutable_scan_angle_and_custom_patterns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >*
      mutable_scan_angle_and_custom_patterns();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& _internal_scan_angle_and_custom_patterns(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* _internal_add_scan_angle_and_custom_patterns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>& _internal_scan_angle_and_custom_patterns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>* _internal_mutable_scan_angle_and_custom_patterns();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& scan_angle_and_custom_patterns(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* add_scan_angle_and_custom_patterns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >&
      scan_angle_and_custom_patterns() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern > scan_angle_and_custom_patterns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_GaussianAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern) */ {
 public:
  inline AntennaPattern_GaussianAntennaPattern() : AntennaPattern_GaussianAntennaPattern(nullptr) {}
  ~AntennaPattern_GaussianAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_GaussianAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_GaussianAntennaPattern(const AntennaPattern_GaussianAntennaPattern& from);
  AntennaPattern_GaussianAntennaPattern(AntennaPattern_GaussianAntennaPattern&& from) noexcept
    : AntennaPattern_GaussianAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_GaussianAntennaPattern& operator=(const AntennaPattern_GaussianAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_GaussianAntennaPattern& operator=(AntennaPattern_GaussianAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_GaussianAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_GaussianAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_GaussianAntennaPattern*>(
               &_AntennaPattern_GaussianAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AntennaPattern_GaussianAntennaPattern& a, AntennaPattern_GaussianAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_GaussianAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_GaussianAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_GaussianAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_GaussianAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_GaussianAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_GaussianAntennaPattern& from) {
    AntennaPattern_GaussianAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_GaussianAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern";
  }
  protected:
  explicit AntennaPattern_GaussianAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterMFieldNumber = 1,
    kEfficiencyPercentFieldNumber = 2,
    kBacklobeGainDbFieldNumber = 3,
  };
  // optional double diameter_m = 1 [json_name = "diameterM"];
  bool has_diameter_m() const;
  void clear_diameter_m() ;
  double diameter_m() const;
  void set_diameter_m(double value);

  private:
  double _internal_diameter_m() const;
  void _internal_set_diameter_m(double value);

  public:
  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  bool has_efficiency_percent() const;
  void clear_efficiency_percent() ;
  double efficiency_percent() const;
  void set_efficiency_percent(double value);

  private:
  double _internal_efficiency_percent() const;
  void _internal_set_efficiency_percent(double value);

  public:
  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  bool has_backlobe_gain_db() const;
  void clear_backlobe_gain_db() ;
  double backlobe_gain_db() const;
  void set_backlobe_gain_db(double value);

  private:
  double _internal_backlobe_gain_db() const;
  void _internal_set_backlobe_gain_db(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double diameter_m_;
    double efficiency_percent_;
    double backlobe_gain_db_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_HelicalAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern) */ {
 public:
  inline AntennaPattern_HelicalAntennaPattern() : AntennaPattern_HelicalAntennaPattern(nullptr) {}
  ~AntennaPattern_HelicalAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_HelicalAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_HelicalAntennaPattern(const AntennaPattern_HelicalAntennaPattern& from);
  AntennaPattern_HelicalAntennaPattern(AntennaPattern_HelicalAntennaPattern&& from) noexcept
    : AntennaPattern_HelicalAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_HelicalAntennaPattern& operator=(const AntennaPattern_HelicalAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_HelicalAntennaPattern& operator=(AntennaPattern_HelicalAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_HelicalAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_HelicalAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_HelicalAntennaPattern*>(
               &_AntennaPattern_HelicalAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AntennaPattern_HelicalAntennaPattern& a, AntennaPattern_HelicalAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_HelicalAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_HelicalAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_HelicalAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_HelicalAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_HelicalAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_HelicalAntennaPattern& from) {
    AntennaPattern_HelicalAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_HelicalAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern";
  }
  protected:
  explicit AntennaPattern_HelicalAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterMFieldNumber = 1,
    kEfficiencyPercentFieldNumber = 2,
    kBacklobeGainDbFieldNumber = 3,
    kNumberOfTurnsFieldNumber = 4,
    kTurnSpacingMFieldNumber = 5,
  };
  // optional double diameter_m = 1 [json_name = "diameterM"];
  bool has_diameter_m() const;
  void clear_diameter_m() ;
  double diameter_m() const;
  void set_diameter_m(double value);

  private:
  double _internal_diameter_m() const;
  void _internal_set_diameter_m(double value);

  public:
  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  bool has_efficiency_percent() const;
  void clear_efficiency_percent() ;
  double efficiency_percent() const;
  void set_efficiency_percent(double value);

  private:
  double _internal_efficiency_percent() const;
  void _internal_set_efficiency_percent(double value);

  public:
  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  bool has_backlobe_gain_db() const;
  void clear_backlobe_gain_db() ;
  double backlobe_gain_db() const;
  void set_backlobe_gain_db(double value);

  private:
  double _internal_backlobe_gain_db() const;
  void _internal_set_backlobe_gain_db(double value);

  public:
  // optional double number_of_turns = 4 [json_name = "numberOfTurns"];
  bool has_number_of_turns() const;
  void clear_number_of_turns() ;
  double number_of_turns() const;
  void set_number_of_turns(double value);

  private:
  double _internal_number_of_turns() const;
  void _internal_set_number_of_turns(double value);

  public:
  // optional double turn_spacing_m = 5 [json_name = "turnSpacingM"];
  bool has_turn_spacing_m() const;
  void clear_turn_spacing_m() ;
  double turn_spacing_m() const;
  void set_turn_spacing_m(double value);

  private:
  double _internal_turn_spacing_m() const;
  void _internal_set_turn_spacing_m(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double diameter_m_;
    double efficiency_percent_;
    double backlobe_gain_db_;
    double number_of_turns_;
    double turn_spacing_m_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_IsotropicAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern) */ {
 public:
  inline AntennaPattern_IsotropicAntennaPattern() : AntennaPattern_IsotropicAntennaPattern(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_IsotropicAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_IsotropicAntennaPattern(const AntennaPattern_IsotropicAntennaPattern& from);
  AntennaPattern_IsotropicAntennaPattern(AntennaPattern_IsotropicAntennaPattern&& from) noexcept
    : AntennaPattern_IsotropicAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_IsotropicAntennaPattern& operator=(const AntennaPattern_IsotropicAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_IsotropicAntennaPattern& operator=(AntennaPattern_IsotropicAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_IsotropicAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_IsotropicAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_IsotropicAntennaPattern*>(
               &_AntennaPattern_IsotropicAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AntennaPattern_IsotropicAntennaPattern& a, AntennaPattern_IsotropicAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_IsotropicAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_IsotropicAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_IsotropicAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_IsotropicAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AntennaPattern_IsotropicAntennaPattern& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AntennaPattern_IsotropicAntennaPattern& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern";
  }
  protected:
  explicit AntennaPattern_IsotropicAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_ParabolicAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern) */ {
 public:
  inline AntennaPattern_ParabolicAntennaPattern() : AntennaPattern_ParabolicAntennaPattern(nullptr) {}
  ~AntennaPattern_ParabolicAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_ParabolicAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_ParabolicAntennaPattern(const AntennaPattern_ParabolicAntennaPattern& from);
  AntennaPattern_ParabolicAntennaPattern(AntennaPattern_ParabolicAntennaPattern&& from) noexcept
    : AntennaPattern_ParabolicAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_ParabolicAntennaPattern& operator=(const AntennaPattern_ParabolicAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_ParabolicAntennaPattern& operator=(AntennaPattern_ParabolicAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_ParabolicAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_ParabolicAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_ParabolicAntennaPattern*>(
               &_AntennaPattern_ParabolicAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AntennaPattern_ParabolicAntennaPattern& a, AntennaPattern_ParabolicAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_ParabolicAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_ParabolicAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_ParabolicAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_ParabolicAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_ParabolicAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_ParabolicAntennaPattern& from) {
    AntennaPattern_ParabolicAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_ParabolicAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern";
  }
  protected:
  explicit AntennaPattern_ParabolicAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterMFieldNumber = 1,
    kEfficiencyPercentFieldNumber = 2,
    kBacklobeGainDbFieldNumber = 3,
  };
  // optional double diameter_m = 1 [json_name = "diameterM"];
  bool has_diameter_m() const;
  void clear_diameter_m() ;
  double diameter_m() const;
  void set_diameter_m(double value);

  private:
  double _internal_diameter_m() const;
  void _internal_set_diameter_m(double value);

  public:
  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  bool has_efficiency_percent() const;
  void clear_efficiency_percent() ;
  double efficiency_percent() const;
  void set_efficiency_percent(double value);

  private:
  double _internal_efficiency_percent() const;
  void _internal_set_efficiency_percent(double value);

  public:
  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  bool has_backlobe_gain_db() const;
  void clear_backlobe_gain_db() ;
  double backlobe_gain_db() const;
  void set_backlobe_gain_db(double value);

  private:
  double _internal_backlobe_gain_db() const;
  void _internal_set_backlobe_gain_db(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double diameter_m_;
    double efficiency_percent_;
    double backlobe_gain_db_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_SquareHornAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern) */ {
 public:
  inline AntennaPattern_SquareHornAntennaPattern() : AntennaPattern_SquareHornAntennaPattern(nullptr) {}
  ~AntennaPattern_SquareHornAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_SquareHornAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_SquareHornAntennaPattern(const AntennaPattern_SquareHornAntennaPattern& from);
  AntennaPattern_SquareHornAntennaPattern(AntennaPattern_SquareHornAntennaPattern&& from) noexcept
    : AntennaPattern_SquareHornAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_SquareHornAntennaPattern& operator=(const AntennaPattern_SquareHornAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_SquareHornAntennaPattern& operator=(AntennaPattern_SquareHornAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_SquareHornAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_SquareHornAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_SquareHornAntennaPattern*>(
               &_AntennaPattern_SquareHornAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AntennaPattern_SquareHornAntennaPattern& a, AntennaPattern_SquareHornAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_SquareHornAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_SquareHornAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_SquareHornAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_SquareHornAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_SquareHornAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_SquareHornAntennaPattern& from) {
    AntennaPattern_SquareHornAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_SquareHornAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern";
  }
  protected:
  explicit AntennaPattern_SquareHornAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterMFieldNumber = 1,
    kEfficiencyPercentFieldNumber = 2,
    kBacklobeGainDbFieldNumber = 3,
  };
  // optional double diameter_m = 1 [json_name = "diameterM"];
  bool has_diameter_m() const;
  void clear_diameter_m() ;
  double diameter_m() const;
  void set_diameter_m(double value);

  private:
  double _internal_diameter_m() const;
  void _internal_set_diameter_m(double value);

  public:
  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  bool has_efficiency_percent() const;
  void clear_efficiency_percent() ;
  double efficiency_percent() const;
  void set_efficiency_percent(double value);

  private:
  double _internal_efficiency_percent() const;
  void _internal_set_efficiency_percent(double value);

  public:
  // optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
  bool has_backlobe_gain_db() const;
  void clear_backlobe_gain_db() ;
  double backlobe_gain_db() const;
  void set_backlobe_gain_db(double value);

  private:
  double _internal_backlobe_gain_db() const;
  void _internal_set_backlobe_gain_db(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double diameter_m_;
    double efficiency_percent_;
    double backlobe_gain_db_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_GaussianOpticalAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern) */ {
 public:
  inline AntennaPattern_GaussianOpticalAntennaPattern() : AntennaPattern_GaussianOpticalAntennaPattern(nullptr) {}
  ~AntennaPattern_GaussianOpticalAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_GaussianOpticalAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_GaussianOpticalAntennaPattern(const AntennaPattern_GaussianOpticalAntennaPattern& from);
  AntennaPattern_GaussianOpticalAntennaPattern(AntennaPattern_GaussianOpticalAntennaPattern&& from) noexcept
    : AntennaPattern_GaussianOpticalAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_GaussianOpticalAntennaPattern& operator=(const AntennaPattern_GaussianOpticalAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_GaussianOpticalAntennaPattern& operator=(AntennaPattern_GaussianOpticalAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_GaussianOpticalAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_GaussianOpticalAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_GaussianOpticalAntennaPattern*>(
               &_AntennaPattern_GaussianOpticalAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AntennaPattern_GaussianOpticalAntennaPattern& a, AntennaPattern_GaussianOpticalAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_GaussianOpticalAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_GaussianOpticalAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_GaussianOpticalAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_GaussianOpticalAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_GaussianOpticalAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_GaussianOpticalAntennaPattern& from) {
    AntennaPattern_GaussianOpticalAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_GaussianOpticalAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern";
  }
  protected:
  explicit AntennaPattern_GaussianOpticalAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiameterMFieldNumber = 1,
    kEfficiencyPercentFieldNumber = 2,
    kDivergenceAngleRadFieldNumber = 3,
    kPointingErrorRadFieldNumber = 4,
  };
  // optional double diameter_m = 1 [json_name = "diameterM"];
  bool has_diameter_m() const;
  void clear_diameter_m() ;
  double diameter_m() const;
  void set_diameter_m(double value);

  private:
  double _internal_diameter_m() const;
  void _internal_set_diameter_m(double value);

  public:
  // optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
  bool has_efficiency_percent() const;
  void clear_efficiency_percent() ;
  double efficiency_percent() const;
  void set_efficiency_percent(double value);

  private:
  double _internal_efficiency_percent() const;
  void _internal_set_efficiency_percent(double value);

  public:
  // optional double divergence_angle_rad = 3 [json_name = "divergenceAngleRad"];
  bool has_divergence_angle_rad() const;
  void clear_divergence_angle_rad() ;
  double divergence_angle_rad() const;
  void set_divergence_angle_rad(double value);

  private:
  double _internal_divergence_angle_rad() const;
  void _internal_set_divergence_angle_rad(double value);

  public:
  // optional double pointing_error_rad = 4 [json_name = "pointingErrorRad"];
  bool has_pointing_error_rad() const;
  void clear_pointing_error_rad() ;
  double pointing_error_rad() const;
  void set_pointing_error_rad(double value);

  private:
  double _internal_pointing_error_rad() const;
  void _internal_set_pointing_error_rad(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double diameter_m_;
    double efficiency_percent_;
    double divergence_angle_rad_;
    double pointing_error_rad_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_PhasedArrayAntennaPattern_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element) */ {
 public:
  inline AntennaPattern_PhasedArrayAntennaPattern_Element() : AntennaPattern_PhasedArrayAntennaPattern_Element(nullptr) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_Element() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_PhasedArrayAntennaPattern_Element(const AntennaPattern_PhasedArrayAntennaPattern_Element& from);
  AntennaPattern_PhasedArrayAntennaPattern_Element(AntennaPattern_PhasedArrayAntennaPattern_Element&& from) noexcept
    : AntennaPattern_PhasedArrayAntennaPattern_Element() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_PhasedArrayAntennaPattern_Element& operator=(const AntennaPattern_PhasedArrayAntennaPattern_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_PhasedArrayAntennaPattern_Element& operator=(AntennaPattern_PhasedArrayAntennaPattern_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_PhasedArrayAntennaPattern_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_PhasedArrayAntennaPattern_Element* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_PhasedArrayAntennaPattern_Element*>(
               &_AntennaPattern_PhasedArrayAntennaPattern_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AntennaPattern_PhasedArrayAntennaPattern_Element& a, AntennaPattern_PhasedArrayAntennaPattern_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_PhasedArrayAntennaPattern_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_PhasedArrayAntennaPattern_Element* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_PhasedArrayAntennaPattern_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_PhasedArrayAntennaPattern_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_PhasedArrayAntennaPattern_Element& from) {
    AntennaPattern_PhasedArrayAntennaPattern_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element";
  }
  protected:
  explicit AntennaPattern_PhasedArrayAntennaPattern_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [json_name = "x"];
  bool has_x() const;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // optional double y = 2 [json_name = "y"];
  bool has_y() const;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer) */ {
 public:
  inline AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer() : AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(nullptr) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from);
  AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer&& from) noexcept
    : AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& operator=(const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& operator=(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer*>(
               &_AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& a, AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& from) {
    AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer";
  }
  protected:
  explicit AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeamVarianceFieldNumber = 1,
  };
  // optional double beam_variance = 1 [json_name = "beamVariance"];
  bool has_beam_variance() const;
  void clear_beam_variance() ;
  double beam_variance() const;
  void set_beam_variance(double value);

  private:
  double _internal_beam_variance() const;
  void _internal_set_beam_variance(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double beam_variance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor) */ {
 public:
  inline AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor() : AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(nullptr) {}
  ~AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from);
  AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor&& from) noexcept
    : AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& operator=(const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& operator=(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor*>(
               &_AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& a, AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& from) {
    AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor";
  }
  protected:
  explicit AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCosineExponentFieldNumber = 1,
    kElementAreaM2FieldNumber = 2,
  };
  // optional double cosine_exponent = 1 [json_name = "cosineExponent"];
  bool has_cosine_exponent() const;
  void clear_cosine_exponent() ;
  double cosine_exponent() const;
  void set_cosine_exponent(double value);

  private:
  double _internal_cosine_exponent() const;
  void _internal_set_cosine_exponent(double value);

  public:
  // optional double element_area_m2 = 2 [json_name = "elementAreaM2"];
  bool has_element_area_m2() const;
  void clear_element_area_m2() ;
  double element_area_m2() const;
  void set_element_area_m2(double value);

  private:
  double _internal_element_area_m2() const;
  void _internal_set_element_area_m2(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double cosine_exponent_;
    double element_area_m2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_PhasedArrayAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern) */ {
 public:
  inline AntennaPattern_PhasedArrayAntennaPattern() : AntennaPattern_PhasedArrayAntennaPattern(nullptr) {}
  ~AntennaPattern_PhasedArrayAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_PhasedArrayAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_PhasedArrayAntennaPattern(const AntennaPattern_PhasedArrayAntennaPattern& from);
  AntennaPattern_PhasedArrayAntennaPattern(AntennaPattern_PhasedArrayAntennaPattern&& from) noexcept
    : AntennaPattern_PhasedArrayAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_PhasedArrayAntennaPattern& operator=(const AntennaPattern_PhasedArrayAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_PhasedArrayAntennaPattern& operator=(AntennaPattern_PhasedArrayAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_PhasedArrayAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  enum BeamformerCase {
    kMinimumVarianceDistortionlessResponseBeamformer = 4,
    BEAMFORMER_NOT_SET = 0,
  };

  static inline const AntennaPattern_PhasedArrayAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_PhasedArrayAntennaPattern*>(
               &_AntennaPattern_PhasedArrayAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AntennaPattern_PhasedArrayAntennaPattern& a, AntennaPattern_PhasedArrayAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_PhasedArrayAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_PhasedArrayAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_PhasedArrayAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_PhasedArrayAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_PhasedArrayAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_PhasedArrayAntennaPattern& from) {
    AntennaPattern_PhasedArrayAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_PhasedArrayAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern";
  }
  protected:
  explicit AntennaPattern_PhasedArrayAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntennaPattern_PhasedArrayAntennaPattern_Element Element;
  typedef AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer MinimumVarianceDistortionlessResponseBeamformer;
  typedef AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor CosineExponentElementFactor;

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 3,
    kCosineExponentElementFactorFieldNumber = 5,
    kDesignFrequencyHzFieldNumber = 1,
    kBacklobeSuppressionDbFieldNumber = 2,
    kMinimumVarianceDistortionlessResponseBeamformerFieldNumber = 4,
  };
  // repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element elements = 3 [json_name = "elements"];
  int elements_size() const;
  private:
  int _internal_elements_size() const;

  public:
  void clear_elements() ;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >*
      mutable_elements();
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element& _internal_elements(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* _internal_add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element>& _internal_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element>* _internal_mutable_elements();
  public:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element& elements(int index) const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >&
      elements() const;
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor cosine_exponent_element_factor = 5 [json_name = "cosineExponentElementFactor"];
  bool has_cosine_exponent_element_factor() const;
  void clear_cosine_exponent_element_factor() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& cosine_exponent_element_factor() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* release_cosine_exponent_element_factor();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* mutable_cosine_exponent_element_factor();
  void set_allocated_cosine_exponent_element_factor(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* cosine_exponent_element_factor);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& _internal_cosine_exponent_element_factor() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* _internal_mutable_cosine_exponent_element_factor();
  public:
  void unsafe_arena_set_allocated_cosine_exponent_element_factor(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* cosine_exponent_element_factor);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* unsafe_arena_release_cosine_exponent_element_factor();
  // optional double design_frequency_hz = 1 [json_name = "designFrequencyHz"];
  bool has_design_frequency_hz() const;
  void clear_design_frequency_hz() ;
  double design_frequency_hz() const;
  void set_design_frequency_hz(double value);

  private:
  double _internal_design_frequency_hz() const;
  void _internal_set_design_frequency_hz(double value);

  public:
  // optional double backlobe_suppression_db = 2 [json_name = "backlobeSuppressionDb"];
  bool has_backlobe_suppression_db() const;
  void clear_backlobe_suppression_db() ;
  double backlobe_suppression_db() const;
  void set_backlobe_suppression_db(double value);

  private:
  double _internal_backlobe_suppression_db() const;
  void _internal_set_backlobe_suppression_db(double value);

  public:
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer minimum_variance_distortionless_response_beamformer = 4 [json_name = "minimumVarianceDistortionlessResponseBeamformer"];
  bool has_minimum_variance_distortionless_response_beamformer() const;
  private:
  bool _internal_has_minimum_variance_distortionless_response_beamformer() const;

  public:
  void clear_minimum_variance_distortionless_response_beamformer() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& minimum_variance_distortionless_response_beamformer() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* release_minimum_variance_distortionless_response_beamformer();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* mutable_minimum_variance_distortionless_response_beamformer();
  void set_allocated_minimum_variance_distortionless_response_beamformer(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* minimum_variance_distortionless_response_beamformer);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& _internal_minimum_variance_distortionless_response_beamformer() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* _internal_mutable_minimum_variance_distortionless_response_beamformer();
  public:
  void unsafe_arena_set_allocated_minimum_variance_distortionless_response_beamformer(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* minimum_variance_distortionless_response_beamformer);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* unsafe_arena_release_minimum_variance_distortionless_response_beamformer();
  void clear_beamformer();
  BeamformerCase beamformer_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern)
 private:
  class _Internal;
  void set_has_minimum_variance_distortionless_response_beamformer();

  inline bool has_beamformer() const;
  inline void clear_has_beamformer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element > elements_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* cosine_exponent_element_factor_;
    double design_frequency_hz_;
    double backlobe_suppression_db_;
    union BeamformerUnion {
      constexpr BeamformerUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* minimum_variance_distortionless_response_beamformer_;
    } beamformer_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_NearAndFarFieldAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern) */ {
 public:
  inline AntennaPattern_NearAndFarFieldAntennaPattern() : AntennaPattern_NearAndFarFieldAntennaPattern(nullptr) {}
  ~AntennaPattern_NearAndFarFieldAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_NearAndFarFieldAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_NearAndFarFieldAntennaPattern(const AntennaPattern_NearAndFarFieldAntennaPattern& from);
  AntennaPattern_NearAndFarFieldAntennaPattern(AntennaPattern_NearAndFarFieldAntennaPattern&& from) noexcept
    : AntennaPattern_NearAndFarFieldAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_NearAndFarFieldAntennaPattern& operator=(const AntennaPattern_NearAndFarFieldAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_NearAndFarFieldAntennaPattern& operator=(AntennaPattern_NearAndFarFieldAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_NearAndFarFieldAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_NearAndFarFieldAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_NearAndFarFieldAntennaPattern*>(
               &_AntennaPattern_NearAndFarFieldAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AntennaPattern_NearAndFarFieldAntennaPattern& a, AntennaPattern_NearAndFarFieldAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_NearAndFarFieldAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_NearAndFarFieldAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_NearAndFarFieldAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_NearAndFarFieldAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_NearAndFarFieldAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_NearAndFarFieldAntennaPattern& from) {
    AntennaPattern_NearAndFarFieldAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_NearAndFarFieldAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern";
  }
  protected:
  explicit AntennaPattern_NearAndFarFieldAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearFieldPatternFieldNumber = 1,
    kFarFieldPatternFieldNumber = 2,
    kNearFieldRangeMFieldNumber = 3,
  };
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern near_field_pattern = 1 [json_name = "nearFieldPattern"];
  bool has_near_field_pattern() const;
  void clear_near_field_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& near_field_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* release_near_field_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* mutable_near_field_pattern();
  void set_allocated_near_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* near_field_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& _internal_near_field_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _internal_mutable_near_field_pattern();
  public:
  void unsafe_arena_set_allocated_near_field_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* near_field_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* unsafe_arena_release_near_field_pattern();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern far_field_pattern = 2 [json_name = "farFieldPattern"];
  bool has_far_field_pattern() const;
  void clear_far_field_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& far_field_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* release_far_field_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* mutable_far_field_pattern();
  void set_allocated_far_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* far_field_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& _internal_far_field_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _internal_mutable_far_field_pattern();
  public:
  void unsafe_arena_set_allocated_far_field_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* far_field_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* unsafe_arena_release_far_field_pattern();
  // optional double near_field_range_m = 3 [json_name = "nearFieldRangeM"];
  bool has_near_field_range_m() const;
  void clear_near_field_range_m() ;
  double near_field_range_m() const;
  void set_near_field_range_m(double value);

  private:
  double _internal_near_field_range_m() const;
  void _internal_set_near_field_range_m(double value);

  public:
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* near_field_pattern_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* far_field_pattern_;
    double near_field_range_m_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern_TransmitterAndReceiverAntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern) */ {
 public:
  inline AntennaPattern_TransmitterAndReceiverAntennaPattern() : AntennaPattern_TransmitterAndReceiverAntennaPattern(nullptr) {}
  ~AntennaPattern_TransmitterAndReceiverAntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern_TransmitterAndReceiverAntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern_TransmitterAndReceiverAntennaPattern(const AntennaPattern_TransmitterAndReceiverAntennaPattern& from);
  AntennaPattern_TransmitterAndReceiverAntennaPattern(AntennaPattern_TransmitterAndReceiverAntennaPattern&& from) noexcept
    : AntennaPattern_TransmitterAndReceiverAntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern_TransmitterAndReceiverAntennaPattern& operator=(const AntennaPattern_TransmitterAndReceiverAntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern_TransmitterAndReceiverAntennaPattern& operator=(AntennaPattern_TransmitterAndReceiverAntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern_TransmitterAndReceiverAntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const AntennaPattern_TransmitterAndReceiverAntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern_TransmitterAndReceiverAntennaPattern*>(
               &_AntennaPattern_TransmitterAndReceiverAntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AntennaPattern_TransmitterAndReceiverAntennaPattern& a, AntennaPattern_TransmitterAndReceiverAntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern_TransmitterAndReceiverAntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern_TransmitterAndReceiverAntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern_TransmitterAndReceiverAntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern_TransmitterAndReceiverAntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern_TransmitterAndReceiverAntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern_TransmitterAndReceiverAntennaPattern& from) {
    AntennaPattern_TransmitterAndReceiverAntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern_TransmitterAndReceiverAntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern";
  }
  protected:
  explicit AntennaPattern_TransmitterAndReceiverAntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmitterPatternFieldNumber = 1,
    kReceiverPatternFieldNumber = 2,
  };
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern transmitter_pattern = 1 [json_name = "transmitterPattern"];
  bool has_transmitter_pattern() const;
  void clear_transmitter_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& transmitter_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* release_transmitter_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* mutable_transmitter_pattern();
  void set_allocated_transmitter_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* transmitter_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& _internal_transmitter_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _internal_mutable_transmitter_pattern();
  public:
  void unsafe_arena_set_allocated_transmitter_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* transmitter_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* unsafe_arena_release_transmitter_pattern();
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern receiver_pattern = 2 [json_name = "receiverPattern"];
  bool has_receiver_pattern() const;
  void clear_receiver_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& receiver_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* release_receiver_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* mutable_receiver_pattern();
  void set_allocated_receiver_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* receiver_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& _internal_receiver_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _internal_mutable_receiver_pattern();
  public:
  void unsafe_arena_set_allocated_receiver_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* receiver_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* unsafe_arena_release_receiver_pattern();
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* transmitter_pattern_;
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* receiver_pattern_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};// -------------------------------------------------------------------

class AntennaPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern) */ {
 public:
  inline AntennaPattern() : AntennaPattern(nullptr) {}
  ~AntennaPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AntennaPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntennaPattern(const AntennaPattern& from);
  AntennaPattern(AntennaPattern&& from) noexcept
    : AntennaPattern() {
    *this = ::std::move(from);
  }

  inline AntennaPattern& operator=(const AntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaPattern& operator=(AntennaPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntennaPattern& default_instance() {
    return *internal_default_instance();
  }
  enum PatternTypeCase {
    kCustomPhiThetaPattern = 1,
    kGaussianPattern = 2,
    kHelicalPattern = 3,
    kIsotropicPattern = 4,
    kParabolicPattern = 5,
    kSquareHornPattern = 6,
    kGaussianOpticalPattern = 7,
    kPhasedArrayPattern = 10,
    kNearAndFarFieldPattern = 9,
    kTransmitterAndReceiverPattern = 11,
    kCustomAntennaPatternPerAngle = 12,
    kCustomAzElPattern = 13,
    PATTERN_TYPE_NOT_SET = 0,
  };

  static inline const AntennaPattern* internal_default_instance() {
    return reinterpret_cast<const AntennaPattern*>(
               &_AntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AntennaPattern& a, AntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntennaPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntennaPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntennaPattern& from) {
    AntennaPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern";
  }
  protected:
  explicit AntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntennaPattern_CustomPhiThetaAntennaPattern CustomPhiThetaAntennaPattern;
  typedef AntennaPattern_CustomAzElAntennaPattern CustomAzElAntennaPattern;
  typedef AntennaPattern_CustomAntennaPatternPerAngle CustomAntennaPatternPerAngle;
  typedef AntennaPattern_GaussianAntennaPattern GaussianAntennaPattern;
  typedef AntennaPattern_HelicalAntennaPattern HelicalAntennaPattern;
  typedef AntennaPattern_IsotropicAntennaPattern IsotropicAntennaPattern;
  typedef AntennaPattern_ParabolicAntennaPattern ParabolicAntennaPattern;
  typedef AntennaPattern_SquareHornAntennaPattern SquareHornAntennaPattern;
  typedef AntennaPattern_GaussianOpticalAntennaPattern GaussianOpticalAntennaPattern;
  typedef AntennaPattern_PhasedArrayAntennaPattern PhasedArrayAntennaPattern;
  typedef AntennaPattern_NearAndFarFieldAntennaPattern NearAndFarFieldAntennaPattern;
  typedef AntennaPattern_TransmitterAndReceiverAntennaPattern TransmitterAndReceiverAntennaPattern;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomPhiThetaPatternFieldNumber = 1,
    kGaussianPatternFieldNumber = 2,
    kHelicalPatternFieldNumber = 3,
    kIsotropicPatternFieldNumber = 4,
    kParabolicPatternFieldNumber = 5,
    kSquareHornPatternFieldNumber = 6,
    kGaussianOpticalPatternFieldNumber = 7,
    kPhasedArrayPatternFieldNumber = 10,
    kNearAndFarFieldPatternFieldNumber = 9,
    kTransmitterAndReceiverPatternFieldNumber = 11,
    kCustomAntennaPatternPerAngleFieldNumber = 12,
    kCustomAzElPatternFieldNumber = 13,
  };
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_phi_theta_pattern = 1 [json_name = "customPhiThetaPattern"];
  bool has_custom_phi_theta_pattern() const;
  private:
  bool _internal_has_custom_phi_theta_pattern() const;

  public:
  void clear_custom_phi_theta_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& custom_phi_theta_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* release_custom_phi_theta_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* mutable_custom_phi_theta_pattern();
  void set_allocated_custom_phi_theta_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_phi_theta_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& _internal_custom_phi_theta_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* _internal_mutable_custom_phi_theta_pattern();
  public:
  void unsafe_arena_set_allocated_custom_phi_theta_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_phi_theta_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* unsafe_arena_release_custom_phi_theta_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern gaussian_pattern = 2 [json_name = "gaussianPattern"];
  bool has_gaussian_pattern() const;
  private:
  bool _internal_has_gaussian_pattern() const;

  public:
  void clear_gaussian_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern& gaussian_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* release_gaussian_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* mutable_gaussian_pattern();
  void set_allocated_gaussian_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* gaussian_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern& _internal_gaussian_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* _internal_mutable_gaussian_pattern();
  public:
  void unsafe_arena_set_allocated_gaussian_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* gaussian_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* unsafe_arena_release_gaussian_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern helical_pattern = 3 [json_name = "helicalPattern"];
  bool has_helical_pattern() const;
  private:
  bool _internal_has_helical_pattern() const;

  public:
  void clear_helical_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern& helical_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* release_helical_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* mutable_helical_pattern();
  void set_allocated_helical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* helical_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern& _internal_helical_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* _internal_mutable_helical_pattern();
  public:
  void unsafe_arena_set_allocated_helical_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* helical_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* unsafe_arena_release_helical_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern isotropic_pattern = 4 [json_name = "isotropicPattern"];
  bool has_isotropic_pattern() const;
  private:
  bool _internal_has_isotropic_pattern() const;

  public:
  void clear_isotropic_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern& isotropic_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* release_isotropic_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* mutable_isotropic_pattern();
  void set_allocated_isotropic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* isotropic_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern& _internal_isotropic_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* _internal_mutable_isotropic_pattern();
  public:
  void unsafe_arena_set_allocated_isotropic_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* isotropic_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* unsafe_arena_release_isotropic_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern parabolic_pattern = 5 [json_name = "parabolicPattern"];
  bool has_parabolic_pattern() const;
  private:
  bool _internal_has_parabolic_pattern() const;

  public:
  void clear_parabolic_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern& parabolic_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* release_parabolic_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* mutable_parabolic_pattern();
  void set_allocated_parabolic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* parabolic_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern& _internal_parabolic_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* _internal_mutable_parabolic_pattern();
  public:
  void unsafe_arena_set_allocated_parabolic_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* parabolic_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* unsafe_arena_release_parabolic_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern square_horn_pattern = 6 [json_name = "squareHornPattern"];
  bool has_square_horn_pattern() const;
  private:
  bool _internal_has_square_horn_pattern() const;

  public:
  void clear_square_horn_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern& square_horn_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* release_square_horn_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* mutable_square_horn_pattern();
  void set_allocated_square_horn_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* square_horn_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern& _internal_square_horn_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* _internal_mutable_square_horn_pattern();
  public:
  void unsafe_arena_set_allocated_square_horn_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* square_horn_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* unsafe_arena_release_square_horn_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern gaussian_optical_pattern = 7 [json_name = "gaussianOpticalPattern"];
  bool has_gaussian_optical_pattern() const;
  private:
  bool _internal_has_gaussian_optical_pattern() const;

  public:
  void clear_gaussian_optical_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern& gaussian_optical_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* release_gaussian_optical_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* mutable_gaussian_optical_pattern();
  void set_allocated_gaussian_optical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* gaussian_optical_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern& _internal_gaussian_optical_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* _internal_mutable_gaussian_optical_pattern();
  public:
  void unsafe_arena_set_allocated_gaussian_optical_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* gaussian_optical_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* unsafe_arena_release_gaussian_optical_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern phased_array_pattern = 10 [json_name = "phasedArrayPattern"];
  bool has_phased_array_pattern() const;
  private:
  bool _internal_has_phased_array_pattern() const;

  public:
  void clear_phased_array_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern& phased_array_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* release_phased_array_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* mutable_phased_array_pattern();
  void set_allocated_phased_array_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* phased_array_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern& _internal_phased_array_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* _internal_mutable_phased_array_pattern();
  public:
  void unsafe_arena_set_allocated_phased_array_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* phased_array_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* unsafe_arena_release_phased_array_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern near_and_far_field_pattern = 9 [json_name = "nearAndFarFieldPattern"];
  bool has_near_and_far_field_pattern() const;
  private:
  bool _internal_has_near_and_far_field_pattern() const;

  public:
  void clear_near_and_far_field_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern& near_and_far_field_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* release_near_and_far_field_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* mutable_near_and_far_field_pattern();
  void set_allocated_near_and_far_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* near_and_far_field_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern& _internal_near_and_far_field_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* _internal_mutable_near_and_far_field_pattern();
  public:
  void unsafe_arena_set_allocated_near_and_far_field_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* near_and_far_field_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* unsafe_arena_release_near_and_far_field_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern transmitter_and_receiver_pattern = 11 [json_name = "transmitterAndReceiverPattern"];
  bool has_transmitter_and_receiver_pattern() const;
  private:
  bool _internal_has_transmitter_and_receiver_pattern() const;

  public:
  void clear_transmitter_and_receiver_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern& transmitter_and_receiver_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* release_transmitter_and_receiver_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* mutable_transmitter_and_receiver_pattern();
  void set_allocated_transmitter_and_receiver_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* transmitter_and_receiver_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern& _internal_transmitter_and_receiver_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* _internal_mutable_transmitter_and_receiver_pattern();
  public:
  void unsafe_arena_set_allocated_transmitter_and_receiver_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* transmitter_and_receiver_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* unsafe_arena_release_transmitter_and_receiver_pattern();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle custom_antenna_pattern_per_angle = 12 [json_name = "customAntennaPatternPerAngle"];
  bool has_custom_antenna_pattern_per_angle() const;
  private:
  bool _internal_has_custom_antenna_pattern_per_angle() const;

  public:
  void clear_custom_antenna_pattern_per_angle() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle& custom_antenna_pattern_per_angle() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* release_custom_antenna_pattern_per_angle();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* mutable_custom_antenna_pattern_per_angle();
  void set_allocated_custom_antenna_pattern_per_angle(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* custom_antenna_pattern_per_angle);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle& _internal_custom_antenna_pattern_per_angle() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* _internal_mutable_custom_antenna_pattern_per_angle();
  public:
  void unsafe_arena_set_allocated_custom_antenna_pattern_per_angle(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* custom_antenna_pattern_per_angle);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* unsafe_arena_release_custom_antenna_pattern_per_angle();
  // .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern custom_az_el_pattern = 13 [json_name = "customAzElPattern"];
  bool has_custom_az_el_pattern() const;
  private:
  bool _internal_has_custom_az_el_pattern() const;

  public:
  void clear_custom_az_el_pattern() ;
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern& custom_az_el_pattern() const;
  PROTOBUF_NODISCARD ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* release_custom_az_el_pattern();
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* mutable_custom_az_el_pattern();
  void set_allocated_custom_az_el_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* custom_az_el_pattern);
  private:
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern& _internal_custom_az_el_pattern() const;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* _internal_mutable_custom_az_el_pattern();
  public:
  void unsafe_arena_set_allocated_custom_az_el_pattern(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* custom_az_el_pattern);
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* unsafe_arena_release_custom_az_el_pattern();
  void clear_pattern_type();
  PatternTypeCase pattern_type_case() const;
  // @@protoc_insertion_point(class_scope:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern)
 private:
  class _Internal;
  void set_has_custom_phi_theta_pattern();
  void set_has_gaussian_pattern();
  void set_has_helical_pattern();
  void set_has_isotropic_pattern();
  void set_has_parabolic_pattern();
  void set_has_square_horn_pattern();
  void set_has_gaussian_optical_pattern();
  void set_has_phased_array_pattern();
  void set_has_near_and_far_field_pattern();
  void set_has_transmitter_and_receiver_pattern();
  void set_has_custom_antenna_pattern_per_angle();
  void set_has_custom_az_el_pattern();

  inline bool has_pattern_type() const;
  inline void clear_has_pattern_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PatternTypeUnion {
      constexpr PatternTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_phi_theta_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* gaussian_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* helical_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* isotropic_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* parabolic_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* square_horn_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* gaussian_optical_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* phased_array_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* near_and_far_field_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* transmitter_and_receiver_pattern_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* custom_antenna_pattern_per_angle_;
      ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* custom_az_el_pattern_;
    } pattern_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue

// optional double gain_db = 1 [json_name = "gainDb"];
inline bool AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::has_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::clear_gain_db() {
  _impl_.gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.gain_db)
  return _internal_gain_db();
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::set_gain_db(double value) {
  _internal_set_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.gain_db)
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_gain_db() const {
  return _impl_.gain_db_;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_set_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gain_db_ = value;
}

// optional double phi_rad = 2 [json_name = "phiRad"];
inline bool AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::has_phi_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::clear_phi_rad() {
  _impl_.phi_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::phi_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.phi_rad)
  return _internal_phi_rad();
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::set_phi_rad(double value) {
  _internal_set_phi_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.phi_rad)
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_phi_rad() const {
  return _impl_.phi_rad_;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_set_phi_rad(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phi_rad_ = value;
}

// optional double theta_rad = 3 [json_name = "thetaRad"];
inline bool AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::has_theta_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::clear_theta_rad() {
  _impl_.theta_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::theta_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.theta_rad)
  return _internal_theta_rad();
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::set_theta_rad(double value) {
  _internal_set_theta_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue.theta_rad)
}
inline double AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_theta_rad() const {
  return _impl_.theta_rad_;
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue::_internal_set_theta_rad(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.theta_rad_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_CustomPhiThetaAntennaPattern

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.SphericalGainValue gain_value = 1 [json_name = "gainValue"];
inline int AntennaPattern_CustomPhiThetaAntennaPattern::_internal_gain_value_size() const {
  return _impl_.gain_value_.size();
}
inline int AntennaPattern_CustomPhiThetaAntennaPattern::gain_value_size() const {
  return _internal_gain_value_size();
}
inline void AntennaPattern_CustomPhiThetaAntennaPattern::clear_gain_value() {
  _internal_mutable_gain_value()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* AntennaPattern_CustomPhiThetaAntennaPattern::mutable_gain_value(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value)
  return _internal_mutable_gain_value()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >*
AntennaPattern_CustomPhiThetaAntennaPattern::mutable_gain_value() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value)
  return _internal_mutable_gain_value();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& AntennaPattern_CustomPhiThetaAntennaPattern::_internal_gain_value(int index) const {
  return _internal_gain_value().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue& AntennaPattern_CustomPhiThetaAntennaPattern::gain_value(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value)
  return _internal_gain_value(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* AntennaPattern_CustomPhiThetaAntennaPattern::_internal_add_gain_value() {
  return _internal_mutable_gain_value()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* AntennaPattern_CustomPhiThetaAntennaPattern::add_gain_value() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue* _add = _internal_add_gain_value();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue >&
AntennaPattern_CustomPhiThetaAntennaPattern::gain_value() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern.gain_value)
  return _internal_gain_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>&
AntennaPattern_CustomPhiThetaAntennaPattern::_internal_gain_value() const {
  return _impl_.gain_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern_SphericalGainValue>*
AntennaPattern_CustomPhiThetaAntennaPattern::_internal_mutable_gain_value() {
  return &_impl_.gain_value_;
}

// -------------------------------------------------------------------

// AntennaPattern_CustomAzElAntennaPattern_AzElGainValue

// optional double gain_db = 1 [json_name = "gainDb"];
inline bool AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::has_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::clear_gain_db() {
  _impl_.gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.gain_db)
  return _internal_gain_db();
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::set_gain_db(double value) {
  _internal_set_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.gain_db)
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_gain_db() const {
  return _impl_.gain_db_;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_set_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gain_db_ = value;
}

// optional double az_deg = 2 [json_name = "azDeg"];
inline bool AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::has_az_deg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::clear_az_deg() {
  _impl_.az_deg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::az_deg() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.az_deg)
  return _internal_az_deg();
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::set_az_deg(double value) {
  _internal_set_az_deg(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.az_deg)
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_az_deg() const {
  return _impl_.az_deg_;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_set_az_deg(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.az_deg_ = value;
}

// optional double el_deg = 3 [json_name = "elDeg"];
inline bool AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::has_el_deg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::clear_el_deg() {
  _impl_.el_deg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::el_deg() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.el_deg)
  return _internal_el_deg();
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::set_el_deg(double value) {
  _internal_set_el_deg(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue.el_deg)
}
inline double AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_el_deg() const {
  return _impl_.el_deg_;
}
inline void AntennaPattern_CustomAzElAntennaPattern_AzElGainValue::_internal_set_el_deg(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.el_deg_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_CustomAzElAntennaPattern

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.AzElGainValue gain_values = 1 [json_name = "gainValues"];
inline int AntennaPattern_CustomAzElAntennaPattern::_internal_gain_values_size() const {
  return _impl_.gain_values_.size();
}
inline int AntennaPattern_CustomAzElAntennaPattern::gain_values_size() const {
  return _internal_gain_values_size();
}
inline void AntennaPattern_CustomAzElAntennaPattern::clear_gain_values() {
  _internal_mutable_gain_values()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* AntennaPattern_CustomAzElAntennaPattern::mutable_gain_values(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values)
  return _internal_mutable_gain_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >*
AntennaPattern_CustomAzElAntennaPattern::mutable_gain_values() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values)
  return _internal_mutable_gain_values();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& AntennaPattern_CustomAzElAntennaPattern::_internal_gain_values(int index) const {
  return _internal_gain_values().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue& AntennaPattern_CustomAzElAntennaPattern::gain_values(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values)
  return _internal_gain_values(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* AntennaPattern_CustomAzElAntennaPattern::_internal_add_gain_values() {
  return _internal_mutable_gain_values()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* AntennaPattern_CustomAzElAntennaPattern::add_gain_values() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue* _add = _internal_add_gain_values();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue >&
AntennaPattern_CustomAzElAntennaPattern::gain_values() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern.gain_values)
  return _internal_gain_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>&
AntennaPattern_CustomAzElAntennaPattern::_internal_gain_values() const {
  return _impl_.gain_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern_AzElGainValue>*
AntennaPattern_CustomAzElAntennaPattern::_internal_mutable_gain_values() {
  return &_impl_.gain_values_;
}

// -------------------------------------------------------------------

// AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern

// optional float phi_rad = 1 [json_name = "phiRad"];
inline bool AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::has_phi_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::clear_phi_rad() {
  _impl_.phi_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::phi_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.phi_rad)
  return _internal_phi_rad();
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::set_phi_rad(float value) {
  _internal_set_phi_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.phi_rad)
}
inline float AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_phi_rad() const {
  return _impl_.phi_rad_;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_set_phi_rad(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phi_rad_ = value;
}

// optional float theta_rad = 2 [json_name = "thetaRad"];
inline bool AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::has_theta_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::clear_theta_rad() {
  _impl_.theta_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::theta_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.theta_rad)
  return _internal_theta_rad();
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::set_theta_rad(float value) {
  _internal_set_theta_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.theta_rad)
}
inline float AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_theta_rad() const {
  return _impl_.theta_rad_;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_set_theta_rad(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.theta_rad_ = value;
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_pattern = 3 [json_name = "customPattern"];
inline bool AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::has_custom_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_pattern_ != nullptr);
  return value;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::clear_custom_pattern() {
  if (_impl_.custom_pattern_ != nullptr) _impl_.custom_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_custom_pattern() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* p = _impl_.custom_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::custom_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern)
  return _internal_custom_pattern();
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::unsafe_arena_set_allocated_custom_pattern(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_pattern) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_pattern_);
  }
  _impl_.custom_pattern_ = custom_pattern;
  if (custom_pattern) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::release_custom_pattern() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* temp = _impl_.custom_pattern_;
  _impl_.custom_pattern_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::unsafe_arena_release_custom_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* temp = _impl_.custom_pattern_;
  _impl_.custom_pattern_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::_internal_mutable_custom_pattern() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.custom_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern>(GetArenaForAllocation());
    _impl_.custom_pattern_ = p;
  }
  return _impl_.custom_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::mutable_custom_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* _msg = _internal_mutable_custom_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern)
  return _msg;
}
inline void AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern::set_allocated_custom_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_pattern_;
  }
  if (custom_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_pattern);
    if (message_arena != submessage_arena) {
      custom_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_pattern, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_pattern_ = custom_pattern;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern.custom_pattern)
}

// -------------------------------------------------------------------

// AntennaPattern_CustomAntennaPatternPerAngle

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.ScanAngleAndCustomPattern scan_angle_and_custom_patterns = 1 [json_name = "scanAngleAndCustomPatterns"];
inline int AntennaPattern_CustomAntennaPatternPerAngle::_internal_scan_angle_and_custom_patterns_size() const {
  return _impl_.scan_angle_and_custom_patterns_.size();
}
inline int AntennaPattern_CustomAntennaPatternPerAngle::scan_angle_and_custom_patterns_size() const {
  return _internal_scan_angle_and_custom_patterns_size();
}
inline void AntennaPattern_CustomAntennaPatternPerAngle::clear_scan_angle_and_custom_patterns() {
  _internal_mutable_scan_angle_and_custom_patterns()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* AntennaPattern_CustomAntennaPatternPerAngle::mutable_scan_angle_and_custom_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns)
  return _internal_mutable_scan_angle_and_custom_patterns()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >*
AntennaPattern_CustomAntennaPatternPerAngle::mutable_scan_angle_and_custom_patterns() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns)
  return _internal_mutable_scan_angle_and_custom_patterns();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& AntennaPattern_CustomAntennaPatternPerAngle::_internal_scan_angle_and_custom_patterns(int index) const {
  return _internal_scan_angle_and_custom_patterns().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern& AntennaPattern_CustomAntennaPatternPerAngle::scan_angle_and_custom_patterns(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns)
  return _internal_scan_angle_and_custom_patterns(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* AntennaPattern_CustomAntennaPatternPerAngle::_internal_add_scan_angle_and_custom_patterns() {
  return _internal_mutable_scan_angle_and_custom_patterns()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* AntennaPattern_CustomAntennaPatternPerAngle::add_scan_angle_and_custom_patterns() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern* _add = _internal_add_scan_angle_and_custom_patterns();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern >&
AntennaPattern_CustomAntennaPatternPerAngle::scan_angle_and_custom_patterns() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle.scan_angle_and_custom_patterns)
  return _internal_scan_angle_and_custom_patterns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>&
AntennaPattern_CustomAntennaPatternPerAngle::_internal_scan_angle_and_custom_patterns() const {
  return _impl_.scan_angle_and_custom_patterns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle_ScanAngleAndCustomPattern>*
AntennaPattern_CustomAntennaPatternPerAngle::_internal_mutable_scan_angle_and_custom_patterns() {
  return &_impl_.scan_angle_and_custom_patterns_;
}

// -------------------------------------------------------------------

// AntennaPattern_GaussianAntennaPattern

// optional double diameter_m = 1 [json_name = "diameterM"];
inline bool AntennaPattern_GaussianAntennaPattern::has_diameter_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_GaussianAntennaPattern::clear_diameter_m() {
  _impl_.diameter_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_GaussianAntennaPattern::diameter_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.diameter_m)
  return _internal_diameter_m();
}
inline void AntennaPattern_GaussianAntennaPattern::set_diameter_m(double value) {
  _internal_set_diameter_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.diameter_m)
}
inline double AntennaPattern_GaussianAntennaPattern::_internal_diameter_m() const {
  return _impl_.diameter_m_;
}
inline void AntennaPattern_GaussianAntennaPattern::_internal_set_diameter_m(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.diameter_m_ = value;
}

// optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
inline bool AntennaPattern_GaussianAntennaPattern::has_efficiency_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_GaussianAntennaPattern::clear_efficiency_percent() {
  _impl_.efficiency_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_GaussianAntennaPattern::efficiency_percent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.efficiency_percent)
  return _internal_efficiency_percent();
}
inline void AntennaPattern_GaussianAntennaPattern::set_efficiency_percent(double value) {
  _internal_set_efficiency_percent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.efficiency_percent)
}
inline double AntennaPattern_GaussianAntennaPattern::_internal_efficiency_percent() const {
  return _impl_.efficiency_percent_;
}
inline void AntennaPattern_GaussianAntennaPattern::_internal_set_efficiency_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.efficiency_percent_ = value;
}

// optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
inline bool AntennaPattern_GaussianAntennaPattern::has_backlobe_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_GaussianAntennaPattern::clear_backlobe_gain_db() {
  _impl_.backlobe_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_GaussianAntennaPattern::backlobe_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.backlobe_gain_db)
  return _internal_backlobe_gain_db();
}
inline void AntennaPattern_GaussianAntennaPattern::set_backlobe_gain_db(double value) {
  _internal_set_backlobe_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern.backlobe_gain_db)
}
inline double AntennaPattern_GaussianAntennaPattern::_internal_backlobe_gain_db() const {
  return _impl_.backlobe_gain_db_;
}
inline void AntennaPattern_GaussianAntennaPattern::_internal_set_backlobe_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backlobe_gain_db_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_HelicalAntennaPattern

// optional double diameter_m = 1 [json_name = "diameterM"];
inline bool AntennaPattern_HelicalAntennaPattern::has_diameter_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_HelicalAntennaPattern::clear_diameter_m() {
  _impl_.diameter_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_HelicalAntennaPattern::diameter_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.diameter_m)
  return _internal_diameter_m();
}
inline void AntennaPattern_HelicalAntennaPattern::set_diameter_m(double value) {
  _internal_set_diameter_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.diameter_m)
}
inline double AntennaPattern_HelicalAntennaPattern::_internal_diameter_m() const {
  return _impl_.diameter_m_;
}
inline void AntennaPattern_HelicalAntennaPattern::_internal_set_diameter_m(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.diameter_m_ = value;
}

// optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
inline bool AntennaPattern_HelicalAntennaPattern::has_efficiency_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_HelicalAntennaPattern::clear_efficiency_percent() {
  _impl_.efficiency_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_HelicalAntennaPattern::efficiency_percent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.efficiency_percent)
  return _internal_efficiency_percent();
}
inline void AntennaPattern_HelicalAntennaPattern::set_efficiency_percent(double value) {
  _internal_set_efficiency_percent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.efficiency_percent)
}
inline double AntennaPattern_HelicalAntennaPattern::_internal_efficiency_percent() const {
  return _impl_.efficiency_percent_;
}
inline void AntennaPattern_HelicalAntennaPattern::_internal_set_efficiency_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.efficiency_percent_ = value;
}

// optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
inline bool AntennaPattern_HelicalAntennaPattern::has_backlobe_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_HelicalAntennaPattern::clear_backlobe_gain_db() {
  _impl_.backlobe_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_HelicalAntennaPattern::backlobe_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.backlobe_gain_db)
  return _internal_backlobe_gain_db();
}
inline void AntennaPattern_HelicalAntennaPattern::set_backlobe_gain_db(double value) {
  _internal_set_backlobe_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.backlobe_gain_db)
}
inline double AntennaPattern_HelicalAntennaPattern::_internal_backlobe_gain_db() const {
  return _impl_.backlobe_gain_db_;
}
inline void AntennaPattern_HelicalAntennaPattern::_internal_set_backlobe_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backlobe_gain_db_ = value;
}

// optional double number_of_turns = 4 [json_name = "numberOfTurns"];
inline bool AntennaPattern_HelicalAntennaPattern::has_number_of_turns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AntennaPattern_HelicalAntennaPattern::clear_number_of_turns() {
  _impl_.number_of_turns_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AntennaPattern_HelicalAntennaPattern::number_of_turns() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.number_of_turns)
  return _internal_number_of_turns();
}
inline void AntennaPattern_HelicalAntennaPattern::set_number_of_turns(double value) {
  _internal_set_number_of_turns(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.number_of_turns)
}
inline double AntennaPattern_HelicalAntennaPattern::_internal_number_of_turns() const {
  return _impl_.number_of_turns_;
}
inline void AntennaPattern_HelicalAntennaPattern::_internal_set_number_of_turns(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.number_of_turns_ = value;
}

// optional double turn_spacing_m = 5 [json_name = "turnSpacingM"];
inline bool AntennaPattern_HelicalAntennaPattern::has_turn_spacing_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AntennaPattern_HelicalAntennaPattern::clear_turn_spacing_m() {
  _impl_.turn_spacing_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AntennaPattern_HelicalAntennaPattern::turn_spacing_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.turn_spacing_m)
  return _internal_turn_spacing_m();
}
inline void AntennaPattern_HelicalAntennaPattern::set_turn_spacing_m(double value) {
  _internal_set_turn_spacing_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern.turn_spacing_m)
}
inline double AntennaPattern_HelicalAntennaPattern::_internal_turn_spacing_m() const {
  return _impl_.turn_spacing_m_;
}
inline void AntennaPattern_HelicalAntennaPattern::_internal_set_turn_spacing_m(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.turn_spacing_m_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_IsotropicAntennaPattern

// -------------------------------------------------------------------

// AntennaPattern_ParabolicAntennaPattern

// optional double diameter_m = 1 [json_name = "diameterM"];
inline bool AntennaPattern_ParabolicAntennaPattern::has_diameter_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_ParabolicAntennaPattern::clear_diameter_m() {
  _impl_.diameter_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_ParabolicAntennaPattern::diameter_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.diameter_m)
  return _internal_diameter_m();
}
inline void AntennaPattern_ParabolicAntennaPattern::set_diameter_m(double value) {
  _internal_set_diameter_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.diameter_m)
}
inline double AntennaPattern_ParabolicAntennaPattern::_internal_diameter_m() const {
  return _impl_.diameter_m_;
}
inline void AntennaPattern_ParabolicAntennaPattern::_internal_set_diameter_m(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.diameter_m_ = value;
}

// optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
inline bool AntennaPattern_ParabolicAntennaPattern::has_efficiency_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_ParabolicAntennaPattern::clear_efficiency_percent() {
  _impl_.efficiency_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_ParabolicAntennaPattern::efficiency_percent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.efficiency_percent)
  return _internal_efficiency_percent();
}
inline void AntennaPattern_ParabolicAntennaPattern::set_efficiency_percent(double value) {
  _internal_set_efficiency_percent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.efficiency_percent)
}
inline double AntennaPattern_ParabolicAntennaPattern::_internal_efficiency_percent() const {
  return _impl_.efficiency_percent_;
}
inline void AntennaPattern_ParabolicAntennaPattern::_internal_set_efficiency_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.efficiency_percent_ = value;
}

// optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
inline bool AntennaPattern_ParabolicAntennaPattern::has_backlobe_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_ParabolicAntennaPattern::clear_backlobe_gain_db() {
  _impl_.backlobe_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_ParabolicAntennaPattern::backlobe_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.backlobe_gain_db)
  return _internal_backlobe_gain_db();
}
inline void AntennaPattern_ParabolicAntennaPattern::set_backlobe_gain_db(double value) {
  _internal_set_backlobe_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern.backlobe_gain_db)
}
inline double AntennaPattern_ParabolicAntennaPattern::_internal_backlobe_gain_db() const {
  return _impl_.backlobe_gain_db_;
}
inline void AntennaPattern_ParabolicAntennaPattern::_internal_set_backlobe_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backlobe_gain_db_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_SquareHornAntennaPattern

// optional double diameter_m = 1 [json_name = "diameterM"];
inline bool AntennaPattern_SquareHornAntennaPattern::has_diameter_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_SquareHornAntennaPattern::clear_diameter_m() {
  _impl_.diameter_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_SquareHornAntennaPattern::diameter_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.diameter_m)
  return _internal_diameter_m();
}
inline void AntennaPattern_SquareHornAntennaPattern::set_diameter_m(double value) {
  _internal_set_diameter_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.diameter_m)
}
inline double AntennaPattern_SquareHornAntennaPattern::_internal_diameter_m() const {
  return _impl_.diameter_m_;
}
inline void AntennaPattern_SquareHornAntennaPattern::_internal_set_diameter_m(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.diameter_m_ = value;
}

// optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
inline bool AntennaPattern_SquareHornAntennaPattern::has_efficiency_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_SquareHornAntennaPattern::clear_efficiency_percent() {
  _impl_.efficiency_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_SquareHornAntennaPattern::efficiency_percent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.efficiency_percent)
  return _internal_efficiency_percent();
}
inline void AntennaPattern_SquareHornAntennaPattern::set_efficiency_percent(double value) {
  _internal_set_efficiency_percent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.efficiency_percent)
}
inline double AntennaPattern_SquareHornAntennaPattern::_internal_efficiency_percent() const {
  return _impl_.efficiency_percent_;
}
inline void AntennaPattern_SquareHornAntennaPattern::_internal_set_efficiency_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.efficiency_percent_ = value;
}

// optional double backlobe_gain_db = 3 [json_name = "backlobeGainDb"];
inline bool AntennaPattern_SquareHornAntennaPattern::has_backlobe_gain_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_SquareHornAntennaPattern::clear_backlobe_gain_db() {
  _impl_.backlobe_gain_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_SquareHornAntennaPattern::backlobe_gain_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.backlobe_gain_db)
  return _internal_backlobe_gain_db();
}
inline void AntennaPattern_SquareHornAntennaPattern::set_backlobe_gain_db(double value) {
  _internal_set_backlobe_gain_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern.backlobe_gain_db)
}
inline double AntennaPattern_SquareHornAntennaPattern::_internal_backlobe_gain_db() const {
  return _impl_.backlobe_gain_db_;
}
inline void AntennaPattern_SquareHornAntennaPattern::_internal_set_backlobe_gain_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backlobe_gain_db_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_GaussianOpticalAntennaPattern

// optional double diameter_m = 1 [json_name = "diameterM"];
inline bool AntennaPattern_GaussianOpticalAntennaPattern::has_diameter_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::clear_diameter_m() {
  _impl_.diameter_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::diameter_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.diameter_m)
  return _internal_diameter_m();
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::set_diameter_m(double value) {
  _internal_set_diameter_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.diameter_m)
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::_internal_diameter_m() const {
  return _impl_.diameter_m_;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::_internal_set_diameter_m(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.diameter_m_ = value;
}

// optional double efficiency_percent = 2 [json_name = "efficiencyPercent"];
inline bool AntennaPattern_GaussianOpticalAntennaPattern::has_efficiency_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::clear_efficiency_percent() {
  _impl_.efficiency_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::efficiency_percent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.efficiency_percent)
  return _internal_efficiency_percent();
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::set_efficiency_percent(double value) {
  _internal_set_efficiency_percent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.efficiency_percent)
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::_internal_efficiency_percent() const {
  return _impl_.efficiency_percent_;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::_internal_set_efficiency_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.efficiency_percent_ = value;
}

// optional double divergence_angle_rad = 3 [json_name = "divergenceAngleRad"];
inline bool AntennaPattern_GaussianOpticalAntennaPattern::has_divergence_angle_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::clear_divergence_angle_rad() {
  _impl_.divergence_angle_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::divergence_angle_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.divergence_angle_rad)
  return _internal_divergence_angle_rad();
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::set_divergence_angle_rad(double value) {
  _internal_set_divergence_angle_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.divergence_angle_rad)
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::_internal_divergence_angle_rad() const {
  return _impl_.divergence_angle_rad_;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::_internal_set_divergence_angle_rad(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.divergence_angle_rad_ = value;
}

// optional double pointing_error_rad = 4 [json_name = "pointingErrorRad"];
inline bool AntennaPattern_GaussianOpticalAntennaPattern::has_pointing_error_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::clear_pointing_error_rad() {
  _impl_.pointing_error_rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::pointing_error_rad() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.pointing_error_rad)
  return _internal_pointing_error_rad();
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::set_pointing_error_rad(double value) {
  _internal_set_pointing_error_rad(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern.pointing_error_rad)
}
inline double AntennaPattern_GaussianOpticalAntennaPattern::_internal_pointing_error_rad() const {
  return _impl_.pointing_error_rad_;
}
inline void AntennaPattern_GaussianOpticalAntennaPattern::_internal_set_pointing_error_rad(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pointing_error_rad_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_PhasedArrayAntennaPattern_Element

// optional double x = 1 [json_name = "x"];
inline bool AntennaPattern_PhasedArrayAntennaPattern_Element::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern_Element::x() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element.x)
  return _internal_x();
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element.x)
}
inline double AntennaPattern_PhasedArrayAntennaPattern_Element::_internal_x() const {
  return _impl_.x_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}

// optional double y = 2 [json_name = "y"];
inline bool AntennaPattern_PhasedArrayAntennaPattern_Element::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern_Element::y() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element.y)
  return _internal_y();
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element.y)
}
inline double AntennaPattern_PhasedArrayAntennaPattern_Element::_internal_y() const {
  return _impl_.y_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_Element::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer

// optional double beam_variance = 1 [json_name = "beamVariance"];
inline bool AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::has_beam_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::clear_beam_variance() {
  _impl_.beam_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::beam_variance() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer.beam_variance)
  return _internal_beam_variance();
}
inline void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::set_beam_variance(double value) {
  _internal_set_beam_variance(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer.beam_variance)
}
inline double AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_internal_beam_variance() const {
  return _impl_.beam_variance_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer::_internal_set_beam_variance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.beam_variance_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor

// optional double cosine_exponent = 1 [json_name = "cosineExponent"];
inline bool AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::has_cosine_exponent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::clear_cosine_exponent() {
  _impl_.cosine_exponent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::cosine_exponent() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor.cosine_exponent)
  return _internal_cosine_exponent();
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::set_cosine_exponent(double value) {
  _internal_set_cosine_exponent(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor.cosine_exponent)
}
inline double AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_internal_cosine_exponent() const {
  return _impl_.cosine_exponent_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_internal_set_cosine_exponent(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cosine_exponent_ = value;
}

// optional double element_area_m2 = 2 [json_name = "elementAreaM2"];
inline bool AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::has_element_area_m2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::clear_element_area_m2() {
  _impl_.element_area_m2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::element_area_m2() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor.element_area_m2)
  return _internal_element_area_m2();
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::set_element_area_m2(double value) {
  _internal_set_element_area_m2(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor.element_area_m2)
}
inline double AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_internal_element_area_m2() const {
  return _impl_.element_area_m2_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor::_internal_set_element_area_m2(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.element_area_m2_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_PhasedArrayAntennaPattern

// optional double design_frequency_hz = 1 [json_name = "designFrequencyHz"];
inline bool AntennaPattern_PhasedArrayAntennaPattern::has_design_frequency_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_design_frequency_hz() {
  _impl_.design_frequency_hz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern::design_frequency_hz() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.design_frequency_hz)
  return _internal_design_frequency_hz();
}
inline void AntennaPattern_PhasedArrayAntennaPattern::set_design_frequency_hz(double value) {
  _internal_set_design_frequency_hz(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.design_frequency_hz)
}
inline double AntennaPattern_PhasedArrayAntennaPattern::_internal_design_frequency_hz() const {
  return _impl_.design_frequency_hz_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::_internal_set_design_frequency_hz(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.design_frequency_hz_ = value;
}

// optional double backlobe_suppression_db = 2 [json_name = "backlobeSuppressionDb"];
inline bool AntennaPattern_PhasedArrayAntennaPattern::has_backlobe_suppression_db() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_backlobe_suppression_db() {
  _impl_.backlobe_suppression_db_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_PhasedArrayAntennaPattern::backlobe_suppression_db() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.backlobe_suppression_db)
  return _internal_backlobe_suppression_db();
}
inline void AntennaPattern_PhasedArrayAntennaPattern::set_backlobe_suppression_db(double value) {
  _internal_set_backlobe_suppression_db(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.backlobe_suppression_db)
}
inline double AntennaPattern_PhasedArrayAntennaPattern::_internal_backlobe_suppression_db() const {
  return _impl_.backlobe_suppression_db_;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::_internal_set_backlobe_suppression_db(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backlobe_suppression_db_ = value;
}

// repeated .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.Element elements = 3 [json_name = "elements"];
inline int AntennaPattern_PhasedArrayAntennaPattern::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int AntennaPattern_PhasedArrayAntennaPattern::elements_size() const {
  return _internal_elements_size();
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_elements() {
  _internal_mutable_elements()->Clear();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* AntennaPattern_PhasedArrayAntennaPattern::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements)
  return _internal_mutable_elements()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >*
AntennaPattern_PhasedArrayAntennaPattern::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements)
  return _internal_mutable_elements();
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element& AntennaPattern_PhasedArrayAntennaPattern::_internal_elements(int index) const {
  return _internal_elements().Get(index);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element& AntennaPattern_PhasedArrayAntennaPattern::elements(int index) const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements)
  return _internal_elements(index);
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* AntennaPattern_PhasedArrayAntennaPattern::_internal_add_elements() {
  return _internal_mutable_elements()->Add();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* AntennaPattern_PhasedArrayAntennaPattern::add_elements() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element >&
AntennaPattern_PhasedArrayAntennaPattern::elements() const {
  // @@protoc_insertion_point(field_list:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.elements)
  return _internal_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element>&
AntennaPattern_PhasedArrayAntennaPattern::_internal_elements() const {
  return _impl_.elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_Element>*
AntennaPattern_PhasedArrayAntennaPattern::_internal_mutable_elements() {
  return &_impl_.elements_;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.MinimumVarianceDistortionlessResponseBeamformer minimum_variance_distortionless_response_beamformer = 4 [json_name = "minimumVarianceDistortionlessResponseBeamformer"];
inline bool AntennaPattern_PhasedArrayAntennaPattern::has_minimum_variance_distortionless_response_beamformer() const {
  return beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer;
}
inline bool AntennaPattern_PhasedArrayAntennaPattern::_internal_has_minimum_variance_distortionless_response_beamformer() const {
  return beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::set_has_minimum_variance_distortionless_response_beamformer() {
  _impl_._oneof_case_[0] = kMinimumVarianceDistortionlessResponseBeamformer;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_minimum_variance_distortionless_response_beamformer() {
  if (beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
    }
    clear_has_beamformer();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* AntennaPattern_PhasedArrayAntennaPattern::release_minimum_variance_distortionless_response_beamformer() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
  if (beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer) {
    clear_has_beamformer();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* temp = _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& AntennaPattern_PhasedArrayAntennaPattern::_internal_minimum_variance_distortionless_response_beamformer() const {
  return beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer
      ? *_impl_.beamformer_.minimum_variance_distortionless_response_beamformer_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer& AntennaPattern_PhasedArrayAntennaPattern::minimum_variance_distortionless_response_beamformer() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
  return _internal_minimum_variance_distortionless_response_beamformer();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* AntennaPattern_PhasedArrayAntennaPattern::unsafe_arena_release_minimum_variance_distortionless_response_beamformer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
  if (beamformer_case() == kMinimumVarianceDistortionlessResponseBeamformer) {
    clear_has_beamformer();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* temp = _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
    _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern_PhasedArrayAntennaPattern::unsafe_arena_set_allocated_minimum_variance_distortionless_response_beamformer(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* minimum_variance_distortionless_response_beamformer) {
  clear_beamformer();
  if (minimum_variance_distortionless_response_beamformer) {
    set_has_minimum_variance_distortionless_response_beamformer();
    _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_ = minimum_variance_distortionless_response_beamformer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* AntennaPattern_PhasedArrayAntennaPattern::_internal_mutable_minimum_variance_distortionless_response_beamformer() {
  if (beamformer_case() != kMinimumVarianceDistortionlessResponseBeamformer) {
    clear_beamformer();
    set_has_minimum_variance_distortionless_response_beamformer();
    _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer >(GetArenaForAllocation());
  }
  return _impl_.beamformer_.minimum_variance_distortionless_response_beamformer_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* AntennaPattern_PhasedArrayAntennaPattern::mutable_minimum_variance_distortionless_response_beamformer() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_MinimumVarianceDistortionlessResponseBeamformer* _msg = _internal_mutable_minimum_variance_distortionless_response_beamformer();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.minimum_variance_distortionless_response_beamformer)
  return _msg;
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.CosineExponentElementFactor cosine_exponent_element_factor = 5 [json_name = "cosineExponentElementFactor"];
inline bool AntennaPattern_PhasedArrayAntennaPattern::has_cosine_exponent_element_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cosine_exponent_element_factor_ != nullptr);
  return value;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_cosine_exponent_element_factor() {
  if (_impl_.cosine_exponent_element_factor_ != nullptr) _impl_.cosine_exponent_element_factor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& AntennaPattern_PhasedArrayAntennaPattern::_internal_cosine_exponent_element_factor() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* p = _impl_.cosine_exponent_element_factor_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor& AntennaPattern_PhasedArrayAntennaPattern::cosine_exponent_element_factor() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor)
  return _internal_cosine_exponent_element_factor();
}
inline void AntennaPattern_PhasedArrayAntennaPattern::unsafe_arena_set_allocated_cosine_exponent_element_factor(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* cosine_exponent_element_factor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cosine_exponent_element_factor_);
  }
  _impl_.cosine_exponent_element_factor_ = cosine_exponent_element_factor;
  if (cosine_exponent_element_factor) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* AntennaPattern_PhasedArrayAntennaPattern::release_cosine_exponent_element_factor() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* temp = _impl_.cosine_exponent_element_factor_;
  _impl_.cosine_exponent_element_factor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* AntennaPattern_PhasedArrayAntennaPattern::unsafe_arena_release_cosine_exponent_element_factor() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* temp = _impl_.cosine_exponent_element_factor_;
  _impl_.cosine_exponent_element_factor_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* AntennaPattern_PhasedArrayAntennaPattern::_internal_mutable_cosine_exponent_element_factor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cosine_exponent_element_factor_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor>(GetArenaForAllocation());
    _impl_.cosine_exponent_element_factor_ = p;
  }
  return _impl_.cosine_exponent_element_factor_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* AntennaPattern_PhasedArrayAntennaPattern::mutable_cosine_exponent_element_factor() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* _msg = _internal_mutable_cosine_exponent_element_factor();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor)
  return _msg;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::set_allocated_cosine_exponent_element_factor(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern_CosineExponentElementFactor* cosine_exponent_element_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cosine_exponent_element_factor_;
  }
  if (cosine_exponent_element_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cosine_exponent_element_factor);
    if (message_arena != submessage_arena) {
      cosine_exponent_element_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cosine_exponent_element_factor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cosine_exponent_element_factor_ = cosine_exponent_element_factor;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern.cosine_exponent_element_factor)
}

inline bool AntennaPattern_PhasedArrayAntennaPattern::has_beamformer() const {
  return beamformer_case() != BEAMFORMER_NOT_SET;
}
inline void AntennaPattern_PhasedArrayAntennaPattern::clear_has_beamformer() {
  _impl_._oneof_case_[0] = BEAMFORMER_NOT_SET;
}
inline AntennaPattern_PhasedArrayAntennaPattern::BeamformerCase AntennaPattern_PhasedArrayAntennaPattern::beamformer_case() const {
  return AntennaPattern_PhasedArrayAntennaPattern::BeamformerCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AntennaPattern_NearAndFarFieldAntennaPattern

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern near_field_pattern = 1 [json_name = "nearFieldPattern"];
inline bool AntennaPattern_NearAndFarFieldAntennaPattern::has_near_field_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.near_field_pattern_ != nullptr);
  return value;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::clear_near_field_pattern() {
  if (_impl_.near_field_pattern_ != nullptr) _impl_.near_field_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_NearAndFarFieldAntennaPattern::_internal_near_field_pattern() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* p = _impl_.near_field_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_NearAndFarFieldAntennaPattern::near_field_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern)
  return _internal_near_field_pattern();
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::unsafe_arena_set_allocated_near_field_pattern(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* near_field_pattern) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.near_field_pattern_);
  }
  _impl_.near_field_pattern_ = near_field_pattern;
  if (near_field_pattern) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::release_near_field_pattern() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.near_field_pattern_;
  _impl_.near_field_pattern_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::unsafe_arena_release_near_field_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.near_field_pattern_;
  _impl_.near_field_pattern_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::_internal_mutable_near_field_pattern() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.near_field_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern>(GetArenaForAllocation());
    _impl_.near_field_pattern_ = p;
  }
  return _impl_.near_field_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::mutable_near_field_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _msg = _internal_mutable_near_field_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern)
  return _msg;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::set_allocated_near_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* near_field_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.near_field_pattern_;
  }
  if (near_field_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(near_field_pattern);
    if (message_arena != submessage_arena) {
      near_field_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, near_field_pattern, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.near_field_pattern_ = near_field_pattern;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_pattern)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern far_field_pattern = 2 [json_name = "farFieldPattern"];
inline bool AntennaPattern_NearAndFarFieldAntennaPattern::has_far_field_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.far_field_pattern_ != nullptr);
  return value;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::clear_far_field_pattern() {
  if (_impl_.far_field_pattern_ != nullptr) _impl_.far_field_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_NearAndFarFieldAntennaPattern::_internal_far_field_pattern() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* p = _impl_.far_field_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_NearAndFarFieldAntennaPattern::far_field_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern)
  return _internal_far_field_pattern();
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::unsafe_arena_set_allocated_far_field_pattern(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* far_field_pattern) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.far_field_pattern_);
  }
  _impl_.far_field_pattern_ = far_field_pattern;
  if (far_field_pattern) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::release_far_field_pattern() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.far_field_pattern_;
  _impl_.far_field_pattern_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::unsafe_arena_release_far_field_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.far_field_pattern_;
  _impl_.far_field_pattern_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::_internal_mutable_far_field_pattern() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.far_field_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern>(GetArenaForAllocation());
    _impl_.far_field_pattern_ = p;
  }
  return _impl_.far_field_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_NearAndFarFieldAntennaPattern::mutable_far_field_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _msg = _internal_mutable_far_field_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern)
  return _msg;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::set_allocated_far_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* far_field_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.far_field_pattern_;
  }
  if (far_field_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(far_field_pattern);
    if (message_arena != submessage_arena) {
      far_field_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, far_field_pattern, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.far_field_pattern_ = far_field_pattern;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.far_field_pattern)
}

// optional double near_field_range_m = 3 [json_name = "nearFieldRangeM"];
inline bool AntennaPattern_NearAndFarFieldAntennaPattern::has_near_field_range_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::clear_near_field_range_m() {
  _impl_.near_field_range_m_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AntennaPattern_NearAndFarFieldAntennaPattern::near_field_range_m() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_range_m)
  return _internal_near_field_range_m();
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::set_near_field_range_m(double value) {
  _internal_set_near_field_range_m(value);
  // @@protoc_insertion_point(field_set:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern.near_field_range_m)
}
inline double AntennaPattern_NearAndFarFieldAntennaPattern::_internal_near_field_range_m() const {
  return _impl_.near_field_range_m_;
}
inline void AntennaPattern_NearAndFarFieldAntennaPattern::_internal_set_near_field_range_m(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.near_field_range_m_ = value;
}

// -------------------------------------------------------------------

// AntennaPattern_TransmitterAndReceiverAntennaPattern

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern transmitter_pattern = 1 [json_name = "transmitterPattern"];
inline bool AntennaPattern_TransmitterAndReceiverAntennaPattern::has_transmitter_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transmitter_pattern_ != nullptr);
  return value;
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::clear_transmitter_pattern() {
  if (_impl_.transmitter_pattern_ != nullptr) _impl_.transmitter_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_TransmitterAndReceiverAntennaPattern::_internal_transmitter_pattern() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* p = _impl_.transmitter_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_TransmitterAndReceiverAntennaPattern::transmitter_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern)
  return _internal_transmitter_pattern();
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::unsafe_arena_set_allocated_transmitter_pattern(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* transmitter_pattern) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmitter_pattern_);
  }
  _impl_.transmitter_pattern_ = transmitter_pattern;
  if (transmitter_pattern) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::release_transmitter_pattern() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.transmitter_pattern_;
  _impl_.transmitter_pattern_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::unsafe_arena_release_transmitter_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.transmitter_pattern_;
  _impl_.transmitter_pattern_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::_internal_mutable_transmitter_pattern() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transmitter_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern>(GetArenaForAllocation());
    _impl_.transmitter_pattern_ = p;
  }
  return _impl_.transmitter_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::mutable_transmitter_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _msg = _internal_mutable_transmitter_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern)
  return _msg;
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::set_allocated_transmitter_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* transmitter_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transmitter_pattern_;
  }
  if (transmitter_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transmitter_pattern);
    if (message_arena != submessage_arena) {
      transmitter_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmitter_pattern, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transmitter_pattern_ = transmitter_pattern;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.transmitter_pattern)
}

// optional .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern receiver_pattern = 2 [json_name = "receiverPattern"];
inline bool AntennaPattern_TransmitterAndReceiverAntennaPattern::has_receiver_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.receiver_pattern_ != nullptr);
  return value;
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::clear_receiver_pattern() {
  if (_impl_.receiver_pattern_ != nullptr) _impl_.receiver_pattern_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_TransmitterAndReceiverAntennaPattern::_internal_receiver_pattern() const {
  const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* p = _impl_.receiver_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern&>(
      ::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern& AntennaPattern_TransmitterAndReceiverAntennaPattern::receiver_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern)
  return _internal_receiver_pattern();
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::unsafe_arena_set_allocated_receiver_pattern(
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* receiver_pattern) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiver_pattern_);
  }
  _impl_.receiver_pattern_ = receiver_pattern;
  if (receiver_pattern) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::release_receiver_pattern() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.receiver_pattern_;
  _impl_.receiver_pattern_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::unsafe_arena_release_receiver_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* temp = _impl_.receiver_pattern_;
  _impl_.receiver_pattern_ = nullptr;
  return temp;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::_internal_mutable_receiver_pattern() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.receiver_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern>(GetArenaForAllocation());
    _impl_.receiver_pattern_ = p;
  }
  return _impl_.receiver_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* AntennaPattern_TransmitterAndReceiverAntennaPattern::mutable_receiver_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* _msg = _internal_mutable_receiver_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern)
  return _msg;
}
inline void AntennaPattern_TransmitterAndReceiverAntennaPattern::set_allocated_receiver_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern* receiver_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.receiver_pattern_;
  }
  if (receiver_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(receiver_pattern);
    if (message_arena != submessage_arena) {
      receiver_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_pattern, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.receiver_pattern_ = receiver_pattern;
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern.receiver_pattern)
}

// -------------------------------------------------------------------

// AntennaPattern

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomPhiThetaAntennaPattern custom_phi_theta_pattern = 1 [json_name = "customPhiThetaPattern"];
inline bool AntennaPattern::has_custom_phi_theta_pattern() const {
  return pattern_type_case() == kCustomPhiThetaPattern;
}
inline bool AntennaPattern::_internal_has_custom_phi_theta_pattern() const {
  return pattern_type_case() == kCustomPhiThetaPattern;
}
inline void AntennaPattern::set_has_custom_phi_theta_pattern() {
  _impl_._oneof_case_[0] = kCustomPhiThetaPattern;
}
inline void AntennaPattern::clear_custom_phi_theta_pattern() {
  if (pattern_type_case() == kCustomPhiThetaPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.custom_phi_theta_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern::release_custom_phi_theta_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
  if (pattern_type_case() == kCustomPhiThetaPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* temp = _impl_.pattern_type_.custom_phi_theta_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.custom_phi_theta_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& AntennaPattern::_internal_custom_phi_theta_pattern() const {
  return pattern_type_case() == kCustomPhiThetaPattern
      ? *_impl_.pattern_type_.custom_phi_theta_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomPhiThetaAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern& AntennaPattern::custom_phi_theta_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
  return _internal_custom_phi_theta_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern::unsafe_arena_release_custom_phi_theta_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
  if (pattern_type_case() == kCustomPhiThetaPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* temp = _impl_.pattern_type_.custom_phi_theta_pattern_;
    _impl_.pattern_type_.custom_phi_theta_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_custom_phi_theta_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* custom_phi_theta_pattern) {
  clear_pattern_type();
  if (custom_phi_theta_pattern) {
    set_has_custom_phi_theta_pattern();
    _impl_.pattern_type_.custom_phi_theta_pattern_ = custom_phi_theta_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern::_internal_mutable_custom_phi_theta_pattern() {
  if (pattern_type_case() != kCustomPhiThetaPattern) {
    clear_pattern_type();
    set_has_custom_phi_theta_pattern();
    _impl_.pattern_type_.custom_phi_theta_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.custom_phi_theta_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* AntennaPattern::mutable_custom_phi_theta_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomPhiThetaAntennaPattern* _msg = _internal_mutable_custom_phi_theta_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_phi_theta_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianAntennaPattern gaussian_pattern = 2 [json_name = "gaussianPattern"];
inline bool AntennaPattern::has_gaussian_pattern() const {
  return pattern_type_case() == kGaussianPattern;
}
inline bool AntennaPattern::_internal_has_gaussian_pattern() const {
  return pattern_type_case() == kGaussianPattern;
}
inline void AntennaPattern::set_has_gaussian_pattern() {
  _impl_._oneof_case_[0] = kGaussianPattern;
}
inline void AntennaPattern::clear_gaussian_pattern() {
  if (pattern_type_case() == kGaussianPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.gaussian_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* AntennaPattern::release_gaussian_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
  if (pattern_type_case() == kGaussianPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* temp = _impl_.pattern_type_.gaussian_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.gaussian_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern& AntennaPattern::_internal_gaussian_pattern() const {
  return pattern_type_case() == kGaussianPattern
      ? *_impl_.pattern_type_.gaussian_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_GaussianAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern& AntennaPattern::gaussian_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
  return _internal_gaussian_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* AntennaPattern::unsafe_arena_release_gaussian_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
  if (pattern_type_case() == kGaussianPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* temp = _impl_.pattern_type_.gaussian_pattern_;
    _impl_.pattern_type_.gaussian_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_gaussian_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* gaussian_pattern) {
  clear_pattern_type();
  if (gaussian_pattern) {
    set_has_gaussian_pattern();
    _impl_.pattern_type_.gaussian_pattern_ = gaussian_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* AntennaPattern::_internal_mutable_gaussian_pattern() {
  if (pattern_type_case() != kGaussianPattern) {
    clear_pattern_type();
    set_has_gaussian_pattern();
    _impl_.pattern_type_.gaussian_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.gaussian_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* AntennaPattern::mutable_gaussian_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianAntennaPattern* _msg = _internal_mutable_gaussian_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.HelicalAntennaPattern helical_pattern = 3 [json_name = "helicalPattern"];
inline bool AntennaPattern::has_helical_pattern() const {
  return pattern_type_case() == kHelicalPattern;
}
inline bool AntennaPattern::_internal_has_helical_pattern() const {
  return pattern_type_case() == kHelicalPattern;
}
inline void AntennaPattern::set_has_helical_pattern() {
  _impl_._oneof_case_[0] = kHelicalPattern;
}
inline void AntennaPattern::clear_helical_pattern() {
  if (pattern_type_case() == kHelicalPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.helical_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* AntennaPattern::release_helical_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
  if (pattern_type_case() == kHelicalPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* temp = _impl_.pattern_type_.helical_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.helical_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern& AntennaPattern::_internal_helical_pattern() const {
  return pattern_type_case() == kHelicalPattern
      ? *_impl_.pattern_type_.helical_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_HelicalAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern& AntennaPattern::helical_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
  return _internal_helical_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* AntennaPattern::unsafe_arena_release_helical_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
  if (pattern_type_case() == kHelicalPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* temp = _impl_.pattern_type_.helical_pattern_;
    _impl_.pattern_type_.helical_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_helical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* helical_pattern) {
  clear_pattern_type();
  if (helical_pattern) {
    set_has_helical_pattern();
    _impl_.pattern_type_.helical_pattern_ = helical_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* AntennaPattern::_internal_mutable_helical_pattern() {
  if (pattern_type_case() != kHelicalPattern) {
    clear_pattern_type();
    set_has_helical_pattern();
    _impl_.pattern_type_.helical_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.helical_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* AntennaPattern::mutable_helical_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_HelicalAntennaPattern* _msg = _internal_mutable_helical_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.helical_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.IsotropicAntennaPattern isotropic_pattern = 4 [json_name = "isotropicPattern"];
inline bool AntennaPattern::has_isotropic_pattern() const {
  return pattern_type_case() == kIsotropicPattern;
}
inline bool AntennaPattern::_internal_has_isotropic_pattern() const {
  return pattern_type_case() == kIsotropicPattern;
}
inline void AntennaPattern::set_has_isotropic_pattern() {
  _impl_._oneof_case_[0] = kIsotropicPattern;
}
inline void AntennaPattern::clear_isotropic_pattern() {
  if (pattern_type_case() == kIsotropicPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.isotropic_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* AntennaPattern::release_isotropic_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
  if (pattern_type_case() == kIsotropicPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* temp = _impl_.pattern_type_.isotropic_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.isotropic_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern& AntennaPattern::_internal_isotropic_pattern() const {
  return pattern_type_case() == kIsotropicPattern
      ? *_impl_.pattern_type_.isotropic_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_IsotropicAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern& AntennaPattern::isotropic_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
  return _internal_isotropic_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* AntennaPattern::unsafe_arena_release_isotropic_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
  if (pattern_type_case() == kIsotropicPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* temp = _impl_.pattern_type_.isotropic_pattern_;
    _impl_.pattern_type_.isotropic_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_isotropic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* isotropic_pattern) {
  clear_pattern_type();
  if (isotropic_pattern) {
    set_has_isotropic_pattern();
    _impl_.pattern_type_.isotropic_pattern_ = isotropic_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* AntennaPattern::_internal_mutable_isotropic_pattern() {
  if (pattern_type_case() != kIsotropicPattern) {
    clear_pattern_type();
    set_has_isotropic_pattern();
    _impl_.pattern_type_.isotropic_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.isotropic_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* AntennaPattern::mutable_isotropic_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_IsotropicAntennaPattern* _msg = _internal_mutable_isotropic_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.isotropic_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.ParabolicAntennaPattern parabolic_pattern = 5 [json_name = "parabolicPattern"];
inline bool AntennaPattern::has_parabolic_pattern() const {
  return pattern_type_case() == kParabolicPattern;
}
inline bool AntennaPattern::_internal_has_parabolic_pattern() const {
  return pattern_type_case() == kParabolicPattern;
}
inline void AntennaPattern::set_has_parabolic_pattern() {
  _impl_._oneof_case_[0] = kParabolicPattern;
}
inline void AntennaPattern::clear_parabolic_pattern() {
  if (pattern_type_case() == kParabolicPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.parabolic_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* AntennaPattern::release_parabolic_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
  if (pattern_type_case() == kParabolicPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* temp = _impl_.pattern_type_.parabolic_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.parabolic_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern& AntennaPattern::_internal_parabolic_pattern() const {
  return pattern_type_case() == kParabolicPattern
      ? *_impl_.pattern_type_.parabolic_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_ParabolicAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern& AntennaPattern::parabolic_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
  return _internal_parabolic_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* AntennaPattern::unsafe_arena_release_parabolic_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
  if (pattern_type_case() == kParabolicPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* temp = _impl_.pattern_type_.parabolic_pattern_;
    _impl_.pattern_type_.parabolic_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_parabolic_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* parabolic_pattern) {
  clear_pattern_type();
  if (parabolic_pattern) {
    set_has_parabolic_pattern();
    _impl_.pattern_type_.parabolic_pattern_ = parabolic_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* AntennaPattern::_internal_mutable_parabolic_pattern() {
  if (pattern_type_case() != kParabolicPattern) {
    clear_pattern_type();
    set_has_parabolic_pattern();
    _impl_.pattern_type_.parabolic_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.parabolic_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* AntennaPattern::mutable_parabolic_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_ParabolicAntennaPattern* _msg = _internal_mutable_parabolic_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.parabolic_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.SquareHornAntennaPattern square_horn_pattern = 6 [json_name = "squareHornPattern"];
inline bool AntennaPattern::has_square_horn_pattern() const {
  return pattern_type_case() == kSquareHornPattern;
}
inline bool AntennaPattern::_internal_has_square_horn_pattern() const {
  return pattern_type_case() == kSquareHornPattern;
}
inline void AntennaPattern::set_has_square_horn_pattern() {
  _impl_._oneof_case_[0] = kSquareHornPattern;
}
inline void AntennaPattern::clear_square_horn_pattern() {
  if (pattern_type_case() == kSquareHornPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.square_horn_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* AntennaPattern::release_square_horn_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
  if (pattern_type_case() == kSquareHornPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* temp = _impl_.pattern_type_.square_horn_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.square_horn_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern& AntennaPattern::_internal_square_horn_pattern() const {
  return pattern_type_case() == kSquareHornPattern
      ? *_impl_.pattern_type_.square_horn_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_SquareHornAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern& AntennaPattern::square_horn_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
  return _internal_square_horn_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* AntennaPattern::unsafe_arena_release_square_horn_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
  if (pattern_type_case() == kSquareHornPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* temp = _impl_.pattern_type_.square_horn_pattern_;
    _impl_.pattern_type_.square_horn_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_square_horn_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* square_horn_pattern) {
  clear_pattern_type();
  if (square_horn_pattern) {
    set_has_square_horn_pattern();
    _impl_.pattern_type_.square_horn_pattern_ = square_horn_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* AntennaPattern::_internal_mutable_square_horn_pattern() {
  if (pattern_type_case() != kSquareHornPattern) {
    clear_pattern_type();
    set_has_square_horn_pattern();
    _impl_.pattern_type_.square_horn_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.square_horn_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* AntennaPattern::mutable_square_horn_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_SquareHornAntennaPattern* _msg = _internal_mutable_square_horn_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.square_horn_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.GaussianOpticalAntennaPattern gaussian_optical_pattern = 7 [json_name = "gaussianOpticalPattern"];
inline bool AntennaPattern::has_gaussian_optical_pattern() const {
  return pattern_type_case() == kGaussianOpticalPattern;
}
inline bool AntennaPattern::_internal_has_gaussian_optical_pattern() const {
  return pattern_type_case() == kGaussianOpticalPattern;
}
inline void AntennaPattern::set_has_gaussian_optical_pattern() {
  _impl_._oneof_case_[0] = kGaussianOpticalPattern;
}
inline void AntennaPattern::clear_gaussian_optical_pattern() {
  if (pattern_type_case() == kGaussianOpticalPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.gaussian_optical_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* AntennaPattern::release_gaussian_optical_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
  if (pattern_type_case() == kGaussianOpticalPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* temp = _impl_.pattern_type_.gaussian_optical_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.gaussian_optical_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern& AntennaPattern::_internal_gaussian_optical_pattern() const {
  return pattern_type_case() == kGaussianOpticalPattern
      ? *_impl_.pattern_type_.gaussian_optical_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_GaussianOpticalAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern& AntennaPattern::gaussian_optical_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
  return _internal_gaussian_optical_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* AntennaPattern::unsafe_arena_release_gaussian_optical_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
  if (pattern_type_case() == kGaussianOpticalPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* temp = _impl_.pattern_type_.gaussian_optical_pattern_;
    _impl_.pattern_type_.gaussian_optical_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_gaussian_optical_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* gaussian_optical_pattern) {
  clear_pattern_type();
  if (gaussian_optical_pattern) {
    set_has_gaussian_optical_pattern();
    _impl_.pattern_type_.gaussian_optical_pattern_ = gaussian_optical_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* AntennaPattern::_internal_mutable_gaussian_optical_pattern() {
  if (pattern_type_case() != kGaussianOpticalPattern) {
    clear_pattern_type();
    set_has_gaussian_optical_pattern();
    _impl_.pattern_type_.gaussian_optical_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.gaussian_optical_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* AntennaPattern::mutable_gaussian_optical_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_GaussianOpticalAntennaPattern* _msg = _internal_mutable_gaussian_optical_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.gaussian_optical_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.PhasedArrayAntennaPattern phased_array_pattern = 10 [json_name = "phasedArrayPattern"];
inline bool AntennaPattern::has_phased_array_pattern() const {
  return pattern_type_case() == kPhasedArrayPattern;
}
inline bool AntennaPattern::_internal_has_phased_array_pattern() const {
  return pattern_type_case() == kPhasedArrayPattern;
}
inline void AntennaPattern::set_has_phased_array_pattern() {
  _impl_._oneof_case_[0] = kPhasedArrayPattern;
}
inline void AntennaPattern::clear_phased_array_pattern() {
  if (pattern_type_case() == kPhasedArrayPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.phased_array_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* AntennaPattern::release_phased_array_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
  if (pattern_type_case() == kPhasedArrayPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* temp = _impl_.pattern_type_.phased_array_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.phased_array_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern& AntennaPattern::_internal_phased_array_pattern() const {
  return pattern_type_case() == kPhasedArrayPattern
      ? *_impl_.pattern_type_.phased_array_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_PhasedArrayAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern& AntennaPattern::phased_array_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
  return _internal_phased_array_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* AntennaPattern::unsafe_arena_release_phased_array_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
  if (pattern_type_case() == kPhasedArrayPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* temp = _impl_.pattern_type_.phased_array_pattern_;
    _impl_.pattern_type_.phased_array_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_phased_array_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* phased_array_pattern) {
  clear_pattern_type();
  if (phased_array_pattern) {
    set_has_phased_array_pattern();
    _impl_.pattern_type_.phased_array_pattern_ = phased_array_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* AntennaPattern::_internal_mutable_phased_array_pattern() {
  if (pattern_type_case() != kPhasedArrayPattern) {
    clear_pattern_type();
    set_has_phased_array_pattern();
    _impl_.pattern_type_.phased_array_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.phased_array_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* AntennaPattern::mutable_phased_array_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_PhasedArrayAntennaPattern* _msg = _internal_mutable_phased_array_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.phased_array_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.NearAndFarFieldAntennaPattern near_and_far_field_pattern = 9 [json_name = "nearAndFarFieldPattern"];
inline bool AntennaPattern::has_near_and_far_field_pattern() const {
  return pattern_type_case() == kNearAndFarFieldPattern;
}
inline bool AntennaPattern::_internal_has_near_and_far_field_pattern() const {
  return pattern_type_case() == kNearAndFarFieldPattern;
}
inline void AntennaPattern::set_has_near_and_far_field_pattern() {
  _impl_._oneof_case_[0] = kNearAndFarFieldPattern;
}
inline void AntennaPattern::clear_near_and_far_field_pattern() {
  if (pattern_type_case() == kNearAndFarFieldPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.near_and_far_field_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* AntennaPattern::release_near_and_far_field_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
  if (pattern_type_case() == kNearAndFarFieldPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* temp = _impl_.pattern_type_.near_and_far_field_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.near_and_far_field_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern& AntennaPattern::_internal_near_and_far_field_pattern() const {
  return pattern_type_case() == kNearAndFarFieldPattern
      ? *_impl_.pattern_type_.near_and_far_field_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_NearAndFarFieldAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern& AntennaPattern::near_and_far_field_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
  return _internal_near_and_far_field_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* AntennaPattern::unsafe_arena_release_near_and_far_field_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
  if (pattern_type_case() == kNearAndFarFieldPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* temp = _impl_.pattern_type_.near_and_far_field_pattern_;
    _impl_.pattern_type_.near_and_far_field_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_near_and_far_field_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* near_and_far_field_pattern) {
  clear_pattern_type();
  if (near_and_far_field_pattern) {
    set_has_near_and_far_field_pattern();
    _impl_.pattern_type_.near_and_far_field_pattern_ = near_and_far_field_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* AntennaPattern::_internal_mutable_near_and_far_field_pattern() {
  if (pattern_type_case() != kNearAndFarFieldPattern) {
    clear_pattern_type();
    set_has_near_and_far_field_pattern();
    _impl_.pattern_type_.near_and_far_field_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.near_and_far_field_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* AntennaPattern::mutable_near_and_far_field_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_NearAndFarFieldAntennaPattern* _msg = _internal_mutable_near_and_far_field_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.near_and_far_field_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.TransmitterAndReceiverAntennaPattern transmitter_and_receiver_pattern = 11 [json_name = "transmitterAndReceiverPattern"];
inline bool AntennaPattern::has_transmitter_and_receiver_pattern() const {
  return pattern_type_case() == kTransmitterAndReceiverPattern;
}
inline bool AntennaPattern::_internal_has_transmitter_and_receiver_pattern() const {
  return pattern_type_case() == kTransmitterAndReceiverPattern;
}
inline void AntennaPattern::set_has_transmitter_and_receiver_pattern() {
  _impl_._oneof_case_[0] = kTransmitterAndReceiverPattern;
}
inline void AntennaPattern::clear_transmitter_and_receiver_pattern() {
  if (pattern_type_case() == kTransmitterAndReceiverPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.transmitter_and_receiver_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* AntennaPattern::release_transmitter_and_receiver_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
  if (pattern_type_case() == kTransmitterAndReceiverPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* temp = _impl_.pattern_type_.transmitter_and_receiver_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.transmitter_and_receiver_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern& AntennaPattern::_internal_transmitter_and_receiver_pattern() const {
  return pattern_type_case() == kTransmitterAndReceiverPattern
      ? *_impl_.pattern_type_.transmitter_and_receiver_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_TransmitterAndReceiverAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern& AntennaPattern::transmitter_and_receiver_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
  return _internal_transmitter_and_receiver_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* AntennaPattern::unsafe_arena_release_transmitter_and_receiver_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
  if (pattern_type_case() == kTransmitterAndReceiverPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* temp = _impl_.pattern_type_.transmitter_and_receiver_pattern_;
    _impl_.pattern_type_.transmitter_and_receiver_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_transmitter_and_receiver_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* transmitter_and_receiver_pattern) {
  clear_pattern_type();
  if (transmitter_and_receiver_pattern) {
    set_has_transmitter_and_receiver_pattern();
    _impl_.pattern_type_.transmitter_and_receiver_pattern_ = transmitter_and_receiver_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* AntennaPattern::_internal_mutable_transmitter_and_receiver_pattern() {
  if (pattern_type_case() != kTransmitterAndReceiverPattern) {
    clear_pattern_type();
    set_has_transmitter_and_receiver_pattern();
    _impl_.pattern_type_.transmitter_and_receiver_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.transmitter_and_receiver_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* AntennaPattern::mutable_transmitter_and_receiver_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_TransmitterAndReceiverAntennaPattern* _msg = _internal_mutable_transmitter_and_receiver_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.transmitter_and_receiver_pattern)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAntennaPatternPerAngle custom_antenna_pattern_per_angle = 12 [json_name = "customAntennaPatternPerAngle"];
inline bool AntennaPattern::has_custom_antenna_pattern_per_angle() const {
  return pattern_type_case() == kCustomAntennaPatternPerAngle;
}
inline bool AntennaPattern::_internal_has_custom_antenna_pattern_per_angle() const {
  return pattern_type_case() == kCustomAntennaPatternPerAngle;
}
inline void AntennaPattern::set_has_custom_antenna_pattern_per_angle() {
  _impl_._oneof_case_[0] = kCustomAntennaPatternPerAngle;
}
inline void AntennaPattern::clear_custom_antenna_pattern_per_angle() {
  if (pattern_type_case() == kCustomAntennaPatternPerAngle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.custom_antenna_pattern_per_angle_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* AntennaPattern::release_custom_antenna_pattern_per_angle() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
  if (pattern_type_case() == kCustomAntennaPatternPerAngle) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* temp = _impl_.pattern_type_.custom_antenna_pattern_per_angle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.custom_antenna_pattern_per_angle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle& AntennaPattern::_internal_custom_antenna_pattern_per_angle() const {
  return pattern_type_case() == kCustomAntennaPatternPerAngle
      ? *_impl_.pattern_type_.custom_antenna_pattern_per_angle_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAntennaPatternPerAngle_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle& AntennaPattern::custom_antenna_pattern_per_angle() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
  return _internal_custom_antenna_pattern_per_angle();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* AntennaPattern::unsafe_arena_release_custom_antenna_pattern_per_angle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
  if (pattern_type_case() == kCustomAntennaPatternPerAngle) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* temp = _impl_.pattern_type_.custom_antenna_pattern_per_angle_;
    _impl_.pattern_type_.custom_antenna_pattern_per_angle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_custom_antenna_pattern_per_angle(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* custom_antenna_pattern_per_angle) {
  clear_pattern_type();
  if (custom_antenna_pattern_per_angle) {
    set_has_custom_antenna_pattern_per_angle();
    _impl_.pattern_type_.custom_antenna_pattern_per_angle_ = custom_antenna_pattern_per_angle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* AntennaPattern::_internal_mutable_custom_antenna_pattern_per_angle() {
  if (pattern_type_case() != kCustomAntennaPatternPerAngle) {
    clear_pattern_type();
    set_has_custom_antenna_pattern_per_angle();
    _impl_.pattern_type_.custom_antenna_pattern_per_angle_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.custom_antenna_pattern_per_angle_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* AntennaPattern::mutable_custom_antenna_pattern_per_angle() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAntennaPatternPerAngle* _msg = _internal_mutable_custom_antenna_pattern_per_angle();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_antenna_pattern_per_angle)
  return _msg;
}

// .aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.CustomAzElAntennaPattern custom_az_el_pattern = 13 [json_name = "customAzElPattern"];
inline bool AntennaPattern::has_custom_az_el_pattern() const {
  return pattern_type_case() == kCustomAzElPattern;
}
inline bool AntennaPattern::_internal_has_custom_az_el_pattern() const {
  return pattern_type_case() == kCustomAzElPattern;
}
inline void AntennaPattern::set_has_custom_az_el_pattern() {
  _impl_._oneof_case_[0] = kCustomAzElPattern;
}
inline void AntennaPattern::clear_custom_az_el_pattern() {
  if (pattern_type_case() == kCustomAzElPattern) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_type_.custom_az_el_pattern_;
    }
    clear_has_pattern_type();
  }
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* AntennaPattern::release_custom_az_el_pattern() {
  // @@protoc_insertion_point(field_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
  if (pattern_type_case() == kCustomAzElPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* temp = _impl_.pattern_type_.custom_az_el_pattern_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_type_.custom_az_el_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern& AntennaPattern::_internal_custom_az_el_pattern() const {
  return pattern_type_case() == kCustomAzElPattern
      ? *_impl_.pattern_type_.custom_az_el_pattern_
      : reinterpret_cast<::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern&>(::aalyria::spacetime::api::nbi::v1alpha::resources::_AntennaPattern_CustomAzElAntennaPattern_default_instance_);
}
inline const ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern& AntennaPattern::custom_az_el_pattern() const {
  // @@protoc_insertion_point(field_get:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
  return _internal_custom_az_el_pattern();
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* AntennaPattern::unsafe_arena_release_custom_az_el_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
  if (pattern_type_case() == kCustomAzElPattern) {
    clear_has_pattern_type();
    ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* temp = _impl_.pattern_type_.custom_az_el_pattern_;
    _impl_.pattern_type_.custom_az_el_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AntennaPattern::unsafe_arena_set_allocated_custom_az_el_pattern(::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* custom_az_el_pattern) {
  clear_pattern_type();
  if (custom_az_el_pattern) {
    set_has_custom_az_el_pattern();
    _impl_.pattern_type_.custom_az_el_pattern_ = custom_az_el_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* AntennaPattern::_internal_mutable_custom_az_el_pattern() {
  if (pattern_type_case() != kCustomAzElPattern) {
    clear_pattern_type();
    set_has_custom_az_el_pattern();
    _impl_.pattern_type_.custom_az_el_pattern_ = CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_type_.custom_az_el_pattern_;
}
inline ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* AntennaPattern::mutable_custom_az_el_pattern() {
  ::aalyria::spacetime::api::nbi::v1alpha::resources::AntennaPattern_CustomAzElAntennaPattern* _msg = _internal_mutable_custom_az_el_pattern();
  // @@protoc_insertion_point(field_mutable:aalyria.spacetime.api.nbi.v1alpha.resources.AntennaPattern.custom_az_el_pattern)
  return _msg;
}

inline bool AntennaPattern::has_pattern_type() const {
  return pattern_type_case() != PATTERN_TYPE_NOT_SET;
}
inline void AntennaPattern::clear_has_pattern_type() {
  _impl_._oneof_case_[0] = PATTERN_TYPE_NOT_SET;
}
inline AntennaPattern::PatternTypeCase AntennaPattern::pattern_type_case() const {
  return AntennaPattern::PatternTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fnbi_2fv1alpha_2fresources_2fantenna_5fpattern_2eproto_2epb_2eh

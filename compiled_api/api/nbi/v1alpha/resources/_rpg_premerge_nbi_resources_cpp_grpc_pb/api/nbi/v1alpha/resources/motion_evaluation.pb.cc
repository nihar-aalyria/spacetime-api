// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/nbi/v1alpha/resources/motion_evaluation.proto

#include "api/nbi/v1alpha/resources/motion_evaluation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
template <typename>
PROTOBUF_CONSTEXPR ComputedMotion_ReferenceMotion::ComputedMotion_ReferenceMotion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motion_ref_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commit_timestamp_)*/ ::int64_t{0}
} {}
struct ComputedMotion_ReferenceMotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputedMotion_ReferenceMotionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputedMotion_ReferenceMotionDefaultTypeInternal() {}
  union {
    ComputedMotion_ReferenceMotion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputedMotion_ReferenceMotionDefaultTypeInternal _ComputedMotion_ReferenceMotion_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComputedMotion::ComputedMotion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motions_)*/{}
  , /*decltype(_impl_.reference_)*/nullptr} {}
struct ComputedMotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputedMotionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputedMotionDefaultTypeInternal() {}
  union {
    ComputedMotion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputedMotionDefaultTypeInternal _ComputedMotion_default_instance_;
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion, _impl_.motion_ref_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion, _impl_.commit_timestamp_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion, _impl_.reference_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion, _impl_.motions_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion)},
        { 12, 22, -1, sizeof(::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ComputedMotion_ReferenceMotion_default_instance_._instance,
    &::aalyria::spacetime::api::nbi::v1alpha::resources::_ComputedMotion_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1api/nbi/v1alpha/resources/motion_evalu"
    "ation.proto\022+aalyria.spacetime.api.nbi.v"
    "1alpha.resources\032\034api/common/coordinates"
    ".proto\"\235\002\n\016ComputedMotion\022i\n\treference\030\001"
    " \001(\0132K.aalyria.spacetime.api.nbi.v1alpha"
    ".resources.ComputedMotion.ReferenceMotio"
    "nR\treference\022>\n\007motions\030\002 \003(\0132$.aalyria."
    "spacetime.api.common.MotionR\007motions\032`\n\017"
    "ReferenceMotion\022\"\n\rmotion_ref_id\030\001 \001(\tR\013"
    "motionRefId\022)\n\020commit_timestamp\030\002 \001(\003R\017c"
    "ommitTimestampBb\n/com.aalyria.spacetime."
    "api.nbi.v1alpha.resourcesZ/aalyria.com/s"
    "pacetime/api/nbi/v1alpha/resources"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_deps[1] =
    {
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto = {
    false,
    false,
    514,
    descriptor_table_protodef_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto,
    "api/nbi/v1alpha/resources/motion_evaluation.proto",
    &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_once,
    descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto::offsets,
    file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto,
    file_level_enum_descriptors_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto,
    file_level_service_descriptors_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_getter() {
  return &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto(&descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace nbi {
namespace v1alpha {
namespace resources {
// ===================================================================

class ComputedMotion_ReferenceMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<ComputedMotion_ReferenceMotion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComputedMotion_ReferenceMotion, _impl_._has_bits_);
  static void set_has_motion_ref_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commit_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ComputedMotion_ReferenceMotion::ComputedMotion_ReferenceMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
}
ComputedMotion_ReferenceMotion::ComputedMotion_ReferenceMotion(const ComputedMotion_ReferenceMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComputedMotion_ReferenceMotion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_ref_id_) {}

    , decltype(_impl_.commit_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.motion_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.motion_ref_id_.Set(from._internal_motion_ref_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.commit_timestamp_ = from._impl_.commit_timestamp_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
}

inline void ComputedMotion_ReferenceMotion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_ref_id_) {}

    , decltype(_impl_.commit_timestamp_) { ::int64_t{0} }

  };
  _impl_.motion_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.motion_ref_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComputedMotion_ReferenceMotion::~ComputedMotion_ReferenceMotion() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputedMotion_ReferenceMotion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motion_ref_id_.Destroy();
}

void ComputedMotion_ReferenceMotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputedMotion_ReferenceMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.motion_ref_id_.ClearNonDefaultToEmpty();
  }
  _impl_.commit_timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputedMotion_ReferenceMotion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string motion_ref_id = 1 [json_name = "motionRefId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_motion_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 commit_timestamp = 2 [json_name = "commitTimestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_commit_timestamp(&has_bits);
          _impl_.commit_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComputedMotion_ReferenceMotion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string motion_ref_id = 1 [json_name = "motionRefId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_motion_ref_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion.motion_ref_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 commit_timestamp = 2 [json_name = "commitTimestamp"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_commit_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  return target;
}

::size_t ComputedMotion_ReferenceMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string motion_ref_id = 1 [json_name = "motionRefId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_motion_ref_id());
    }

    // optional int64 commit_timestamp = 2 [json_name = "commitTimestamp"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_commit_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputedMotion_ReferenceMotion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComputedMotion_ReferenceMotion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputedMotion_ReferenceMotion::GetClassData() const { return &_class_data_; }


void ComputedMotion_ReferenceMotion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComputedMotion_ReferenceMotion*>(&to_msg);
  auto& from = static_cast<const ComputedMotion_ReferenceMotion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_motion_ref_id(from._internal_motion_ref_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.commit_timestamp_ = from._impl_.commit_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputedMotion_ReferenceMotion::CopyFrom(const ComputedMotion_ReferenceMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputedMotion_ReferenceMotion::IsInitialized() const {
  return true;
}

void ComputedMotion_ReferenceMotion::InternalSwap(ComputedMotion_ReferenceMotion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.motion_ref_id_, lhs_arena,
                                       &other->_impl_.motion_ref_id_, rhs_arena);

  swap(_impl_.commit_timestamp_, other->_impl_.commit_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputedMotion_ReferenceMotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto[0]);
}
// ===================================================================

class ComputedMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<ComputedMotion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComputedMotion, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion& reference(const ComputedMotion* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion&
ComputedMotion::_Internal::reference(const ComputedMotion* msg) {
  return *msg->_impl_.reference_;
}
void ComputedMotion::clear_motions() {
  _internal_mutable_motions()->Clear();
}
ComputedMotion::ComputedMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
}
ComputedMotion::ComputedMotion(const ComputedMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComputedMotion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motions_){from._impl_.motions_}
    , decltype(_impl_.reference_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.reference_ = new ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion(*from._impl_.reference_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
}

inline void ComputedMotion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motions_){arena}
    , decltype(_impl_.reference_){nullptr}
  };
}

ComputedMotion::~ComputedMotion() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputedMotion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_motions()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.reference_;
}

void ComputedMotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputedMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_motions()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.reference_ != nullptr);
    _impl_.reference_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputedMotion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.Motion motions = 2 [json_name = "motions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComputedMotion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion reference = 1 [json_name = "reference"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // repeated .aalyria.spacetime.api.common.Motion motions = 2 [json_name = "motions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motions_size()); i < n; i++) {
    const auto& repfield = this->_internal_motions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  return target;
}

::size_t ComputedMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.Motion motions = 2 [json_name = "motions"];
  total_size += 1UL * this->_internal_motions_size();
  for (const auto& msg : this->_internal_motions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion.ReferenceMotion reference = 1 [json_name = "reference"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputedMotion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComputedMotion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputedMotion::GetClassData() const { return &_class_data_; }


void ComputedMotion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComputedMotion*>(&to_msg);
  auto& from = static_cast<const ComputedMotion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_motions()->MergeFrom(from._internal_motions());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_reference()->::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion::MergeFrom(
        from._internal_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputedMotion::CopyFrom(const ComputedMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.nbi.v1alpha.resources.ComputedMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputedMotion::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_motions()))
    return false;
  return true;
}

void ComputedMotion::InternalSwap(ComputedMotion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_motions()->InternalSwap(other->_internal_mutable_motions());
  swap(_impl_.reference_, other->_impl_.reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputedMotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_getter, &descriptor_table_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto_once,
      file_level_metadata_api_2fnbi_2fv1alpha_2fresources_2fmotion_5fevaluation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace v1alpha
}  // namespace nbi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion_ReferenceMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::nbi::v1alpha::resources::ComputedMotion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/cdpi/v1alpha/cdpi.proto

#include "api/cdpi/v1alpha/cdpi.pb.h"
#include "api/cdpi/v1alpha/cdpi.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace aalyria {
namespace spacetime {
namespace api {
namespace cdpi {
namespace v1alpha {

static const char* NetworkControllerStreaming_method_names[] = {
  "/aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming/ControlPlaneInterface",
};

std::unique_ptr< NetworkControllerStreaming::Stub> NetworkControllerStreaming::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkControllerStreaming::Stub> stub(new NetworkControllerStreaming::Stub(channel, options));
  return stub;
}

NetworkControllerStreaming::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ControlPlaneInterface_(NetworkControllerStreaming_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* NetworkControllerStreaming::Stub::ControlPlaneInterfaceRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>::Create(channel_.get(), rpcmethod_ControlPlaneInterface_, context);
}

void NetworkControllerStreaming::Stub::async::ControlPlaneInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification,::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification,::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ControlPlaneInterface_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* NetworkControllerStreaming::Stub::AsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>::Create(channel_.get(), cq, rpcmethod_ControlPlaneInterface_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* NetworkControllerStreaming::Stub::PrepareAsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>::Create(channel_.get(), cq, rpcmethod_ControlPlaneInterface_, context, false, nullptr);
}

NetworkControllerStreaming::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkControllerStreaming_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NetworkControllerStreaming::Service, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>(
          [](NetworkControllerStreaming::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest,
             ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* stream) {
               return service->ControlPlaneInterface(ctx, stream);
             }, this)));
}

NetworkControllerStreaming::Service::~Service() {
}

::grpc::Status NetworkControllerStreaming::Service::ControlPlaneInterface(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NetworkTelemetryStreaming_method_names[] = {
  "/aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming/TelemetryInterface",
};

std::unique_ptr< NetworkTelemetryStreaming::Stub> NetworkTelemetryStreaming::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkTelemetryStreaming::Stub> stub(new NetworkTelemetryStreaming::Stub(channel, options));
  return stub;
}

NetworkTelemetryStreaming::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TelemetryInterface_(NetworkTelemetryStreaming_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* NetworkTelemetryStreaming::Stub::TelemetryInterfaceRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>::Create(channel_.get(), rpcmethod_TelemetryInterface_, context);
}

void NetworkTelemetryStreaming::Stub::async::TelemetryInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate,::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate,::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_TelemetryInterface_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* NetworkTelemetryStreaming::Stub::AsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>::Create(channel_.get(), cq, rpcmethod_TelemetryInterface_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* NetworkTelemetryStreaming::Stub::PrepareAsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>::Create(channel_.get(), cq, rpcmethod_TelemetryInterface_, context, false, nullptr);
}

NetworkTelemetryStreaming::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkTelemetryStreaming_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NetworkTelemetryStreaming::Service, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>(
          [](NetworkTelemetryStreaming::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest,
             ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* stream) {
               return service->TelemetryInterface(ctx, stream);
             }, this)));
}

NetworkTelemetryStreaming::Service::~Service() {
}

::grpc::Status NetworkTelemetryStreaming::Service::TelemetryInterface(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AttenuationEnvironment_method_names[] = {
  "/aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment/UploadSensorData",
};

std::unique_ptr< AttenuationEnvironment::Stub> AttenuationEnvironment::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AttenuationEnvironment::Stub> stub(new AttenuationEnvironment::Stub(channel, options));
  return stub;
}

AttenuationEnvironment::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadSensorData_(AttenuationEnvironment_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AttenuationEnvironment::Stub::UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadSensorData_, context, request, response);
}

void AttenuationEnvironment::Stub::async::UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSensorData_, context, request, response, std::move(f));
}

void AttenuationEnvironment::Stub::async::UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSensorData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AttenuationEnvironment::Stub::PrepareAsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadSensorData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AttenuationEnvironment::Stub::AsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadSensorDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

AttenuationEnvironment::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AttenuationEnvironment_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AttenuationEnvironment::Service, ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AttenuationEnvironment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* req,
             ::google::protobuf::Empty* resp) {
               return service->UploadSensorData(ctx, req, resp);
             }, this)));
}

AttenuationEnvironment::Service::~Service() {
}

::grpc::Status AttenuationEnvironment::Service::UploadSensorData(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Cdpi_method_names[] = {
  "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/Cdpi",
  "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateNodeState",
  "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateRequestStatus",
};

std::unique_ptr< Cdpi::Stub> Cdpi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cdpi::Stub> stub(new Cdpi::Stub(channel, options));
  return stub;
}

Cdpi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Cdpi_(Cdpi_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_UpdateNodeState_(Cdpi_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRequestStatus_(Cdpi_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* Cdpi::Stub::CdpiRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>::Create(channel_.get(), rpcmethod_Cdpi_, context);
}

void Cdpi::Stub::async::Cdpi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest,::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest,::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Cdpi_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* Cdpi::Stub::AsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>::Create(channel_.get(), cq, rpcmethod_Cdpi_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* Cdpi::Stub::PrepareAsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>::Create(channel_.get(), cq, rpcmethod_Cdpi_, context, false, nullptr);
}

::grpc::Status Cdpi::Stub::UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNodeState_, context, request, response);
}

void Cdpi::Stub::async::UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNodeState_, context, request, response, std::move(f));
}

void Cdpi::Stub::async::UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNodeState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Cdpi::Stub::PrepareAsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNodeState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Cdpi::Stub::AsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNodeStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cdpi::Stub::UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRequestStatus_, context, request, response);
}

void Cdpi::Stub::async::UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRequestStatus_, context, request, response, std::move(f));
}

void Cdpi::Stub::async::UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRequestStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Cdpi::Stub::PrepareAsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRequestStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Cdpi::Stub::AsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRequestStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cdpi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cdpi_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Cdpi::Service, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>(
          [](Cdpi::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse,
             ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* stream) {
               return service->Cdpi(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cdpi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cdpi::Service, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cdpi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateNodeState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cdpi_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cdpi::Service, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cdpi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateRequestStatus(ctx, req, resp);
             }, this)));
}

Cdpi::Service::~Service() {
}

::grpc::Status Cdpi::Service::Cdpi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cdpi::Service::UpdateNodeState(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cdpi::Service::UpdateRequestStatus(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace aalyria
}  // namespace spacetime
}  // namespace api
}  // namespace cdpi
}  // namespace v1alpha


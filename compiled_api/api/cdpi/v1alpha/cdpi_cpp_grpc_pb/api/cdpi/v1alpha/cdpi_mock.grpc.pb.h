// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/cdpi/v1alpha/cdpi.proto

#ifndef GRPC_MOCK_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED
#define GRPC_MOCK_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED

#include "api/cdpi/v1alpha/cdpi.pb.h"
#include "api/cdpi/v1alpha/cdpi.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/sync_stream.h>
#include <gmock/gmock.h>
namespace aalyria {
namespace spacetime {
namespace api {
namespace cdpi {
namespace v1alpha {

class MockNetworkControllerStreamingStub : public NetworkControllerStreaming::StubInterface {
 public:
  MOCK_METHOD1(ControlPlaneInterfaceRaw, ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncControlPlaneInterfaceRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncControlPlaneInterfaceRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
};

class MockNetworkTelemetryStreamingStub : public NetworkTelemetryStreaming::StubInterface {
 public:
  MOCK_METHOD1(TelemetryInterfaceRaw, ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncTelemetryInterfaceRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncTelemetryInterfaceRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
};

class MockAttenuationEnvironmentStub : public AttenuationEnvironment::StubInterface {
 public:
  MOCK_METHOD3(UploadSensorData, ::grpc::Status(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncUploadSensorDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUploadSensorDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq));
};

class MockCdpiStub : public Cdpi::StubInterface {
 public:
  MOCK_METHOD1(CdpiRaw, ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncCdpiRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncCdpiRaw, ::grpc::ClientAsyncReaderWriterInterface<::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UpdateNodeState, ::grpc::Status(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncUpdateNodeStateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUpdateNodeStateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UpdateRequestStatus, ::grpc::Status(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncUpdateRequestStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUpdateRequestStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq));
};

}  // namespace v1alpha
}  // namespace cdpi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


#endif  // GRPC_MOCK_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: api/cdpi/v1alpha/cdpi.proto

package v1alpha

import (
	common "aalyria.com/spacetime/api/common"
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlPlanePingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *ControlPlanePingRequest) Reset() {
	*x = ControlPlanePingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlanePingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlanePingRequest) ProtoMessage() {}

func (x *ControlPlanePingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlanePingRequest.ProtoReflect.Descriptor instead.
func (*ControlPlanePingRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{0}
}

func (x *ControlPlanePingRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ControlPlanePingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *int64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status        *status.Status         `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	TimeOfReceipt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_of_receipt,json=timeOfReceipt" json:"time_of_receipt,omitempty"`
}

func (x *ControlPlanePingResponse) Reset() {
	*x = ControlPlanePingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlanePingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlanePingResponse) ProtoMessage() {}

func (x *ControlPlanePingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlanePingResponse.ProtoReflect.Descriptor instead.
func (*ControlPlanePingResponse) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{1}
}

func (x *ControlPlanePingResponse) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ControlPlanePingResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ControlPlanePingResponse) GetTimeOfReceipt() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeOfReceipt
	}
	return nil
}

type ControlStateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ControlStateChangeRequest_ScheduledUpdate
	//	*ControlStateChangeRequest_ScheduledDeletion
	//	*ControlStateChangeRequest_ControlPlanePingRequest
	Type isControlStateChangeRequest_Type `protobuf_oneof:"type"`
}

func (x *ControlStateChangeRequest) Reset() {
	*x = ControlStateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlStateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStateChangeRequest) ProtoMessage() {}

func (x *ControlStateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStateChangeRequest.ProtoReflect.Descriptor instead.
func (*ControlStateChangeRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{2}
}

func (m *ControlStateChangeRequest) GetType() isControlStateChangeRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ControlStateChangeRequest) GetScheduledUpdate() *common.ScheduledControlUpdate {
	if x, ok := x.GetType().(*ControlStateChangeRequest_ScheduledUpdate); ok {
		return x.ScheduledUpdate
	}
	return nil
}

func (x *ControlStateChangeRequest) GetScheduledDeletion() *common.ScheduledControlDeletion {
	if x, ok := x.GetType().(*ControlStateChangeRequest_ScheduledDeletion); ok {
		return x.ScheduledDeletion
	}
	return nil
}

func (x *ControlStateChangeRequest) GetControlPlanePingRequest() *ControlPlanePingRequest {
	if x, ok := x.GetType().(*ControlStateChangeRequest_ControlPlanePingRequest); ok {
		return x.ControlPlanePingRequest
	}
	return nil
}

type isControlStateChangeRequest_Type interface {
	isControlStateChangeRequest_Type()
}

type ControlStateChangeRequest_ScheduledUpdate struct {
	ScheduledUpdate *common.ScheduledControlUpdate `protobuf:"bytes,1,opt,name=scheduled_update,json=scheduledUpdate,oneof"`
}

type ControlStateChangeRequest_ScheduledDeletion struct {
	ScheduledDeletion *common.ScheduledControlDeletion `protobuf:"bytes,2,opt,name=scheduled_deletion,json=scheduledDeletion,oneof"`
}

type ControlStateChangeRequest_ControlPlanePingRequest struct {
	ControlPlanePingRequest *ControlPlanePingRequest `protobuf:"bytes,3,opt,name=control_plane_ping_request,json=controlPlanePingRequest,oneof"`
}

func (*ControlStateChangeRequest_ScheduledUpdate) isControlStateChangeRequest_Type() {}

func (*ControlStateChangeRequest_ScheduledDeletion) isControlStateChangeRequest_Type() {}

func (*ControlStateChangeRequest_ControlPlanePingRequest) isControlStateChangeRequest_Type() {}

type ControlStateNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                   *string                                `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Statuses                 []*common.ScheduledControlUpdateStatus `protobuf:"bytes,2,rep,name=statuses" json:"statuses,omitempty"`
	State                    *common.ControlPlaneState              `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Priority                 *uint32                                `protobuf:"varint,4,opt,name=priority,def=0" json:"priority,omitempty"`
	ControlPlanePingResponse *ControlPlanePingResponse              `protobuf:"bytes,5,opt,name=control_plane_ping_response,json=controlPlanePingResponse" json:"control_plane_ping_response,omitempty"`
}

// Default values for ControlStateNotification fields.
const (
	Default_ControlStateNotification_Priority = uint32(0)
)

func (x *ControlStateNotification) Reset() {
	*x = ControlStateNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlStateNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStateNotification) ProtoMessage() {}

func (x *ControlStateNotification) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStateNotification.ProtoReflect.Descriptor instead.
func (*ControlStateNotification) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{3}
}

func (x *ControlStateNotification) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *ControlStateNotification) GetStatuses() []*common.ScheduledControlUpdateStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ControlStateNotification) GetState() *common.ControlPlaneState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ControlStateNotification) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return Default_ControlStateNotification_Priority
}

func (x *ControlStateNotification) GetControlPlanePingResponse() *ControlPlanePingResponse {
	if x != nil {
		return x.ControlPlanePingResponse
	}
	return nil
}

type TelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId *string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Types that are assignable to Type:
	//
	//	*TelemetryRequest_QueryStatistics
	//	*TelemetryRequest_StatisticsPublishRateHz
	Type isTelemetryRequest_Type `protobuf_oneof:"type"`
}

func (x *TelemetryRequest) Reset() {
	*x = TelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryRequest) ProtoMessage() {}

func (x *TelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryRequest.ProtoReflect.Descriptor instead.
func (*TelemetryRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{4}
}

func (x *TelemetryRequest) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (m *TelemetryRequest) GetType() isTelemetryRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TelemetryRequest) GetQueryStatistics() *emptypb.Empty {
	if x, ok := x.GetType().(*TelemetryRequest_QueryStatistics); ok {
		return x.QueryStatistics
	}
	return nil
}

func (x *TelemetryRequest) GetStatisticsPublishRateHz() float64 {
	if x, ok := x.GetType().(*TelemetryRequest_StatisticsPublishRateHz); ok {
		return x.StatisticsPublishRateHz
	}
	return 0
}

type isTelemetryRequest_Type interface {
	isTelemetryRequest_Type()
}

type TelemetryRequest_QueryStatistics struct {
	QueryStatistics *emptypb.Empty `protobuf:"bytes,2,opt,name=query_statistics,json=queryStatistics,oneof"`
}

type TelemetryRequest_StatisticsPublishRateHz struct {
	StatisticsPublishRateHz float64 `protobuf:"fixed64,3,opt,name=statistics_publish_rate_hz,json=statisticsPublishRateHz,oneof"`
}

func (*TelemetryRequest_QueryStatistics) isTelemetryRequest_Type() {}

func (*TelemetryRequest_StatisticsPublishRateHz) isTelemetryRequest_Type() {}

type TelemetryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/cdpi/v1alpha/cdpi.proto.
	NodeId *string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Types that are assignable to Type:
	//
	//	*TelemetryUpdate_Statistics
	//	*TelemetryUpdate_Event
	Type isTelemetryUpdate_Type `protobuf_oneof:"type"`
}

func (x *TelemetryUpdate) Reset() {
	*x = TelemetryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryUpdate) ProtoMessage() {}

func (x *TelemetryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryUpdate.ProtoReflect.Descriptor instead.
func (*TelemetryUpdate) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in api/cdpi/v1alpha/cdpi.proto.
func (x *TelemetryUpdate) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (m *TelemetryUpdate) GetType() isTelemetryUpdate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TelemetryUpdate) GetStatistics() *common.NetworkStatsReport {
	if x, ok := x.GetType().(*TelemetryUpdate_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *TelemetryUpdate) GetEvent() *common.NetworkEventReport {
	if x, ok := x.GetType().(*TelemetryUpdate_Event); ok {
		return x.Event
	}
	return nil
}

type isTelemetryUpdate_Type interface {
	isTelemetryUpdate_Type()
}

type TelemetryUpdate_Statistics struct {
	Statistics *common.NetworkStatsReport `protobuf:"bytes,2,opt,name=statistics,oneof"`
}

type TelemetryUpdate_Event struct {
	Event *common.NetworkEventReport `protobuf:"bytes,3,opt,name=event,oneof"`
}

func (*TelemetryUpdate_Statistics) isTelemetryUpdate_Type() {}

func (*TelemetryUpdate_Event) isTelemetryUpdate_Type() {}

type SensorWeatherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location    *common.GeodeticWgs84       `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	WeatherData *common.WeatherDataForecast `protobuf:"bytes,3,opt,name=weather_data,json=weatherData" json:"weather_data,omitempty"`
}

func (x *SensorWeatherData) Reset() {
	*x = SensorWeatherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorWeatherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorWeatherData) ProtoMessage() {}

func (x *SensorWeatherData) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorWeatherData.ProtoReflect.Descriptor instead.
func (*SensorWeatherData) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{6}
}

func (x *SensorWeatherData) GetLocation() *common.GeodeticWgs84 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SensorWeatherData) GetWeatherData() *common.WeatherDataForecast {
	if x != nil {
		return x.WeatherData
	}
	return nil
}

type CdpiNodeStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId *string                   `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	State  *common.ControlPlaneState `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (x *CdpiNodeStateRequest) Reset() {
	*x = CdpiNodeStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiNodeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiNodeStateRequest) ProtoMessage() {}

func (x *CdpiNodeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiNodeStateRequest.ProtoReflect.Descriptor instead.
func (*CdpiNodeStateRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{7}
}

func (x *CdpiNodeStateRequest) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *CdpiNodeStateRequest) GetState() *common.ControlPlaneState {
	if x != nil {
		return x.State
	}
	return nil
}

type CdpiRequestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId *string                              `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Status *common.ScheduledControlUpdateStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (x *CdpiRequestStatusRequest) Reset() {
	*x = CdpiRequestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiRequestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiRequestStatusRequest) ProtoMessage() {}

func (x *CdpiRequestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiRequestStatusRequest.ProtoReflect.Descriptor instead.
func (*CdpiRequestStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{8}
}

func (x *CdpiRequestStatusRequest) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *CdpiRequestStatusRequest) GetStatus() *common.ScheduledControlUpdateStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CdpiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hello    *CdpiRequest_Hello    `protobuf:"bytes,1,opt,name=hello" json:"hello,omitempty"`
	Response *CdpiRequest_Response `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (x *CdpiRequest) Reset() {
	*x = CdpiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiRequest) ProtoMessage() {}

func (x *CdpiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiRequest.ProtoReflect.Descriptor instead.
func (*CdpiRequest) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{9}
}

func (x *CdpiRequest) GetHello() *CdpiRequest_Hello {
	if x != nil {
		return x.Hello
	}
	return nil
}

func (x *CdpiRequest) GetResponse() *CdpiRequest_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type CdpiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *int64 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestPayload []byte `protobuf:"bytes,2,opt,name=request_payload,json=requestPayload" json:"request_payload,omitempty"`
}

func (x *CdpiResponse) Reset() {
	*x = CdpiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiResponse) ProtoMessage() {}

func (x *CdpiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiResponse.ProtoReflect.Descriptor instead.
func (*CdpiResponse) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{10}
}

func (x *CdpiResponse) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CdpiResponse) GetRequestPayload() []byte {
	if x != nil {
		return x.RequestPayload
	}
	return nil
}

type CdpiRequest_Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          *string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	ChannelPriority *uint32 `protobuf:"varint,2,opt,name=channel_priority,json=channelPriority" json:"channel_priority,omitempty"`
}

func (x *CdpiRequest_Hello) Reset() {
	*x = CdpiRequest_Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiRequest_Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiRequest_Hello) ProtoMessage() {}

func (x *CdpiRequest_Hello) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiRequest_Hello.ProtoReflect.Descriptor instead.
func (*CdpiRequest_Hello) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CdpiRequest_Hello) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *CdpiRequest_Hello) GetChannelPriority() uint32 {
	if x != nil && x.ChannelPriority != nil {
		return *x.ChannelPriority
	}
	return 0
}

type CdpiRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *int64         `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Status    *status.Status `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Payload   []byte         `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (x *CdpiRequest_Response) Reset() {
	*x = CdpiRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpiRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpiRequest_Response) ProtoMessage() {}

func (x *CdpiRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdpi_v1alpha_cdpi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpiRequest_Response.ProtoReflect.Descriptor instead.
func (*CdpiRequest_Response) Descriptor() ([]byte, []int) {
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP(), []int{9, 1}
}

func (x *CdpiRequest_Response) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CdpiRequest_Response) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CdpiRequest_Response) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_api_cdpi_v1alpha_cdpi_proto protoreflect.FileDescriptor

var file_api_cdpi_v1alpha_cdpi_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x64, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x61,
	0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x56, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7b, 0x0a,
	0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a,
	0x1a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x48, 0x7a, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x61, 0x6c, 0x79,
	0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x57, 0x67, 0x73, 0x38, 0x34,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x08, 0x08, 0x05,
	0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x76, 0x0a, 0x14, 0x43, 0x64, 0x70, 0x69, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x18, 0x43, 0x64, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x0b, 0x43, 0x64, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x64, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x05,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x64, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x4b, 0x0a, 0x05, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x56, 0x0a, 0x0c, 0x43, 0x64, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x32, 0xb9, 0x01, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x9a, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0xa3, 0x01,
	0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x12,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x34, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x32, 0x7d, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a,
	0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x32, 0xcd, 0x02, 0x0a, 0x04, 0x43, 0x64, 0x70, 0x69, 0x12, 0x6f, 0x0a, 0x04, 0x43,
	0x64, 0x70, 0x69, 0x12, 0x2f, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x64, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x2e, 0x61, 0x61, 0x6c,
	0x79, 0x72, 0x69, 0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x64, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x5d, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x61, 0x6c, 0x79, 0x72, 0x69,
	0x61, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x64, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x09, 0x43, 0x64,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x61, 0x61, 0x6c, 0x79, 0x72,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x64, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61,
}

var (
	file_api_cdpi_v1alpha_cdpi_proto_rawDescOnce sync.Once
	file_api_cdpi_v1alpha_cdpi_proto_rawDescData = file_api_cdpi_v1alpha_cdpi_proto_rawDesc
)

func file_api_cdpi_v1alpha_cdpi_proto_rawDescGZIP() []byte {
	file_api_cdpi_v1alpha_cdpi_proto_rawDescOnce.Do(func() {
		file_api_cdpi_v1alpha_cdpi_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cdpi_v1alpha_cdpi_proto_rawDescData)
	})
	return file_api_cdpi_v1alpha_cdpi_proto_rawDescData
}

var file_api_cdpi_v1alpha_cdpi_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_cdpi_v1alpha_cdpi_proto_goTypes = []interface{}{
	(*ControlPlanePingRequest)(nil),             // 0: aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest
	(*ControlPlanePingResponse)(nil),            // 1: aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse
	(*ControlStateChangeRequest)(nil),           // 2: aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest
	(*ControlStateNotification)(nil),            // 3: aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification
	(*TelemetryRequest)(nil),                    // 4: aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest
	(*TelemetryUpdate)(nil),                     // 5: aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate
	(*SensorWeatherData)(nil),                   // 6: aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData
	(*CdpiNodeStateRequest)(nil),                // 7: aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest
	(*CdpiRequestStatusRequest)(nil),            // 8: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest
	(*CdpiRequest)(nil),                         // 9: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest
	(*CdpiResponse)(nil),                        // 10: aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse
	(*CdpiRequest_Hello)(nil),                   // 11: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello
	(*CdpiRequest_Response)(nil),                // 12: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response
	(*status.Status)(nil),                       // 13: google.rpc.Status
	(*timestamppb.Timestamp)(nil),               // 14: google.protobuf.Timestamp
	(*common.ScheduledControlUpdate)(nil),       // 15: aalyria.spacetime.api.common.ScheduledControlUpdate
	(*common.ScheduledControlDeletion)(nil),     // 16: aalyria.spacetime.api.common.ScheduledControlDeletion
	(*common.ScheduledControlUpdateStatus)(nil), // 17: aalyria.spacetime.api.common.ScheduledControlUpdateStatus
	(*common.ControlPlaneState)(nil),            // 18: aalyria.spacetime.api.common.ControlPlaneState
	(*emptypb.Empty)(nil),                       // 19: google.protobuf.Empty
	(*common.NetworkStatsReport)(nil),           // 20: aalyria.spacetime.api.common.NetworkStatsReport
	(*common.NetworkEventReport)(nil),           // 21: aalyria.spacetime.api.common.NetworkEventReport
	(*common.GeodeticWgs84)(nil),                // 22: aalyria.spacetime.api.common.GeodeticWgs84
	(*common.WeatherDataForecast)(nil),          // 23: aalyria.spacetime.api.common.WeatherDataForecast
}
var file_api_cdpi_v1alpha_cdpi_proto_depIdxs = []int32{
	13, // 0: aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse.status:type_name -> google.rpc.Status
	14, // 1: aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse.time_of_receipt:type_name -> google.protobuf.Timestamp
	15, // 2: aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.scheduled_update:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdate
	16, // 3: aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.scheduled_deletion:type_name -> aalyria.spacetime.api.common.ScheduledControlDeletion
	0,  // 4: aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.control_plane_ping_request:type_name -> aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest
	17, // 5: aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification.statuses:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdateStatus
	18, // 6: aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification.state:type_name -> aalyria.spacetime.api.common.ControlPlaneState
	1,  // 7: aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification.control_plane_ping_response:type_name -> aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse
	19, // 8: aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest.query_statistics:type_name -> google.protobuf.Empty
	20, // 9: aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.statistics:type_name -> aalyria.spacetime.api.common.NetworkStatsReport
	21, // 10: aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.event:type_name -> aalyria.spacetime.api.common.NetworkEventReport
	22, // 11: aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData.location:type_name -> aalyria.spacetime.api.common.GeodeticWgs84
	23, // 12: aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData.weather_data:type_name -> aalyria.spacetime.api.common.WeatherDataForecast
	18, // 13: aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest.state:type_name -> aalyria.spacetime.api.common.ControlPlaneState
	17, // 14: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest.status:type_name -> aalyria.spacetime.api.common.ScheduledControlUpdateStatus
	11, // 15: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.hello:type_name -> aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello
	12, // 16: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.response:type_name -> aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response
	13, // 17: aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response.status:type_name -> google.rpc.Status
	3,  // 18: aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming.ControlPlaneInterface:input_type -> aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification
	5,  // 19: aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming.TelemetryInterface:input_type -> aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate
	6,  // 20: aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment.UploadSensorData:input_type -> aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData
	9,  // 21: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.Cdpi:input_type -> aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest
	7,  // 22: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.UpdateNodeState:input_type -> aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest
	8,  // 23: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.UpdateRequestStatus:input_type -> aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest
	2,  // 24: aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming.ControlPlaneInterface:output_type -> aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest
	4,  // 25: aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming.TelemetryInterface:output_type -> aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest
	19, // 26: aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment.UploadSensorData:output_type -> google.protobuf.Empty
	10, // 27: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.Cdpi:output_type -> aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse
	19, // 28: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.UpdateNodeState:output_type -> google.protobuf.Empty
	19, // 29: aalyria.spacetime.api.cdpi.v1alpha.Cdpi.UpdateRequestStatus:output_type -> google.protobuf.Empty
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_cdpi_v1alpha_cdpi_proto_init() }
func file_api_cdpi_v1alpha_cdpi_proto_init() {
	if File_api_cdpi_v1alpha_cdpi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlanePingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlanePingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlStateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlStateNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorWeatherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiNodeStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiRequestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiRequest_Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdpi_v1alpha_cdpi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpiRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_cdpi_v1alpha_cdpi_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ControlStateChangeRequest_ScheduledUpdate)(nil),
		(*ControlStateChangeRequest_ScheduledDeletion)(nil),
		(*ControlStateChangeRequest_ControlPlanePingRequest)(nil),
	}
	file_api_cdpi_v1alpha_cdpi_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TelemetryRequest_QueryStatistics)(nil),
		(*TelemetryRequest_StatisticsPublishRateHz)(nil),
	}
	file_api_cdpi_v1alpha_cdpi_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TelemetryUpdate_Statistics)(nil),
		(*TelemetryUpdate_Event)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cdpi_v1alpha_cdpi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_api_cdpi_v1alpha_cdpi_proto_goTypes,
		DependencyIndexes: file_api_cdpi_v1alpha_cdpi_proto_depIdxs,
		MessageInfos:      file_api_cdpi_v1alpha_cdpi_proto_msgTypes,
	}.Build()
	File_api_cdpi_v1alpha_cdpi_proto = out.File
	file_api_cdpi_v1alpha_cdpi_proto_rawDesc = nil
	file_api_cdpi_v1alpha_cdpi_proto_goTypes = nil
	file_api_cdpi_v1alpha_cdpi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkControllerStreamingClient is the client API for NetworkControllerStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkControllerStreamingClient interface {
	ControlPlaneInterface(ctx context.Context, opts ...grpc.CallOption) (NetworkControllerStreaming_ControlPlaneInterfaceClient, error)
}

type networkControllerStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkControllerStreamingClient(cc grpc.ClientConnInterface) NetworkControllerStreamingClient {
	return &networkControllerStreamingClient{cc}
}

func (c *networkControllerStreamingClient) ControlPlaneInterface(ctx context.Context, opts ...grpc.CallOption) (NetworkControllerStreaming_ControlPlaneInterfaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkControllerStreaming_serviceDesc.Streams[0], "/aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming/ControlPlaneInterface", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkControllerStreamingControlPlaneInterfaceClient{stream}
	return x, nil
}

type NetworkControllerStreaming_ControlPlaneInterfaceClient interface {
	Send(*ControlStateNotification) error
	Recv() (*ControlStateChangeRequest, error)
	grpc.ClientStream
}

type networkControllerStreamingControlPlaneInterfaceClient struct {
	grpc.ClientStream
}

func (x *networkControllerStreamingControlPlaneInterfaceClient) Send(m *ControlStateNotification) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkControllerStreamingControlPlaneInterfaceClient) Recv() (*ControlStateChangeRequest, error) {
	m := new(ControlStateChangeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkControllerStreamingServer is the server API for NetworkControllerStreaming service.
type NetworkControllerStreamingServer interface {
	ControlPlaneInterface(NetworkControllerStreaming_ControlPlaneInterfaceServer) error
}

// UnimplementedNetworkControllerStreamingServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkControllerStreamingServer struct {
}

func (*UnimplementedNetworkControllerStreamingServer) ControlPlaneInterface(NetworkControllerStreaming_ControlPlaneInterfaceServer) error {
	return status1.Errorf(codes.Unimplemented, "method ControlPlaneInterface not implemented")
}

func RegisterNetworkControllerStreamingServer(s *grpc.Server, srv NetworkControllerStreamingServer) {
	s.RegisterService(&_NetworkControllerStreaming_serviceDesc, srv)
}

func _NetworkControllerStreaming_ControlPlaneInterface_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkControllerStreamingServer).ControlPlaneInterface(&networkControllerStreamingControlPlaneInterfaceServer{stream})
}

type NetworkControllerStreaming_ControlPlaneInterfaceServer interface {
	Send(*ControlStateChangeRequest) error
	Recv() (*ControlStateNotification, error)
	grpc.ServerStream
}

type networkControllerStreamingControlPlaneInterfaceServer struct {
	grpc.ServerStream
}

func (x *networkControllerStreamingControlPlaneInterfaceServer) Send(m *ControlStateChangeRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkControllerStreamingControlPlaneInterfaceServer) Recv() (*ControlStateNotification, error) {
	m := new(ControlStateNotification)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkControllerStreaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming",
	HandlerType: (*NetworkControllerStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlPlaneInterface",
			Handler:       _NetworkControllerStreaming_ControlPlaneInterface_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cdpi/v1alpha/cdpi.proto",
}

// NetworkTelemetryStreamingClient is the client API for NetworkTelemetryStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkTelemetryStreamingClient interface {
	TelemetryInterface(ctx context.Context, opts ...grpc.CallOption) (NetworkTelemetryStreaming_TelemetryInterfaceClient, error)
}

type networkTelemetryStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkTelemetryStreamingClient(cc grpc.ClientConnInterface) NetworkTelemetryStreamingClient {
	return &networkTelemetryStreamingClient{cc}
}

func (c *networkTelemetryStreamingClient) TelemetryInterface(ctx context.Context, opts ...grpc.CallOption) (NetworkTelemetryStreaming_TelemetryInterfaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkTelemetryStreaming_serviceDesc.Streams[0], "/aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming/TelemetryInterface", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkTelemetryStreamingTelemetryInterfaceClient{stream}
	return x, nil
}

type NetworkTelemetryStreaming_TelemetryInterfaceClient interface {
	Send(*TelemetryUpdate) error
	Recv() (*TelemetryRequest, error)
	grpc.ClientStream
}

type networkTelemetryStreamingTelemetryInterfaceClient struct {
	grpc.ClientStream
}

func (x *networkTelemetryStreamingTelemetryInterfaceClient) Send(m *TelemetryUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkTelemetryStreamingTelemetryInterfaceClient) Recv() (*TelemetryRequest, error) {
	m := new(TelemetryRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkTelemetryStreamingServer is the server API for NetworkTelemetryStreaming service.
type NetworkTelemetryStreamingServer interface {
	TelemetryInterface(NetworkTelemetryStreaming_TelemetryInterfaceServer) error
}

// UnimplementedNetworkTelemetryStreamingServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkTelemetryStreamingServer struct {
}

func (*UnimplementedNetworkTelemetryStreamingServer) TelemetryInterface(NetworkTelemetryStreaming_TelemetryInterfaceServer) error {
	return status1.Errorf(codes.Unimplemented, "method TelemetryInterface not implemented")
}

func RegisterNetworkTelemetryStreamingServer(s *grpc.Server, srv NetworkTelemetryStreamingServer) {
	s.RegisterService(&_NetworkTelemetryStreaming_serviceDesc, srv)
}

func _NetworkTelemetryStreaming_TelemetryInterface_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkTelemetryStreamingServer).TelemetryInterface(&networkTelemetryStreamingTelemetryInterfaceServer{stream})
}

type NetworkTelemetryStreaming_TelemetryInterfaceServer interface {
	Send(*TelemetryRequest) error
	Recv() (*TelemetryUpdate, error)
	grpc.ServerStream
}

type networkTelemetryStreamingTelemetryInterfaceServer struct {
	grpc.ServerStream
}

func (x *networkTelemetryStreamingTelemetryInterfaceServer) Send(m *TelemetryRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkTelemetryStreamingTelemetryInterfaceServer) Recv() (*TelemetryUpdate, error) {
	m := new(TelemetryUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkTelemetryStreaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming",
	HandlerType: (*NetworkTelemetryStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TelemetryInterface",
			Handler:       _NetworkTelemetryStreaming_TelemetryInterface_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cdpi/v1alpha/cdpi.proto",
}

// AttenuationEnvironmentClient is the client API for AttenuationEnvironment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttenuationEnvironmentClient interface {
	UploadSensorData(ctx context.Context, in *SensorWeatherData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type attenuationEnvironmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAttenuationEnvironmentClient(cc grpc.ClientConnInterface) AttenuationEnvironmentClient {
	return &attenuationEnvironmentClient{cc}
}

func (c *attenuationEnvironmentClient) UploadSensorData(ctx context.Context, in *SensorWeatherData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment/UploadSensorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttenuationEnvironmentServer is the server API for AttenuationEnvironment service.
type AttenuationEnvironmentServer interface {
	UploadSensorData(context.Context, *SensorWeatherData) (*emptypb.Empty, error)
}

// UnimplementedAttenuationEnvironmentServer can be embedded to have forward compatible implementations.
type UnimplementedAttenuationEnvironmentServer struct {
}

func (*UnimplementedAttenuationEnvironmentServer) UploadSensorData(context.Context, *SensorWeatherData) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UploadSensorData not implemented")
}

func RegisterAttenuationEnvironmentServer(s *grpc.Server, srv AttenuationEnvironmentServer) {
	s.RegisterService(&_AttenuationEnvironment_serviceDesc, srv)
}

func _AttenuationEnvironment_UploadSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorWeatherData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttenuationEnvironmentServer).UploadSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment/UploadSensorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttenuationEnvironmentServer).UploadSensorData(ctx, req.(*SensorWeatherData))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttenuationEnvironment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment",
	HandlerType: (*AttenuationEnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadSensorData",
			Handler:    _AttenuationEnvironment_UploadSensorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cdpi/v1alpha/cdpi.proto",
}

// CdpiClient is the client API for Cdpi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CdpiClient interface {
	Cdpi(ctx context.Context, opts ...grpc.CallOption) (Cdpi_CdpiClient, error)
	UpdateNodeState(ctx context.Context, in *CdpiNodeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRequestStatus(ctx context.Context, in *CdpiRequestStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cdpiClient struct {
	cc grpc.ClientConnInterface
}

func NewCdpiClient(cc grpc.ClientConnInterface) CdpiClient {
	return &cdpiClient{cc}
}

func (c *cdpiClient) Cdpi(ctx context.Context, opts ...grpc.CallOption) (Cdpi_CdpiClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cdpi_serviceDesc.Streams[0], "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/Cdpi", opts...)
	if err != nil {
		return nil, err
	}
	x := &cdpiCdpiClient{stream}
	return x, nil
}

type Cdpi_CdpiClient interface {
	Send(*CdpiRequest) error
	Recv() (*CdpiResponse, error)
	grpc.ClientStream
}

type cdpiCdpiClient struct {
	grpc.ClientStream
}

func (x *cdpiCdpiClient) Send(m *CdpiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cdpiCdpiClient) Recv() (*CdpiResponse, error) {
	m := new(CdpiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cdpiClient) UpdateNodeState(ctx context.Context, in *CdpiNodeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateNodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdpiClient) UpdateRequestStatus(ctx context.Context, in *CdpiRequestStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CdpiServer is the server API for Cdpi service.
type CdpiServer interface {
	Cdpi(Cdpi_CdpiServer) error
	UpdateNodeState(context.Context, *CdpiNodeStateRequest) (*emptypb.Empty, error)
	UpdateRequestStatus(context.Context, *CdpiRequestStatusRequest) (*emptypb.Empty, error)
}

// UnimplementedCdpiServer can be embedded to have forward compatible implementations.
type UnimplementedCdpiServer struct {
}

func (*UnimplementedCdpiServer) Cdpi(Cdpi_CdpiServer) error {
	return status1.Errorf(codes.Unimplemented, "method Cdpi not implemented")
}
func (*UnimplementedCdpiServer) UpdateNodeState(context.Context, *CdpiNodeStateRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNodeState not implemented")
}
func (*UnimplementedCdpiServer) UpdateRequestStatus(context.Context, *CdpiRequestStatusRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRequestStatus not implemented")
}

func RegisterCdpiServer(s *grpc.Server, srv CdpiServer) {
	s.RegisterService(&_Cdpi_serviceDesc, srv)
}

func _Cdpi_Cdpi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CdpiServer).Cdpi(&cdpiCdpiServer{stream})
}

type Cdpi_CdpiServer interface {
	Send(*CdpiResponse) error
	Recv() (*CdpiRequest, error)
	grpc.ServerStream
}

type cdpiCdpiServer struct {
	grpc.ServerStream
}

func (x *cdpiCdpiServer) Send(m *CdpiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cdpiCdpiServer) Recv() (*CdpiRequest, error) {
	m := new(CdpiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cdpi_UpdateNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CdpiNodeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdpiServer).UpdateNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateNodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdpiServer).UpdateNodeState(ctx, req.(*CdpiNodeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cdpi_UpdateRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CdpiRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdpiServer).UpdateRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aalyria.spacetime.api.cdpi.v1alpha.Cdpi/UpdateRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdpiServer).UpdateRequestStatus(ctx, req.(*CdpiRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cdpi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aalyria.spacetime.api.cdpi.v1alpha.Cdpi",
	HandlerType: (*CdpiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeState",
			Handler:    _Cdpi_UpdateNodeState_Handler,
		},
		{
			MethodName: "UpdateRequestStatus",
			Handler:    _Cdpi_UpdateRequestStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Cdpi",
			Handler:       _Cdpi_Cdpi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cdpi/v1alpha/cdpi.proto",
}

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/cdpi/v1alpha/cdpi.proto
#ifndef GRPC_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED
#define GRPC_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED

#include "api/cdpi/v1alpha/cdpi.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace aalyria {
namespace spacetime {
namespace api {
namespace cdpi {
namespace v1alpha {

class NetworkControllerStreaming final {
 public:
  static constexpr char const* service_full_name() {
    return "aalyria.spacetime.api.cdpi.v1alpha.NetworkControllerStreaming";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> ControlPlaneInterface(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(ControlPlaneInterfaceRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> AsyncControlPlaneInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(AsyncControlPlaneInterfaceRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> PrepareAsyncControlPlaneInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(PrepareAsyncControlPlaneInterfaceRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ControlPlaneInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification,::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* ControlPlaneInterfaceRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* AsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* PrepareAsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> ControlPlaneInterface(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(ControlPlaneInterfaceRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> AsyncControlPlaneInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(AsyncControlPlaneInterfaceRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>> PrepareAsyncControlPlaneInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>>(PrepareAsyncControlPlaneInterfaceRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ControlPlaneInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification,::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* ControlPlaneInterfaceRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* AsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* PrepareAsyncControlPlaneInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ControlPlaneInterface_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlPlaneInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlPlaneInterface() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ControlPlaneInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlPlaneInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ControlPlaneInterface<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ControlPlaneInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ControlPlaneInterface() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ControlPlaneInterface(context); }));
    }
    ~WithCallbackMethod_ControlPlaneInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest>* ControlPlaneInterface(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_ControlPlaneInterface<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ControlPlaneInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlPlaneInterface() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ControlPlaneInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlPlaneInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlPlaneInterface() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ControlPlaneInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlPlaneInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ControlPlaneInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ControlPlaneInterface() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ControlPlaneInterface(context); }));
    }
    ~WithRawCallbackMethod_ControlPlaneInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlPlaneInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ControlPlaneInterface(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

class NetworkTelemetryStreaming final {
 public:
  static constexpr char const* service_full_name() {
    return "aalyria.spacetime.api.cdpi.v1alpha.NetworkTelemetryStreaming";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> TelemetryInterface(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(TelemetryInterfaceRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> AsyncTelemetryInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(AsyncTelemetryInterfaceRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> PrepareAsyncTelemetryInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(PrepareAsyncTelemetryInterfaceRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void TelemetryInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate,::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* TelemetryInterfaceRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* AsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* PrepareAsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> TelemetryInterface(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(TelemetryInterfaceRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> AsyncTelemetryInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(AsyncTelemetryInterfaceRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>> PrepareAsyncTelemetryInterface(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>>(PrepareAsyncTelemetryInterfaceRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TelemetryInterface(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate,::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* TelemetryInterfaceRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* AsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* PrepareAsyncTelemetryInterfaceRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TelemetryInterface_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TelemetryInterface(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_TelemetryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TelemetryInterface() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TelemetryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TelemetryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTelemetryInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TelemetryInterface<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TelemetryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TelemetryInterface() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->TelemetryInterface(context); }));
    }
    ~WithCallbackMethod_TelemetryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TelemetryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest>* TelemetryInterface(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_TelemetryInterface<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TelemetryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TelemetryInterface() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TelemetryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TelemetryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TelemetryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TelemetryInterface() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TelemetryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TelemetryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTelemetryInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TelemetryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TelemetryInterface() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->TelemetryInterface(context); }));
    }
    ~WithRawCallbackMethod_TelemetryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TelemetryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* TelemetryInterface(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

class AttenuationEnvironment final {
 public:
  static constexpr char const* service_full_name() {
    return "aalyria.spacetime.api.cdpi.v1alpha.AttenuationEnvironment";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUploadSensorDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUploadSensorDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUploadSensorDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUploadSensorDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UploadSensorData(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUploadSensorDataRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadSensorData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UploadSensorData(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSensorData(::grpc::ServerContext* context, ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadSensorData<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* request, ::google::protobuf::Empty* response) { return this->UploadSensorData(context, request, response); }));}
    void SetMessageAllocatorFor_UploadSensorData(
        ::grpc::MessageAllocator< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadSensorData(
      ::grpc::CallbackServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadSensorData<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSensorData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadSensorData(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadSensorData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadSensorData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadSensorData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUploadSensorData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadSensorData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadSensorData(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadSensorData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UploadSensorData<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UploadSensorData<Service > StreamedService;
};

class Cdpi final {
 public:
  static constexpr char const* service_full_name() {
    return "aalyria.spacetime.api.cdpi.v1alpha.Cdpi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> Cdpi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(CdpiRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> AsyncCdpi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(AsyncCdpiRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> PrepareAsyncCdpi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(PrepareAsyncCdpiRaw(context, cq));
    }
    virtual ::grpc::Status UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUpdateNodeStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUpdateNodeStateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUpdateRequestStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUpdateRequestStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Cdpi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest,::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* reactor) = 0;
      virtual void UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* CdpiRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* AsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* PrepareAsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> Cdpi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(CdpiRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> AsyncCdpi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(AsyncCdpiRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>> PrepareAsyncCdpi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>>(PrepareAsyncCdpiRaw(context, cq));
    }
    ::grpc::Status UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUpdateNodeStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUpdateNodeStateRaw(context, request, cq));
    }
    ::grpc::Status UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUpdateRequestStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUpdateRequestStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Cdpi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest,::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* reactor) override;
      void UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateNodeState(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateRequestStatus(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* CdpiRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* AsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* PrepareAsyncCdpiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUpdateNodeStateRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUpdateRequestStatusRaw(::grpc::ClientContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Cdpi_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNodeState_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRequestStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Cdpi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* stream);
    virtual ::grpc::Status UpdateNodeState(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Cdpi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Cdpi() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Cdpi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cdpi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCdpi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodeState(::grpc::ServerContext* context, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRequestStatus(::grpc::ServerContext* context, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Cdpi<WithAsyncMethod_UpdateNodeState<WithAsyncMethod_UpdateRequestStatus<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Cdpi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Cdpi() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Cdpi(context); }));
    }
    ~WithCallbackMethod_Cdpi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cdpi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse>* Cdpi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* request, ::google::protobuf::Empty* response) { return this->UpdateNodeState(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNodeState(
        ::grpc::MessageAllocator< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNodeState(
      ::grpc::CallbackServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* request, ::google::protobuf::Empty* response) { return this->UpdateRequestStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRequestStatus(
        ::grpc::MessageAllocator< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRequestStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Cdpi<WithCallbackMethod_UpdateNodeState<WithCallbackMethod_UpdateRequestStatus<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Cdpi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Cdpi() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Cdpi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cdpi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Cdpi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Cdpi() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Cdpi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cdpi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCdpi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodeState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Cdpi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Cdpi() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Cdpi(context); }));
    }
    ~WithRawCallbackMethod_Cdpi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cdpi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Cdpi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNodeState(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNodeState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRequestStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRequestStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNodeState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUpdateNodeState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNodeState(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNodeState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRequestStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRequestStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUpdateRequestStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRequestStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRequestStatus(::grpc::ServerContext* /*context*/, const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRequestStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateNodeState<WithStreamedUnaryMethod_UpdateRequestStatus<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateNodeState<WithStreamedUnaryMethod_UpdateRequestStatus<Service > > StreamedService;
};

}  // namespace v1alpha
}  // namespace cdpi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria


#endif  // GRPC_api_2fcdpi_2fv1alpha_2fcdpi_2eproto__INCLUDED

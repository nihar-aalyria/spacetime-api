// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/cdpi/v1alpha/cdpi.proto

#include "api/cdpi/v1alpha/cdpi.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace aalyria {
namespace spacetime {
namespace api {
namespace cdpi {
namespace v1alpha {
template <typename>
PROTOBUF_CONSTEXPR ControlPlanePingRequest::ControlPlanePingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ ::int64_t{0}
} {}
struct ControlPlanePingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlPlanePingRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlPlanePingRequestDefaultTypeInternal() {}
  union {
    ControlPlanePingRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlPlanePingRequestDefaultTypeInternal _ControlPlanePingRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControlPlanePingResponse::ControlPlanePingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_of_receipt_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::int64_t{0}
} {}
struct ControlPlanePingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlPlanePingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlPlanePingResponseDefaultTypeInternal() {}
  union {
    ControlPlanePingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlPlanePingResponseDefaultTypeInternal _ControlPlanePingResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControlStateChangeRequest::ControlStateChangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControlStateChangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStateChangeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStateChangeRequestDefaultTypeInternal() {}
  union {
    ControlStateChangeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateChangeRequestDefaultTypeInternal _ControlStateChangeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControlStateNotification::ControlStateNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statuses_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.control_plane_ping_response_)*/nullptr
  , /*decltype(_impl_.priority_)*/ 0u
} {}
struct ControlStateNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStateNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStateNotificationDefaultTypeInternal() {}
  union {
    ControlStateNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateNotificationDefaultTypeInternal _ControlStateNotification_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TelemetryRequest::TelemetryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TelemetryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryRequestDefaultTypeInternal() {}
  union {
    TelemetryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryRequestDefaultTypeInternal _TelemetryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TelemetryUpdate::TelemetryUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TelemetryUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryUpdateDefaultTypeInternal() {}
  union {
    TelemetryUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryUpdateDefaultTypeInternal _TelemetryUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SensorWeatherData::SensorWeatherData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weather_data_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr} {}
struct SensorWeatherDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorWeatherDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorWeatherDataDefaultTypeInternal() {}
  union {
    SensorWeatherData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorWeatherDataDefaultTypeInternal _SensorWeatherData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiNodeStateRequest::CdpiNodeStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/nullptr} {}
struct CdpiNodeStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiNodeStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiNodeStateRequestDefaultTypeInternal() {}
  union {
    CdpiNodeStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiNodeStateRequestDefaultTypeInternal _CdpiNodeStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiRequestStatusRequest::CdpiRequestStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr} {}
struct CdpiRequestStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiRequestStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiRequestStatusRequestDefaultTypeInternal() {}
  union {
    CdpiRequestStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiRequestStatusRequestDefaultTypeInternal _CdpiRequestStatusRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiRequest_Hello::CdpiRequest_Hello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_priority_)*/ 0u
} {}
struct CdpiRequest_HelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiRequest_HelloDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiRequest_HelloDefaultTypeInternal() {}
  union {
    CdpiRequest_Hello _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiRequest_HelloDefaultTypeInternal _CdpiRequest_Hello_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiRequest_Response::CdpiRequest_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.request_id_)*/ ::int64_t{0}
} {}
struct CdpiRequest_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiRequest_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiRequest_ResponseDefaultTypeInternal() {}
  union {
    CdpiRequest_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiRequest_ResponseDefaultTypeInternal _CdpiRequest_Response_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiRequest::CdpiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hello_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr} {}
struct CdpiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiRequestDefaultTypeInternal() {}
  union {
    CdpiRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiRequestDefaultTypeInternal _CdpiRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CdpiResponse::CdpiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.request_id_)*/ ::int64_t{0}
} {}
struct CdpiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CdpiResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CdpiResponseDefaultTypeInternal() {}
  union {
    CdpiResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CdpiResponseDefaultTypeInternal _CdpiResponse_default_instance_;
}  // namespace v1alpha
}  // namespace cdpi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
static ::_pb::Metadata file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[13];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_api_2fcdpi_2fv1alpha_2fcdpi_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_api_2fcdpi_2fv1alpha_2fcdpi_2eproto = nullptr;
const ::uint32_t TableStruct_api_2fcdpi_2fv1alpha_2fcdpi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest, _impl_.id_),
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse, _impl_.time_of_receipt_),
    2,
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_.statuses_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_.priority_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification, _impl_.control_plane_ping_response_),
    0,
    ~0u,
    1,
    3,
    2,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _impl_.node_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _impl_.type_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _impl_.node_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _impl_.type_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData, _impl_.weather_data_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest, _impl_.state_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest, _impl_.status_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello, _impl_.channel_priority_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response, _impl_.payload_),
    2,
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, _impl_.hello_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest, _impl_.response_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse, _impl_.request_payload_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest)},
        { 10, 21, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse)},
        { 24, -1, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest)},
        { 36, 49, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification)},
        { 54, 66, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest)},
        { 69, 81, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate)},
        { 84, 94, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData)},
        { 96, 106, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest)},
        { 108, 118, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest)},
        { 120, 130, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello)},
        { 132, 143, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response)},
        { 146, 156, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest)},
        { 158, 168, -1, sizeof(::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::aalyria::spacetime::api::cdpi::v1alpha::_ControlPlanePingRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_ControlPlanePingResponse_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_ControlStateChangeRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_ControlStateNotification_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_TelemetryRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_TelemetryUpdate_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_SensorWeatherData_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiNodeStateRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiRequestStatusRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiRequest_Hello_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiRequest_Response_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiRequest_default_instance_._instance,
    &::aalyria::spacetime::api::cdpi::v1alpha::_CdpiResponse_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033api/cdpi/v1alpha/cdpi.proto\022\"aalyria.s"
    "pacetime.api.cdpi.v1alpha\032\030api/common/co"
    "ntrol.proto\032\034api/common/coordinates.prot"
    "o\032\032api/common/telemetry.proto\032%api/commo"
    "n/wireless_propagation.proto\032\033google/pro"
    "tobuf/empty.proto\032\037google/protobuf/times"
    "tamp.proto\032\027google/rpc/status.proto\")\n\027C"
    "ontrolPlanePingRequest\022\016\n\002id\030\001 \001(\003R\002id\"\232"
    "\001\n\030ControlPlanePingResponse\022\016\n\002id\030\001 \001(\003R"
    "\002id\022*\n\006status\030\003 \001(\0132\022.google.rpc.StatusR"
    "\006status\022B\n\017time_of_receipt\030\002 \001(\0132\032.googl"
    "e.protobuf.TimestampR\rtimeOfReceipt\"\353\002\n\031"
    "ControlStateChangeRequest\022a\n\020scheduled_u"
    "pdate\030\001 \001(\01324.aalyria.spacetime.api.comm"
    "on.ScheduledControlUpdateH\000R\017scheduledUp"
    "date\022g\n\022scheduled_deletion\030\002 \001(\01326.aalyr"
    "ia.spacetime.api.common.ScheduledControl"
    "DeletionH\000R\021scheduledDeletion\022z\n\032control"
    "_plane_ping_request\030\003 \001(\0132;.aalyria.spac"
    "etime.api.cdpi.v1alpha.ControlPlanePingR"
    "equestH\000R\027controlPlanePingRequestB\006\n\004typ"
    "e\"\356\002\n\030ControlStateNotification\022\027\n\007node_i"
    "d\030\001 \001(\tR\006nodeId\022V\n\010statuses\030\002 \003(\0132:.aaly"
    "ria.spacetime.api.common.ScheduledContro"
    "lUpdateStatusR\010statuses\022E\n\005state\030\003 \001(\0132/"
    ".aalyria.spacetime.api.common.ControlPla"
    "neStateR\005state\022\035\n\010priority\030\004 \001(\r:\0010R\010pri"
    "ority\022{\n\033control_plane_ping_response\030\005 \001"
    "(\0132<.aalyria.spacetime.api.cdpi.v1alpha."
    "ControlPlanePingResponseR\030controlPlanePi"
    "ngResponse\"\267\001\n\020TelemetryRequest\022\027\n\007node_"
    "id\030\001 \001(\tR\006nodeId\022C\n\020query_statistics\030\002 \001"
    "(\0132\026.google.protobuf.EmptyH\000R\017queryStati"
    "stics\022=\n\032statistics_publish_rate_hz\030\003 \001("
    "\001H\000R\027statisticsPublishRateHzB\006\n\004type\"\324\001\n"
    "\017TelemetryUpdate\022\033\n\007node_id\030\001 \001(\tB\002\030\001R\006n"
    "odeId\022R\n\nstatistics\030\002 \001(\01320.aalyria.spac"
    "etime.api.common.NetworkStatsReportH\000R\ns"
    "tatistics\022H\n\005event\030\003 \001(\01320.aalyria.space"
    "time.api.common.NetworkEventReportH\000R\005ev"
    "entB\006\n\004type\"\310\001\n\021SensorWeatherData\022G\n\010loc"
    "ation\030\004 \001(\0132+.aalyria.spacetime.api.comm"
    "on.GeodeticWgs84R\010location\022T\n\014weather_da"
    "ta\030\003 \001(\01321.aalyria.spacetime.api.common."
    "WeatherDataForecastR\013weatherDataJ\004\010\001\020\002J\004"
    "\010\002\020\003J\010\010\005\020\200\200\200\200\002\"v\n\024CdpiNodeStateRequest\022\027"
    "\n\007node_id\030\001 \001(\tR\006nodeId\022E\n\005state\030\003 \001(\0132/"
    ".aalyria.spacetime.api.common.ControlPla"
    "neStateR\005state\"\207\001\n\030CdpiRequestStatusRequ"
    "est\022\027\n\007node_id\030\001 \001(\tR\006nodeId\022R\n\006status\030\002"
    " \001(\0132:.aalyria.spacetime.api.common.Sche"
    "duledControlUpdateStatusR\006status\"\356\002\n\013Cdp"
    "iRequest\022K\n\005hello\030\001 \001(\01325.aalyria.spacet"
    "ime.api.cdpi.v1alpha.CdpiRequest.HelloR\005"
    "hello\022T\n\010response\030\002 \001(\01328.aalyria.spacet"
    "ime.api.cdpi.v1alpha.CdpiRequest.Respons"
    "eR\010response\032K\n\005Hello\022\027\n\007node_id\030\001 \001(\tR\006n"
    "odeId\022)\n\020channel_priority\030\002 \001(\rR\017channel"
    "Priority\032o\n\010Response\022\035\n\nrequest_id\030\001 \001(\003"
    "R\trequestId\022*\n\006status\030\002 \001(\0132\022.google.rpc"
    ".StatusR\006status\022\030\n\007payload\030\003 \001(\014R\007payloa"
    "d\"V\n\014CdpiResponse\022\035\n\nrequest_id\030\001 \001(\003R\tr"
    "equestId\022\'\n\017request_payload\030\002 \001(\014R\016reque"
    "stPayload2\271\001\n\032NetworkControllerStreaming"
    "\022\232\001\n\025ControlPlaneInterface\022<.aalyria.spa"
    "cetime.api.cdpi.v1alpha.ControlStateNoti"
    "fication\032=.aalyria.spacetime.api.cdpi.v1"
    "alpha.ControlStateChangeRequest\"\000(\0010\0012\243\001"
    "\n\031NetworkTelemetryStreaming\022\205\001\n\022Telemetr"
    "yInterface\0223.aalyria.spacetime.api.cdpi."
    "v1alpha.TelemetryUpdate\0324.aalyria.spacet"
    "ime.api.cdpi.v1alpha.TelemetryRequest\"\000("
    "\0010\0012}\n\026AttenuationEnvironment\022c\n\020UploadS"
    "ensorData\0225.aalyria.spacetime.api.cdpi.v"
    "1alpha.SensorWeatherData\032\026.google.protob"
    "uf.Empty\"\0002\315\002\n\004Cdpi\022o\n\004Cdpi\022/.aalyria.sp"
    "acetime.api.cdpi.v1alpha.CdpiRequest\0320.a"
    "alyria.spacetime.api.cdpi.v1alpha.CdpiRe"
    "sponse\"\000(\0010\001\022e\n\017UpdateNodeState\0228.aalyri"
    "a.spacetime.api.cdpi.v1alpha.CdpiNodeSta"
    "teRequest\032\026.google.protobuf.Empty\"\000\022m\n\023U"
    "pdateRequestStatus\022<.aalyria.spacetime.a"
    "pi.cdpi.v1alpha.CdpiRequestStatusRequest"
    "\032\026.google.protobuf.Empty\"\000B]\n&com.aalyri"
    "a.spacetime.api.cdpi.v1alphaB\tCdpiProtoP"
    "\001Z&aalyria.com/spacetime/api/cdpi/v1alph"
    "a"
};
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_deps[7] =
    {
        &::descriptor_table_api_2fcommon_2fcontrol_2eproto,
        &::descriptor_table_api_2fcommon_2fcoordinates_2eproto,
        &::descriptor_table_api_2fcommon_2ftelemetry_2eproto,
        &::descriptor_table_api_2fcommon_2fwireless_5fpropagation_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::absl::once_flag descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto = {
    false,
    false,
    3441,
    descriptor_table_protodef_api_2fcdpi_2fv1alpha_2fcdpi_2eproto,
    "api/cdpi/v1alpha/cdpi.proto",
    &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
    descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_deps,
    7,
    13,
    schemas,
    file_default_instances,
    TableStruct_api_2fcdpi_2fv1alpha_2fcdpi_2eproto::offsets,
    file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto,
    file_level_enum_descriptors_api_2fcdpi_2fv1alpha_2fcdpi_2eproto,
    file_level_service_descriptors_api_2fcdpi_2fv1alpha_2fcdpi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter() {
  return &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fcdpi_2fv1alpha_2fcdpi_2eproto(&descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto);
namespace aalyria {
namespace spacetime {
namespace api {
namespace cdpi {
namespace v1alpha {
// ===================================================================

class ControlPlanePingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlPlanePingRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlPlanePingRequest, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ControlPlanePingRequest::ControlPlanePingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
}
ControlPlanePingRequest::ControlPlanePingRequest(const ControlPlanePingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
}

inline void ControlPlanePingRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { ::int64_t{0} }

  };
}

ControlPlanePingRequest::~ControlPlanePingRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlPlanePingRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlPlanePingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlPlanePingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlPlanePingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlPlanePingRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  return target;
}

::size_t ControlPlanePingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1 [json_name = "id"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlPlanePingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlPlanePingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlPlanePingRequest::GetClassData() const { return &_class_data_; }


void ControlPlanePingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlPlanePingRequest*>(&to_msg);
  auto& from = static_cast<const ControlPlanePingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlPlanePingRequest::CopyFrom(const ControlPlanePingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlanePingRequest::IsInitialized() const {
  return true;
}

void ControlPlanePingRequest::InternalSwap(ControlPlanePingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPlanePingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[0]);
}
// ===================================================================

class ControlPlanePingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlPlanePingResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlPlanePingResponse, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::rpc::Status& status(const ControlPlanePingResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_of_receipt(const ControlPlanePingResponse* msg);
  static void set_has_time_of_receipt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::rpc::Status&
ControlPlanePingResponse::_Internal::status(const ControlPlanePingResponse* msg) {
  return *msg->_impl_.status_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ControlPlanePingResponse::_Internal::time_of_receipt(const ControlPlanePingResponse* msg) {
  return *msg->_impl_.time_of_receipt_;
}
void ControlPlanePingResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ControlPlanePingResponse::clear_time_of_receipt() {
  if (_impl_.time_of_receipt_ != nullptr) _impl_.time_of_receipt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlPlanePingResponse::ControlPlanePingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
}
ControlPlanePingResponse::ControlPlanePingResponse(const ControlPlanePingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlPlanePingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_of_receipt_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_of_receipt_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_of_receipt_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
}

inline void ControlPlanePingResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_of_receipt_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.id_) { ::int64_t{0} }

  };
}

ControlPlanePingResponse::~ControlPlanePingResponse() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlPlanePingResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_of_receipt_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ControlPlanePingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlPlanePingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_of_receipt_ != nullptr);
      _impl_.time_of_receipt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlPlanePingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp time_of_receipt = 2 [json_name = "timeOfReceipt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_of_receipt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.rpc.Status status = 3 [json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlPlanePingResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1 [json_name = "id"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  // optional .google.protobuf.Timestamp time_of_receipt = 2 [json_name = "timeOfReceipt"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_of_receipt(this),
        _Internal::time_of_receipt(this).GetCachedSize(), target, stream);
  }

  // optional .google.rpc.Status status = 3 [json_name = "status"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  return target;
}

::size_t ControlPlanePingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Timestamp time_of_receipt = 2 [json_name = "timeOfReceipt"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_of_receipt_);
    }

    // optional .google.rpc.Status status = 3 [json_name = "status"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // optional int64 id = 1 [json_name = "id"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlPlanePingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlPlanePingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlPlanePingResponse::GetClassData() const { return &_class_data_; }


void ControlPlanePingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlPlanePingResponse*>(&to_msg);
  auto& from = static_cast<const ControlPlanePingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time_of_receipt()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time_of_receipt());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlPlanePingResponse::CopyFrom(const ControlPlanePingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlanePingResponse::IsInitialized() const {
  return true;
}

void ControlPlanePingResponse::InternalSwap(ControlPlanePingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlPlanePingResponse, _impl_.id_)
      + sizeof(ControlPlanePingResponse::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ControlPlanePingResponse, _impl_.time_of_receipt_)>(
          reinterpret_cast<char*>(&_impl_.time_of_receipt_),
          reinterpret_cast<char*>(&other->_impl_.time_of_receipt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPlanePingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[1]);
}
// ===================================================================

class ControlStateChangeRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest, _impl_._oneof_case_);
  static const ::aalyria::spacetime::api::common::ScheduledControlUpdate& scheduled_update(const ControlStateChangeRequest* msg);
  static const ::aalyria::spacetime::api::common::ScheduledControlDeletion& scheduled_deletion(const ControlStateChangeRequest* msg);
  static const ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest& control_plane_ping_request(const ControlStateChangeRequest* msg);
};

const ::aalyria::spacetime::api::common::ScheduledControlUpdate&
ControlStateChangeRequest::_Internal::scheduled_update(const ControlStateChangeRequest* msg) {
  return *msg->_impl_.type_.scheduled_update_;
}
const ::aalyria::spacetime::api::common::ScheduledControlDeletion&
ControlStateChangeRequest::_Internal::scheduled_deletion(const ControlStateChangeRequest* msg) {
  return *msg->_impl_.type_.scheduled_deletion_;
}
const ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest&
ControlStateChangeRequest::_Internal::control_plane_ping_request(const ControlStateChangeRequest* msg) {
  return *msg->_impl_.type_.control_plane_ping_request_;
}
void ControlStateChangeRequest::set_allocated_scheduled_update(::aalyria::spacetime::api::common::ScheduledControlUpdate* scheduled_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (scheduled_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduled_update));
    if (message_arena != submessage_arena) {
      scheduled_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduled_update, submessage_arena);
    }
    set_has_scheduled_update();
    _impl_.type_.scheduled_update_ = scheduled_update;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.scheduled_update)
}
void ControlStateChangeRequest::clear_scheduled_update() {
  if (type_case() == kScheduledUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.scheduled_update_;
    }
    clear_has_type();
  }
}
void ControlStateChangeRequest::set_allocated_scheduled_deletion(::aalyria::spacetime::api::common::ScheduledControlDeletion* scheduled_deletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (scheduled_deletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduled_deletion));
    if (message_arena != submessage_arena) {
      scheduled_deletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduled_deletion, submessage_arena);
    }
    set_has_scheduled_deletion();
    _impl_.type_.scheduled_deletion_ = scheduled_deletion;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.scheduled_deletion)
}
void ControlStateChangeRequest::clear_scheduled_deletion() {
  if (type_case() == kScheduledDeletion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.scheduled_deletion_;
    }
    clear_has_type();
  }
}
void ControlStateChangeRequest::set_allocated_control_plane_ping_request(::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest* control_plane_ping_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (control_plane_ping_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_plane_ping_request);
    if (message_arena != submessage_arena) {
      control_plane_ping_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_plane_ping_request, submessage_arena);
    }
    set_has_control_plane_ping_request();
    _impl_.type_.control_plane_ping_request_ = control_plane_ping_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest.control_plane_ping_request)
}
ControlStateChangeRequest::ControlStateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
}
ControlStateChangeRequest::ControlStateChangeRequest(const ControlStateChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlStateChangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kScheduledUpdate: {
      _this->_internal_mutable_scheduled_update()->::aalyria::spacetime::api::common::ScheduledControlUpdate::MergeFrom(
          from._internal_scheduled_update());
      break;
    }
    case kScheduledDeletion: {
      _this->_internal_mutable_scheduled_deletion()->::aalyria::spacetime::api::common::ScheduledControlDeletion::MergeFrom(
          from._internal_scheduled_deletion());
      break;
    }
    case kControlPlanePingRequest: {
      _this->_internal_mutable_control_plane_ping_request()->::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest::MergeFrom(
          from._internal_control_plane_ping_request());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
}

inline void ControlStateChangeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

ControlStateChangeRequest::~ControlStateChangeRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlStateChangeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void ControlStateChangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlStateChangeRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  switch (type_case()) {
    case kScheduledUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.scheduled_update_;
      }
      break;
    }
    case kScheduledDeletion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.scheduled_deletion_;
      }
      break;
    }
    case kControlPlanePingRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.control_plane_ping_request_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void ControlStateChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStateChangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aalyria.spacetime.api.common.ScheduledControlUpdate scheduled_update = 1 [json_name = "scheduledUpdate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduled_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.ScheduledControlDeletion scheduled_deletion = 2 [json_name = "scheduledDeletion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduled_deletion(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest control_plane_ping_request = 3 [json_name = "controlPlanePingRequest"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_plane_ping_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlStateChangeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kScheduledUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::scheduled_update(this),
          _Internal::scheduled_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kScheduledDeletion: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::scheduled_deletion(this),
          _Internal::scheduled_deletion(this).GetCachedSize(), target, stream);
      break;
    }
    case kControlPlanePingRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::control_plane_ping_request(this),
          _Internal::control_plane_ping_request(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  return target;
}

::size_t ControlStateChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .aalyria.spacetime.api.common.ScheduledControlUpdate scheduled_update = 1 [json_name = "scheduledUpdate"];
    case kScheduledUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.scheduled_update_);
      break;
    }
    // .aalyria.spacetime.api.common.ScheduledControlDeletion scheduled_deletion = 2 [json_name = "scheduledDeletion"];
    case kScheduledDeletion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.scheduled_deletion_);
      break;
    }
    // .aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingRequest control_plane_ping_request = 3 [json_name = "controlPlanePingRequest"];
    case kControlPlanePingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.control_plane_ping_request_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStateChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStateChangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStateChangeRequest::GetClassData() const { return &_class_data_; }


void ControlStateChangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlStateChangeRequest*>(&to_msg);
  auto& from = static_cast<const ControlStateChangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kScheduledUpdate: {
      _this->_internal_mutable_scheduled_update()->::aalyria::spacetime::api::common::ScheduledControlUpdate::MergeFrom(
          from._internal_scheduled_update());
      break;
    }
    case kScheduledDeletion: {
      _this->_internal_mutable_scheduled_deletion()->::aalyria::spacetime::api::common::ScheduledControlDeletion::MergeFrom(
          from._internal_scheduled_deletion());
      break;
    }
    case kControlPlanePingRequest: {
      _this->_internal_mutable_control_plane_ping_request()->::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest::MergeFrom(
          from._internal_control_plane_ping_request());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStateChangeRequest::CopyFrom(const ControlStateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStateChangeRequest::IsInitialized() const {
  switch (type_case()) {
    case kScheduledUpdate: {
      if (type_case() == kScheduledUpdate) {
        if (!_impl_.type_.scheduled_update_->IsInitialized()) return false;
      }
      break;
    }
    case kScheduledDeletion: {
      break;
    }
    case kControlPlanePingRequest: {
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void ControlStateChangeRequest::InternalSwap(ControlStateChangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStateChangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[2]);
}
// ===================================================================

class ControlStateNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlStateNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlStateNotification, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::ControlPlaneState& state(const ControlStateNotification* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse& control_plane_ping_response(const ControlStateNotification* msg);
  static void set_has_control_plane_ping_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::aalyria::spacetime::api::common::ControlPlaneState&
ControlStateNotification::_Internal::state(const ControlStateNotification* msg) {
  return *msg->_impl_.state_;
}
const ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse&
ControlStateNotification::_Internal::control_plane_ping_response(const ControlStateNotification* msg) {
  return *msg->_impl_.control_plane_ping_response_;
}
void ControlStateNotification::clear_statuses() {
  _internal_mutable_statuses()->Clear();
}
void ControlStateNotification::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ControlStateNotification::ControlStateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
}
ControlStateNotification::ControlStateNotification(const ControlStateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlStateNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statuses_){from._impl_.statuses_}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.control_plane_ping_response_){nullptr}
    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.state_ = new ::aalyria::spacetime::api::common::ControlPlaneState(*from._impl_.state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.control_plane_ping_response_ = new ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse(*from._impl_.control_plane_ping_response_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
}

inline void ControlStateNotification::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statuses_){arena}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.control_plane_ping_response_){nullptr}
    , decltype(_impl_.priority_) { 0u }

  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlStateNotification::~ControlStateNotification() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlStateNotification::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statuses()->~RepeatedPtrField();
  _impl_.node_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.control_plane_ping_response_;
}

void ControlStateNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlStateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statuses()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.control_plane_ping_response_ != nullptr);
      _impl_.control_plane_ping_response_->Clear();
    }
  }
  _impl_.priority_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStateNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .aalyria.spacetime.api.common.ScheduledControlUpdateStatus statuses = 2 [json_name = "statuses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 priority = 4 [default = 0, json_name = "priority"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse control_plane_ping_response = 5 [json_name = "controlPlanePingResponse"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_plane_ping_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControlStateNotification::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .aalyria.spacetime.api.common.ScheduledControlUpdateStatus statuses = 2 [json_name = "statuses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statuses_size()); i < n; i++) {
    const auto& repfield = this->_internal_statuses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // optional uint32 priority = 4 [default = 0, json_name = "priority"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_priority(), target);
  }

  // optional .aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse control_plane_ping_response = 5 [json_name = "controlPlanePingResponse"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::control_plane_ping_response(this),
        _Internal::control_plane_ping_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  return target;
}

::size_t ControlStateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aalyria.spacetime.api.common.ScheduledControlUpdateStatus statuses = 2 [json_name = "statuses"];
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->_internal_statuses()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

    // optional .aalyria.spacetime.api.cdpi.v1alpha.ControlPlanePingResponse control_plane_ping_response = 5 [json_name = "controlPlanePingResponse"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_plane_ping_response_);
    }

    // optional uint32 priority = 4 [default = 0, json_name = "priority"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStateNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStateNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStateNotification::GetClassData() const { return &_class_data_; }


void ControlStateNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlStateNotification*>(&to_msg);
  auto& from = static_cast<const ControlStateNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statuses()->MergeFrom(from._internal_statuses());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::aalyria::spacetime::api::common::ControlPlaneState::MergeFrom(
          from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_control_plane_ping_response()->::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse::MergeFrom(
          from._internal_control_plane_ping_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStateNotification::CopyFrom(const ControlStateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.ControlStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStateNotification::IsInitialized() const {
  return true;
}

void ControlStateNotification::InternalSwap(ControlStateNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statuses()->InternalSwap(other->_internal_mutable_statuses());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlStateNotification, _impl_.priority_)
      + sizeof(ControlStateNotification::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(ControlStateNotification, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStateNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[3]);
}
// ===================================================================

class TelemetryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TelemetryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TelemetryRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest, _impl_._oneof_case_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Empty& query_statistics(const TelemetryRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
TelemetryRequest::_Internal::query_statistics(const TelemetryRequest* msg) {
  return *msg->_impl_.type_.query_statistics_;
}
void TelemetryRequest::set_allocated_query_statistics(::PROTOBUF_NAMESPACE_ID::Empty* query_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (query_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_statistics));
    if (message_arena != submessage_arena) {
      query_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_statistics, submessage_arena);
    }
    set_has_query_statistics();
    _impl_.type_.query_statistics_ = query_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest.query_statistics)
}
void TelemetryRequest::clear_query_statistics() {
  if (type_case() == kQueryStatistics) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.query_statistics_;
    }
    clear_has_type();
  }
}
TelemetryRequest::TelemetryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
}
TelemetryRequest::TelemetryRequest(const TelemetryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TelemetryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  clear_has_type();
  switch (from.type_case()) {
    case kQueryStatistics: {
      _this->_internal_mutable_query_statistics()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_query_statistics());
      break;
    }
    case kStatisticsPublishRateHz: {
      _this->_internal_set_statistics_publish_rate_hz(from._internal_statistics_publish_rate_hz());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
}

inline void TelemetryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_type();
}

TelemetryRequest::~TelemetryRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TelemetryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  if (has_type()) {
    clear_type();
  }
}

void TelemetryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TelemetryRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  switch (type_case()) {
    case kQueryStatistics: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.query_statistics_;
      }
      break;
    }
    case kStatisticsPublishRateHz: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void TelemetryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_id_.ClearNonDefaultToEmpty();
  }
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Empty query_statistics = 2 [json_name = "queryStatistics"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_statistics(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double statistics_publish_rate_hz = 3 [json_name = "statisticsPublishRateHz"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _internal_set_statistics_publish_rate_hz(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TelemetryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (type_case()) {
    case kQueryStatistics: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::query_statistics(this),
          _Internal::query_statistics(this).GetCachedSize(), target, stream);
      break;
    }
    case kStatisticsPublishRateHz: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this->_internal_statistics_publish_rate_hz(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  return target;
}

::size_t TelemetryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string node_id = 1 [json_name = "nodeId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_node_id());
  }

  switch (type_case()) {
    // .google.protobuf.Empty query_statistics = 2 [json_name = "queryStatistics"];
    case kQueryStatistics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.query_statistics_);
      break;
    }
    // double statistics_publish_rate_hz = 3 [json_name = "statisticsPublishRateHz"];
    case kStatisticsPublishRateHz: {
      total_size += 9;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TelemetryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryRequest::GetClassData() const { return &_class_data_; }


void TelemetryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TelemetryRequest*>(&to_msg);
  auto& from = static_cast<const TelemetryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  switch (from.type_case()) {
    case kQueryStatistics: {
      _this->_internal_mutable_query_statistics()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_query_statistics());
      break;
    }
    case kStatisticsPublishRateHz: {
      _this->_internal_set_statistics_publish_rate_hz(from._internal_statistics_publish_rate_hz());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryRequest::CopyFrom(const TelemetryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryRequest::IsInitialized() const {
  return true;
}

void TelemetryRequest::InternalSwap(TelemetryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[4]);
}
// ===================================================================

class TelemetryUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TelemetryUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TelemetryUpdate, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate, _impl_._oneof_case_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::NetworkStatsReport& statistics(const TelemetryUpdate* msg);
  static const ::aalyria::spacetime::api::common::NetworkEventReport& event(const TelemetryUpdate* msg);
};

const ::aalyria::spacetime::api::common::NetworkStatsReport&
TelemetryUpdate::_Internal::statistics(const TelemetryUpdate* msg) {
  return *msg->_impl_.type_.statistics_;
}
const ::aalyria::spacetime::api::common::NetworkEventReport&
TelemetryUpdate::_Internal::event(const TelemetryUpdate* msg) {
  return *msg->_impl_.type_.event_;
}
void TelemetryUpdate::set_allocated_statistics(::aalyria::spacetime::api::common::NetworkStatsReport* statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics));
    if (message_arena != submessage_arena) {
      statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistics, submessage_arena);
    }
    set_has_statistics();
    _impl_.type_.statistics_ = statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.statistics)
}
void TelemetryUpdate::clear_statistics() {
  if (type_case() == kStatistics) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.statistics_;
    }
    clear_has_type();
  }
}
void TelemetryUpdate::set_allocated_event(::aalyria::spacetime::api::common::NetworkEventReport* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.type_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.event)
}
void TelemetryUpdate::clear_event() {
  if (type_case() == kEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.event_;
    }
    clear_has_type();
  }
}
TelemetryUpdate::TelemetryUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
}
TelemetryUpdate::TelemetryUpdate(const TelemetryUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TelemetryUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  clear_has_type();
  switch (from.type_case()) {
    case kStatistics: {
      _this->_internal_mutable_statistics()->::aalyria::spacetime::api::common::NetworkStatsReport::MergeFrom(
          from._internal_statistics());
      break;
    }
    case kEvent: {
      _this->_internal_mutable_event()->::aalyria::spacetime::api::common::NetworkEventReport::MergeFrom(
          from._internal_event());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
}

inline void TelemetryUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_type();
}

TelemetryUpdate::~TelemetryUpdate() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TelemetryUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  if (has_type()) {
    clear_type();
  }
}

void TelemetryUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TelemetryUpdate::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  switch (type_case()) {
    case kStatistics: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.statistics_;
      }
      break;
    }
    case kEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.event_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void TelemetryUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_id_.ClearNonDefaultToEmpty();
  }
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.NetworkStatsReport statistics = 2 [json_name = "statistics"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .aalyria.spacetime.api.common.NetworkEventReport event = 3 [json_name = "event"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TelemetryUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId", deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (type_case()) {
    case kStatistics: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::statistics(this),
          _Internal::statistics(this).GetCachedSize(), target, stream);
      break;
    }
    case kEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::event(this),
          _Internal::event(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  return target;
}

::size_t TelemetryUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string node_id = 1 [json_name = "nodeId", deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_node_id());
  }

  switch (type_case()) {
    // .aalyria.spacetime.api.common.NetworkStatsReport statistics = 2 [json_name = "statistics"];
    case kStatistics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.statistics_);
      break;
    }
    // .aalyria.spacetime.api.common.NetworkEventReport event = 3 [json_name = "event"];
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.event_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TelemetryUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryUpdate::GetClassData() const { return &_class_data_; }


void TelemetryUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TelemetryUpdate*>(&to_msg);
  auto& from = static_cast<const TelemetryUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  switch (from.type_case()) {
    case kStatistics: {
      _this->_internal_mutable_statistics()->::aalyria::spacetime::api::common::NetworkStatsReport::MergeFrom(
          from._internal_statistics());
      break;
    }
    case kEvent: {
      _this->_internal_mutable_event()->::aalyria::spacetime::api::common::NetworkEventReport::MergeFrom(
          from._internal_event());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryUpdate::CopyFrom(const TelemetryUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.TelemetryUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryUpdate::IsInitialized() const {
  switch (type_case()) {
    case kStatistics: {
      if (type_case() == kStatistics) {
        if (!_impl_.type_.statistics_->IsInitialized()) return false;
      }
      break;
    }
    case kEvent: {
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void TelemetryUpdate::InternalSwap(TelemetryUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[5]);
}
// ===================================================================

class SensorWeatherData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorWeatherData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SensorWeatherData, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::common::GeodeticWgs84& location(const SensorWeatherData* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aalyria::spacetime::api::common::WeatherDataForecast& weather_data(const SensorWeatherData* msg);
  static void set_has_weather_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::aalyria::spacetime::api::common::GeodeticWgs84&
SensorWeatherData::_Internal::location(const SensorWeatherData* msg) {
  return *msg->_impl_.location_;
}
const ::aalyria::spacetime::api::common::WeatherDataForecast&
SensorWeatherData::_Internal::weather_data(const SensorWeatherData* msg) {
  return *msg->_impl_.weather_data_;
}
void SensorWeatherData::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SensorWeatherData::clear_weather_data() {
  if (_impl_.weather_data_ != nullptr) _impl_.weather_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SensorWeatherData::SensorWeatherData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
}
SensorWeatherData::SensorWeatherData(const SensorWeatherData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorWeatherData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weather_data_){nullptr}
    , decltype(_impl_.location_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.weather_data_ = new ::aalyria::spacetime::api::common::WeatherDataForecast(*from._impl_.weather_data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.location_ = new ::aalyria::spacetime::api::common::GeodeticWgs84(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
}

inline void SensorWeatherData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weather_data_){nullptr}
    , decltype(_impl_.location_){nullptr}
  };
}

SensorWeatherData::~SensorWeatherData() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorWeatherData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weather_data_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void SensorWeatherData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorWeatherData::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.weather_data_ != nullptr);
      _impl_.weather_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorWeatherData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.common.WeatherDataForecast weather_data = 3 [json_name = "weatherData"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weather_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 4 [json_name = "location"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SensorWeatherData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.common.WeatherDataForecast weather_data = 3 [json_name = "weatherData"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::weather_data(this),
        _Internal::weather_data(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 4 [json_name = "location"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  return target;
}

::size_t SensorWeatherData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.common.WeatherDataForecast weather_data = 3 [json_name = "weatherData"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weather_data_);
    }

    // optional .aalyria.spacetime.api.common.GeodeticWgs84 location = 4 [json_name = "location"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorWeatherData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorWeatherData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorWeatherData::GetClassData() const { return &_class_data_; }


void SensorWeatherData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorWeatherData*>(&to_msg);
  auto& from = static_cast<const SensorWeatherData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_weather_data()->::aalyria::spacetime::api::common::WeatherDataForecast::MergeFrom(
          from._internal_weather_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::aalyria::spacetime::api::common::GeodeticWgs84::MergeFrom(
          from._internal_location());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorWeatherData::CopyFrom(const SensorWeatherData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.SensorWeatherData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorWeatherData::IsInitialized() const {
  return true;
}

void SensorWeatherData::InternalSwap(SensorWeatherData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorWeatherData, _impl_.location_)
      + sizeof(SensorWeatherData::_impl_.location_)
      - PROTOBUF_FIELD_OFFSET(SensorWeatherData, _impl_.weather_data_)>(
          reinterpret_cast<char*>(&_impl_.weather_data_),
          reinterpret_cast<char*>(&other->_impl_.weather_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorWeatherData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[6]);
}
// ===================================================================

class CdpiNodeStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiNodeStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiNodeStateRequest, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::ControlPlaneState& state(const CdpiNodeStateRequest* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::ControlPlaneState&
CdpiNodeStateRequest::_Internal::state(const CdpiNodeStateRequest* msg) {
  return *msg->_impl_.state_;
}
void CdpiNodeStateRequest::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CdpiNodeStateRequest::CdpiNodeStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
}
CdpiNodeStateRequest::CdpiNodeStateRequest(const CdpiNodeStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiNodeStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.state_ = new ::aalyria::spacetime::api::common::ControlPlaneState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
}

inline void CdpiNodeStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.state_){nullptr}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdpiNodeStateRequest::~CdpiNodeStateRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiNodeStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
}

void CdpiNodeStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiNodeStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiNodeStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiNodeStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  return target;
}

::size_t CdpiNodeStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional .aalyria.spacetime.api.common.ControlPlaneState state = 3 [json_name = "state"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiNodeStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiNodeStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiNodeStateRequest::GetClassData() const { return &_class_data_; }


void CdpiNodeStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiNodeStateRequest*>(&to_msg);
  auto& from = static_cast<const CdpiNodeStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::aalyria::spacetime::api::common::ControlPlaneState::MergeFrom(
          from._internal_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiNodeStateRequest::CopyFrom(const CdpiNodeStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiNodeStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiNodeStateRequest::IsInitialized() const {
  return true;
}

void CdpiNodeStateRequest::InternalSwap(CdpiNodeStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiNodeStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[7]);
}
// ===================================================================

class CdpiRequestStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiRequestStatusRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiRequestStatusRequest, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus& status(const CdpiRequestStatusRequest* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus&
CdpiRequestStatusRequest::_Internal::status(const CdpiRequestStatusRequest* msg) {
  return *msg->_impl_.status_;
}
void CdpiRequestStatusRequest::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CdpiRequestStatusRequest::CdpiRequestStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
}
CdpiRequestStatusRequest::CdpiRequestStatusRequest(const CdpiRequestStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiRequestStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.status_ = new ::aalyria::spacetime::api::common::ScheduledControlUpdateStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
}

inline void CdpiRequestStatusRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.status_){nullptr}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdpiRequestStatusRequest::~CdpiRequestStatusRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiRequestStatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CdpiRequestStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiRequestStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiRequestStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.common.ScheduledControlUpdateStatus status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiRequestStatusRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .aalyria.spacetime.api.common.ScheduledControlUpdateStatus status = 2 [json_name = "status"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  return target;
}

::size_t CdpiRequestStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional .aalyria.spacetime.api.common.ScheduledControlUpdateStatus status = 2 [json_name = "status"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiRequestStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiRequestStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiRequestStatusRequest::GetClassData() const { return &_class_data_; }


void CdpiRequestStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiRequestStatusRequest*>(&to_msg);
  auto& from = static_cast<const CdpiRequestStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::aalyria::spacetime::api::common::ScheduledControlUpdateStatus::MergeFrom(
          from._internal_status());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiRequestStatusRequest::CopyFrom(const CdpiRequestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiRequestStatusRequest::IsInitialized() const {
  return true;
}

void CdpiRequestStatusRequest::InternalSwap(CdpiRequestStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiRequestStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[8]);
}
// ===================================================================

class CdpiRequest_Hello::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiRequest_Hello>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiRequest_Hello, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdpiRequest_Hello::CdpiRequest_Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
}
CdpiRequest_Hello::CdpiRequest_Hello(const CdpiRequest_Hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiRequest_Hello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.channel_priority_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_priority_ = from._impl_.channel_priority_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
}

inline void CdpiRequest_Hello::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_) {}

    , decltype(_impl_.channel_priority_) { 0u }

  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdpiRequest_Hello::~CdpiRequest_Hello() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiRequest_Hello::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
}

void CdpiRequest_Hello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiRequest_Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.node_id_.ClearNonDefaultToEmpty();
  }
  _impl_.channel_priority_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiRequest_Hello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node_id = 1 [json_name = "nodeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello.node_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 channel_priority = 2 [json_name = "channelPriority"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_priority(&has_bits);
          _impl_.channel_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiRequest_Hello::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node_id = 1 [json_name = "nodeId"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 channel_priority = 2 [json_name = "channelPriority"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_channel_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  return target;
}

::size_t CdpiRequest_Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node_id = 1 [json_name = "nodeId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node_id());
    }

    // optional uint32 channel_priority = 2 [json_name = "channelPriority"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_channel_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiRequest_Hello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiRequest_Hello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiRequest_Hello::GetClassData() const { return &_class_data_; }


void CdpiRequest_Hello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiRequest_Hello*>(&to_msg);
  auto& from = static_cast<const CdpiRequest_Hello&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_priority_ = from._impl_.channel_priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiRequest_Hello::CopyFrom(const CdpiRequest_Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiRequest_Hello::IsInitialized() const {
  return true;
}

void CdpiRequest_Hello::InternalSwap(CdpiRequest_Hello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, lhs_arena,
                                       &other->_impl_.node_id_, rhs_arena);

  swap(_impl_.channel_priority_, other->_impl_.channel_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiRequest_Hello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[9]);
}
// ===================================================================

class CdpiRequest_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiRequest_Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiRequest_Response, _impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::rpc::Status& status(const CdpiRequest_Response* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::rpc::Status&
CdpiRequest_Response::_Internal::status(const CdpiRequest_Response* msg) {
  return *msg->_impl_.status_;
}
void CdpiRequest_Response::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CdpiRequest_Response::CdpiRequest_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
}
CdpiRequest_Response::CdpiRequest_Response(const CdpiRequest_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiRequest_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_) {}

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.request_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
}

inline void CdpiRequest_Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_) {}

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.request_id_) { ::int64_t{0} }

  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdpiRequest_Response::~CdpiRequest_Response() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiRequest_Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CdpiRequest_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiRequest_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_.request_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiRequest_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 request_id = 1 [json_name = "requestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.rpc.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload = 3 [json_name = "payload"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiRequest_Response::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 request_id = 1 [json_name = "requestId"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_request_id(), target);
  }

  // optional .google.rpc.Status status = 2 [json_name = "status"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // optional bytes payload = 3 [json_name = "payload"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  return target;
}

::size_t CdpiRequest_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 3 [json_name = "payload"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload());
    }

    // optional .google.rpc.Status status = 2 [json_name = "status"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // optional int64 request_id = 1 [json_name = "requestId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_request_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiRequest_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiRequest_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiRequest_Response::GetClassData() const { return &_class_data_; }


void CdpiRequest_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiRequest_Response*>(&to_msg);
  auto& from = static_cast<const CdpiRequest_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiRequest_Response::CopyFrom(const CdpiRequest_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiRequest_Response::IsInitialized() const {
  return true;
}

void CdpiRequest_Response::InternalSwap(CdpiRequest_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CdpiRequest_Response, _impl_.request_id_)
      + sizeof(CdpiRequest_Response::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(CdpiRequest_Response, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiRequest_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[10]);
}
// ===================================================================

class CdpiRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiRequest, _impl_._has_bits_);
  static const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello& hello(const CdpiRequest* msg);
  static void set_has_hello(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response& response(const CdpiRequest* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello&
CdpiRequest::_Internal::hello(const CdpiRequest* msg) {
  return *msg->_impl_.hello_;
}
const ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response&
CdpiRequest::_Internal::response(const CdpiRequest* msg) {
  return *msg->_impl_.response_;
}
CdpiRequest::CdpiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
}
CdpiRequest::CdpiRequest(const CdpiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hello_){nullptr}
    , decltype(_impl_.response_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hello_ = new ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello(*from._impl_.hello_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.response_ = new ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
}

inline void CdpiRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hello_){nullptr}
    , decltype(_impl_.response_){nullptr}
  };
}

CdpiRequest::~CdpiRequest() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hello_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void CdpiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.hello_ != nullptr);
      _impl_.hello_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.response_ != nullptr);
      _impl_.response_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello hello = 1 [json_name = "hello"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hello(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response response = 2 [json_name = "response"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello hello = 1 [json_name = "hello"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hello(this),
        _Internal::hello(this).GetCachedSize(), target, stream);
  }

  // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response response = 2 [json_name = "response"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  return target;
}

::size_t CdpiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Hello hello = 1 [json_name = "hello"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hello_);
    }

    // optional .aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest.Response response = 2 [json_name = "response"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiRequest::GetClassData() const { return &_class_data_; }


void CdpiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiRequest*>(&to_msg);
  auto& from = static_cast<const CdpiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_hello()->::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello::MergeFrom(
          from._internal_hello());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_response()->::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response::MergeFrom(
          from._internal_response());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiRequest::CopyFrom(const CdpiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiRequest::IsInitialized() const {
  return true;
}

void CdpiRequest::InternalSwap(CdpiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CdpiRequest, _impl_.response_)
      + sizeof(CdpiRequest::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CdpiRequest, _impl_.hello_)>(
          reinterpret_cast<char*>(&_impl_.hello_),
          reinterpret_cast<char*>(&other->_impl_.hello_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[11]);
}
// ===================================================================

class CdpiResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CdpiResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CdpiResponse, _impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CdpiResponse::CdpiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
}
CdpiResponse::CdpiResponse(const CdpiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CdpiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_payload_) {}

    , decltype(_impl_.request_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.request_payload_.Set(from._internal_request_payload(), _this->GetArenaForAllocation());
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
}

inline void CdpiResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_payload_) {}

    , decltype(_impl_.request_id_) { ::int64_t{0} }

  };
  _impl_.request_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CdpiResponse::~CdpiResponse() {
  // @@protoc_insertion_point(destructor:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CdpiResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_payload_.Destroy();
}

void CdpiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CdpiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.request_payload_.ClearNonDefaultToEmpty();
  }
  _impl_.request_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdpiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 request_id = 1 [json_name = "requestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes request_payload = 2 [json_name = "requestPayload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CdpiResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 request_id = 1 [json_name = "requestId"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_request_id(), target);
  }

  // optional bytes request_payload = 2 [json_name = "requestPayload"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_request_payload();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  return target;
}

::size_t CdpiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes request_payload = 2 [json_name = "requestPayload"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_request_payload());
    }

    // optional int64 request_id = 1 [json_name = "requestId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_request_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CdpiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CdpiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CdpiResponse::GetClassData() const { return &_class_data_; }


void CdpiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CdpiResponse*>(&to_msg);
  auto& from = static_cast<const CdpiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_request_payload(from._internal_request_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CdpiResponse::CopyFrom(const CdpiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aalyria.spacetime.api.cdpi.v1alpha.CdpiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdpiResponse::IsInitialized() const {
  return true;
}

void CdpiResponse::InternalSwap(CdpiResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_payload_, lhs_arena,
                                       &other->_impl_.request_payload_, rhs_arena);

  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdpiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_getter, &descriptor_table_api_2fcdpi_2fv1alpha_2fcdpi_2eproto_once,
      file_level_metadata_api_2fcdpi_2fv1alpha_2fcdpi_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace cdpi
}  // namespace api
}  // namespace spacetime
}  // namespace aalyria
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::ControlPlanePingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::ControlStateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::TelemetryUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::SensorWeatherData >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiNodeStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequestStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Hello >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse*
Arena::CreateMaybeMessage< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aalyria::spacetime::api::cdpi::v1alpha::CdpiResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/grpc/reflection/v1alpha/reflection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
namespace grpc {
namespace reflection {
namespace v1alpha {
class ErrorResponse;
struct ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class ExtensionNumberResponse;
struct ExtensionNumberResponseDefaultTypeInternal;
extern ExtensionNumberResponseDefaultTypeInternal _ExtensionNumberResponse_default_instance_;
class ExtensionRequest;
struct ExtensionRequestDefaultTypeInternal;
extern ExtensionRequestDefaultTypeInternal _ExtensionRequest_default_instance_;
class FileDescriptorResponse;
struct FileDescriptorResponseDefaultTypeInternal;
extern FileDescriptorResponseDefaultTypeInternal _FileDescriptorResponse_default_instance_;
class ListServiceResponse;
struct ListServiceResponseDefaultTypeInternal;
extern ListServiceResponseDefaultTypeInternal _ListServiceResponse_default_instance_;
class ServerReflectionRequest;
struct ServerReflectionRequestDefaultTypeInternal;
extern ServerReflectionRequestDefaultTypeInternal _ServerReflectionRequest_default_instance_;
class ServerReflectionResponse;
struct ServerReflectionResponseDefaultTypeInternal;
extern ServerReflectionResponseDefaultTypeInternal _ServerReflectionResponse_default_instance_;
class ServiceResponse;
struct ServiceResponseDefaultTypeInternal;
extern ServiceResponseDefaultTypeInternal _ServiceResponse_default_instance_;
}  // namespace v1alpha
}  // namespace reflection
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template <>
::grpc::reflection::v1alpha::ErrorResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ErrorResponse>(Arena*);
template <>
::grpc::reflection::v1alpha::ExtensionNumberResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ExtensionNumberResponse>(Arena*);
template <>
::grpc::reflection::v1alpha::ExtensionRequest* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ExtensionRequest>(Arena*);
template <>
::grpc::reflection::v1alpha::FileDescriptorResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::FileDescriptorResponse>(Arena*);
template <>
::grpc::reflection::v1alpha::ListServiceResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ListServiceResponse>(Arena*);
template <>
::grpc::reflection::v1alpha::ServerReflectionRequest* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ServerReflectionRequest>(Arena*);
template <>
::grpc::reflection::v1alpha::ServerReflectionResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ServerReflectionResponse>(Arena*);
template <>
::grpc::reflection::v1alpha::ServiceResponse* Arena::CreateMaybeMessage<::grpc::reflection::v1alpha::ServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace grpc {
namespace reflection {
namespace v1alpha {

// ===================================================================


// -------------------------------------------------------------------

class ServerReflectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ServerReflectionRequest) */ {
 public:
  inline ServerReflectionRequest() : ServerReflectionRequest(nullptr) {}
  ~ServerReflectionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerReflectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReflectionRequest(const ServerReflectionRequest& from);
  ServerReflectionRequest(ServerReflectionRequest&& from) noexcept
    : ServerReflectionRequest() {
    *this = ::std::move(from);
  }

  inline ServerReflectionRequest& operator=(const ServerReflectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReflectionRequest& operator=(ServerReflectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReflectionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum MessageRequestCase {
    kFileByFilename = 3,
    kFileContainingSymbol = 4,
    kFileContainingExtension = 5,
    kAllExtensionNumbersOfType = 6,
    kListServices = 7,
    MESSAGE_REQUEST_NOT_SET = 0,
  };

  static inline const ServerReflectionRequest* internal_default_instance() {
    return reinterpret_cast<const ServerReflectionRequest*>(
               &_ServerReflectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerReflectionRequest& a, ServerReflectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReflectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReflectionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReflectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReflectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReflectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReflectionRequest& from) {
    ServerReflectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReflectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ServerReflectionRequest";
  }
  protected:
  explicit ServerReflectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kFileByFilenameFieldNumber = 3,
    kFileContainingSymbolFieldNumber = 4,
    kFileContainingExtensionFieldNumber = 5,
    kAllExtensionNumbersOfTypeFieldNumber = 6,
    kListServicesFieldNumber = 7,
  };
  // string host = 1;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // string file_by_filename = 3;
  bool has_file_by_filename() const;
  void clear_file_by_filename() ;
  const std::string& file_by_filename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_by_filename(Arg_&& arg, Args_... args);
  std::string* mutable_file_by_filename();
  PROTOBUF_NODISCARD std::string* release_file_by_filename();
  void set_allocated_file_by_filename(std::string* ptr);

  private:
  const std::string& _internal_file_by_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_by_filename(
      const std::string& value);
  std::string* _internal_mutable_file_by_filename();

  public:
  // string file_containing_symbol = 4;
  bool has_file_containing_symbol() const;
  void clear_file_containing_symbol() ;
  const std::string& file_containing_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_containing_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_file_containing_symbol();
  PROTOBUF_NODISCARD std::string* release_file_containing_symbol();
  void set_allocated_file_containing_symbol(std::string* ptr);

  private:
  const std::string& _internal_file_containing_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_containing_symbol(
      const std::string& value);
  std::string* _internal_mutable_file_containing_symbol();

  public:
  // .grpc.reflection.v1alpha.ExtensionRequest file_containing_extension = 5;
  bool has_file_containing_extension() const;
  private:
  bool _internal_has_file_containing_extension() const;

  public:
  void clear_file_containing_extension() ;
  const ::grpc::reflection::v1alpha::ExtensionRequest& file_containing_extension() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::ExtensionRequest* release_file_containing_extension();
  ::grpc::reflection::v1alpha::ExtensionRequest* mutable_file_containing_extension();
  void set_allocated_file_containing_extension(::grpc::reflection::v1alpha::ExtensionRequest* file_containing_extension);
  private:
  const ::grpc::reflection::v1alpha::ExtensionRequest& _internal_file_containing_extension() const;
  ::grpc::reflection::v1alpha::ExtensionRequest* _internal_mutable_file_containing_extension();
  public:
  void unsafe_arena_set_allocated_file_containing_extension(
      ::grpc::reflection::v1alpha::ExtensionRequest* file_containing_extension);
  ::grpc::reflection::v1alpha::ExtensionRequest* unsafe_arena_release_file_containing_extension();
  // string all_extension_numbers_of_type = 6;
  bool has_all_extension_numbers_of_type() const;
  void clear_all_extension_numbers_of_type() ;
  const std::string& all_extension_numbers_of_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_all_extension_numbers_of_type(Arg_&& arg, Args_... args);
  std::string* mutable_all_extension_numbers_of_type();
  PROTOBUF_NODISCARD std::string* release_all_extension_numbers_of_type();
  void set_allocated_all_extension_numbers_of_type(std::string* ptr);

  private:
  const std::string& _internal_all_extension_numbers_of_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_all_extension_numbers_of_type(
      const std::string& value);
  std::string* _internal_mutable_all_extension_numbers_of_type();

  public:
  // string list_services = 7;
  bool has_list_services() const;
  void clear_list_services() ;
  const std::string& list_services() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_list_services(Arg_&& arg, Args_... args);
  std::string* mutable_list_services();
  PROTOBUF_NODISCARD std::string* release_list_services();
  void set_allocated_list_services(std::string* ptr);

  private:
  const std::string& _internal_list_services() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_list_services(
      const std::string& value);
  std::string* _internal_mutable_list_services();

  public:
  void clear_message_request();
  MessageRequestCase message_request_case() const;
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ServerReflectionRequest)
 private:
  class _Internal;
  void set_has_file_by_filename();
  void set_has_file_containing_symbol();
  void set_has_file_containing_extension();
  void set_has_all_extension_numbers_of_type();
  void set_has_list_services();

  inline bool has_message_request() const;
  inline void clear_has_message_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    union MessageRequestUnion {
      constexpr MessageRequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_by_filename_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_containing_symbol_;
      ::grpc::reflection::v1alpha::ExtensionRequest* file_containing_extension_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr all_extension_numbers_of_type_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_services_;
    } message_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ExtensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ExtensionRequest) */ {
 public:
  inline ExtensionRequest() : ExtensionRequest(nullptr) {}
  ~ExtensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExtensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionRequest(const ExtensionRequest& from);
  ExtensionRequest(ExtensionRequest&& from) noexcept
    : ExtensionRequest() {
    *this = ::std::move(from);
  }

  inline ExtensionRequest& operator=(const ExtensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionRequest& operator=(ExtensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionRequest* internal_default_instance() {
    return reinterpret_cast<const ExtensionRequest*>(
               &_ExtensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtensionRequest& a, ExtensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionRequest& from) {
    ExtensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ExtensionRequest";
  }
  protected:
  explicit ExtensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainingTypeFieldNumber = 1,
    kExtensionNumberFieldNumber = 2,
  };
  // string containing_type = 1;
  void clear_containing_type() ;
  const std::string& containing_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_containing_type(Arg_&& arg, Args_... args);
  std::string* mutable_containing_type();
  PROTOBUF_NODISCARD std::string* release_containing_type();
  void set_allocated_containing_type(std::string* ptr);

  private:
  const std::string& _internal_containing_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_containing_type(
      const std::string& value);
  std::string* _internal_mutable_containing_type();

  public:
  // int32 extension_number = 2;
  void clear_extension_number() ;
  ::int32_t extension_number() const;
  void set_extension_number(::int32_t value);

  private:
  ::int32_t _internal_extension_number() const;
  void _internal_set_extension_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ExtensionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containing_type_;
    ::int32_t extension_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ServerReflectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ServerReflectionResponse) */ {
 public:
  inline ServerReflectionResponse() : ServerReflectionResponse(nullptr) {}
  ~ServerReflectionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerReflectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReflectionResponse(const ServerReflectionResponse& from);
  ServerReflectionResponse(ServerReflectionResponse&& from) noexcept
    : ServerReflectionResponse() {
    *this = ::std::move(from);
  }

  inline ServerReflectionResponse& operator=(const ServerReflectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReflectionResponse& operator=(ServerReflectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReflectionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum MessageResponseCase {
    kFileDescriptorResponse = 4,
    kAllExtensionNumbersResponse = 5,
    kListServicesResponse = 6,
    kErrorResponse = 7,
    MESSAGE_RESPONSE_NOT_SET = 0,
  };

  static inline const ServerReflectionResponse* internal_default_instance() {
    return reinterpret_cast<const ServerReflectionResponse*>(
               &_ServerReflectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerReflectionResponse& a, ServerReflectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReflectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReflectionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReflectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReflectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReflectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReflectionResponse& from) {
    ServerReflectionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReflectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ServerReflectionResponse";
  }
  protected:
  explicit ServerReflectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidHostFieldNumber = 1,
    kOriginalRequestFieldNumber = 2,
    kFileDescriptorResponseFieldNumber = 4,
    kAllExtensionNumbersResponseFieldNumber = 5,
    kListServicesResponseFieldNumber = 6,
    kErrorResponseFieldNumber = 7,
  };
  // string valid_host = 1;
  void clear_valid_host() ;
  const std::string& valid_host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_valid_host(Arg_&& arg, Args_... args);
  std::string* mutable_valid_host();
  PROTOBUF_NODISCARD std::string* release_valid_host();
  void set_allocated_valid_host(std::string* ptr);

  private:
  const std::string& _internal_valid_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_host(
      const std::string& value);
  std::string* _internal_mutable_valid_host();

  public:
  // .grpc.reflection.v1alpha.ServerReflectionRequest original_request = 2;
  bool has_original_request() const;
  void clear_original_request() ;
  const ::grpc::reflection::v1alpha::ServerReflectionRequest& original_request() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::ServerReflectionRequest* release_original_request();
  ::grpc::reflection::v1alpha::ServerReflectionRequest* mutable_original_request();
  void set_allocated_original_request(::grpc::reflection::v1alpha::ServerReflectionRequest* original_request);
  private:
  const ::grpc::reflection::v1alpha::ServerReflectionRequest& _internal_original_request() const;
  ::grpc::reflection::v1alpha::ServerReflectionRequest* _internal_mutable_original_request();
  public:
  void unsafe_arena_set_allocated_original_request(
      ::grpc::reflection::v1alpha::ServerReflectionRequest* original_request);
  ::grpc::reflection::v1alpha::ServerReflectionRequest* unsafe_arena_release_original_request();
  // .grpc.reflection.v1alpha.FileDescriptorResponse file_descriptor_response = 4;
  bool has_file_descriptor_response() const;
  private:
  bool _internal_has_file_descriptor_response() const;

  public:
  void clear_file_descriptor_response() ;
  const ::grpc::reflection::v1alpha::FileDescriptorResponse& file_descriptor_response() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::FileDescriptorResponse* release_file_descriptor_response();
  ::grpc::reflection::v1alpha::FileDescriptorResponse* mutable_file_descriptor_response();
  void set_allocated_file_descriptor_response(::grpc::reflection::v1alpha::FileDescriptorResponse* file_descriptor_response);
  private:
  const ::grpc::reflection::v1alpha::FileDescriptorResponse& _internal_file_descriptor_response() const;
  ::grpc::reflection::v1alpha::FileDescriptorResponse* _internal_mutable_file_descriptor_response();
  public:
  void unsafe_arena_set_allocated_file_descriptor_response(
      ::grpc::reflection::v1alpha::FileDescriptorResponse* file_descriptor_response);
  ::grpc::reflection::v1alpha::FileDescriptorResponse* unsafe_arena_release_file_descriptor_response();
  // .grpc.reflection.v1alpha.ExtensionNumberResponse all_extension_numbers_response = 5;
  bool has_all_extension_numbers_response() const;
  private:
  bool _internal_has_all_extension_numbers_response() const;

  public:
  void clear_all_extension_numbers_response() ;
  const ::grpc::reflection::v1alpha::ExtensionNumberResponse& all_extension_numbers_response() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::ExtensionNumberResponse* release_all_extension_numbers_response();
  ::grpc::reflection::v1alpha::ExtensionNumberResponse* mutable_all_extension_numbers_response();
  void set_allocated_all_extension_numbers_response(::grpc::reflection::v1alpha::ExtensionNumberResponse* all_extension_numbers_response);
  private:
  const ::grpc::reflection::v1alpha::ExtensionNumberResponse& _internal_all_extension_numbers_response() const;
  ::grpc::reflection::v1alpha::ExtensionNumberResponse* _internal_mutable_all_extension_numbers_response();
  public:
  void unsafe_arena_set_allocated_all_extension_numbers_response(
      ::grpc::reflection::v1alpha::ExtensionNumberResponse* all_extension_numbers_response);
  ::grpc::reflection::v1alpha::ExtensionNumberResponse* unsafe_arena_release_all_extension_numbers_response();
  // .grpc.reflection.v1alpha.ListServiceResponse list_services_response = 6;
  bool has_list_services_response() const;
  private:
  bool _internal_has_list_services_response() const;

  public:
  void clear_list_services_response() ;
  const ::grpc::reflection::v1alpha::ListServiceResponse& list_services_response() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::ListServiceResponse* release_list_services_response();
  ::grpc::reflection::v1alpha::ListServiceResponse* mutable_list_services_response();
  void set_allocated_list_services_response(::grpc::reflection::v1alpha::ListServiceResponse* list_services_response);
  private:
  const ::grpc::reflection::v1alpha::ListServiceResponse& _internal_list_services_response() const;
  ::grpc::reflection::v1alpha::ListServiceResponse* _internal_mutable_list_services_response();
  public:
  void unsafe_arena_set_allocated_list_services_response(
      ::grpc::reflection::v1alpha::ListServiceResponse* list_services_response);
  ::grpc::reflection::v1alpha::ListServiceResponse* unsafe_arena_release_list_services_response();
  // .grpc.reflection.v1alpha.ErrorResponse error_response = 7;
  bool has_error_response() const;
  private:
  bool _internal_has_error_response() const;

  public:
  void clear_error_response() ;
  const ::grpc::reflection::v1alpha::ErrorResponse& error_response() const;
  PROTOBUF_NODISCARD ::grpc::reflection::v1alpha::ErrorResponse* release_error_response();
  ::grpc::reflection::v1alpha::ErrorResponse* mutable_error_response();
  void set_allocated_error_response(::grpc::reflection::v1alpha::ErrorResponse* error_response);
  private:
  const ::grpc::reflection::v1alpha::ErrorResponse& _internal_error_response() const;
  ::grpc::reflection::v1alpha::ErrorResponse* _internal_mutable_error_response();
  public:
  void unsafe_arena_set_allocated_error_response(
      ::grpc::reflection::v1alpha::ErrorResponse* error_response);
  ::grpc::reflection::v1alpha::ErrorResponse* unsafe_arena_release_error_response();
  void clear_message_response();
  MessageResponseCase message_response_case() const;
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ServerReflectionResponse)
 private:
  class _Internal;
  void set_has_file_descriptor_response();
  void set_has_all_extension_numbers_response();
  void set_has_list_services_response();
  void set_has_error_response();

  inline bool has_message_response() const;
  inline void clear_has_message_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_host_;
    ::grpc::reflection::v1alpha::ServerReflectionRequest* original_request_;
    union MessageResponseUnion {
      constexpr MessageResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::grpc::reflection::v1alpha::FileDescriptorResponse* file_descriptor_response_;
      ::grpc::reflection::v1alpha::ExtensionNumberResponse* all_extension_numbers_response_;
      ::grpc::reflection::v1alpha::ListServiceResponse* list_services_response_;
      ::grpc::reflection::v1alpha::ErrorResponse* error_response_;
    } message_response_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class FileDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.FileDescriptorResponse) */ {
 public:
  inline FileDescriptorResponse() : FileDescriptorResponse(nullptr) {}
  ~FileDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDescriptorResponse(const FileDescriptorResponse& from);
  FileDescriptorResponse(FileDescriptorResponse&& from) noexcept
    : FileDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline FileDescriptorResponse& operator=(const FileDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorResponse& operator=(FileDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorResponse*>(
               &_FileDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileDescriptorResponse& a, FileDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDescriptorResponse& from) {
    FileDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.FileDescriptorResponse";
  }
  protected:
  explicit FileDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorProtoFieldNumber = 1,
  };
  // repeated bytes file_descriptor_proto = 1;
  int file_descriptor_proto_size() const;
  private:
  int _internal_file_descriptor_proto_size() const;

  public:
  void clear_file_descriptor_proto() ;
  const std::string& file_descriptor_proto(int index) const;
  std::string* mutable_file_descriptor_proto(int index);
  void set_file_descriptor_proto(int index, const std::string& value);
  void set_file_descriptor_proto(int index, std::string&& value);
  void set_file_descriptor_proto(int index, const char* value);
  void set_file_descriptor_proto(int index, const void* value, std::size_t size);
  void set_file_descriptor_proto(int index, absl::string_view value);
  std::string* add_file_descriptor_proto();
  void add_file_descriptor_proto(const std::string& value);
  void add_file_descriptor_proto(std::string&& value);
  void add_file_descriptor_proto(const char* value);
  void add_file_descriptor_proto(const void* value, std::size_t size);
  void add_file_descriptor_proto(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_descriptor_proto() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_descriptor_proto();

  private:
  const std::string& _internal_file_descriptor_proto(int index) const;
  std::string* _internal_add_file_descriptor_proto();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_file_descriptor_proto() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_file_descriptor_proto();

  public:
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.FileDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_descriptor_proto_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ExtensionNumberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ExtensionNumberResponse) */ {
 public:
  inline ExtensionNumberResponse() : ExtensionNumberResponse(nullptr) {}
  ~ExtensionNumberResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExtensionNumberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionNumberResponse(const ExtensionNumberResponse& from);
  ExtensionNumberResponse(ExtensionNumberResponse&& from) noexcept
    : ExtensionNumberResponse() {
    *this = ::std::move(from);
  }

  inline ExtensionNumberResponse& operator=(const ExtensionNumberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionNumberResponse& operator=(ExtensionNumberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionNumberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionNumberResponse* internal_default_instance() {
    return reinterpret_cast<const ExtensionNumberResponse*>(
               &_ExtensionNumberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExtensionNumberResponse& a, ExtensionNumberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionNumberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionNumberResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionNumberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionNumberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionNumberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionNumberResponse& from) {
    ExtensionNumberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionNumberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ExtensionNumberResponse";
  }
  protected:
  explicit ExtensionNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionNumberFieldNumber = 2,
    kBaseTypeNameFieldNumber = 1,
  };
  // repeated int32 extension_number = 2;
  int extension_number_size() const;
  private:
  int _internal_extension_number_size() const;

  public:
  void clear_extension_number() ;
  ::int32_t extension_number(int index) const;
  void set_extension_number(int index, ::int32_t value);
  void add_extension_number(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& extension_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_extension_number();

  private:
  ::int32_t _internal_extension_number(int index) const;
  void _internal_add_extension_number(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_extension_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_extension_number();

  public:
  // string base_type_name = 1;
  void clear_base_type_name() ;
  const std::string& base_type_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_base_type_name();
  PROTOBUF_NODISCARD std::string* release_base_type_name();
  void set_allocated_base_type_name(std::string* ptr);

  private:
  const std::string& _internal_base_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_type_name(
      const std::string& value);
  std::string* _internal_mutable_base_type_name();

  public:
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ExtensionNumberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> extension_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _extension_number_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_type_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ListServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ListServiceResponse) */ {
 public:
  inline ListServiceResponse() : ListServiceResponse(nullptr) {}
  ~ListServiceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServiceResponse(const ListServiceResponse& from);
  ListServiceResponse(ListServiceResponse&& from) noexcept
    : ListServiceResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceResponse& operator=(const ListServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceResponse& operator=(ListServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceResponse*>(
               &_ListServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListServiceResponse& a, ListServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServiceResponse& from) {
    ListServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ListServiceResponse";
  }
  protected:
  explicit ListServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // repeated .grpc.reflection.v1alpha.ServiceResponse service = 1;
  int service_size() const;
  private:
  int _internal_service_size() const;

  public:
  void clear_service() ;
  ::grpc::reflection::v1alpha::ServiceResponse* mutable_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::reflection::v1alpha::ServiceResponse >*
      mutable_service();
  private:
  const ::grpc::reflection::v1alpha::ServiceResponse& _internal_service(int index) const;
  ::grpc::reflection::v1alpha::ServiceResponse* _internal_add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::grpc::reflection::v1alpha::ServiceResponse>& _internal_service() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::grpc::reflection::v1alpha::ServiceResponse>* _internal_mutable_service();
  public:
  const ::grpc::reflection::v1alpha::ServiceResponse& service(int index) const;
  ::grpc::reflection::v1alpha::ServiceResponse* add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::reflection::v1alpha::ServiceResponse >&
      service() const;
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ListServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::reflection::v1alpha::ServiceResponse > service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ServiceResponse) */ {
 public:
  inline ServiceResponse() : ServiceResponse(nullptr) {}
  ~ServiceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceResponse(const ServiceResponse& from);
  ServiceResponse(ServiceResponse&& from) noexcept
    : ServiceResponse() {
    *this = ::std::move(from);
  }

  inline ServiceResponse& operator=(const ServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResponse& operator=(ServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceResponse*>(
               &_ServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServiceResponse& a, ServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceResponse& from) {
    ServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ServiceResponse";
  }
  protected:
  explicit ServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};// -------------------------------------------------------------------

class ErrorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.reflection.v1alpha.ErrorResponse) */ {
 public:
  inline ErrorResponse() : ErrorResponse(nullptr) {}
  ~ErrorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorResponse(const ErrorResponse& from);
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorResponse& from) {
    ErrorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "grpc.reflection.v1alpha.ErrorResponse";
  }
  protected:
  explicit ErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* ptr);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 error_code = 1;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:grpc.reflection.v1alpha.ErrorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerReflectionRequest

// string host = 1;
inline void ServerReflectionRequest::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ServerReflectionRequest::host() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionRequest::set_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionRequest.host)
}
inline std::string* ServerReflectionRequest::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.host)
  return _s;
}
inline const std::string& ServerReflectionRequest::_internal_host() const {
  return _impl_.host_.Get();
}
inline void ServerReflectionRequest::_internal_set_host(const std::string& value) {
  ;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::_internal_mutable_host() {
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::release_host() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.host)
  return _impl_.host_.Release();
}
inline void ServerReflectionRequest::set_allocated_host(std::string* value) {
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.host)
}

// string file_by_filename = 3;
inline bool ServerReflectionRequest::has_file_by_filename() const {
  return message_request_case() == kFileByFilename;
}
inline void ServerReflectionRequest::set_has_file_by_filename() {
  _impl_._oneof_case_[0] = kFileByFilename;
}
inline void ServerReflectionRequest::clear_file_by_filename() {
  if (message_request_case() == kFileByFilename) {
    _impl_.message_request_.file_by_filename_.Destroy();
    clear_has_message_request();
  }
}
inline const std::string& ServerReflectionRequest::file_by_filename() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.file_by_filename)
  return _internal_file_by_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionRequest::set_file_by_filename(Arg_&& arg,
                                                     Args_... args) {
  if (message_request_case() != kFileByFilename) {
    clear_message_request();

    set_has_file_by_filename();
    _impl_.message_request_.file_by_filename_.InitDefault();
  }
  _impl_.message_request_.file_by_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionRequest.file_by_filename)
}
inline std::string* ServerReflectionRequest::mutable_file_by_filename() {
  std::string* _s = _internal_mutable_file_by_filename();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.file_by_filename)
  return _s;
}
inline const std::string& ServerReflectionRequest::_internal_file_by_filename() const {
  if (message_request_case() != kFileByFilename) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.message_request_.file_by_filename_.Get();
}
inline void ServerReflectionRequest::_internal_set_file_by_filename(const std::string& value) {
  if (message_request_case() != kFileByFilename) {
    clear_message_request();

    set_has_file_by_filename();
    _impl_.message_request_.file_by_filename_.InitDefault();
  }


  _impl_.message_request_.file_by_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::_internal_mutable_file_by_filename() {
  if (message_request_case() != kFileByFilename) {
    clear_message_request();

    set_has_file_by_filename();
    _impl_.message_request_.file_by_filename_.InitDefault();
  }
  return _impl_.message_request_.file_by_filename_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::release_file_by_filename() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.file_by_filename)
  if (message_request_case() != kFileByFilename) {
    return nullptr;
  }
  clear_has_message_request();
  return _impl_.message_request_.file_by_filename_.Release();
}
inline void ServerReflectionRequest::set_allocated_file_by_filename(std::string* value) {
  if (has_message_request()) {
    clear_message_request();
  }
  if (value != nullptr) {
    set_has_file_by_filename();
    _impl_.message_request_.file_by_filename_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.file_by_filename)
}

// string file_containing_symbol = 4;
inline bool ServerReflectionRequest::has_file_containing_symbol() const {
  return message_request_case() == kFileContainingSymbol;
}
inline void ServerReflectionRequest::set_has_file_containing_symbol() {
  _impl_._oneof_case_[0] = kFileContainingSymbol;
}
inline void ServerReflectionRequest::clear_file_containing_symbol() {
  if (message_request_case() == kFileContainingSymbol) {
    _impl_.message_request_.file_containing_symbol_.Destroy();
    clear_has_message_request();
  }
}
inline const std::string& ServerReflectionRequest::file_containing_symbol() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_symbol)
  return _internal_file_containing_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionRequest::set_file_containing_symbol(Arg_&& arg,
                                                     Args_... args) {
  if (message_request_case() != kFileContainingSymbol) {
    clear_message_request();

    set_has_file_containing_symbol();
    _impl_.message_request_.file_containing_symbol_.InitDefault();
  }
  _impl_.message_request_.file_containing_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_symbol)
}
inline std::string* ServerReflectionRequest::mutable_file_containing_symbol() {
  std::string* _s = _internal_mutable_file_containing_symbol();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_symbol)
  return _s;
}
inline const std::string& ServerReflectionRequest::_internal_file_containing_symbol() const {
  if (message_request_case() != kFileContainingSymbol) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.message_request_.file_containing_symbol_.Get();
}
inline void ServerReflectionRequest::_internal_set_file_containing_symbol(const std::string& value) {
  if (message_request_case() != kFileContainingSymbol) {
    clear_message_request();

    set_has_file_containing_symbol();
    _impl_.message_request_.file_containing_symbol_.InitDefault();
  }


  _impl_.message_request_.file_containing_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::_internal_mutable_file_containing_symbol() {
  if (message_request_case() != kFileContainingSymbol) {
    clear_message_request();

    set_has_file_containing_symbol();
    _impl_.message_request_.file_containing_symbol_.InitDefault();
  }
  return _impl_.message_request_.file_containing_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::release_file_containing_symbol() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_symbol)
  if (message_request_case() != kFileContainingSymbol) {
    return nullptr;
  }
  clear_has_message_request();
  return _impl_.message_request_.file_containing_symbol_.Release();
}
inline void ServerReflectionRequest::set_allocated_file_containing_symbol(std::string* value) {
  if (has_message_request()) {
    clear_message_request();
  }
  if (value != nullptr) {
    set_has_file_containing_symbol();
    _impl_.message_request_.file_containing_symbol_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_symbol)
}

// .grpc.reflection.v1alpha.ExtensionRequest file_containing_extension = 5;
inline bool ServerReflectionRequest::has_file_containing_extension() const {
  return message_request_case() == kFileContainingExtension;
}
inline bool ServerReflectionRequest::_internal_has_file_containing_extension() const {
  return message_request_case() == kFileContainingExtension;
}
inline void ServerReflectionRequest::set_has_file_containing_extension() {
  _impl_._oneof_case_[0] = kFileContainingExtension;
}
inline void ServerReflectionRequest::clear_file_containing_extension() {
  if (message_request_case() == kFileContainingExtension) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_request_.file_containing_extension_;
    }
    clear_has_message_request();
  }
}
inline ::grpc::reflection::v1alpha::ExtensionRequest* ServerReflectionRequest::release_file_containing_extension() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_extension)
  if (message_request_case() == kFileContainingExtension) {
    clear_has_message_request();
    ::grpc::reflection::v1alpha::ExtensionRequest* temp = _impl_.message_request_.file_containing_extension_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_request_.file_containing_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::reflection::v1alpha::ExtensionRequest& ServerReflectionRequest::_internal_file_containing_extension() const {
  return message_request_case() == kFileContainingExtension
      ? *_impl_.message_request_.file_containing_extension_
      : reinterpret_cast<::grpc::reflection::v1alpha::ExtensionRequest&>(::grpc::reflection::v1alpha::_ExtensionRequest_default_instance_);
}
inline const ::grpc::reflection::v1alpha::ExtensionRequest& ServerReflectionRequest::file_containing_extension() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_extension)
  return _internal_file_containing_extension();
}
inline ::grpc::reflection::v1alpha::ExtensionRequest* ServerReflectionRequest::unsafe_arena_release_file_containing_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_extension)
  if (message_request_case() == kFileContainingExtension) {
    clear_has_message_request();
    ::grpc::reflection::v1alpha::ExtensionRequest* temp = _impl_.message_request_.file_containing_extension_;
    _impl_.message_request_.file_containing_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerReflectionRequest::unsafe_arena_set_allocated_file_containing_extension(::grpc::reflection::v1alpha::ExtensionRequest* file_containing_extension) {
  clear_message_request();
  if (file_containing_extension) {
    set_has_file_containing_extension();
    _impl_.message_request_.file_containing_extension_ = file_containing_extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_extension)
}
inline ::grpc::reflection::v1alpha::ExtensionRequest* ServerReflectionRequest::_internal_mutable_file_containing_extension() {
  if (message_request_case() != kFileContainingExtension) {
    clear_message_request();
    set_has_file_containing_extension();
    _impl_.message_request_.file_containing_extension_ = CreateMaybeMessage< ::grpc::reflection::v1alpha::ExtensionRequest >(GetArenaForAllocation());
  }
  return _impl_.message_request_.file_containing_extension_;
}
inline ::grpc::reflection::v1alpha::ExtensionRequest* ServerReflectionRequest::mutable_file_containing_extension() {
  ::grpc::reflection::v1alpha::ExtensionRequest* _msg = _internal_mutable_file_containing_extension();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.file_containing_extension)
  return _msg;
}

// string all_extension_numbers_of_type = 6;
inline bool ServerReflectionRequest::has_all_extension_numbers_of_type() const {
  return message_request_case() == kAllExtensionNumbersOfType;
}
inline void ServerReflectionRequest::set_has_all_extension_numbers_of_type() {
  _impl_._oneof_case_[0] = kAllExtensionNumbersOfType;
}
inline void ServerReflectionRequest::clear_all_extension_numbers_of_type() {
  if (message_request_case() == kAllExtensionNumbersOfType) {
    _impl_.message_request_.all_extension_numbers_of_type_.Destroy();
    clear_has_message_request();
  }
}
inline const std::string& ServerReflectionRequest::all_extension_numbers_of_type() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.all_extension_numbers_of_type)
  return _internal_all_extension_numbers_of_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionRequest::set_all_extension_numbers_of_type(Arg_&& arg,
                                                     Args_... args) {
  if (message_request_case() != kAllExtensionNumbersOfType) {
    clear_message_request();

    set_has_all_extension_numbers_of_type();
    _impl_.message_request_.all_extension_numbers_of_type_.InitDefault();
  }
  _impl_.message_request_.all_extension_numbers_of_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionRequest.all_extension_numbers_of_type)
}
inline std::string* ServerReflectionRequest::mutable_all_extension_numbers_of_type() {
  std::string* _s = _internal_mutable_all_extension_numbers_of_type();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.all_extension_numbers_of_type)
  return _s;
}
inline const std::string& ServerReflectionRequest::_internal_all_extension_numbers_of_type() const {
  if (message_request_case() != kAllExtensionNumbersOfType) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.message_request_.all_extension_numbers_of_type_.Get();
}
inline void ServerReflectionRequest::_internal_set_all_extension_numbers_of_type(const std::string& value) {
  if (message_request_case() != kAllExtensionNumbersOfType) {
    clear_message_request();

    set_has_all_extension_numbers_of_type();
    _impl_.message_request_.all_extension_numbers_of_type_.InitDefault();
  }


  _impl_.message_request_.all_extension_numbers_of_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::_internal_mutable_all_extension_numbers_of_type() {
  if (message_request_case() != kAllExtensionNumbersOfType) {
    clear_message_request();

    set_has_all_extension_numbers_of_type();
    _impl_.message_request_.all_extension_numbers_of_type_.InitDefault();
  }
  return _impl_.message_request_.all_extension_numbers_of_type_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::release_all_extension_numbers_of_type() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.all_extension_numbers_of_type)
  if (message_request_case() != kAllExtensionNumbersOfType) {
    return nullptr;
  }
  clear_has_message_request();
  return _impl_.message_request_.all_extension_numbers_of_type_.Release();
}
inline void ServerReflectionRequest::set_allocated_all_extension_numbers_of_type(std::string* value) {
  if (has_message_request()) {
    clear_message_request();
  }
  if (value != nullptr) {
    set_has_all_extension_numbers_of_type();
    _impl_.message_request_.all_extension_numbers_of_type_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.all_extension_numbers_of_type)
}

// string list_services = 7;
inline bool ServerReflectionRequest::has_list_services() const {
  return message_request_case() == kListServices;
}
inline void ServerReflectionRequest::set_has_list_services() {
  _impl_._oneof_case_[0] = kListServices;
}
inline void ServerReflectionRequest::clear_list_services() {
  if (message_request_case() == kListServices) {
    _impl_.message_request_.list_services_.Destroy();
    clear_has_message_request();
  }
}
inline const std::string& ServerReflectionRequest::list_services() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionRequest.list_services)
  return _internal_list_services();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionRequest::set_list_services(Arg_&& arg,
                                                     Args_... args) {
  if (message_request_case() != kListServices) {
    clear_message_request();

    set_has_list_services();
    _impl_.message_request_.list_services_.InitDefault();
  }
  _impl_.message_request_.list_services_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionRequest.list_services)
}
inline std::string* ServerReflectionRequest::mutable_list_services() {
  std::string* _s = _internal_mutable_list_services();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionRequest.list_services)
  return _s;
}
inline const std::string& ServerReflectionRequest::_internal_list_services() const {
  if (message_request_case() != kListServices) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.message_request_.list_services_.Get();
}
inline void ServerReflectionRequest::_internal_set_list_services(const std::string& value) {
  if (message_request_case() != kListServices) {
    clear_message_request();

    set_has_list_services();
    _impl_.message_request_.list_services_.InitDefault();
  }


  _impl_.message_request_.list_services_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::_internal_mutable_list_services() {
  if (message_request_case() != kListServices) {
    clear_message_request();

    set_has_list_services();
    _impl_.message_request_.list_services_.InitDefault();
  }
  return _impl_.message_request_.list_services_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionRequest::release_list_services() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionRequest.list_services)
  if (message_request_case() != kListServices) {
    return nullptr;
  }
  clear_has_message_request();
  return _impl_.message_request_.list_services_.Release();
}
inline void ServerReflectionRequest::set_allocated_list_services(std::string* value) {
  if (has_message_request()) {
    clear_message_request();
  }
  if (value != nullptr) {
    set_has_list_services();
    _impl_.message_request_.list_services_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionRequest.list_services)
}

inline bool ServerReflectionRequest::has_message_request() const {
  return message_request_case() != MESSAGE_REQUEST_NOT_SET;
}
inline void ServerReflectionRequest::clear_has_message_request() {
  _impl_._oneof_case_[0] = MESSAGE_REQUEST_NOT_SET;
}
inline ServerReflectionRequest::MessageRequestCase ServerReflectionRequest::message_request_case() const {
  return ServerReflectionRequest::MessageRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtensionRequest

// string containing_type = 1;
inline void ExtensionRequest::clear_containing_type() {
  _impl_.containing_type_.ClearToEmpty();
}
inline const std::string& ExtensionRequest::containing_type() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
  return _internal_containing_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtensionRequest::set_containing_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.containing_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}
inline std::string* ExtensionRequest::mutable_containing_type() {
  std::string* _s = _internal_mutable_containing_type();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
  return _s;
}
inline const std::string& ExtensionRequest::_internal_containing_type() const {
  return _impl_.containing_type_.Get();
}
inline void ExtensionRequest::_internal_set_containing_type(const std::string& value) {
  ;


  _impl_.containing_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionRequest::_internal_mutable_containing_type() {
  ;
  return _impl_.containing_type_.Mutable( GetArenaForAllocation());
}
inline std::string* ExtensionRequest::release_containing_type() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
  return _impl_.containing_type_.Release();
}
inline void ExtensionRequest::set_allocated_containing_type(std::string* value) {
  _impl_.containing_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.containing_type_.IsDefault()) {
          _impl_.containing_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ExtensionRequest.containing_type)
}

// int32 extension_number = 2;
inline void ExtensionRequest::clear_extension_number() {
  _impl_.extension_number_ = 0;
}
inline ::int32_t ExtensionRequest::extension_number() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionRequest.extension_number)
  return _internal_extension_number();
}
inline void ExtensionRequest::set_extension_number(::int32_t value) {
  _internal_set_extension_number(value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionRequest.extension_number)
}
inline ::int32_t ExtensionRequest::_internal_extension_number() const {
  return _impl_.extension_number_;
}
inline void ExtensionRequest::_internal_set_extension_number(::int32_t value) {
  ;
  _impl_.extension_number_ = value;
}

// -------------------------------------------------------------------

// ServerReflectionResponse

// string valid_host = 1;
inline void ServerReflectionResponse::clear_valid_host() {
  _impl_.valid_host_.ClearToEmpty();
}
inline const std::string& ServerReflectionResponse::valid_host() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.valid_host)
  return _internal_valid_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerReflectionResponse::set_valid_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.valid_host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServerReflectionResponse.valid_host)
}
inline std::string* ServerReflectionResponse::mutable_valid_host() {
  std::string* _s = _internal_mutable_valid_host();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.valid_host)
  return _s;
}
inline const std::string& ServerReflectionResponse::_internal_valid_host() const {
  return _impl_.valid_host_.Get();
}
inline void ServerReflectionResponse::_internal_set_valid_host(const std::string& value) {
  ;


  _impl_.valid_host_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReflectionResponse::_internal_mutable_valid_host() {
  ;
  return _impl_.valid_host_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerReflectionResponse::release_valid_host() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.valid_host)
  return _impl_.valid_host_.Release();
}
inline void ServerReflectionResponse::set_allocated_valid_host(std::string* value) {
  _impl_.valid_host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.valid_host_.IsDefault()) {
          _impl_.valid_host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.valid_host)
}

// .grpc.reflection.v1alpha.ServerReflectionRequest original_request = 2;
inline bool ServerReflectionResponse::has_original_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_request_ != nullptr);
  return value;
}
inline void ServerReflectionResponse::clear_original_request() {
  if (_impl_.original_request_ != nullptr) _impl_.original_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::grpc::reflection::v1alpha::ServerReflectionRequest& ServerReflectionResponse::_internal_original_request() const {
  const ::grpc::reflection::v1alpha::ServerReflectionRequest* p = _impl_.original_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::reflection::v1alpha::ServerReflectionRequest&>(
      ::grpc::reflection::v1alpha::_ServerReflectionRequest_default_instance_);
}
inline const ::grpc::reflection::v1alpha::ServerReflectionRequest& ServerReflectionResponse::original_request() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.original_request)
  return _internal_original_request();
}
inline void ServerReflectionResponse::unsafe_arena_set_allocated_original_request(
    ::grpc::reflection::v1alpha::ServerReflectionRequest* original_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_request_);
  }
  _impl_.original_request_ = original_request;
  if (original_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.original_request)
}
inline ::grpc::reflection::v1alpha::ServerReflectionRequest* ServerReflectionResponse::release_original_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::grpc::reflection::v1alpha::ServerReflectionRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::grpc::reflection::v1alpha::ServerReflectionRequest* ServerReflectionResponse::unsafe_arena_release_original_request() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.original_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::grpc::reflection::v1alpha::ServerReflectionRequest* temp = _impl_.original_request_;
  _impl_.original_request_ = nullptr;
  return temp;
}
inline ::grpc::reflection::v1alpha::ServerReflectionRequest* ServerReflectionResponse::_internal_mutable_original_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.original_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::reflection::v1alpha::ServerReflectionRequest>(GetArenaForAllocation());
    _impl_.original_request_ = p;
  }
  return _impl_.original_request_;
}
inline ::grpc::reflection::v1alpha::ServerReflectionRequest* ServerReflectionResponse::mutable_original_request() {
  ::grpc::reflection::v1alpha::ServerReflectionRequest* _msg = _internal_mutable_original_request();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.original_request)
  return _msg;
}
inline void ServerReflectionResponse::set_allocated_original_request(::grpc::reflection::v1alpha::ServerReflectionRequest* original_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_request_;
  }
  if (original_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_request);
    if (message_arena != submessage_arena) {
      original_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.original_request_ = original_request;
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.original_request)
}

// .grpc.reflection.v1alpha.FileDescriptorResponse file_descriptor_response = 4;
inline bool ServerReflectionResponse::has_file_descriptor_response() const {
  return message_response_case() == kFileDescriptorResponse;
}
inline bool ServerReflectionResponse::_internal_has_file_descriptor_response() const {
  return message_response_case() == kFileDescriptorResponse;
}
inline void ServerReflectionResponse::set_has_file_descriptor_response() {
  _impl_._oneof_case_[0] = kFileDescriptorResponse;
}
inline void ServerReflectionResponse::clear_file_descriptor_response() {
  if (message_response_case() == kFileDescriptorResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_response_.file_descriptor_response_;
    }
    clear_has_message_response();
  }
}
inline ::grpc::reflection::v1alpha::FileDescriptorResponse* ServerReflectionResponse::release_file_descriptor_response() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.file_descriptor_response)
  if (message_response_case() == kFileDescriptorResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::FileDescriptorResponse* temp = _impl_.message_response_.file_descriptor_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_response_.file_descriptor_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::reflection::v1alpha::FileDescriptorResponse& ServerReflectionResponse::_internal_file_descriptor_response() const {
  return message_response_case() == kFileDescriptorResponse
      ? *_impl_.message_response_.file_descriptor_response_
      : reinterpret_cast<::grpc::reflection::v1alpha::FileDescriptorResponse&>(::grpc::reflection::v1alpha::_FileDescriptorResponse_default_instance_);
}
inline const ::grpc::reflection::v1alpha::FileDescriptorResponse& ServerReflectionResponse::file_descriptor_response() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.file_descriptor_response)
  return _internal_file_descriptor_response();
}
inline ::grpc::reflection::v1alpha::FileDescriptorResponse* ServerReflectionResponse::unsafe_arena_release_file_descriptor_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.reflection.v1alpha.ServerReflectionResponse.file_descriptor_response)
  if (message_response_case() == kFileDescriptorResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::FileDescriptorResponse* temp = _impl_.message_response_.file_descriptor_response_;
    _impl_.message_response_.file_descriptor_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerReflectionResponse::unsafe_arena_set_allocated_file_descriptor_response(::grpc::reflection::v1alpha::FileDescriptorResponse* file_descriptor_response) {
  clear_message_response();
  if (file_descriptor_response) {
    set_has_file_descriptor_response();
    _impl_.message_response_.file_descriptor_response_ = file_descriptor_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.file_descriptor_response)
}
inline ::grpc::reflection::v1alpha::FileDescriptorResponse* ServerReflectionResponse::_internal_mutable_file_descriptor_response() {
  if (message_response_case() != kFileDescriptorResponse) {
    clear_message_response();
    set_has_file_descriptor_response();
    _impl_.message_response_.file_descriptor_response_ = CreateMaybeMessage< ::grpc::reflection::v1alpha::FileDescriptorResponse >(GetArenaForAllocation());
  }
  return _impl_.message_response_.file_descriptor_response_;
}
inline ::grpc::reflection::v1alpha::FileDescriptorResponse* ServerReflectionResponse::mutable_file_descriptor_response() {
  ::grpc::reflection::v1alpha::FileDescriptorResponse* _msg = _internal_mutable_file_descriptor_response();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.file_descriptor_response)
  return _msg;
}

// .grpc.reflection.v1alpha.ExtensionNumberResponse all_extension_numbers_response = 5;
inline bool ServerReflectionResponse::has_all_extension_numbers_response() const {
  return message_response_case() == kAllExtensionNumbersResponse;
}
inline bool ServerReflectionResponse::_internal_has_all_extension_numbers_response() const {
  return message_response_case() == kAllExtensionNumbersResponse;
}
inline void ServerReflectionResponse::set_has_all_extension_numbers_response() {
  _impl_._oneof_case_[0] = kAllExtensionNumbersResponse;
}
inline void ServerReflectionResponse::clear_all_extension_numbers_response() {
  if (message_response_case() == kAllExtensionNumbersResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_response_.all_extension_numbers_response_;
    }
    clear_has_message_response();
  }
}
inline ::grpc::reflection::v1alpha::ExtensionNumberResponse* ServerReflectionResponse::release_all_extension_numbers_response() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.all_extension_numbers_response)
  if (message_response_case() == kAllExtensionNumbersResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ExtensionNumberResponse* temp = _impl_.message_response_.all_extension_numbers_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_response_.all_extension_numbers_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::reflection::v1alpha::ExtensionNumberResponse& ServerReflectionResponse::_internal_all_extension_numbers_response() const {
  return message_response_case() == kAllExtensionNumbersResponse
      ? *_impl_.message_response_.all_extension_numbers_response_
      : reinterpret_cast<::grpc::reflection::v1alpha::ExtensionNumberResponse&>(::grpc::reflection::v1alpha::_ExtensionNumberResponse_default_instance_);
}
inline const ::grpc::reflection::v1alpha::ExtensionNumberResponse& ServerReflectionResponse::all_extension_numbers_response() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.all_extension_numbers_response)
  return _internal_all_extension_numbers_response();
}
inline ::grpc::reflection::v1alpha::ExtensionNumberResponse* ServerReflectionResponse::unsafe_arena_release_all_extension_numbers_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.reflection.v1alpha.ServerReflectionResponse.all_extension_numbers_response)
  if (message_response_case() == kAllExtensionNumbersResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ExtensionNumberResponse* temp = _impl_.message_response_.all_extension_numbers_response_;
    _impl_.message_response_.all_extension_numbers_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerReflectionResponse::unsafe_arena_set_allocated_all_extension_numbers_response(::grpc::reflection::v1alpha::ExtensionNumberResponse* all_extension_numbers_response) {
  clear_message_response();
  if (all_extension_numbers_response) {
    set_has_all_extension_numbers_response();
    _impl_.message_response_.all_extension_numbers_response_ = all_extension_numbers_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.all_extension_numbers_response)
}
inline ::grpc::reflection::v1alpha::ExtensionNumberResponse* ServerReflectionResponse::_internal_mutable_all_extension_numbers_response() {
  if (message_response_case() != kAllExtensionNumbersResponse) {
    clear_message_response();
    set_has_all_extension_numbers_response();
    _impl_.message_response_.all_extension_numbers_response_ = CreateMaybeMessage< ::grpc::reflection::v1alpha::ExtensionNumberResponse >(GetArenaForAllocation());
  }
  return _impl_.message_response_.all_extension_numbers_response_;
}
inline ::grpc::reflection::v1alpha::ExtensionNumberResponse* ServerReflectionResponse::mutable_all_extension_numbers_response() {
  ::grpc::reflection::v1alpha::ExtensionNumberResponse* _msg = _internal_mutable_all_extension_numbers_response();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.all_extension_numbers_response)
  return _msg;
}

// .grpc.reflection.v1alpha.ListServiceResponse list_services_response = 6;
inline bool ServerReflectionResponse::has_list_services_response() const {
  return message_response_case() == kListServicesResponse;
}
inline bool ServerReflectionResponse::_internal_has_list_services_response() const {
  return message_response_case() == kListServicesResponse;
}
inline void ServerReflectionResponse::set_has_list_services_response() {
  _impl_._oneof_case_[0] = kListServicesResponse;
}
inline void ServerReflectionResponse::clear_list_services_response() {
  if (message_response_case() == kListServicesResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_response_.list_services_response_;
    }
    clear_has_message_response();
  }
}
inline ::grpc::reflection::v1alpha::ListServiceResponse* ServerReflectionResponse::release_list_services_response() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.list_services_response)
  if (message_response_case() == kListServicesResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ListServiceResponse* temp = _impl_.message_response_.list_services_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_response_.list_services_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::reflection::v1alpha::ListServiceResponse& ServerReflectionResponse::_internal_list_services_response() const {
  return message_response_case() == kListServicesResponse
      ? *_impl_.message_response_.list_services_response_
      : reinterpret_cast<::grpc::reflection::v1alpha::ListServiceResponse&>(::grpc::reflection::v1alpha::_ListServiceResponse_default_instance_);
}
inline const ::grpc::reflection::v1alpha::ListServiceResponse& ServerReflectionResponse::list_services_response() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.list_services_response)
  return _internal_list_services_response();
}
inline ::grpc::reflection::v1alpha::ListServiceResponse* ServerReflectionResponse::unsafe_arena_release_list_services_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.reflection.v1alpha.ServerReflectionResponse.list_services_response)
  if (message_response_case() == kListServicesResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ListServiceResponse* temp = _impl_.message_response_.list_services_response_;
    _impl_.message_response_.list_services_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerReflectionResponse::unsafe_arena_set_allocated_list_services_response(::grpc::reflection::v1alpha::ListServiceResponse* list_services_response) {
  clear_message_response();
  if (list_services_response) {
    set_has_list_services_response();
    _impl_.message_response_.list_services_response_ = list_services_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.list_services_response)
}
inline ::grpc::reflection::v1alpha::ListServiceResponse* ServerReflectionResponse::_internal_mutable_list_services_response() {
  if (message_response_case() != kListServicesResponse) {
    clear_message_response();
    set_has_list_services_response();
    _impl_.message_response_.list_services_response_ = CreateMaybeMessage< ::grpc::reflection::v1alpha::ListServiceResponse >(GetArenaForAllocation());
  }
  return _impl_.message_response_.list_services_response_;
}
inline ::grpc::reflection::v1alpha::ListServiceResponse* ServerReflectionResponse::mutable_list_services_response() {
  ::grpc::reflection::v1alpha::ListServiceResponse* _msg = _internal_mutable_list_services_response();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.list_services_response)
  return _msg;
}

// .grpc.reflection.v1alpha.ErrorResponse error_response = 7;
inline bool ServerReflectionResponse::has_error_response() const {
  return message_response_case() == kErrorResponse;
}
inline bool ServerReflectionResponse::_internal_has_error_response() const {
  return message_response_case() == kErrorResponse;
}
inline void ServerReflectionResponse::set_has_error_response() {
  _impl_._oneof_case_[0] = kErrorResponse;
}
inline void ServerReflectionResponse::clear_error_response() {
  if (message_response_case() == kErrorResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_response_.error_response_;
    }
    clear_has_message_response();
  }
}
inline ::grpc::reflection::v1alpha::ErrorResponse* ServerReflectionResponse::release_error_response() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServerReflectionResponse.error_response)
  if (message_response_case() == kErrorResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ErrorResponse* temp = _impl_.message_response_.error_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_response_.error_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grpc::reflection::v1alpha::ErrorResponse& ServerReflectionResponse::_internal_error_response() const {
  return message_response_case() == kErrorResponse
      ? *_impl_.message_response_.error_response_
      : reinterpret_cast<::grpc::reflection::v1alpha::ErrorResponse&>(::grpc::reflection::v1alpha::_ErrorResponse_default_instance_);
}
inline const ::grpc::reflection::v1alpha::ErrorResponse& ServerReflectionResponse::error_response() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServerReflectionResponse.error_response)
  return _internal_error_response();
}
inline ::grpc::reflection::v1alpha::ErrorResponse* ServerReflectionResponse::unsafe_arena_release_error_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc.reflection.v1alpha.ServerReflectionResponse.error_response)
  if (message_response_case() == kErrorResponse) {
    clear_has_message_response();
    ::grpc::reflection::v1alpha::ErrorResponse* temp = _impl_.message_response_.error_response_;
    _impl_.message_response_.error_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerReflectionResponse::unsafe_arena_set_allocated_error_response(::grpc::reflection::v1alpha::ErrorResponse* error_response) {
  clear_message_response();
  if (error_response) {
    set_has_error_response();
    _impl_.message_response_.error_response_ = error_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.reflection.v1alpha.ServerReflectionResponse.error_response)
}
inline ::grpc::reflection::v1alpha::ErrorResponse* ServerReflectionResponse::_internal_mutable_error_response() {
  if (message_response_case() != kErrorResponse) {
    clear_message_response();
    set_has_error_response();
    _impl_.message_response_.error_response_ = CreateMaybeMessage< ::grpc::reflection::v1alpha::ErrorResponse >(GetArenaForAllocation());
  }
  return _impl_.message_response_.error_response_;
}
inline ::grpc::reflection::v1alpha::ErrorResponse* ServerReflectionResponse::mutable_error_response() {
  ::grpc::reflection::v1alpha::ErrorResponse* _msg = _internal_mutable_error_response();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServerReflectionResponse.error_response)
  return _msg;
}

inline bool ServerReflectionResponse::has_message_response() const {
  return message_response_case() != MESSAGE_RESPONSE_NOT_SET;
}
inline void ServerReflectionResponse::clear_has_message_response() {
  _impl_._oneof_case_[0] = MESSAGE_RESPONSE_NOT_SET;
}
inline ServerReflectionResponse::MessageResponseCase ServerReflectionResponse::message_response_case() const {
  return ServerReflectionResponse::MessageResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileDescriptorResponse

// repeated bytes file_descriptor_proto = 1;
inline int FileDescriptorResponse::_internal_file_descriptor_proto_size() const {
  return _impl_.file_descriptor_proto_.size();
}
inline int FileDescriptorResponse::file_descriptor_proto_size() const {
  return _internal_file_descriptor_proto_size();
}
inline void FileDescriptorResponse::clear_file_descriptor_proto() {
  _internal_mutable_file_descriptor_proto()->Clear();
}
inline std::string* FileDescriptorResponse::add_file_descriptor_proto() {
  std::string* _s = _internal_add_file_descriptor_proto();
  // @@protoc_insertion_point(field_add_mutable:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
  return _s;
}
inline const std::string& FileDescriptorResponse::file_descriptor_proto(int index) const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
  return _internal_file_descriptor_proto(index);
}
inline std::string* FileDescriptorResponse::mutable_file_descriptor_proto(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
  return _internal_mutable_file_descriptor_proto()->Mutable(index);
}
inline void FileDescriptorResponse::set_file_descriptor_proto(int index, const std::string& value) {
  _internal_mutable_file_descriptor_proto()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::set_file_descriptor_proto(int index, std::string&& value) {
  _internal_mutable_file_descriptor_proto()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::set_file_descriptor_proto(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_file_descriptor_proto()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::set_file_descriptor_proto(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_file_descriptor_proto()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::set_file_descriptor_proto(int index, absl::string_view value) {
  _internal_mutable_file_descriptor_proto()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::add_file_descriptor_proto(const std::string& value) {
  _internal_mutable_file_descriptor_proto()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::add_file_descriptor_proto(std::string&& value) {
  _internal_mutable_file_descriptor_proto()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::add_file_descriptor_proto(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_file_descriptor_proto()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::add_file_descriptor_proto(const void* value, std::size_t size) {
  _internal_mutable_file_descriptor_proto()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline void FileDescriptorResponse::add_file_descriptor_proto(absl::string_view value) {
  _internal_mutable_file_descriptor_proto()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDescriptorResponse::file_descriptor_proto() const {
  // @@protoc_insertion_point(field_list:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
  return _internal_file_descriptor_proto();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FileDescriptorResponse::mutable_file_descriptor_proto() {
  // @@protoc_insertion_point(field_mutable_list:grpc.reflection.v1alpha.FileDescriptorResponse.file_descriptor_proto)
  return _internal_mutable_file_descriptor_proto();
}
inline const std::string& FileDescriptorResponse::_internal_file_descriptor_proto(int index) const {
  return _internal_file_descriptor_proto().Get(index);
}
inline std::string* FileDescriptorResponse::_internal_add_file_descriptor_proto() {
  return _internal_mutable_file_descriptor_proto()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDescriptorResponse::_internal_file_descriptor_proto() const {
  return _impl_.file_descriptor_proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileDescriptorResponse::_internal_mutable_file_descriptor_proto() {
  return &_impl_.file_descriptor_proto_;
}

// -------------------------------------------------------------------

// ExtensionNumberResponse

// string base_type_name = 1;
inline void ExtensionNumberResponse::clear_base_type_name() {
  _impl_.base_type_name_.ClearToEmpty();
}
inline const std::string& ExtensionNumberResponse::base_type_name() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionNumberResponse.base_type_name)
  return _internal_base_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtensionNumberResponse::set_base_type_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionNumberResponse.base_type_name)
}
inline std::string* ExtensionNumberResponse::mutable_base_type_name() {
  std::string* _s = _internal_mutable_base_type_name();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ExtensionNumberResponse.base_type_name)
  return _s;
}
inline const std::string& ExtensionNumberResponse::_internal_base_type_name() const {
  return _impl_.base_type_name_.Get();
}
inline void ExtensionNumberResponse::_internal_set_base_type_name(const std::string& value) {
  ;


  _impl_.base_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionNumberResponse::_internal_mutable_base_type_name() {
  ;
  return _impl_.base_type_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ExtensionNumberResponse::release_base_type_name() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ExtensionNumberResponse.base_type_name)
  return _impl_.base_type_name_.Release();
}
inline void ExtensionNumberResponse::set_allocated_base_type_name(std::string* value) {
  _impl_.base_type_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_type_name_.IsDefault()) {
          _impl_.base_type_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ExtensionNumberResponse.base_type_name)
}

// repeated int32 extension_number = 2;
inline int ExtensionNumberResponse::_internal_extension_number_size() const {
  return _impl_.extension_number_.size();
}
inline int ExtensionNumberResponse::extension_number_size() const {
  return _internal_extension_number_size();
}
inline void ExtensionNumberResponse::clear_extension_number() {
  _internal_mutable_extension_number()->Clear();
}
inline ::int32_t ExtensionNumberResponse::extension_number(int index) const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return _internal_extension_number(index);
}
inline void ExtensionNumberResponse::set_extension_number(int index, ::int32_t value) {
  _internal_mutable_extension_number()->Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
}
inline void ExtensionNumberResponse::add_extension_number(::int32_t value) {
  _internal_add_extension_number(value);
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ExtensionNumberResponse::extension_number() const {
  // @@protoc_insertion_point(field_list:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return _internal_extension_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ExtensionNumberResponse::mutable_extension_number() {
  // @@protoc_insertion_point(field_mutable_list:grpc.reflection.v1alpha.ExtensionNumberResponse.extension_number)
  return _internal_mutable_extension_number();
}

inline ::int32_t ExtensionNumberResponse::_internal_extension_number(int index) const {
  return _internal_extension_number().Get(index);
}
inline void ExtensionNumberResponse::_internal_add_extension_number(::int32_t value) {
  _internal_mutable_extension_number()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ExtensionNumberResponse::_internal_extension_number() const {
  return _impl_.extension_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ExtensionNumberResponse::_internal_mutable_extension_number() {
  return &_impl_.extension_number_;
}

// -------------------------------------------------------------------

// ListServiceResponse

// repeated .grpc.reflection.v1alpha.ServiceResponse service = 1;
inline int ListServiceResponse::_internal_service_size() const {
  return _impl_.service_.size();
}
inline int ListServiceResponse::service_size() const {
  return _internal_service_size();
}
inline void ListServiceResponse::clear_service() {
  _internal_mutable_service()->Clear();
}
inline ::grpc::reflection::v1alpha::ServiceResponse* ListServiceResponse::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ListServiceResponse.service)
  return _internal_mutable_service()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::reflection::v1alpha::ServiceResponse >*
ListServiceResponse::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:grpc.reflection.v1alpha.ListServiceResponse.service)
  return _internal_mutable_service();
}
inline const ::grpc::reflection::v1alpha::ServiceResponse& ListServiceResponse::_internal_service(int index) const {
  return _internal_service().Get(index);
}
inline const ::grpc::reflection::v1alpha::ServiceResponse& ListServiceResponse::service(int index) const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ListServiceResponse.service)
  return _internal_service(index);
}
inline ::grpc::reflection::v1alpha::ServiceResponse* ListServiceResponse::_internal_add_service() {
  return _internal_mutable_service()->Add();
}
inline ::grpc::reflection::v1alpha::ServiceResponse* ListServiceResponse::add_service() {
  ::grpc::reflection::v1alpha::ServiceResponse* _add = _internal_add_service();
  // @@protoc_insertion_point(field_add:grpc.reflection.v1alpha.ListServiceResponse.service)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc::reflection::v1alpha::ServiceResponse >&
ListServiceResponse::service() const {
  // @@protoc_insertion_point(field_list:grpc.reflection.v1alpha.ListServiceResponse.service)
  return _internal_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::grpc::reflection::v1alpha::ServiceResponse>&
ListServiceResponse::_internal_service() const {
  return _impl_.service_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::grpc::reflection::v1alpha::ServiceResponse>*
ListServiceResponse::_internal_mutable_service() {
  return &_impl_.service_;
}

// -------------------------------------------------------------------

// ServiceResponse

// string name = 1;
inline void ServiceResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServiceResponse::name() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ServiceResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ServiceResponse.name)
}
inline std::string* ServiceResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ServiceResponse.name)
  return _s;
}
inline const std::string& ServiceResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServiceResponse::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceResponse::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ServiceResponse::release_name() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ServiceResponse.name)
  return _impl_.name_.Release();
}
inline void ServiceResponse::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ServiceResponse.name)
}

// -------------------------------------------------------------------

// ErrorResponse

// int32 error_code = 1;
inline void ErrorResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::int32_t ErrorResponse::error_code() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ErrorResponse.error_code)
  return _internal_error_code();
}
inline void ErrorResponse::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ErrorResponse.error_code)
}
inline ::int32_t ErrorResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline void ErrorResponse::_internal_set_error_code(::int32_t value) {
  ;
  _impl_.error_code_ = value;
}

// string error_message = 2;
inline void ErrorResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ErrorResponse::error_message() const {
  // @@protoc_insertion_point(field_get:grpc.reflection.v1alpha.ErrorResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpc.reflection.v1alpha.ErrorResponse.error_message)
}
inline std::string* ErrorResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:grpc.reflection.v1alpha.ErrorResponse.error_message)
  return _s;
}
inline const std::string& ErrorResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ErrorResponse::_internal_set_error_message(const std::string& value) {
  ;


  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorResponse::_internal_mutable_error_message() {
  ;
  return _impl_.error_message_.Mutable( GetArenaForAllocation());
}
inline std::string* ErrorResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:grpc.reflection.v1alpha.ErrorResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void ErrorResponse::set_allocated_error_message(std::string* value) {
  _impl_.error_message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpc.reflection.v1alpha.ErrorResponse.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace reflection
}  // namespace grpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fgrpc_2freflection_2fv1alpha_2freflection_2eproto_2epb_2eh
